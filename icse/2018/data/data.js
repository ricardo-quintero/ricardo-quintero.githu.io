var webpub = {data: {
  "conferences": [
    {
      "title": "2018 ACM/IEEE 40th International Conference on Software Engineering",
      "acronym": "ICSE",
      "year": 2018,
      "frontMatter": [
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_I",
          "text": "Title Page i",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6y0FEOc4kPt3C2JHXvOzMo/3UpMiUOzCe7uxJ6NBoqUTN.pdf",
          "extraLocations": [],
          "pageNumber": 1,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_III",
          "text": "Title Page iii",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1EAdeSGGm6U2LYIdQP0bab/3JFDGmGqrT6ibSRqhUXV4W.pdf",
          "extraLocations": [],
          "pageNumber": 3,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_COPYRIGHT_PAGE",
          "text": "Copyright Page",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7IyKTyOjla82L7iwUD6STi/6hOWUzGGRu3H73p42w6asN.pdf",
          "extraLocations": [],
          "pageNumber": 4,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TABLE_OF_CONTENTS",
          "text": "Table of Contents",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7p0G9T2661F6wlm9krK8S6/3voDnLl5wYvmSqoLTjRrG3.pdf",
          "extraLocations": [],
          "pageNumber": 5,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_GENERAL_CHAIR",
          "text": "Message from the General Chair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/OtgDiIOrskpKoC8U5G0S7/4MbVTeQiEZ4yF7VJY0RpMF.pdf",
          "extraLocations": [],
          "pageNumber": 23,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_PROGRAM_CHAIR",
          "text": "Message from the Program Chairs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4cx3laW1TSJdcVPzuCULgl/6kI3qFkPDsTkaM7mdJmRKr.pdf",
          "extraLocations": [],
          "pageNumber": 26,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_PROGRAM_CHAIR",
          "text": "Message from the Journal First Chair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1BIobYl3Im0TYdYHfNjM3l/1qVE9pOCWVTLiNjVEQQysM.pdf",
          "extraLocations": [],
          "pageNumber": 28,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_ORGANIZING_COMMITTEE",
          "text": "Organizing Committee",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1MAJvSevoNTTKTIgn0UWt6/5jiG4bwaQGMggKDMBxay0i.pdf",
          "extraLocations": [],
          "pageNumber": 29,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LONP_COMMITTEE_PHOTOS",
          "text": "Program Board",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3T5kj48lTnm3L3ekuqnTHg/1UtgwORyubJdNwtQKAXeiS.pdf",
          "extraLocations": [],
          "pageNumber": 33,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_PROGRAM_COMMITTEE",
          "text": "Program Committee",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2AHlROP0jnQYQUvCxjlgrc/jmXHrSF3qGVdK7KtTTuFQ.pdf",
          "extraLocations": [],
          "pageNumber": 36,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_SPONSORS_CONFERENCE_SUPPORT",
          "text": "Sponsors and Supporters",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/33L8X0xBtxzkQqVPSKncLE/3CqZk7lCfFyIklYgkaUYbQ.pdf",
          "extraLocations": [],
          "pageNumber": 45,
          "isPageNumberRoman": true
        }
      ],
      "backMatter": [
        {
          "class": "BM",
          "type": "BM_AUTHOR_INDEX",
          "text": "Author Index",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2oHcEJvPW0UrezD4pSnTkH/2KjiyVfKdztvzpKNVord1p.pdf",
          "extraLocations": [],
          "pageNumber": 1255,
          "isPageNumberRoman": false
        },
        {
          "class": "BM",
          "type": "BM_ROSTER",
          "text": "Publisher's Information",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5O7o5rop5TNZEaCpvlSrBT/4tlFoIRaMLPQfFp1aCGLZg.pdf",
          "extraLocations": [],
          "pageNumber": 1264,
          "isPageNumberRoman": false
        }
      ],
      "sections": [
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 1: Software Repair I",
          "lineItems": [
            {
              "id": "2NKR15oKwhrLXpMl1xTQ6L",
              "type": "authorPaper",
              "text": "Context-Aware Patch Generation for Better Automated Program Repair",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2FydAwOD2o1un1UuWRcZuR/4DiUknL45OPujvaqe5CpDE.pdf",
              "extraLocations": [],
              "authorNames": "Ming Wen (The Hong Kong University of Science and Technology), Junjie Chen (Peking University), Rongxin Wu (The Hong Kong University of Science and Technology), Dan Hao (Peking University), Shing-Chi Cheung (The Hong Kong University of Science and Technology)",
              "abstract": "The effectiveness of search-based automated program repair is limited in the number of correct patches that can be successfully generated. There are two causes of such limitation. First, the search space does not contain the correct patch. Second, the search space is huge and therefore the correct patch cannot be generated (ie correct patches are either generated after incorrect plausible ones or not generated within the time budget). To increase the likelihood of including the correct patches in the search space, we propose to work at a fine granularity in terms of AST nodes. This, however, will further enlarge the search space, increasing the challenge to find the correct patches. We address the challenge by devising a strategy to prioritize the candidate patches based on their likelihood of being correct. Specifically, we study the use of AST nodes' context information to estimate the likelihood. In this paper, we propose CapGen, a context-aware patch generation technique. The novelty which allows CapGen to produce more correct patches lies in three aspects: (1) The fine-granularity design enables it to find more correct fixing ingredients; (2) The context-aware prioritization of mutation operators enables it to constrain the search space; (3) Three context-aware models enable it to rank correct patches at high positions before incorrect plausible ones. We evaluate CapGen on Defects4J and compare it with the state-of-the-art program repair techniques. Our evaluation shows that CapGen outperforms and complements existing techniques. CapGen achieves a high precision of 84.00% and can prioritize the correct patches before 98.78% of the incorrect plausible ones.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Context-Aware Patch Generation for Better Automated Program Repair 1518269668671 Ming Wen The Hong Kong University of Science and Technology mwenaa@cse.ust.hk Junjie Chen Peking University chenjunjie@pku.edu.cn Rongxin Wu The Hong Kong University of Science and Technology wurongxin@cse.ust.hk Dan Hao Peking University haodan@pku.edu.cn Shing-Chi Cheung The Hong Kong University of Science and Technology scc@cse.ust.hk Context-Aware Automated Program Repair Patch Prioritization The effectiveness of search-based automated program repair is limited in the number of correct patches that can be successfully generated. There are two causes of such limitation. First, the search space does not contain the correct patch. Second, the search space is huge and therefore the correct patch cannot be generated (ie correct patches are either generated after incorrect plausible ones or not generated within the time budget). To increase the likelihood of including the correct patches in the search space, we propose to work at a fine granularity in terms of AST nodes. This, however, will further enlarge the search space, increasing the challenge to find the correct patches. We address the challenge by devising a strategy to prioritize the candidate patches based on their likelihood of being correct. Specifically, we study the use of AST nodes' context information to estimate the likelihood. In this paper, we propose CapGen, a context-aware patch generation technique. The novelty which allows CapGen to produce more correct patches lies in three aspects: (1) The fine-granularity design enables it to find more correct fixing ingredients; (2) The context-aware prioritization of mutation operators enables it to constrain the search space; (3) Three context-aware models enable it to rank correct patches at high positions before incorrect plausible ones. We evaluate CapGen on Defects4J and compare it with the state-of-the-art program repair techniques. Our evaluation shows that CapGen outperforms and complements existing techniques. CapGen achieves a high precision of 84.00% and can prioritize the correct patches before 98.78% of the incorrect plausible ones.",
              "pageNumber": 1,
              "isPageNumberRoman": false
            },
            {
              "id": "2yWIQoVj7W0A5qenRb2uYD",
              "type": "authorPaper",
              "text": "Towards Practical Program Repair with On-demand Candidate Generation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2E5RW0qgO8jUBND0skhRAJ/2dmZrsD625tVeRcqta1x9.pdf",
              "extraLocations": [],
              "authorNames": "Jinru Hua (The University of Texas at Austin), Mengshi Zhang (The University of Texas at Austin), Kaiyuan Wang (The University of Texas at Austin), Sarfraz Khurshid (The University of Texas at Austin)",
              "abstract": "Effective program repair techniques, which modify faulty programs to fix them with respect to given test suites, can substantially reduce the cost of manual debugging. A common repair approach is to iteratively first generate candidate programs with possible bug fixes and then validate them against the given tests until a candidate that passes all the tests is found. While this approach is conceptually simple, due to the potentially high number of candidates that need to first be generated and then be compiled and tested, existing repair techniques that embody this approach have relatively low effectiveness, especially for faults at a fine granularity. To tackle this limitation, we introduce a novel repair technique, SketchFix, which generates candidate fixes on demand (as needed) during the test execution. Instead of iteratively re-compiling and re-executing each actual candidate program, SketchFix translates faulty programs to sketches, i.e., partial programs with \"holes\", and compiles each sketch once which may represent thousands of concrete candidates. With the insight that the space of candidates can be reduced substantially by utilizing the runtime behaviors of the tests, SketchFix lazily initializes the candidates of the sketches while validating them against the test execution. We experimentally evaluate SketchFix on the Defects4J benchmark and the experimental results show that SketchFix works particularly well in repairing bugs with expression manipulation at the AST node-level granularity compared to other program repair techniques. Specifically, SketchFix correctly fixes 19 out of 357 defects in 23 minutes on average using the default setting. In addition, SketchFix finds the first repair with 1.6% of re-compilations (#compiled sketches/#candidates) and 3.0% of re-executions out of all repair candidates.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Towards Practical Program Repair with On-demand Candidate Generation 1518414216613 Jinru Hua The University of Texas at Austin lisahua@utexas.edu Mengshi Zhang The University of Texas at Austin mengshi.zhang@utexas.edu Kaiyuan Wang The University of Texas at Austin kaiyuanw@utexas.edu Sarfraz Khurshid The University of Texas at Austin khurshid@utexas.edu debugging program repair program synthesis lazy initialization execution driven pruning Effective program repair techniques, which modify faulty programs to fix them with respect to given test suites, can substantially reduce the cost of manual debugging. A common repair approach is to iteratively first generate candidate programs with possible bug fixes and then validate them against the given tests until a candidate that passes all the tests is found. While this approach is conceptually simple, due to the potentially high number of candidates that need to first be generated and then be compiled and tested, existing repair techniques that embody this approach have relatively low effectiveness, especially for faults at a fine granularity. To tackle this limitation, we introduce a novel repair technique, SketchFix, which generates candidate fixes on demand (as needed) during the test execution. Instead of iteratively re-compiling and re-executing each actual candidate program, SketchFix translates faulty programs to sketches, i.e., partial programs with \"holes\", and compiles each sketch once which may represent thousands of concrete candidates. With the insight that the space of candidates can be reduced substantially by utilizing the runtime behaviors of the tests, SketchFix lazily initializes the candidates of the sketches while validating them against the test execution. We experimentally evaluate SketchFix on the Defects4J benchmark and the experimental results show that SketchFix works particularly well in repairing bugs with expression manipulation at the AST node-level granularity compared to other program repair techniques. Specifically, SketchFix correctly fixes 19 out of 357 defects in 23 minutes on average using the default setting. In addition, SketchFix finds the first repair with 1.6% of re-compilations (#compiled sketches/#candidates) and 3.0% of re-executions out of all repair candidates.",
              "pageNumber": 12,
              "isPageNumberRoman": false
            },
            {
              "id": "98c5Pz1GglFAWRNd3j8N1",
              "type": "authorPaper",
              "text": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf",
              "extraLocations": [],
              "authorNames": "Jooyong Yi (Innopolis University), Shin Hwei Tan (National University of Singapore), Sergey Mechtaev (National University of Singapore), Marcel Böhme (National University of Singapore), Abhik Roychoudhury (National University of Singapore)",
              "abstract": "Automated program repair has attracted attention due to its potential to reduce debugging cost. Prior works show the feasibility of automated repair, and the research focus is gradually shifting towards the quality of generated patches. One promising direction is to control the quality of generated patches by controlling the quality of test-suites used. In this paper, we investigate the question: \"\"Can traditional test-suite metrics used in software testing be used for automated program repair?\"\". We empirically investigate the effectiveness of test-suite metrics (statement / branch coverage and mutation score) in controlling the reliability of repairs (the likelihood that repairs cause regressions). We conduct the largest-scale experiments to date with real-world software, and perform the first correlation study between test-suite metrics and the reliability of generated repairs. Our results show that by increasing test-suite metrics, the reliability of repairs tend to increase. Particularly, such trend is most strongly observed in statement coverage. This implies that traditional test-suite metrics used in software testing can also be used to improve the reliability of repairs in program repair.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics 1517855436452 Jooyong Yi Innopolis University j.yi@innopolis.ru Shin Hwei Tan National University of Singapore shinhwei@comp.nus.edu.sg Sergey Mechtaev National University of Singapore mechtaev@comp.nus.edu.sg Marcel Böhme National University of Singapore mboehme@comp.nus.edu.sg Abhik Roychoudhury National University of Singapore abhik@comp.nus.edu.sg Code Coverage Program Repair Mutation Testing Automated program repair has attracted attention due to its potential to reduce debugging cost. Prior works show the feasibility of automated repair, and the research focus is gradually shifting towards the quality of generated patches. One promising direction is to control the quality of generated patches by controlling the quality of test-suites used. In this paper, we investigate the question: \"\"Can traditional test-suite metrics used in software testing be used for automated program repair?\"\". We empirically investigate the effectiveness of test-suite metrics (statement / branch coverage and mutation score) in controlling the reliability of repairs (the likelihood that repairs cause regressions). We conduct the largest-scale experiments to date with real-world software, and perform the first correlation study between test-suite metrics and the reliability of generated repairs. Our results show that by increasing test-suite metrics, the reliability of repairs tend to increase. Particularly, such trend is most strongly observed in statement coverage. This implies that traditional test-suite metrics used in software testing can also be used to improve the reliability of repairs in program repair.",
              "pageNumber": 24,
              "isPageNumberRoman": false
            },
            {
              "id": "1XMOMLqsvnf1HvWCBFhcd8",
              "type": "authorPaper",
              "text": "[Journal First] Do Automated Program Repair Techniques Repair Hard and Important Bugs?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TcOrwOTri9qN5sl2VPDmg/1UlHTll3MjB9vsQoBoeZXG.pdf",
              "extraLocations": [],
              "authorNames": "Manish Motwani (University of Massachusetts), Sandhya Sankaranarayanan (University of Massachusetts), René Just (University of Massachusetts), Yuriy Brun (University of Massachusetts)",
              "abstract": "The full version of this article is: Manish Motwani, Sandhya Sankaranarayanan, Rene Just, and Yuriy Brun, \"Do Automated Program Repair Techniques Repair Hard and Important Bugs?\" in Empirical Software Engineering, http://dx.doi.org/10.1007/s10664-017-9550-0",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Do Automated Program Repair Techniques Repair Hard and Important Bugs? 1517194316552 Manish Motwani University of Massachusetts brun@cs.umass.edu Sandhya Sankaranarayanan University of Massachusetts ssankar@cs.umass.edu René Just University of Massachusetts rjust@cs.umass.edu Yuriy Brun University of Massachusetts brun@cs.umass.edu Automated program repair Repairability The full version of this article is: Manish Motwani, Sandhya Sankaranarayanan, Rene Just, and Yuriy Brun, \"Do Automated Program Repair Techniques Repair Hard and Important Bugs?\" in Empirical Software Engineering, http://dx.doi.org/10.1007/s10664-017-9550-0",
              "pageNumber": 25,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 2: Apps and App Stores I",
          "lineItems": [
            {
              "id": "7MpGSwTIN3Kq583jtIli9v",
              "type": "authorPaper",
              "text": "Software Protection on the Go: A Large-Scale Empirical Study on Mobile App Obfuscation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2EdfBsXkJwNigFBTvo9BLV/4xu36PAZ7PYx3sUV1mpEWS.pdf",
              "extraLocations": [],
              "authorNames": "Pei Wang (The Pennsylvania State University), Qinkun Bao (The Pennsylvania State University), Li Wang (The Pennsylvania State University), Shuai Wang (The Pennsylvania State University), Zhaofeng Chen (Baidu X-Lab), Tao Wei (Baidu X-Lab), Dinghao Wu (The Pennsylvania State University)",
              "abstract": "The prosperity of smartphone markets has raised new concerns about software security on mobile platforms, leading to a growing demand for effective software obfuscation techniques. Due to various differences between the mobile and desktop ecosystems, obfuscation faces both technical and non-technical challenges when applied to mobile software. Although there have been quite a few software security solution providers launching their mobile app obfuscation services, it is yet unclear how real-world mobile developers perform obfuscation as part of their software engineering practices. Our research takes a first step to systematically studying the deployment of software obfuscation techniques in mobile software development. With the help of an automated but coarse-grained method, we computed the likelihood of an app being obfuscated for over a million app samples crawled from Apple App Store. We then inspected the top 6600 instances and managed to identify 601 obfuscated versions of 539 iOS apps. By analyzing this sample set with extensive manual effort, we made various observations that reveal the status quo of mobile obfuscation in the real world, providing insights into understanding and improving the situation of software protection on mobile platforms.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Software Protection on the Go: A Large-Scale Empirical Study on Mobile App Obfuscation 1518194552743 Pei Wang The Pennsylvania State University pxw172@ist.psu.edu Qinkun Bao The Pennsylvania State University qub14@ist.psu.edu Li Wang The Pennsylvania State University lzw158@ist.psu.edu Shuai Wang The Pennsylvania State University szw175@ist.psu.edu Zhaofeng Chen Baidu X-Lab chenzhaofeng@baidu.com Tao Wei Baidu X-Lab lenx@baidu.com Dinghao Wu The Pennsylvania State University dwu@ist.psu.edu obfuscation reverse engineering mobile app empirical study The prosperity of smartphone markets has raised new concerns about software security on mobile platforms, leading to a growing demand for effective software obfuscation techniques. Due to various differences between the mobile and desktop ecosystems, obfuscation faces both technical and non-technical challenges when applied to mobile software. Although there have been quite a few software security solution providers launching their mobile app obfuscation services, it is yet unclear how real-world mobile developers perform obfuscation as part of their software engineering practices. Our research takes a first step to systematically studying the deployment of software obfuscation techniques in mobile software development. With the help of an automated but coarse-grained method, we computed the likelihood of an app being obfuscated for over a million app samples crawled from Apple App Store. We then inspected the top 6600 instances and managed to identify 601 obfuscated versions of 539 iOS apps. By analyzing this sample set with extensive manual effort, we made various observations that reveal the status quo of mobile obfuscation in the real world, providing insights into understanding and improving the situation of software protection on mobile platforms.",
              "pageNumber": 26,
              "isPageNumberRoman": false
            },
            {
              "id": "38QBNVPMvNK2TyXJ8oqWpe",
              "type": "authorPaper",
              "text": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf",
              "extraLocations": [],
              "authorNames": "Xiaoyin Wang (University of Texas at San Antonio), Xue Qin (University of Texas at San Antonio), Mitra Bokaei Hosseini (University of Texas at San Antonio), Rocky Slavin (University of Texas at San Antonio), Travis D. Breaux (Carnegie Mellon University), Jianwei Niu (University of Texas at San Antonio)",
              "abstract": "The Android mobile platform supports billions of devices across more than 190 countries around the world. This popularity coupled with user data collection by Android apps has made privacy protection a well-known challenge in the Android ecosystem. In practice, app producers provide privacy policies disclosing what information is collected and processed by the app. However, it is difficult to trace such claims to the corresponding app code to verify whether the implementation is consistent with the policy. Existing approaches for privacy policy alignment focus on information directly accessed through the Android platform (e.g., location and device ID), but are unable to handle user input, a major source of private information. In this paper, we propose a novel approach that automatically detects privacy leaks of user-entered data for a given Android app and determines whether such leakage may violate the app's privacy policy claims. For evaluation, we applied our approach to 120 popular apps from three privacy-relevant app categories: finance, health, and dating. The results show that our approach was able to detect 21 strong violations and 18 weak violations from the studied apps.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications 1518518347476 Xiaoyin Wang University of Texas at San Antonio xiaoyin.wang@utsa.edu Xue Qin University of Texas at San Antonio xue.qin@utsa.edu Mitra Bokaei Hosseini University of Texas at San Antonio mitra.bokaeihosseini@utsa.edu Rocky Slavin University of Texas at San Antonio rocky.slavin@utsa.edu Travis D. Breaux Carnegie Mellon University breaux@cs.cmu.edu Jianwei Niu University of Texas at San Antonio jianwei.niu@utsa.edu Mobile privacy policy Android application User input The Android mobile platform supports billions of devices across more than 190 countries around the world. This popularity coupled with user data collection by Android apps has made privacy protection a well-known challenge in the Android ecosystem. In practice, app producers provide privacy policies disclosing what information is collected and processed by the app. However, it is difficult to trace such claims to the corresponding app code to verify whether the implementation is consistent with the policy. Existing approaches for privacy policy alignment focus on information directly accessed through the Android platform (e.g., location and device ID), but are unable to handle user input, a major source of private information. In this paper, we propose a novel approach that automatically detects privacy leaks of user-entered data for a given Android app and determines whether such leakage may violate the app's privacy policy claims. For evaluation, we applied our approach to 120 popular apps from three privacy-relevant app categories: finance, health, and dating. The results show that our approach was able to detect 21 strong violations and 18 weak violations from the studied apps.",
              "pageNumber": 37,
              "isPageNumberRoman": false
            },
            {
              "id": "6wumM5rLhfctYTIk3v061x",
              "type": "authorPaper",
              "text": "Online App Review Analysis for Identifying Emerging Issues",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/WAXUkTkTbQJUUMnuRmt95/7I5gsduIRWKigNQEA2sexO.pdf",
              "extraLocations": [],
              "authorNames": "Cuiyun Gao (The Chinese University of Hong Kong), Jichuan Zeng (The Chinese University of Hong Kong), Michael R. Lyu (The Chinese University of Hong Kong), Irwin King (The Chinese University of Hong Kong)",
              "abstract": "Detecting emerging issues (e.g., new bugs) timely and precisely is crucial for developers to update their apps. App reviews provide an opportunity to proactively collect user complaints and promptly improve apps' user experience, in terms of bug fixing and feature refinement. However, the tremendous quantities of reviews and noise words (e.g., misspelled words) increase the difficulties in accurately identifying newly-appearing app issues. In this paper, we propose a novel and automated framework IDEA, which aims to IDentify Emerging App issues effectively based on online review analysis. We evaluate IDEA on six popular apps from Google Play and Apple's App Store, employing the official app changelogs as our ground truth. Experiment results demonstrate the effectiveness of IDEA in identifying emerging app issues. Feedback from engineers and product managers shows that 88.9% of them think that the identified issues can facilitate app development in practice. Moreover, we have successfully applied IDEA to several products of Tencent, which serve hundreds of millions of users.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Online App Review Analysis for Identifying Emerging Issues 1518421950551 Cuiyun Gao The Chinese University of Hong Kong cygao@cse.cuhk.edu.hk Jichuan Zeng The Chinese University of Hong Kong jczeng@cse.cuhk.edu.hk Michael R. Lyu The Chinese University of Hong Kong lyu@cse.cuhk.edu.hk Irwin King The Chinese University of Hong Kong king@cse.cuhk.edu.hk app reviews online analysis emerging issues Detecting emerging issues (e.g., new bugs) timely and precisely is crucial for developers to update their apps. App reviews provide an opportunity to proactively collect user complaints and promptly improve apps' user experience, in terms of bug fixing and feature refinement. However, the tremendous quantities of reviews and noise words (e.g., misspelled words) increase the difficulties in accurately identifying newly-appearing app issues. In this paper, we propose a novel and automated framework IDEA, which aims to IDentify Emerging App issues effectively based on online review analysis. We evaluate IDEA on six popular apps from Google Play and Apple's App Store, employing the official app changelogs as our ground truth. Experiment results demonstrate the effectiveness of IDEA in identifying emerging app issues. Feedback from engineers and product managers shows that 88.9% of them think that the identified issues can facilitate app development in practice. Moreover, we have successfully applied IDEA to several products of Tencent, which serve hundreds of millions of users.",
              "pageNumber": 48,
              "isPageNumberRoman": false
            },
            {
              "id": "3lal93q4TtvonGvoJvH0Ht",
              "type": "authorPaper",
              "text": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf",
              "extraLocations": [],
              "authorNames": "Rodrigo Morales (Polytechnique Montreal), Rubén Saborido (Polytechnique Montreal), Foutse Khomh (Polytechnique Montreal), Francisco Chicano (University of Malaga), Giuliano Antoniol (Polytechnique Montreal)",
              "abstract": "With millions of smartphones sold every year, the development of mobile apps has grown substantially. The battery power limitation of mobile devices has push developers and researchers to search for methods to improve the energy efficiency of mobile apps. We propose a multiobjective refactoring approach to automatically improve the architecture of mobile apps, while controlling for energy efficiency. In this extended abstract we briefly summarize our work.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps 1518329219092 Rodrigo Morales Polytechnique Montreal rodrigomorales2@acm.org Rubén Saborido Polytechnique Montreal ruben.saborido@polymtl.ca Foutse Khomh Polytechnique Montreal foutse.khomh@polymtl.ca Francisco Chicano University of Malaga chicano@uma.es Giuliano Antoniol Polytechnique Montreal antoniol@ieee.org Refactoring Anti-patterns Mobile apps Energy consumption With millions of smartphones sold every year, the development of mobile apps has grown substantially. The battery power limitation of mobile devices has push developers and researchers to search for methods to improve the energy efficiency of mobile apps. We propose a multiobjective refactoring approach to automatically improve the architecture of mobile apps, while controlling for energy efficiency. In this extended abstract we briefly summarize our work.",
              "pageNumber": 59,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 3: Software Evolution and Maintenance I",
          "lineItems": [
            {
              "id": "6o98LIVEWEQMfD6lzF6vTK",
              "type": "authorPaper",
              "text": "Neuro-Symbolic Program Corrector for Introductory Programming Assignments",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3ff3TXG0zUEgira53neRYx/4vw21DgkSxUSQYWz4NjvaQ.pdf",
              "extraLocations": [],
              "authorNames": "Sahil Bhatia (Netaji Subhas Institute of Technology), Pushmeet Kohli (Google Deepmind), Rishabh Singh (Microsoft Research)",
              "abstract": "Automatic correction of programs is a challenging problem with numerous real world applications in security, verification, and education. One application that is becoming increasingly important is the correction of student submissions in online courses for providing feedback. Most existing program repair techniques analyze Abstract Syntax Trees (ASTs) of programs, which are unfortunately unavailable for programs with syntax errors. In this paper, we propose a novel Neuro-symbolic approach that combines neural networks with constraint-based reasoning. Specifically, our method first uses a Recurrent Neural Network (RNN) to perform syntax repairs for the buggy programs; subsequently, the resulting syntactically-fixed programs are repaired using constraint-based techniques to ensure functional correctness. The RNNs are trained using a corpus of syntactically correct submissions for a given programming assignment, and are then queried to fix syntax errors in an incorrect programming submission by replacing or inserting the predicted tokens at the error location. We evaluate our technique on a dataset comprising of over 14,500 student submissions with syntax errors. Our method is able to repair syntax errors in 60% (8689) of submissions, and finds functionally correct repairs for 23.8% (3455) submissions.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Neuro-Symbolic Program Corrector for Introductory Programming Assignments 1518504213318 Sahil Bhatia Netaji Subhas Institute of Technology sahilbhatia.nsit@gmail.com Pushmeet Kohli Google Deepmind pushmeet@google.com Rishabh Singh Microsoft Research risin@microsoft.com Neural Program Correction Automated Feedback Generation Neural guided search Automatic correction of programs is a challenging problem with numerous real world applications in security, verification, and education. One application that is becoming increasingly important is the correction of student submissions in online courses for providing feedback. Most existing program repair techniques analyze Abstract Syntax Trees (ASTs) of programs, which are unfortunately unavailable for programs with syntax errors. In this paper, we propose a novel Neuro-symbolic approach that combines neural networks with constraint-based reasoning. Specifically, our method first uses a Recurrent Neural Network (RNN) to perform syntax repairs for the buggy programs; subsequently, the resulting syntactically-fixed programs are repaired using constraint-based techniques to ensure functional correctness. The RNNs are trained using a corpus of syntactically correct submissions for a given programming assignment, and are then queried to fix syntax errors in an incorrect programming submission by replacing or inserting the predicted tokens at the error location. We evaluate our technique on a dataset comprising of over 14,500 student submissions with syntax errors. Our method is able to repair syntax errors in 60% (8689) of submissions, and finds functionally correct repairs for 23.8% (3455) submissions.",
              "pageNumber": 60,
              "isPageNumberRoman": false
            },
            {
              "id": "4Ehs5qM7DZPVrZvpPJKezR",
              "type": "authorPaper",
              "text": "Automated Localization for Unreproducible Builds",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Uo99XzE0k6LQDG79lezQk/4lDBvklakctIQ6sXpUiVcn.pdf",
              "extraLocations": [],
              "authorNames": "Zhilei Ren (Dalian University of Technology), He Jiang (Dalian University of Technology), Jifeng Xuan (Dalian University of Technology), Zijiang Yang (Western Michigan University)",
              "abstract": "Reproducibility is the ability of recreating identical binaries under pre-defined build environments. Due to the need of quality assurance and the benefit of better detecting attacks against build environme nts, the practice of reproducible builds has gained popularity in many open-source software repositories such as Debian and Bitcoin. However, identifying the unreproducible issues remains a labour intensive and time consuming challenge, because of the lacking of information to guide the search and the diversity of the causes that may lead to the unreproducible binaries. In this paper we propose an automated framework called RepLoc to localize the problematic files for unreproducible builds. RepLoc features a query augmentation component that utilizes the information extracted from the build logs, and a heuristic rule-based filtering component that narrows the search scope. By integrating the two components with a weighted file ranking module, RepLoc is able to automatically produce a ranked list of files that are helpful in locating the problematic files for the unreproducible builds. We have implemented a prototype and conducted extensive experiments over 671 real-world unreproducible Debian packages in four different categories. By considering the topmost ranked file only, RepLoc achieves an accuracy rate of 47.09%. If we expand our examination to the top ten ranked files in the list produced by RepLoc, the accuracy rate becomes 79.28%. Considering that there are hundreds of source code, scripts, Makefiles, etc., in a package, RepLoc significantly reduces the scope of localizing problematic files. Moreover, with the help of RepLoc, we successfully identified and fixed six new unreproducible packages from Debian and Guix.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Automated Localization for Unreproducible Builds 1518512879915 Zhilei Ren Dalian University of Technology zren@dlut.edu.cn He Jiang Dalian University of Technology jianghe@dlut.edu.cn Jifeng Xuan Dalian University of Technology jxuan@whu.edu.cn Zijiang Yang Western Michigan University zijiang.yang@wmich.edu Unreproducible Build Localization Software Maintenance Reproducibility is the ability of recreating identical binaries under pre-defined build environments. Due to the need of quality assurance and the benefit of better detecting attacks against build environme nts, the practice of reproducible builds has gained popularity in many open-source software repositories such as Debian and Bitcoin. However, identifying the unreproducible issues remains a labour intensive and time consuming challenge, because of the lacking of information to guide the search and the diversity of the causes that may lead to the unreproducible binaries. In this paper we propose an automated framework called RepLoc to localize the problematic files for unreproducible builds. RepLoc features a query augmentation component that utilizes the information extracted from the build logs, and a heuristic rule-based filtering component that narrows the search scope. By integrating the two components with a weighted file ranking module, RepLoc is able to automatically produce a ranked list of files that are helpful in locating the problematic files for the unreproducible builds. We have implemented a prototype and conducted extensive experiments over 671 real-world unreproducible Debian packages in four different categories. By considering the topmost ranked file only, RepLoc achieves an accuracy rate of 47.09%. If we expand our examination to the top ten ranked files in the list produced by RepLoc, the accuracy rate becomes 79.28%. Considering that there are hundreds of source code, scripts, Makefiles, etc., in a package, RepLoc significantly reduces the scope of localizing problematic files. Moreover, with the help of RepLoc, we successfully identified and fixed six new unreproducible packages from Debian and Guix.",
              "pageNumber": 71,
              "isPageNumberRoman": false
            },
            {
              "id": "3bFuHEyqzVJlQ6a1ZzZmXP",
              "type": "authorPaper",
              "text": "Enlightened Debugging",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bH8PUknAyuN3l7zJfadY4/5cLNTz1LRtfwrJOW6Zf3Z.pdf",
              "extraLocations": [],
              "authorNames": "Xiangyu Li (Georgia Institute of Technology), Shaowei Zhu (Georgia Institute of Technology), Marcelo d’Amorim (Federal Univesity of Pernambuco), Alessandro Orso (Georgia Institute of Technology)",
              "abstract": "Numerous automated techniques have been proposed to reduce the cost of software debugging, a notoriously time-consuming and human-intensive activity. Among these techniques, Statistical Fault Localization (SFL) is particularly popular. One issue with SFL is that it is based on strong, often unrealistic assumptions on how developers behave when debugging. To address this problem, we propose Enlighten, an interactive, feedback-driven fault localization technique. Given a failing test, Enlighten (1) leverages SFL and dynamic dependence analysis to identify suspicious method invocations and corresponding data values, (2) presents the developer with a query about the most suspicious invocation expressed in terms of inputs and outputs, (3) encodes the developer feedback on the correctness of individual data values as extra program specifications, and (4) repeats these steps until the fault is found. We evaluated Enlighten in two ways. First, we applied Enlighten to 1,807 real and seeded faults in 3 open source programs using an automated oracle as a simulated user; for over 96% of these faults, Enlighten required less than 10 interactions with the simulated user to localize the fault, and a sensitivity analysis showed that the results were robust to erroneous responses. Second, we performed an actual user study on 4 faults with 24 participants and found that participants who used Enlighten performed significantly better than those not using our tool, in terms of both number of faults localized and time needed to localize the faults.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Enlightened Debugging 1519027610895 Xiangyu Li Georgia Institute of Technology xiangyu.li@cc.gatech.edu Shaowei Zhu Georgia Institute of Technology swzhu@gatech.edu Marcelo d’Amorim Federal Univesity of Pernambuco damorim@cin.ufpe.br Alessandro Orso Georgia Institute of Technology orso@cc.gatech.edu debugging fault localization dynamic analysis Numerous automated techniques have been proposed to reduce the cost of software debugging, a notoriously time-consuming and human-intensive activity. Among these techniques, Statistical Fault Localization (SFL) is particularly popular. One issue with SFL is that it is based on strong, often unrealistic assumptions on how developers behave when debugging. To address this problem, we propose Enlighten, an interactive, feedback-driven fault localization technique. Given a failing test, Enlighten (1) leverages SFL and dynamic dependence analysis to identify suspicious method invocations and corresponding data values, (2) presents the developer with a query about the most suspicious invocation expressed in terms of inputs and outputs, (3) encodes the developer feedback on the correctness of individual data values as extra program specifications, and (4) repeats these steps until the fault is found. We evaluated Enlighten in two ways. First, we applied Enlighten to 1,807 real and seeded faults in 3 open source programs using an automated oracle as a simulated user; for over 96% of these faults, Enlighten required less than 10 interactions with the simulated user to localize the fault, and a sensitivity analysis showed that the results were robust to erroneous responses. Second, we performed an actual user study on 4 faults with 24 participants and found that participants who used Enlighten performed significantly better than those not using our tool, in terms of both number of faults localized and time needed to localize the faults.",
              "pageNumber": 82,
              "isPageNumberRoman": false
            },
            {
              "id": "2yoiwwDJSglSdoCN2KKXqN",
              "type": "authorPaper",
              "text": "[Journal First] Experiences and Challenges in Building a Data Intensive System for Data Migration",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2XogMA7rD6MGSKQNdBeJYp/7E58nTNchsf4cLz0RCgWQK.pdf",
              "extraLocations": [],
              "authorNames": "Marco Scavuzzo (Politecnico di Milano), Elisabetta Di Nitto (Politecnico di Milano), Danilo Ardagna (Politecnico di Milano)",
              "abstract": "Recent analyses[2, 4, 5] report that many sectors of our economy and society are more and more guided by data-driven decision processes (e.g., health care, public administrations, etc.). As such, Data Intensive (DI) applications are becoming more and more important and critical. They must be fault-tolerant, they should scale with the amount of data, and be able to elastically leverage additional resources as and when these last ones are provided [3]. Moreover, they should be able to avoid data drops introduced in case of sudden overloads and should offer some Quality of Service (QoS) guarantees. Ensuring all these properties is, per se, a challenge, but it becomes even more difficult for DI applications, given the large amount of data to be managed and the significant level of parallelism required for its components. Even if today some technological frameworks are available for the development of such applications (for instance, think of Spark, Storm, Flink), we still lack solid software engineering approaches to support their development and, in particular, to ensure that they offer the required properties in terms of availability, throughput, data loss, etc. In fact, at the time of writing, identifying the right solution can require several rounds of experiments and the adoption of many different technologies. This implies the need for highly skilled persons and the execution of experiments with large data sets and a large number of resources, and, consequently, a significant amount of time and budget. To experiment with currently available approaches, we performed an action research experiment focusing on developing- testing-reengineering a specific DI application, Hegira4Cloud, that migrates data between widely used NoSQL databases, including so-called Database as a Service (DaaS), as well as on-premise databases. This is a representative DI system because it has to handle large volumes of data with different structures and has to guarantee that some important characteristics, in terms of data types and transactional properties, are preserved. Also, it poses stringent requirements in terms of correctness, high performance, fault tolerance, and fast and effective recovery. In our action research, we discovered that the literature offered some high level design guidelines for DI applications, as well as some tools to support modelling and QoS analysis/simulation of complex architectures, however the available tools were not yet. suitable to support DI systems. Moreover, we realized that the available big data frameworks we could have used were not flexible enough to cope with all possible application-specific aspects of our system. Hence, to achieve the desired level of performance, fault tolerance and recovery, we had to adopt a time-consuming, experiment-based approach [1, 6], which, in our case, consisted of three iterations: (1) the design and implementation of a Mediation Data Model capable of managing data extracted from different databases, together with a first monholitical prototype of Hegira4Cloud; (2) the improvement of performance of our prototype when managing and transferring huge amounts of data; (3) the introduction of fault-tolerant data extraction and management mechanisms, which are independent from the targeted databases. Among the others, an important issue that has forced us to reiterate in the development of Hegira4Cloud concerned the DaaS we interfaced with. In particular these DaaS, which are well-known services with a large number of users: (1) were missing detailed information regarding the behaviour of their APIs; (2) did not offer a predictable service; (3) were suffering of random downtimes not correlated with the datasets we were experimenting with. In this journal first presentation, we describe our experience and the issues we encountered that led to some important decisions during the software design and engineering process. Also, we analyse the state of the art of software design and verification tools and approaches in the light of our experience, and identify weaknesses, alternative design approaches and open challenges that could generate new research in these areas. More details can be found in the journal publication.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Experiences and Challenges in Building a Data Intensive System for Data Migration 1516796272145 Marco Scavuzzo Politecnico di Milano marco.scavuzzo@polimi.it Elisabetta Di Nitto Politecnico di Milano elisabetta.dinitto@polimi.it Danilo Ardagna Politecnico di Milano danilo.ardagna@polimi.it Data intensive applications Experiment driven action research Big data Data migration Recent analyses[2, 4, 5] report that many sectors of our economy and society are more and more guided by data-driven decision processes (e.g., health care, public administrations, etc.). As such, Data Intensive (DI) applications are becoming more and more important and critical. They must be fault-tolerant, they should scale with the amount of data, and be able to elastically leverage additional resources as and when these last ones are provided [3]. Moreover, they should be able to avoid data drops introduced in case of sudden overloads and should offer some Quality of Service (QoS) guarantees. Ensuring all these properties is, per se, a challenge, but it becomes even more difficult for DI applications, given the large amount of data to be managed and the significant level of parallelism required for its components. Even if today some technological frameworks are available for the development of such applications (for instance, think of Spark, Storm, Flink), we still lack solid software engineering approaches to support their development and, in particular, to ensure that they offer the required properties in terms of availability, throughput, data loss, etc. In fact, at the time of writing, identifying the right solution can require several rounds of experiments and the adoption of many different technologies. This implies the need for highly skilled persons and the execution of experiments with large data sets and a large number of resources, and, consequently, a significant amount of time and budget. To experiment with currently available approaches, we performed an action research experiment focusing on developing- testing-reengineering a specific DI application, Hegira4Cloud, that migrates data between widely used NoSQL databases, including so-called Database as a Service (DaaS), as well as on-premise databases. This is a representative DI system because it has to handle large volumes of data with different structures and has to guarantee that some important characteristics, in terms of data types and transactional properties, are preserved. Also, it poses stringent requirements in terms of correctness, high performance, fault tolerance, and fast and effective recovery. In our action research, we discovered that the literature offered some high level design guidelines for DI applications, as well as some tools to support modelling and QoS analysis/simulation of complex architectures, however the available tools were not yet. suitable to support DI systems. Moreover, we realized that the available big data frameworks we could have used were not flexible enough to cope with all possible application-specific aspects of our system. Hence, to achieve the desired level of performance, fault tolerance and recovery, we had to adopt a time-consuming, experiment-based approach [1, 6], which, in our case, consisted of three iterations: (1) the design and implementation of a Mediation Data Model capable of managing data extracted from different databases, together with a first monholitical prototype of Hegira4Cloud; (2) the improvement of performance of our prototype when managing and transferring huge amounts of data; (3) the introduction of fault-tolerant data extraction and management mechanisms, which are independent from the targeted databases. Among the others, an important issue that has forced us to reiterate in the development of Hegira4Cloud concerned the DaaS we interfaced with. In particular these DaaS, which are well-known services with a large number of users: (1) were missing detailed information regarding the behaviour of their APIs; (2) did not offer a predictable service; (3) were suffering of random downtimes not correlated with the datasets we were experimenting with. In this journal first presentation, we describe our experience and the issues we encountered that led to some important decisions during the software design and engineering process. Also, we analyse the state of the art of software design and verification tools and approaches in the light of our experience, and identify weaknesses, alternative design approaches and open challenges that could generate new research in these areas. More details can be found in the journal publication.",
              "pageNumber": 93,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 4: Human and Social Aspects of Computing I",
          "lineItems": [
            {
              "id": "3X9bIKrYwBC9ihKWRPsdn0",
              "type": "authorPaper",
              "text": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf",
              "extraLocations": [],
              "authorNames": "Bin Lin (Università della Svizzera italiana), Fiorella Zampetti (University of Sannio), Gabriele Bavota (Università della Svizzera italiana (USI)), Massimiliano Di Penta (University of Sannio), Michele Lanza (Faculty of Informatics), Rocco Oliveto (STAKE Lab - University of Molise)",
              "abstract": "Sentiment analysis has been applied to various software engineering (SE) tasks, such as evaluating app reviews or analyzing developers' emotions in commit messages. Studies indicate that sentiment analysis tools provide unreliable results when used out-of-the-box, since they are not designed to process SE datasets. The silver bullet for a successful application of sentiment analysis tools to SE datasets might be their customization to the specific usage context. We describe our experience in building a software library recommender exploiting crowdsourced opinions mined from Stack Overflow (e.g., what is the sentiment of developers about the usability of a library). To reach our goal, we retrained—on a set of 40k manually labeled sentences/words extracted from Stack Overflow—a state-of-the-art sentiment analysis tool exploiting deep learning. Despite such an effort- and time-consuming training process, the results were negative. We changed our focus and performed a thorough investigation of the accuracy of these tools on a variety of SE datasets. Our results should warn the research community about the strong limitations of current sentiment analysis tools.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Sentiment Analysis for Software Engineering: How Far Can We Go? 1517849886262 Bin Lin Università della Svizzera italiana bin.lin@usi.ch Fiorella Zampetti University of Sannio fiorellazampetti@gmail.com Gabriele Bavota Università della Svizzera italiana (USI) gabriele.bavota@usi.ch Massimiliano Di Penta University of Sannio dipenta@unisannio.it Michele Lanza Faculty of Informatics michele.lanza@usi.ch Rocco Oliveto STAKE Lab - University of Molise rocco.oliveto@unimol.it sentiment analysis software engineering NLP Sentiment analysis has been applied to various software engineering (SE) tasks, such as evaluating app reviews or analyzing developers' emotions in commit messages. Studies indicate that sentiment analysis tools provide unreliable results when used out-of-the-box, since they are not designed to process SE datasets. The silver bullet for a successful application of sentiment analysis tools to SE datasets might be their customization to the specific usage context. We describe our experience in building a software library recommender exploiting crowdsourced opinions mined from Stack Overflow (e.g., what is the sentiment of developers about the usability of a library). To reach our goal, we retrained—on a set of 40k manually labeled sentences/words extracted from Stack Overflow—a state-of-the-art sentiment analysis tool exploiting deep learning. Despite such an effort- and time-consuming training process, the results were negative. We changed our focus and performed a thorough investigation of the accuracy of these tools on a variety of SE datasets. Our results should warn the research community about the strong limitations of current sentiment analysis tools.",
              "pageNumber": 94,
              "isPageNumberRoman": false
            },
            {
              "id": "3ty0F5VEOzxhK3s73pN9D3",
              "type": "authorPaper",
              "text": "Identifying Features in Forks",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf",
              "extraLocations": [],
              "authorNames": "Shurui Zhou (Carnegie Mellon University), Stefan Stanciulescu (IT University of Copenhagen), Olaf Leßenich (University of Passau), Yingfei Xiong (Peking University), Andrzej Wasowski (IT University of Copenhagen), Christian Kästner (Carnegie Mellon University)",
              "abstract": "Fork-based development has been widely used both in open source communities and in industry, because it gives developers flexibility to modify their own fork without affecting others. Unfortunately, this mechanism has downsides: When the number of forks becomes large, it is difficult for developers to get or maintain an overview of activities in the forks. Current tools provide little help. We introduce INFOX, an approach to automatically identify non-merged features in forks and to generate an overview of active forks in a project. The approach clusters cohesive code fragments using code and network-analysis techniques and uses information-retrieval techniques to label clusters with keywords. The clustering is effective, with 90% accuracy on a set of known features. In addition, a human-subject evaluation shows that INFOX can provide actionable insight for developers of forks.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Identifying Features in Forks 1518454033015 Shurui Zhou Carnegie Mellon University shuruiz@cs.cmu.edu Stefan Stanciulescu IT University of Copenhagen scas@itu.dk Olaf Leßenich University of Passau lessenic@fim.uni-passau.de Yingfei Xiong Peking University xiongyf@pku.edu.cn Andrzej Wasowski IT University of Copenhagen wasowski@itu.dk Christian Kästner Carnegie Mellon University kaestner@cs.cmu.edu Fork-based development Github Community detection Information retrieval overview of forks transparency Fork-based development has been widely used both in open source communities and in industry, because it gives developers flexibility to modify their own fork without affecting others. Unfortunately, this mechanism has downsides: When the number of forks becomes large, it is difficult for developers to get or maintain an overview of activities in the forks. Current tools provide little help. We introduce INFOX, an approach to automatically identify non-merged features in forks and to generate an overview of active forks in a project. The approach clusters cohesive code fragments using code and network-analysis techniques and uses information-retrieval techniques to label clusters with keywords. The clustering is effective, with 90% accuracy on a set of known features. In addition, a human-subject evaluation shows that INFOX can provide actionable insight for developers of forks.",
              "pageNumber": 105,
              "isPageNumberRoman": false
            },
            {
              "id": "6G5EO1ZlFTaG4kxHMYoZbN",
              "type": "authorPaper",
              "text": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf",
              "extraLocations": [],
              "authorNames": "Inayat Rehman (Rochester Institute of Technology), Mehdi Mirakhorli (Rochester Institute of Technology), Meiyappan Nagappan (University of Waterloo), Azat Aralbay Uulu (Rochester Institute of Technology), Matthew Thornton (Rochester Institute of Technology)",
              "abstract": "Whether software architects should also code is an enduring question. In order to satisfy performance, security, reliability and other quality concerns, architects need to compare and carefully choose a combination of architectural patterns, styles or tactics. Then later in the development cycle, these architectural choices must be implemented completely and correctly so there will not be any drift from envisioned design. In this paper, we use data analytics-based techniques to study five large-scale software systems, examining the impact and the role of software architects who write code on software quality. Our quantitative study is augmented with a follow-up interview of architects. This paper provides empirical evidence for supporting the pragmatic opinions that architects should write code. Our analysis shows that implementing architectural tactics is more complex than delivering functionality, tactics are more error prone than software functionalities, and the architects tend to introduce fewer bugs into the implementation of architectural tactics compared to the developers.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies 1518486788503 Inayat Rehman Rochester Institute of Technology ixr8582@rit.edu Mehdi Mirakhorli Rochester Institute of Technology mxmvse@rit.edu Meiyappan Nagappan University of Waterloo mei.nagappan@uwaterloo.ca Azat Aralbay Uulu Rochester Institute of Technology axa8095@rit.edu Matthew Thornton Rochester Institute of Technology mjthornton@rit.edu Architect coding tactics architecture savvy Whether software architects should also code is an enduring question. In order to satisfy performance, security, reliability and other quality concerns, architects need to compare and carefully choose a combination of architectural patterns, styles or tactics. Then later in the development cycle, these architectural choices must be implemented completely and correctly so there will not be any drift from envisioned design. In this paper, we use data analytics-based techniques to study five large-scale software systems, examining the impact and the role of software architects who write code on software quality. Our quantitative study is augmented with a follow-up interview of architects. This paper provides empirical evidence for supporting the pragmatic opinions that architects should write code. Our analysis shows that implementing architectural tactics is more complex than delivering functionality, tactics are more error prone than software functionalities, and the architects tend to introduce fewer bugs into the implementation of architectural tactics compared to the developers.",
              "pageNumber": 117,
              "isPageNumberRoman": false
            },
            {
              "id": "7oxSWs74GvJzvbOkvkkBoN",
              "type": "authorPaper",
              "text": "[Journal First] Sentiment Polarity Detection for Software Development",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5o2jlVBKgm0WbzNsXeVPrw/70ILFFydFpHbzdIOpU2GFl.pdf",
              "extraLocations": [],
              "authorNames": "Fabio Calefato (University of Bari Aldo Moro), Filippo Lanubile (University of Bari Aldo Moro), Federico Maiorano (University of Bari Aldo Moro), Nicole Novielli (University of Bari Aldo Moro)",
              "abstract": "The role of sentiment analysis is increasingly emerging to study software developers' emotions by mining crowd-generated content within software repositories and information sources. With a few notable exceptions, empirical software engineering studies have exploited off-the-shelf sentiment analysis tools. However, such tools have been trained on non-technical domains and general-purpose social media, thus resulting in misclassifications of technical jargon and problem reports. In particular, Jongeling et al. show how the choice of the sentiment analysis tool may impact the conclusion validity of empirical studies because not only these tools do not agree with human annotation of developers' communication channels, but they also disagree among themselves. Our goal is to move beyond the limitations of off-the-shelf sentiment analysis tools when applied in the software engineering domain. Accordingly, we present Senti4SD, a sentiment polarity classifier for software developers' communication channels. Senti4SD exploits a suite of lexicon-based, keyword-based, and semantic features for appropriately dealing with the domain-dependent use of a lexicon. We built a Distributional Semantic Model (DSM) to derive the semantic features exploited by Senti4SD. Specifically, we ran word2vec on a collection of over 20 million documents from Stack Overflow, thus obtaining word vectors that are representative of developers' communication style. The classifier is trained and validated using a gold standard of 4,423 Stack Overflow posts, including questions, answers, and comments, which were manually annotated for sentiment polarity. We release the full lab package, which includes both the gold standard and the emotion annotation guidelines, to ease the execution of replications as well as new studies on emotion awareness in software engineering. To inform future research on word embedding for text categorization and information retrieval in software engineering, the replication kit also includes the DSM. Results. The contribution of the lexicon-based, keyword-based, and semantic features is assessed by our empirical evaluation leveraging different feature settings. With respect to SentiStrength, a mainstream off-the-shelf tool that we use as a baseline, Senti4SD reduces the misclassifications of neutral and positive posts as emotionally negative. Furthermore, we provide empirical evidence of better performance also in presence of a minimal set of training documents.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Sentiment Polarity Detection for Software Development 1517823050928 Fabio Calefato University of Bari Aldo Moro fabio.calefato@uniba.it Filippo Lanubile University of Bari Aldo Moro filippo.lanubile@uniba.it Federico Maiorano University of Bari Aldo Moro f.maiorano2@student.uniba.it Nicole Novielli University of Bari Aldo Moro nicole.novielli@uniba.it Sentiment Analysis Communication Channels Stack Overflow Word Embedding Social Software Engineering The role of sentiment analysis is increasingly emerging to study software developers' emotions by mining crowd-generated content within software repositories and information sources. With a few notable exceptions, empirical software engineering studies have exploited off-the-shelf sentiment analysis tools. However, such tools have been trained on non-technical domains and general-purpose social media, thus resulting in misclassifications of technical jargon and problem reports. In particular, Jongeling et al. show how the choice of the sentiment analysis tool may impact the conclusion validity of empirical studies because not only these tools do not agree with human annotation of developers' communication channels, but they also disagree among themselves. Our goal is to move beyond the limitations of off-the-shelf sentiment analysis tools when applied in the software engineering domain. Accordingly, we present Senti4SD, a sentiment polarity classifier for software developers' communication channels. Senti4SD exploits a suite of lexicon-based, keyword-based, and semantic features for appropriately dealing with the domain-dependent use of a lexicon. We built a Distributional Semantic Model (DSM) to derive the semantic features exploited by Senti4SD. Specifically, we ran word2vec on a collection of over 20 million documents from Stack Overflow, thus obtaining word vectors that are representative of developers' communication style. The classifier is trained and validated using a gold standard of 4,423 Stack Overflow posts, including questions, answers, and comments, which were manually annotated for sentiment polarity. We release the full lab package, which includes both the gold standard and the emotion annotation guidelines, to ease the execution of replications as well as new studies on emotion awareness in software engineering. To inform future research on word embedding for text categorization and information retrieval in software engineering, the replication kit also includes the DSM. Results. The contribution of the lexicon-based, keyword-based, and semantic features is assessed by our empirical evaluation leveraging different feature settings. With respect to SentiStrength, a mainstream off-the-shelf tool that we use as a baseline, Senti4SD reduces the misclassifications of neutral and positive posts as emotionally negative. Furthermore, we provide empirical evidence of better performance also in presence of a minimal set of training documents.",
              "pageNumber": 128,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 5: Software Repair II",
          "lineItems": [
            {
              "id": "2r2Qio4MKdQUV9I18BFkXa",
              "type": "authorPaper",
              "text": "Semantic Program Repair Using a Reference Implementation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2ndg0exc1x8lxEFXhKm0g0/1N19faKQEkIWF1UTM7JlA4.pdf",
              "extraLocations": [],
              "authorNames": "Sergey Mechtaev (National University of Singapore), Manh-Dung Nguyen (National University of Singapore), Yannic Noller (Humboldt University of Berlin), Lars Grunske (Humboldt University of Berlin), Abhik Roychoudhury (National University of Singapore)",
              "abstract": "Automated program repair has been studied via the use of techniques involving search, semantic analysis and artificial intelligence. Most of these techniques rely on tests as the correctness criteria, which causes the test overfitting problem. Although various approaches such as learning from code corpus have been proposed to address this problem, they are unable to guarantee that the generated patches generalize beyond the given tests. This work studies automated repair of errors using a reference implementation. The reference implementation is symbolically analyzed to automatically infer a specification of the intended behavior. This specification is then used to synthesize a patch that enforces conditional equivalence of the patched and the reference programs. The use of the reference implementation as an implicit correctness criterion alleviates overfitting in test-based repair. Besides, since we generate patches by semantic analysis, the reference program may have a substantially different implementation from the patched program, which distinguishes our approach from existing techniques for regression repair like Relifix. Our experiments in repairing the embedded Linux Busybox with GNU Coreutils as reference (and vice-versa) revealed that the proposed approach scales to real-world programs and enables the generation of more correct patches.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Semantic Program Repair Using a Reference Implementation 1517931193983 Sergey Mechtaev National University of Singapore mechtaev@comp.nus.edu.sg Manh-Dung Nguyen National University of Singapore nguyenmanhdung1710@gmail.com Yannic Noller Humboldt University of Berlin yannic.noller@informatik.hu-berlin.de Lars Grunske Humboldt University of Berlin grunske@informatik.hu-berlin.de Abhik Roychoudhury National University of Singapore abhik@comp.nus.edu.sg Debugging Program repair Verification Automated program repair has been studied via the use of techniques involving search, semantic analysis and artificial intelligence. Most of these techniques rely on tests as the correctness criteria, which causes the test overfitting problem. Although various approaches such as learning from code corpus have been proposed to address this problem, they are unable to guarantee that the generated patches generalize beyond the given tests. This work studies automated repair of errors using a reference implementation. The reference implementation is symbolically analyzed to automatically infer a specification of the intended behavior. This specification is then used to synthesize a patch that enforces conditional equivalence of the patched and the reference programs. The use of the reference implementation as an implicit correctness criterion alleviates overfitting in test-based repair. Besides, since we generate patches by semantic analysis, the reference program may have a substantially different implementation from the patched program, which distinguishes our approach from existing techniques for regression repair like Relifix. Our experiments in repairing the embedded Linux Busybox with GNU Coreutils as reference (and vice-versa) revealed that the proposed approach scales to real-world programs and enables the generation of more correct patches.",
              "pageNumber": 129,
              "isPageNumberRoman": false
            },
            {
              "id": "CfQ4wZBrZ0UxSV1lnOk3j",
              "type": "authorPaper",
              "text": "Automated Repair of Mobile Friendly Problems in Web Pages",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6AsOqvoJNpU0u12eBMc4m9/23Ce40gydrYlLzkd7LB4it.pdf",
              "extraLocations": [],
              "authorNames": "Sonal Mahajan (University of Southern California), Negarsadat Abolhassani (University of Southern California), Phil McMinn (University of Sheffield), William G. J. Halfond (University of Southern California)",
              "abstract": "Mobile devices have become a primary means of accessing the Internet. Unfortunately, many websites are not designed to be mobile friendly. This results in problems such as unreadable text, cluttered navigation, and content over owing a device's viewport; all of which can lead to a frustrating and poor user experience. Existing techniques are limited in helping developers repair these mobile friendly problems. To address this limitation of prior work, we designed a novel automated approach for repairing mobile friendly problems in web pages. Our empirical evaluation showed that our approach was able to successfully resolve mobile friendly problems in 95% of the evaluation subjects. In a user study, participants preferred our repaired versions of the subjects and also considered the repaired pages to be more readable than the originals.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Automated Repair of Mobile Friendly Problems in Web Pages 1518564411816 Sonal Mahajan University of Southern California spmahaja@usc.edu Negarsadat Abolhassani University of Southern California abolhass@usc.edu Phil McMinn University of Sheffield p.mcminn@sheffield.ac.uk William G. J. Halfond University of Southern California halfond@usc.edu Mobile Friendly Problems automated repair web apps Mobile devices have become a primary means of accessing the Internet. Unfortunately, many websites are not designed to be mobile friendly. This results in problems such as unreadable text, cluttered navigation, and content over owing a device's viewport; all of which can lead to a frustrating and poor user experience. Existing techniques are limited in helping developers repair these mobile friendly problems. To address this limitation of prior work, we designed a novel automated approach for repairing mobile friendly problems in web pages. Our empirical evaluation showed that our approach was able to successfully resolve mobile friendly problems in 95% of the evaluation subjects. In a user study, participants preferred our repaired versions of the subjects and also considered the repaired pages to be more readable than the originals.",
              "pageNumber": 140,
              "isPageNumberRoman": false
            },
            {
              "id": "30D1AgtFE5zL6iphRNngpS",
              "type": "authorPaper",
              "text": "Static Automated Program Repair for Heap Properties",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6sdxYBhIZyy7FLj3rFRYpg/7ojSy3fH9UYidjrpNK6WGQ.pdf",
              "extraLocations": [],
              "authorNames": "Rijnard van Tonder (Carnegie Mellon University), Claire Le Goues (Carnegie Mellon University)",
              "abstract": "Static analysis tools have demonstrated effectiveness at finding bugs in real world code. Such tools are increasingly widely adopted to improve software quality in practice. Automated Program Repair (APR) has the potential to further cut down on the cost of improving software quality. However, there is a disconnect between these effective bug-finding tools and APR. Recent advances in APR rely on test cases, making them inapplicable to newly discovered bugs or bugs difficult to test for deterministically (like memory leaks). Additionally, the quality of patches generated to satisfy a test suite is a key challenge. We address these challenges by adapting advances in practical static analysis and verification techniques to enable a new technique that finds and then accurately fixes real bugs without test cases. We present a new automated program repair technique using Separation Logic. At a high-level, our technique reasons over semantic effects of existing program fragments to fix faults related to general pointer safety properties: resource leaks, memory leaks, and null dereferences. The procedure automatically translates identified fragments into source-level patches, and verifies patch correctness with respect to reported faults. In this work we conduct the largest study of automatically fixing undiscovered bugs in real-world code to date. We demonstrate our approach by correctly fixing 55 bugs, including 11 previously undiscovered bugs, in 11 real-world projects.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Static Automated Program Repair for Heap Properties 1518632186402 Rijnard van Tonder Carnegie Mellon University rvt@cmu.edu Claire Le Goues Carnegie Mellon University clegoues@cs.cmu.edu Automated Program Repair Separation Logic Static analysis tools have demonstrated effectiveness at finding bugs in real world code. Such tools are increasingly widely adopted to improve software quality in practice. Automated Program Repair (APR) has the potential to further cut down on the cost of improving software quality. However, there is a disconnect between these effective bug-finding tools and APR. Recent advances in APR rely on test cases, making them inapplicable to newly discovered bugs or bugs difficult to test for deterministically (like memory leaks). Additionally, the quality of patches generated to satisfy a test suite is a key challenge. We address these challenges by adapting advances in practical static analysis and verification techniques to enable a new technique that finds and then accurately fixes real bugs without test cases. We present a new automated program repair technique using Separation Logic. At a high-level, our technique reasons over semantic effects of existing program fragments to fix faults related to general pointer safety properties: resource leaks, memory leaks, and null dereferences. The procedure automatically translates identified fragments into source-level patches, and verifies patch correctness with respect to reported faults. In this work we conduct the largest study of automatically fixing undiscovered bugs in real-world code to date. We demonstrate our approach by correctly fixing 55 bugs, including 11 previously undiscovered bugs, in 11 real-world projects.",
              "pageNumber": 151,
              "isPageNumberRoman": false
            },
            {
              "id": "5gWxs9HxjD38TyjqVD7M0z",
              "type": "authorPaper",
              "text": "[Journal First] Overfitting in Semantics-Based Automated Program Repair",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1iEz1Hydy2R6aGChkPt4yK/3zxjPwJpOMkItKVxLAR3pj.pdf",
              "extraLocations": [],
              "authorNames": "Xuan-Bach D. Le (Singapore Management University), Ferdian Thung (Singapore Management University), David Lo (Singapore Management University), Claire Le Goues (Carnegie Mellon University)",
              "abstract": "The primary goal of Automated Program Repair (APR) is to automatically fix buggy software, to reduce the manual bug-fix burden that presently rests on human developers. Existing APR techniques can be generally divided into two families: semantics-vs. heuristics-based. Semantics-based APR uses symbolic execution and test suites to extract semantic constraints, and uses program synthesis to synthesize repairs that satisfy the extracted constraints. Heuristic-based APR generates large populations of repair candidates via source manipulation, and searches for the best among them. Both families largely rely on a primary assumption that a program is correctly patched if the generated patch leads the program to pass all provided test cases. Patch correctness is thus an especially pressing concern. A repair technique may generate overfitting patches, which lead a program to pass all existing test cases, but fails to generalize beyond them. In this work, we revisit the overfitting problem with a focus on semantics-based APR techniques, complementing previous studies of the overfitting problem in heuristics-based APR. We perform our study using IntroClass and Codeflaws benchmarks, two datasets well-suited for assessing repair quality, to systematically characterize and understand the nature of overfitting in semantics-based APR. We find that similar to heuristics-based APR, overfitting also occurs in semantics-based APR in various different ways.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Overfitting in Semantics-Based Automated Program Repair 1517901314859 Xuan-Bach D. Le Singapore Management University dxb.le.2013@phdis.smu.edu.sg Ferdian Thung Singapore Management University ferdiant.2013@phdis.smu.edu.sg David Lo Singapore Management University davidlo@smu.edu.sg Claire Le Goues Carnegie Mellon University clegoues@cs.cmu.edu Automated Program Repair Program Synthesis Symbolic Execution Patch Overfitting The primary goal of Automated Program Repair (APR) is to automatically fix buggy software, to reduce the manual bug-fix burden that presently rests on human developers. Existing APR techniques can be generally divided into two families: semantics-vs. heuristics-based. Semantics-based APR uses symbolic execution and test suites to extract semantic constraints, and uses program synthesis to synthesize repairs that satisfy the extracted constraints. Heuristic-based APR generates large populations of repair candidates via source manipulation, and searches for the best among them. Both families largely rely on a primary assumption that a program is correctly patched if the generated patch leads the program to pass all provided test cases. Patch correctness is thus an especially pressing concern. A repair technique may generate overfitting patches, which lead a program to pass all existing test cases, but fails to generalize beyond them. In this work, we revisit the overfitting problem with a focus on semantics-based APR techniques, complementing previous studies of the overfitting problem in heuristics-based APR. We perform our study using IntroClass and Codeflaws benchmarks, two datasets well-suited for assessing repair quality, to systematically characterize and understand the nature of overfitting in semantics-based APR. We find that similar to heuristics-based APR, overfitting also occurs in semantics-based APR in various different ways.",
              "pageNumber": 163,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 6: Apps and App Stores II",
          "lineItems": [
            {
              "id": "4tNIApyIevP3a1XQrkFFva",
              "type": "authorPaper",
              "text": "[Journal First] Studying the Dialogue Between Users and Developers of Free Apps in the Google Play Store",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5DvXCVhNZmmS4ZOChxQpkT/3YJxPVzOETe0xHdSpDBS9Z.pdf",
              "extraLocations": [],
              "authorNames": "Safwat Hassan ((SAIL), Queen’s University), Chakkrit Tantithamthavorn (The University of Adelaide, Australia), Cor-Paul Bezemer ((SAIL), Queen’s University), Ahmed E. Hassan ((SAIL), Queen’s University)",
              "abstract": "The popularity of mobile apps continues to grow over the past few years. Mobile app stores, such as the Google Play Store and Apple's App Store provide a unique user feedback mechanism to app developers through app reviews. In the Google Play Store (and most recently in the Apple App Store), developers are able to respond to such user feedback. Over the past years, mobile app reviews have been studied excessively by researchers. However, much of prior work (including our own prior work) incorrectly assumes that reviews are static in nature and that users never update their reviews. In a recent study, we started analyzing the dynamic nature of the review-response mechanism. Our previous study showed that responding to a review often has a positive effect on the rating that is given by the user to an app. In this paper [1], we revisit our prior finding in more depth by studying 4.5 million reviews with 126,686 responses of 2,328 top free-to-download apps in the Google Play Store. One of the major findings of our paper is that the assumption that reviews are static is incorrect. In particular, we find that developers and users in some cases use this response mechanism as a rudimentary user support tool, where dialogues emerge between users and developers through updated reviews and responses. Even though the messages are often simple, we find instances of as many as ten user-developer back-and-forth messages that occur via the response mechanism. Using a mixed-effect model, we identify that the likelihood of a developer responding to a review increases as the review rating gets lower or as the review content gets longer. In addition, we identify four patterns of developers: 1) developers who primarily respond to only negative reviews, 2) developers who primarily respond to negative reviews or to reviews based on their content, 3) developers who primarily respond to reviews which are posted shortly after the latest release of their app, and 4) developers who primarily respond to reviews which are posted long after the latest release of their app. We perform a qualitative analysis of developer responses to understand what drives developers to respond to a review. We manually analyzed a statistically representative random sample of 347 reviews with responses of the top ten apps with the highest number of developer responses. We identify seven drivers that make a developer respond to a review, of which the most important ones are to thank the users for using the app and to ask the user for more details about the reported issue. Our findings show that it can be worthwhile for app owners to respond to reviews, as responding may lead to an increase in the given rating. In addition, our findings show that studying the dialogue between users and developers provides valuable insights that can lead to improvements in the app store and the user support process. The main contributions of this paper are as follows: (1) Our paper is the first work to demonstrate the dynamic nature of reviews. (2) Furthermore, we are the first to demonstrate a peculiar use of the app-review platforms as a user support medium. (3) In addition, our work is the first work to deeply explore developer responses in a systematic manner. (4) Finally, our classification of developer-responses highlights the value of providing canned or even automated responses in next generation app-review platforms. The full paper is published in the Empirical So ware Engineering journal, and can be found at: https:// link.springer.com/ article/ 10.1007/ s10664-017-9538-9 Please cite the following paper: Hassan S, Tantithamthavorn C, Bezemer CP, Hassan AE (2017) Studying the dialogue between users and developers of free apps in the Google Play Store. Empirical Software Engineering pp 1–38",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Studying the Dialogue Between Users and Developers of Free Apps in the Google Play Store 1518482471955 Safwat Hassan (SAIL), Queen’s University shassan@cs.queensu.ca Chakkrit Tantithamthavorn The University of Adelaide, Australia chakkrit.tantithamthavorn@adelaide.edu.au Cor-Paul Bezemer (SAIL), Queen’s University bezemer@cs.queensu.ca Ahmed E. Hassan (SAIL), Queen’s University ahmed@cs.queensu.ca Google Play Store User-developer dialogue Developer response Mixed-effect model Android mobile apps The popularity of mobile apps continues to grow over the past few years. Mobile app stores, such as the Google Play Store and Apple's App Store provide a unique user feedback mechanism to app developers through app reviews. In the Google Play Store (and most recently in the Apple App Store), developers are able to respond to such user feedback. Over the past years, mobile app reviews have been studied excessively by researchers. However, much of prior work (including our own prior work) incorrectly assumes that reviews are static in nature and that users never update their reviews. In a recent study, we started analyzing the dynamic nature of the review-response mechanism. Our previous study showed that responding to a review often has a positive effect on the rating that is given by the user to an app. In this paper [1], we revisit our prior finding in more depth by studying 4.5 million reviews with 126,686 responses of 2,328 top free-to-download apps in the Google Play Store. One of the major findings of our paper is that the assumption that reviews are static is incorrect. In particular, we find that developers and users in some cases use this response mechanism as a rudimentary user support tool, where dialogues emerge between users and developers through updated reviews and responses. Even though the messages are often simple, we find instances of as many as ten user-developer back-and-forth messages that occur via the response mechanism. Using a mixed-effect model, we identify that the likelihood of a developer responding to a review increases as the review rating gets lower or as the review content gets longer. In addition, we identify four patterns of developers: 1) developers who primarily respond to only negative reviews, 2) developers who primarily respond to negative reviews or to reviews based on their content, 3) developers who primarily respond to reviews which are posted shortly after the latest release of their app, and 4) developers who primarily respond to reviews which are posted long after the latest release of their app. We perform a qualitative analysis of developer responses to understand what drives developers to respond to a review. We manually analyzed a statistically representative random sample of 347 reviews with responses of the top ten apps with the highest number of developer responses. We identify seven drivers that make a developer respond to a review, of which the most important ones are to thank the users for using the app and to ask the user for more details about the reported issue. Our findings show that it can be worthwhile for app owners to respond to reviews, as responding may lead to an increase in the given rating. In addition, our findings show that studying the dialogue between users and developers provides valuable insights that can lead to improvements in the app store and the user support process. The main contributions of this paper are as follows: (1) Our paper is the first work to demonstrate the dynamic nature of reviews. (2) Furthermore, we are the first to demonstrate a peculiar use of the app-review platforms as a user support medium. (3) In addition, our work is the first work to deeply explore developer responses in a systematic manner. (4) Finally, our classification of developer-responses highlights the value of providing canned or even automated responses in next generation app-review platforms. The full paper is published in the Empirical So ware Engineering journal, and can be found at: https:// link.springer.com/ article/ 10.1007/ s10664-017-9538-9 Please cite the following paper: Hassan S, Tantithamthavorn C, Bezemer CP, Hassan AE (2017) Studying the dialogue between users and developers of free apps in the Google Play Store. Empirical Software Engineering pp 1–38",
              "pageNumber": 164,
              "isPageNumberRoman": false
            },
            {
              "id": "5g9AbfvtJoq2qpyY9oagCx",
              "type": "authorPaper",
              "text": "Automated Reporting of GUI Design Violations for Mobile Apps",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73vOGjBkf23NHodSgD3DR2/1OWvuIr0ODMO3SiUdEDKEV.pdf",
              "extraLocations": [],
              "authorNames": "Kevin Moran (College of William & Mary), Boyang Li (College of William & Mary), Carlos Bernal-Cárdenas (College of William & Mary), Dan Jelf (College of William & Mary), Denys Poshyvanyk (College of William & Mary)",
              "abstract": "The inception of a mobile app often takes form of a mock-up of the Graphical User Interface (GUI), represented as a static image delineating the proper layout and style of GUI widgets that satisfy requirements. Following this initial mock-up, the design artifacts are then handed off to developers whose goal is to accurately implement these GUIs and the desired functionality in code. Given the sizable abstraction gap between mock-ups and code, developers often introduce mistakes related to the GUI that can negatively impact an app's success in highly competitive marketplaces. Moreover, such mistakes are common in the evolutionary context of rapidly changing apps. This leads to the time-consuming and laborious task of design teams verifying that each screen of an app was implemented according to intended design specifications. This paper introduces a novel, automated approach for verifying whether the GUI of a mobile app was implemented according to its intended design. Our approach resolves GUI-related information from both implemented apps and mock-ups and uses computer vision techniques to identify common errors in the implementations of mobile GUIs. We implemented this approach for Android in a tool called GVT and carried out both a controlled empirical evaluation with open-source apps as well as an industrial evaluation with designers and developers from Huawei. The results show that GVT solves an important, difficult, and highly practical problem with remarkable efficiency and accuracy and is both useful and scalable from the point of view of industrial designers and developers. The tool is currently used by over one-thousand industrial designers and developers at Huawei to improve the quality of their mobile apps.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Automated Reporting of GUI Design Violations for Mobile Apps 1518493052735 Kevin Moran College of William & Mary kpmoran@cs.wm.edu Boyang Li College of William & Mary boyang@cs.wm.edu Carlos Bernal-Cárdenas College of William & Mary cebernal@cs.wm.edu Dan Jelf College of William & Mary dkjelf@cs.wm.edu Denys Poshyvanyk College of William & Mary denys@cs.wm.edu GUI design Mobile Apps Android Computer Vision The inception of a mobile app often takes form of a mock-up of the Graphical User Interface (GUI), represented as a static image delineating the proper layout and style of GUI widgets that satisfy requirements. Following this initial mock-up, the design artifacts are then handed off to developers whose goal is to accurately implement these GUIs and the desired functionality in code. Given the sizable abstraction gap between mock-ups and code, developers often introduce mistakes related to the GUI that can negatively impact an app's success in highly competitive marketplaces. Moreover, such mistakes are common in the evolutionary context of rapidly changing apps. This leads to the time-consuming and laborious task of design teams verifying that each screen of an app was implemented according to intended design specifications. This paper introduces a novel, automated approach for verifying whether the GUI of a mobile app was implemented according to its intended design. Our approach resolves GUI-related information from both implemented apps and mock-ups and uses computer vision techniques to identify common errors in the implementations of mobile GUIs. We implemented this approach for Android in a tool called GVT and carried out both a controlled empirical evaluation with open-source apps as well as an industrial evaluation with designers and developers from Huawei. The results show that GVT solves an important, difficult, and highly practical problem with remarkable efficiency and accuracy and is both useful and scalable from the point of view of industrial designers and developers. The tool is currently used by over one-thousand industrial designers and developers at Huawei to improve the quality of their mobile apps.",
              "pageNumber": 165,
              "isPageNumberRoman": false
            },
            {
              "id": "7KbnGEc2vGAdULg01RfBvU",
              "type": "authorPaper",
              "text": "Leveraging Program Analysis to Reduce User-Perceived Latency in Mobile Applications",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6XtxxPyOjmBnzbOjfZogqQ/5iHlEbl6OqBrzktFcC7my4.pdf",
              "extraLocations": [],
              "authorNames": "Yixue Zhao (University of Southern California), Marcelo Schmitt Laser (Pontifical Catholic University of Rio Grande do Sul), Yingjun Lyu (University of Southern California), Nenad Medvidovic (University of Southern California)",
              "abstract": "Reducing network latency in mobile applications is an effective way of improving the mobile user experience and has tangible economic benefits. This paper presents PALOMA, a novel client-centric technique for reducing the network latency by prefetching HTTP requests in Android apps. Our work leverages string analysis and callback control-flow analysis to automatically instrument apps using PALOMA's rigorous formulation of scenarios that address \"what\" and \"when\" to prefetch. PALOMA has been shown to incur significant runtime savings (several hundred milliseconds per prefetchable HTTP request), both when applied on a reusable evaluation benchmark we have developed and on real applications.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Leveraging Program Analysis to Reduce User-Perceived Latency in Mobile Applications 1518399898478 Yixue Zhao University of Southern California yixue.zhao@usc.edu Marcelo Schmitt Laser Pontifical Catholic University of Rio Grande do Sul marcelo.laser@gmail.com Yingjun Lyu University of Southern California yingjunl@usc.edu Nenad Medvidovic University of Southern California neno@usc.edu program analysis prefetch network latency mobile applications Reducing network latency in mobile applications is an effective way of improving the mobile user experience and has tangible economic benefits. This paper presents PALOMA, a novel client-centric technique for reducing the network latency by prefetching HTTP requests in Android apps. Our work leverages string analysis and callback control-flow analysis to automatically instrument apps using PALOMA's rigorous formulation of scenarios that address \"what\" and \"when\" to prefetch. PALOMA has been shown to incur significant runtime savings (several hundred milliseconds per prefetchable HTTP request), both when applied on a reusable evaluation benchmark we have developed and on real applications.",
              "pageNumber": 176,
              "isPageNumberRoman": false
            },
            {
              "id": "6uJz9ohRiyEXgvreO0838L",
              "type": "authorPaper",
              "text": "Repairing Crashes in Android Apps",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11SgkKwQHmFo9IUg9YcyHZ/221qL68Sp1f0tYoxd9WFxU.pdf",
              "extraLocations": [],
              "authorNames": "Shin Hwei Tan (Southern University of Science and Technology), Zhen Dong (National University of Singapore), Xiang Gao (National University of Singapore), Abhik Roychoudhury (National University of Singapore)",
              "abstract": "Android apps are omnipresent, and frequently suffer from crashes — leading to poor user experience and economic loss. Past work focused on automated test generation to detect crashes in Android apps. However, automated repair of crashes has not been studied. In this paper, we propose the first approach to automatically repair Android apps, specifically we propose a technique for fixing crashes in Android apps. Unlike most test-based repair approaches, we do not need a test-suite; instead a single failing test is meticulously analyzed for crash locations and reasons behind these crashes. Our approach hinges on a careful empirical study which seeks to establish common root-causes for crashes in Android apps, and then distills the remedy of these root-causes in the form of eight generic transformation operators. These operators are applied using a search-based repair framework embodied in our repair tool Droix. We also prepare a benchmark DroixBench capturing reproducible crashes in Android apps. Our evaluation of Droix on DroixBench reveals that the automatically produced patches are often syntactically identical to the human patch, and on some rare occasion even better than the human patch (in terms of avoiding regressions). These results confirm our intuition that our proposed transformations form a sufficient set of operators to patch crashes in Android.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Repairing Crashes in Android Apps 1517933156471 Shin Hwei Tan Southern University of Science and Technology shinhwei@hotmail.com Zhen Dong National University of Singapore zhen.dong@comp.nus.edu.sg Xiang Gao National University of Singapore gaoxiang@comp.nus.edu.sg Abhik Roychoudhury National University of Singapore abhik@comp.nus.edu.sg Automated repair Android apps Crash SBSE Android apps are omnipresent, and frequently suffer from crashes — leading to poor user experience and economic loss. Past work focused on automated test generation to detect crashes in Android apps. However, automated repair of crashes has not been studied. In this paper, we propose the first approach to automatically repair Android apps, specifically we propose a technique for fixing crashes in Android apps. Unlike most test-based repair approaches, we do not need a test-suite; instead a single failing test is meticulously analyzed for crash locations and reasons behind these crashes. Our approach hinges on a careful empirical study which seeks to establish common root-causes for crashes in Android apps, and then distills the remedy of these root-causes in the form of eight generic transformation operators. These operators are applied using a search-based repair framework embodied in our repair tool Droix. We also prepare a benchmark DroixBench capturing reproducible crashes in Android apps. Our evaluation of Droix on DroixBench reveals that the automatically produced patches are often syntactically identical to the human patch, and on some rare occasion even better than the human patch (in terms of avoiding regressions). These results confirm our intuition that our proposed transformations form a sufficient set of operators to patch crashes in Android.",
              "pageNumber": 187,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 7: Regression Testing",
          "lineItems": [
            {
              "id": "3KTCXSaJzdNy09IqOZPxD4",
              "type": "authorPaper",
              "text": "Hybrid Regression Test Selection",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6zj4BbjPBhIpgTSHRpbCKI/399beym5BlUCGqVFo4jR6U.pdf",
              "extraLocations": [],
              "authorNames": "Lingming Zhang (The University of Texas at Dallas)",
              "abstract": "Regression testing is crucial but can be extremely costly. Regression Test Selection (RTS) aims to reduce regression testing cost by only selecting and running the tests that may be affected by code changes. To date, various RTS techniques analyzing at different granularities (e.g., at the basic-block, method, and file levels) have been proposed. RTS techniques working on finer granularities may be more precise in selecting tests, while techniques working on coarser granularities may have lower overhead. According to a recent study, RTS at the file level (FRTS) can have less overall testing time compared with a finer grained technique at the method level, and represents state-of-the-art RTS. In this paper, we present the first hybrid RTS approach, HyRTS, that analyzes at multiple granularities to combine the strengths of traditional RTS techniques at different granularities. We implemented the basic HyRTS technique by combining the method and file granularity RTS. The experimental results on 2707 revisions of 32 projects, totalling over 124 Million LoC, demonstrate that HyRTS outperforms state-of-the-art FRTS significantly in terms of selected test ratio and the offline testing time. We also studied the impacts of each type of method-level changes, and further designed two new HyRTS variants based on the study results. Our additional experiments show that transforming instance method additions/deletions into file-level changes produces an even more effective HyRTS variant that can significantly outperform FRTS in both offline and online testing time.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Hybrid Regression Test Selection 1518471750744 Lingming Zhang The University of Texas at Dallas zhanglm10@gmail.com Test selection Regression testing Dynamic analysis Empirical study Regression testing is crucial but can be extremely costly. Regression Test Selection (RTS) aims to reduce regression testing cost by only selecting and running the tests that may be affected by code changes. To date, various RTS techniques analyzing at different granularities (e.g., at the basic-block, method, and file levels) have been proposed. RTS techniques working on finer granularities may be more precise in selecting tests, while techniques working on coarser granularities may have lower overhead. According to a recent study, RTS at the file level (FRTS) can have less overall testing time compared with a finer grained technique at the method level, and represents state-of-the-art RTS. In this paper, we present the first hybrid RTS approach, HyRTS, that analyzes at multiple granularities to combine the strengths of traditional RTS techniques at different granularities. We implemented the basic HyRTS technique by combining the method and file granularity RTS. The experimental results on 2707 revisions of 32 projects, totalling over 124 Million LoC, demonstrate that HyRTS outperforms state-of-the-art FRTS significantly in terms of selected test ratio and the offline testing time. We also studied the impacts of each type of method-level changes, and further designed two new HyRTS variants based on the study results. Our additional experiments show that transforming instance method additions/deletions into file-level changes produces an even more effective HyRTS variant that can significantly outperform FRTS in both offline and online testing time.",
              "pageNumber": 199,
              "isPageNumberRoman": false
            },
            {
              "id": "5P9u2J6h3eHfT1Vl4YQHpo",
              "type": "authorPaper",
              "text": "Fine-Grained Test Minimization",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7FekvzG72MbQMYKnwN6pXO/34ooDIrCIylSUp9k6oGIrB.pdf",
              "extraLocations": [],
              "authorNames": "Arash Vahabzadeh (University of British Columbia), Andrea Stocco (University of British Columbia), Ali Mesbah (University of British Columbia)",
              "abstract": "As a software system evolves, its test suite can accumulate redundancies over time. Test minimization aims at removing redundant test cases. However, current techniques remove whole test cases from the test suite using test adequacy criteria, such as code coverage. This has two limitations, namely (1) by removing a whole test case the corresponding test assertions are also lost, which can inhibit test suite effectiveness, (2) the issue of partly redundant test cases, i.e., tests with redundant test statements, is ignored. We propose a novel approach for fine-grained test case minimization. Our analysis is based on the inference of a test suite model that enables automated test reorganization within test cases. It enables removing redundancies at the test statement level, while preserving the coverage and test assertions of the test suite. We evaluated our approach, implemented in a tool called Testler, on the test suites of 15 open source projects. Our analysis shows that over 4,639 (24%) of the tests in these test suites are partly redundant, with over 11,819 redundant test statements in total. Our results show that Testler removes 43% of the redundant test statements, reducing the number of partly redundant tests by 52%. As a result, test suite execution time is reduced by up to 37% (20% on average), while maintaining the original statement coverage, branch coverage, test assertions, and fault detection capability.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Fine-Grained Test Minimization 1518461530778 Arash Vahabzadeh University of British Columbia arashvhb@ece.ubc.ca Andrea Stocco University of British Columbia astocco@ece.ubc.ca Ali Mesbah University of British Columbia amesbah@ece.ubc.ca test minization test reduction test redundancy test model As a software system evolves, its test suite can accumulate redundancies over time. Test minimization aims at removing redundant test cases. However, current techniques remove whole test cases from the test suite using test adequacy criteria, such as code coverage. This has two limitations, namely (1) by removing a whole test case the corresponding test assertions are also lost, which can inhibit test suite effectiveness, (2) the issue of partly redundant test cases, i.e., tests with redundant test statements, is ignored. We propose a novel approach for fine-grained test case minimization. Our analysis is based on the inference of a test suite model that enables automated test reorganization within test cases. It enables removing redundancies at the test statement level, while preserving the coverage and test assertions of the test suite. We evaluated our approach, implemented in a tool called Testler, on the test suites of 15 open source projects. Our analysis shows that over 4,639 (24%) of the tests in these test suites are partly redundant, with over 11,819 redundant test statements in total. Our results show that Testler removes 43% of the redundant test statements, reducing the number of partly redundant tests by 52%. As a result, test suite execution time is reduced by up to 37% (20% on average), while maintaining the original statement coverage, branch coverage, test assertions, and fault detection capability.",
              "pageNumber": 210,
              "isPageNumberRoman": false
            },
            {
              "id": "1DfMyaOZaGFv9XjXCHyldN",
              "type": "authorPaper",
              "text": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf",
              "extraLocations": [],
              "authorNames": "Breno Miranda (Federal University of Pernambuco), Emilio Cruciani (Gran Sasso Science Institute), Roberto Verdecchia (Gran Sasso Science Institute), Antonia Bertolino (ISTI - CNR)",
              "abstract": "Many test case prioritization criteria have been proposed for speeding up fault detection. Among them, similarity-based approaches give priority to the test cases that are the most dissimilar from those already selected. However, the proposed criteria do not scale up to handle the many thousands or even some millions test suite sizes of modern industrial systems and simple heuristics are used instead. We introduce the FAST family of test case prioritization techniques that radically changes this landscape by borrowing algorithms commonly exploited in the big data domain to find similar items. FAST techniques provide scalable similarity-based test case prioritization in both white-box and black-box fashion. The results from experimentation on real world C and Java subjects show that the fastest members of the family outperform other black-box approaches in efficiency with no significant impact on effectiveness, and also outperform white-box approaches, including greedy ones, if preparation time is not counted. A simulation study of scalability shows that one FAST technique can prioritize a million test cases in less than 20 minutes.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 FAST Approaches to Scalable Similarity-Based Test Case Prioritization 1518478759052 Breno Miranda Federal University of Pernambuco bafm@cin.ufpe.br Emilio Cruciani Gran Sasso Science Institute emilio.cruciani@gssi.it Roberto Verdecchia Gran Sasso Science Institute roberto.verdecchia@gssi.it Antonia Bertolino ISTI - CNR antonia.bertolino@isti.cnr.it locality sensitive hashing minhashing scalability similarity software testing test case prioritization Many test case prioritization criteria have been proposed for speeding up fault detection. Among them, similarity-based approaches give priority to the test cases that are the most dissimilar from those already selected. However, the proposed criteria do not scale up to handle the many thousands or even some millions test suite sizes of modern industrial systems and simple heuristics are used instead. We introduce the FAST family of test case prioritization techniques that radically changes this landscape by borrowing algorithms commonly exploited in the big data domain to find similar items. FAST techniques provide scalable similarity-based test case prioritization in both white-box and black-box fashion. The results from experimentation on real world C and Java subjects show that the fastest members of the family outperform other black-box approaches in efficiency with no significant impact on effectiveness, and also outperform white-box approaches, including greedy ones, if preparation time is not counted. A simulation study of scalability shows that one FAST technique can prioritize a million test cases in less than 20 minutes.",
              "pageNumber": 222,
              "isPageNumberRoman": false
            },
            {
              "id": "43gPRjNhzuB0hWeVsds9eI",
              "type": "authorPaper",
              "text": "Towards Refactoring-Aware Regression Test Selection",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BrWrDMhElZLM98cH2EedZ/6wu4To3mrpKod0nsChTY6L.pdf",
              "extraLocations": [],
              "authorNames": "Kaiyuan Wang (University of Texas at Austin), Chenguang Zhu (University of Texas at Austin), Ahmet Celik (University of Texas at Austin), Jongwook Kim (Iona College), Don Batory (University of Texas at Austin), Milos Gligoric (University of Texas at Austin)",
              "abstract": "Regression testing checks that recent project changes do not break previously working functionality. Although important, regression testing is costly when changes are frequent. Regression test selection (RTS) optimizes regression testing by running only tests whose results might be affected by a change. Traditionally, RTS collects dependencies (e.g., on files) for each test and skips the tests, at a new project revision, whose dependencies did not change. Existing RTS techniques do not differentiate behavior-preserving transformations (i.e., refactorings) from other code changes. As a result, tests are run more frequently than necessary. We present the first step towards a refactoring-aware RTS technique, dubbed Reks, which skips tests affected only by behavior-preserving changes. Reks defines rules to update the test dependencies without running the tests. To ensure that Reks does not hide any bug introduced by the refactoring engines, we integrate Reks only in the pre-submit testing phase, which happens on the developers' machines. We evaluate Reks by measuring the savings in the testing effort. Specifically, we reproduce 100 refactoring tasks performed by developers of 37 projects on GitHub. Our results show that Reks would not run, on average, 33% of available tests (that would be run by a refactoring-unaware RTS technique). Additionally, we systematically run 27 refactoring types on ten projects. The results, based on 74,160 refactoring tasks, show that Reks would not run, on average, 16% of tests (max: 97% and SD: 24%). Finally, our results show that the Reks update rules are efficient.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Towards Refactoring-Aware Regression Test Selection 1518632078509 Kaiyuan Wang University of Texas at Austin kaiyuanw@utexas.edu Chenguang Zhu University of Texas at Austin cgzhu@utexas.edu Ahmet Celik University of Texas at Austin ahmetcelik@utexas.edu Jongwook Kim Iona College jkim@iona.edu Don Batory University of Texas at Austin batory@cs.utexas.edu Milos Gligoric University of Texas at Austin gligoric@utexas.edu Regression test selection Behavior-preserving changes Reks Regression testing checks that recent project changes do not break previously working functionality. Although important, regression testing is costly when changes are frequent. Regression test selection (RTS) optimizes regression testing by running only tests whose results might be affected by a change. Traditionally, RTS collects dependencies (e.g., on files) for each test and skips the tests, at a new project revision, whose dependencies did not change. Existing RTS techniques do not differentiate behavior-preserving transformations (i.e., refactorings) from other code changes. As a result, tests are run more frequently than necessary. We present the first step towards a refactoring-aware RTS technique, dubbed Reks, which skips tests affected only by behavior-preserving changes. Reks defines rules to update the test dependencies without running the tests. To ensure that Reks does not hide any bug introduced by the refactoring engines, we integrate Reks only in the pre-submit testing phase, which happens on the developers' machines. We evaluate Reks by measuring the savings in the testing effort. Specifically, we reproduce 100 refactoring tasks performed by developers of 37 projects on GitHub. Our results show that Reks would not run, on average, 33% of available tests (that would be run by a refactoring-unaware RTS technique). Additionally, we systematically run 27 refactoring types on ten projects. The results, based on 74,160 refactoring tasks, show that Reks would not run, on average, 16% of tests (max: 97% and SD: 24%). Finally, our results show that the Reks update rules are efficient.",
              "pageNumber": 233,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 8: Open-Source Systems",
          "lineItems": [
            {
              "id": "5uEivKQ9DeMvEBr6OYiRNP",
              "type": "authorPaper",
              "text": "Inheritance Usage Patterns in Open-Source Systems",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7Jy5sWOqNS24NkSHFaTSEU/4OwDDeOZbvShYQOhNvgfpH.pdf",
              "extraLocations": [],
              "authorNames": "Jamie Stevenson (University of Strathclyde), Murray Wood (University of Strathclyde)",
              "abstract": "This research investigates how object-oriented inheritance is actually used in practice. The aim is to close the gap between inheritance guidance and inheritance practice. It is based on detailed analyses of 2440 inheritance hierarchies drawn from 14 open-source systems. The original contributions made by this paper concern pragmatic assessment of inheritance hierarchy design quality. The findings show that inheritance is very widely used but that most of the usage patterns that occur in practice are simple in structure. They are so simple that they may not require much inheritance-specific design consideration. On the other hand, the majority of classes defined using inheritance actually appear within a relatively small number of large, complex hierarchies. While some of these large hierarchies appear to have a consistent structure, often based on a problem domain model or a design pattern, others do not. Another contribution is that the quality of hierarchies, especially the large problematic ones, may be assessed in practice based on size, shape, and the definition and invocation of novel methods – all properties that can be detected automatically.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Inheritance Usage Patterns in Open-Source Systems 1518002346626 Jamie Stevenson University of Strathclyde jamie.stevenson@strath.ac.uk Murray Wood University of Strathclyde murray.wood@strath.ac.uk Object-oriented inheritance open source empirical design guidance This research investigates how object-oriented inheritance is actually used in practice. The aim is to close the gap between inheritance guidance and inheritance practice. It is based on detailed analyses of 2440 inheritance hierarchies drawn from 14 open-source systems. The original contributions made by this paper concern pragmatic assessment of inheritance hierarchy design quality. The findings show that inheritance is very widely used but that most of the usage patterns that occur in practice are simple in structure. They are so simple that they may not require much inheritance-specific design consideration. On the other hand, the majority of classes defined using inheritance actually appear within a relatively small number of large, complex hierarchies. While some of these large hierarchies appear to have a consistent structure, often based on a problem domain model or a design pattern, others do not. Another contribution is that the quality of hierarchies, especially the large problematic ones, may be assessed in practice based on size, shape, and the definition and invocation of novel methods – all properties that can be detected automatically.",
              "pageNumber": 245,
              "isPageNumberRoman": false
            },
            {
              "id": "VuJfp4DcbidR68QqaANBn",
              "type": "authorPaper",
              "text": "Almost There: A Study on Quasi-Contributors in Open-Source Software Projects",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1yorvAqsWddHbVWuLi4YZy/6NexNkxSmHQvVZ35CgSXP3.pdf",
              "extraLocations": [],
              "authorNames": "Igor Steinmacher (Federal University of Technology), Gustavo Pinto (Federal University of Pará), Igor Scaliante Wiese (Federal University of Technology), Marco Aurélio Gerosa (Northern Arizona University)",
              "abstract": "Recent studies suggest that well-known OSS projects struggle to find the needed workforce to continue evolving—in part because external developers fail to overcome their first contribution barriers. In this paper, we investigate how and why quasi-contributors (external developers who did not succeed in getting their contributions accepted to an OSS project) fail. To achieve our goal, we collected data from 21 popular, non-trivial GitHub projects, identified quasi-contributors, and analyzed their pull-requests. In addition, we conducted surveys with quasi-contributors, and projects' integrators, to understand their perceptions about nonacceptance.We found 10,099 quasi-contributors — about 70% of the total actual contributors — that submitted 12,367 non-accepted pull-requests. In five projects, we found more quasi-contributors than actual contributors. About one-third of the developers who took our survey disagreed with the nonacceptance, and around 30% declared the nonacceptance demotivated or prevented them from placing another pull-request. The main reasons for pull-request nonacceptance from the quasi-contributors' perspective were \"superseded/duplicated pull-request\" and \"mismatch between developer's and team's vision/opinion.\" A manual analysis of a representative sample of 263 pull-requests corroborated with this finding. We also found reasons related to the relationship with the community and lack of experience or commitment from the quasi-contributors. This empirical study is particularly relevant to those interested in fostering developers' participation and retention in OSS communities.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Almost There: A Study on Quasi-Contributors in Open-Source Software Projects 1518450746987 Igor Steinmacher Federal University of Technology igorfs@utfpr.edu.br Gustavo Pinto Federal University of Pará gpinto@ufpa.br Igor Scaliante Wiese Federal University of Technology igor@utfpr.edu.br Marco Aurélio Gerosa Northern Arizona University marco.gerosa@nau.edu pull-requests quasi contributors newcomers open source software Recent studies suggest that well-known OSS projects struggle to find the needed workforce to continue evolving—in part because external developers fail to overcome their first contribution barriers. In this paper, we investigate how and why quasi-contributors (external developers who did not succeed in getting their contributions accepted to an OSS project) fail. To achieve our goal, we collected data from 21 popular, non-trivial GitHub projects, identified quasi-contributors, and analyzed their pull-requests. In addition, we conducted surveys with quasi-contributors, and projects' integrators, to understand their perceptions about nonacceptance.We found 10,099 quasi-contributors — about 70% of the total actual contributors — that submitted 12,367 non-accepted pull-requests. In five projects, we found more quasi-contributors than actual contributors. About one-third of the developers who took our survey disagreed with the nonacceptance, and around 30% declared the nonacceptance demotivated or prevented them from placing another pull-request. The main reasons for pull-request nonacceptance from the quasi-contributors' perspective were \"superseded/duplicated pull-request\" and \"mismatch between developer's and team's vision/opinion.\" A manual analysis of a representative sample of 263 pull-requests corroborated with this finding. We also found reasons related to the relationship with the community and lack of experience or commitment from the quasi-contributors. This empirical study is particularly relevant to those interested in fostering developers' participation and retention in OSS communities.",
              "pageNumber": 256,
              "isPageNumberRoman": false
            },
            {
              "id": "5MLqippUVDCcdLZczOJw15",
              "type": "authorPaper",
              "text": "[Journal First] Analyzing a Decade of Linux System Calls",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3KxPueAJM16I029lwLaxWK/3ygzgkL0Nj7pWHNPX3Spik.pdf",
              "extraLocations": [],
              "authorNames": "Mojtaba Bagherzadeh (Queen's University), Nafiseh Kahani (Queen's University), Cor-Paul Bezemer (Queen's University), Ahmed E. Hassan (Queen's University), Juergen Dingel (Queen's University), James R. Cordy (Queen's University)",
              "abstract": "Over the past 25 years, thousands of developers have contributed more than 18 million lines of code (LOC) to the Linux kernel. As the Linux kernel forms the central part of various operating systems that are used by millions of users, the kernel must be continuously adapted to the changing demands and expectations of these users. The Linux kernel provides its services to an application through system calls. The combined set of all system calls forms the essential Application Programming Interface (API) through which an application interacts with the kernel. In this paper, we conduct an empirical study of 8,770 changes that were made to Linux system calls during the last decade (i.e., from April 2005 to December 2014). In particular, we study the size of the changes, and we manually identify the type of changes and bug fixes that were made. Our analysis provides an overview of the evolution of the Linux system calls over the last decade. We find that there was a considerable amount of technical debt in the kernel, that was addressed by adding a number of sibling calls (i.e., 26% of all system calls). In addition, we find that by far, the ptrace() and signal handling system calls are the most challenging to maintain. Our study can be used by developers who want to improve the design and ensure the successful evolution of their own kernel APIs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Analyzing a Decade of Linux System Calls 1516762914766 Mojtaba Bagherzadeh Queen's University mojtaba@cs.queensu.ca Nafiseh Kahani Queen's University kahani@cs.queensu.ca Cor-Paul Bezemer Queen's University bezemer@cs.queensu.ca Ahmed E. Hassan Queen's University ahmed@cs.queensu.ca Juergen Dingel Queen's University dingel@cs.queensu.ca James R. Cordy Queen's University cordy@cs.queensu.ca Linux kernel System calls API evolution Software evolution Over the past 25 years, thousands of developers have contributed more than 18 million lines of code (LOC) to the Linux kernel. As the Linux kernel forms the central part of various operating systems that are used by millions of users, the kernel must be continuously adapted to the changing demands and expectations of these users. The Linux kernel provides its services to an application through system calls. The combined set of all system calls forms the essential Application Programming Interface (API) through which an application interacts with the kernel. In this paper, we conduct an empirical study of 8,770 changes that were made to Linux system calls during the last decade (i.e., from April 2005 to December 2014). In particular, we study the size of the changes, and we manually identify the type of changes and bug fixes that were made. Our analysis provides an overview of the evolution of the Linux system calls over the last decade. We find that there was a considerable amount of technical debt in the kernel, that was addressed by adding a number of sibling calls (i.e., 26% of all system calls). In addition, we find that by far, the ptrace() and signal handling system calls are the most challenging to maintain. Our study can be used by developers who want to improve the design and ensure the successful evolution of their own kernel APIs.",
              "pageNumber": 267,
              "isPageNumberRoman": false
            },
            {
              "id": "6OtOq1oX3jhAzGmrJJ8H7Y",
              "type": "authorPaper",
              "text": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf",
              "extraLocations": [],
              "authorNames": "Christopher Vendome (The College of William and Mary), Daniel German (University of Victoria), Massimiliano Di Penta (University of Sannio), Gabriele Bavota (Universita della Svizzera italiana (USI)), Mario Linares-Vásquez (Universidad de los Andes), Denys Poshyvanyk (The College of William and Mary)",
              "abstract": "Software licenses dictate how source code or binaries can be modified, reused, and redistributed. In the case of open source projects, software licenses generally fit into two main categories, permissive and restrictive, depending on the degree to which they allow redistribution or modification under licenses different from the original one(s). Developers and organizations can also modify existing licenses, creating custom licenses with specific permissive/restrictive terms. Having such a variety of software licenses can create confusion among software developers, and can easily result in the introduction of licensing bugs, not necessarily limited to well-known license incompatibilities. In this work, we report a study aimed at characterizing licensing bugs by (i) building a catalog categorizing the types of licensing bugs developers and other stakeholders face, and (ii) understanding the implications licensing bugs have on the software projects they affect. The presented study is the result of the manual analysis of 1,200 discussions related to licensing bugs carried out in issue trackers and in five legal mailing lists of open source communities. Our findings uncover new types of licensing bugs not addressed in prior literature, and a detailed assessment of their implications.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 To Distribute or Not to Distribute? Why Licensing Bugs Matter 1518474507843 Christopher Vendome The College of William and Mary cvendome@cs.wm.edu Daniel German University of Victoria dmg@cs.uvic.ca Massimiliano Di Penta University of Sannio dipenta@unisannio.it Gabriele Bavota Universita della Svizzera italiana (USI) gabriele.bavota@usi.ch Mario Linares-Vásquez Universidad de los Andes m.linaresv@uniandes.edu.co Denys Poshyvanyk The College of William and Mary denys@cs.wm.edu Software Licenses Empirical Studies Open Source Practices Software licenses dictate how source code or binaries can be modified, reused, and redistributed. In the case of open source projects, software licenses generally fit into two main categories, permissive and restrictive, depending on the degree to which they allow redistribution or modification under licenses different from the original one(s). Developers and organizations can also modify existing licenses, creating custom licenses with specific permissive/restrictive terms. Having such a variety of software licenses can create confusion among software developers, and can easily result in the introduction of licensing bugs, not necessarily limited to well-known license incompatibilities. In this work, we report a study aimed at characterizing licensing bugs by (i) building a catalog categorizing the types of licensing bugs developers and other stakeholders face, and (ii) understanding the implications licensing bugs have on the software projects they affect. The presented study is the result of the manual analysis of 1,200 discussions related to licensing bugs carried out in issue trackers and in five legal mailing lists of open source communities. Our findings uncover new types of licensing bugs not addressed in prior literature, and a detailed assessment of their implications.",
              "pageNumber": 268,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 9: Test Generation",
          "lineItems": [
            {
              "id": "1Cy5RWZu6DeMuxUMsetzQJ",
              "type": "authorPaper",
              "text": "Augusto: Exploiting Popular Functionalities for the Generation of Semantic GUI Tests with Oracles",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4Bj4eXTd2JJsTSOvwfGyU3/3tjKiQP53XxdoUXP3NwW84.pdf",
              "extraLocations": [],
              "authorNames": "Leonardo Mariani (University of Milano-Bicocca), Mauro Pezzè (USI Università della Svizzera italiana), Daniele Zuddas (USI Università della Svizzera italiana)",
              "abstract": "Testing software applications by interacting with their graphical user interface (GUI) is an expensive and complex process. Current automatic test case generation techniques implement explorative approaches that, although producing useful test cases, have a limited capability of covering semantically relevant interactions, thus frequently missing important testing scenarios. These techniques typically interact with the available widgets following the structure of the GUI, without any guess about the functions that are executed. In this paper we propose Augusto, a test case generation technique that exploits a built-in knowledge of the semantics associated with popular and well-known functionalities, such as CRUD operations, to automatically generate effective test cases with automated functional oracles. Empirical results indicate that Augusto can reveal faults that cannot be revealed with state of the art techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Augusto: Exploiting Popular Functionalities for the Generation of Semantic GUI Tests with Oracles 1518467733593 Leonardo Mariani University of Milano-Bicocca mariani@disco.unimib.it Mauro Pezzè USI Università della Svizzera italiana mauro.pezze@usi.ch Daniele Zuddas USI Università della Svizzera italiana daniele.zuddas@usi.ch GUI testing automatic test case generation semantics oracles Testing software applications by interacting with their graphical user interface (GUI) is an expensive and complex process. Current automatic test case generation techniques implement explorative approaches that, although producing useful test cases, have a limited capability of covering semantically relevant interactions, thus frequently missing important testing scenarios. These techniques typically interact with the available widgets following the structure of the GUI, without any guess about the functions that are executed. In this paper we propose Augusto, a test case generation technique that exploits a built-in knowledge of the semantics associated with popular and well-known functionalities, such as CRUD operations, to automatically generate effective test cases with automated functional oracles. Empirical results indicate that Augusto can reveal faults that cannot be revealed with state of the art techniques.",
              "pageNumber": 280,
              "isPageNumberRoman": false
            },
            {
              "id": "0Lb2GnGSUx1bqJ8PAt2MW",
              "type": "authorPaper",
              "text": "Towards Optimal Concolic Testing",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5RrqD9bEgjcdclSy11URjg/2czbn8hdUhh9LxAyqsDHeh.pdf",
              "extraLocations": [],
              "authorNames": "Xinyu Wang (Zhejiang University), Jun Sun (Singapore University of Technology and Design), Zhenbang Chen (National University of Defense Technology), Peixin Zhang (Zhejiang University), Jingyi Wang (Singapore University of Technology and Design), Yun Lin (National University of Singapore)",
              "abstract": "Concolic testing integrates concrete execution (e.g., random testing) and symbolic execution for test case generation. It is shown to be more cost-effective than random testing or symbolic execution sometimes. A concolic testing strategy is a function which decides when to apply random testing or symbolic execution, and if it is the latter case, which program path to symbolically execute. Many heuristics-based strategies have been proposed. It is still an open problem what is the optimal concolic testing strategy. In this work, we make two contributions towards solving this problem. First, we show the optimal strategy can be defined based on the probability of program paths and the cost of constraint solving. The problem of identifying the optimal strategy is then reduced to a model checking problem of Markov Decision Processes with Costs. Secondly, in view of the complexity in identifying the optimal strategy, we design a greedy algorithm for approximating the optimal strategy. We conduct two sets of experiments. One is based on randomly generated models and the other is based on a set of C programs. The results show that existing heuristics have much room to improve and our greedy algorithm often outperforms existing heuristics.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Towards Optimal Concolic Testing 1518183000828 Xinyu Wang Zhejiang University wangxinyu@zju.edu.cn Jun Sun Singapore University of Technology and Design sunjun@sutd.edu.sg Zhenbang Chen National University of Defense Technology zbchen@nudt.edu.cn Peixin Zhang Zhejiang University zhangpeixin@zju.edu.cn Jingyi Wang Singapore University of Technology and Design jingyi_wang@mymail.sutd.edu.sg Yun Lin National University of Singapore llmhyy@gmail.com Concolic Testing Markov Chain Test Case Generation Concolic testing integrates concrete execution (e.g., random testing) and symbolic execution for test case generation. It is shown to be more cost-effective than random testing or symbolic execution sometimes. A concolic testing strategy is a function which decides when to apply random testing or symbolic execution, and if it is the latter case, which program path to symbolically execute. Many heuristics-based strategies have been proposed. It is still an open problem what is the optimal concolic testing strategy. In this work, we make two contributions towards solving this problem. First, we show the optimal strategy can be defined based on the probability of program paths and the cost of constraint solving. The problem of identifying the optimal strategy is then reduced to a model checking problem of Markov Decision Processes with Costs. Secondly, in view of the complexity in identifying the optimal strategy, we design a greedy algorithm for approximating the optimal strategy. We conduct two sets of experiments. One is based on randomly generated models and the other is based on a set of C programs. The results show that existing heuristics have much room to improve and our greedy algorithm often outperforms existing heuristics.",
              "pageNumber": 291,
              "isPageNumberRoman": false
            },
            {
              "id": "FoltyXL7IEuAlmlJxcgrQ",
              "type": "authorPaper",
              "text": "DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1l8C5zVwRhRYyqHFTOoOUf/7FmCxsCu5eXKr4EvBf6BPz.pdf",
              "extraLocations": [],
              "authorNames": "Yuchi Tian (University of Virginia), Kexin Pei (Columbia University), Suman Jana (Columbia University), Baishakhi Ray (University of Virginia)",
              "abstract": "Recent advances in Deep Neural Networks (DNNs) have led to the development of DNN-driven autonomous cars that, using sensors like camera, LiDAR, etc., can drive without any human intervention. Most major manufacturers including Tesla, GM, Ford, BMW, and Waymo/Google are working on building and testing different types of autonomous vehicles. The lawmakers of several US states including California, Texas, and New York have passed new legislation to fast-track the process of testing and deployment of autonomous vehicles on their roads. However, despite their spectacular progress, DNNs, just like traditional software, often demonstrate incorrect or unexpected corner-case behaviors that can lead to potentially fatal collisions. Several such real-world accidents involving autonomous cars have already happened including one which resulted in a fatality. Most existing testing techniques for DNN-driven vehicles are heavily dependent on the manual collection of test data under different driving conditions which become prohibitively expensive as the number of test conditions increases. In this paper, we design, implement, and evaluate DeepTest, a systematic testing tool for automatically detecting erroneous behaviors of DNN-driven vehicles that can potentially lead to fatal crashes. First, our tool is designed to automatically generated test cases leveraging real-world changes in driving conditions like rain, fog, lighting conditions, etc. DeepTest systematically explore different parts of the DNN logic by generating test inputs that maximize the numbers of activated neurons. DeepTest found thousands of erroneous behaviors under different realistic driving conditions (e.g., blurring, rain, fog, etc.) many of which lead to potentially fatal crashes in three top performing DNNs in the Udacity self-driving car challenge.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars 1518496243202 Yuchi Tian University of Virginia yuchi@virginia.edu Kexin Pei Columbia University kpei@cs.columbia.edu Suman Jana Columbia University suman@cs.columbia.edu Baishakhi Ray University of Virginia rayb@virginia.edu deep learning testing self-driving cars deep neural networks autonomous vehicle neuron coverage Recent advances in Deep Neural Networks (DNNs) have led to the development of DNN-driven autonomous cars that, using sensors like camera, LiDAR, etc., can drive without any human intervention. Most major manufacturers including Tesla, GM, Ford, BMW, and Waymo/Google are working on building and testing different types of autonomous vehicles. The lawmakers of several US states including California, Texas, and New York have passed new legislation to fast-track the process of testing and deployment of autonomous vehicles on their roads. However, despite their spectacular progress, DNNs, just like traditional software, often demonstrate incorrect or unexpected corner-case behaviors that can lead to potentially fatal collisions. Several such real-world accidents involving autonomous cars have already happened including one which resulted in a fatality. Most existing testing techniques for DNN-driven vehicles are heavily dependent on the manual collection of test data under different driving conditions which become prohibitively expensive as the number of test conditions increases. In this paper, we design, implement, and evaluate DeepTest, a systematic testing tool for automatically detecting erroneous behaviors of DNN-driven vehicles that can potentially lead to fatal crashes. First, our tool is designed to automatically generated test cases leveraging real-world changes in driving conditions like rain, fog, lighting conditions, etc. DeepTest systematically explore different parts of the DNN logic by generating test inputs that maximize the numbers of activated neurons. DeepTest found thousands of erroneous behaviors under different realistic driving conditions (e.g., blurring, rain, fog, etc.) many of which lead to potentially fatal crashes in three top performing DNNs in the Udacity self-driving car challenge.",
              "pageNumber": 303,
              "isPageNumberRoman": false
            },
            {
              "id": "30tRrSvZUW0HX0MU7H5Q5M",
              "type": "authorPaper",
              "text": "Precise Concolic Unit Testing of C Programs Using Extended Units and Symbolic Alarm Filtering",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1uzd3hVAOcYCmdupokp9Le/67onPmsxD7mwlYOuhSWoEK.pdf",
              "extraLocations": [],
              "authorNames": "Yunho Kim (Korea Advanced Institute of Science and Technology), Yunja Choi (Kyungpook National University), Moonzoo Kim (Korea Advanced Institute of Science and Technology)",
              "abstract": "Automated unit testing reduces manual effort to write unit test drivers/stubs and generate unit test inputs. However, automatically generated unit test drivers/stubs raise false alarms because they often over-approximate real contexts of a target function f and allow infeasible executions off. To solve this problem, we have developed a concolic unit testing technique CONBRIO. To provide realistic context to f, it constructs an extended unit of f that consists of f and closely relevant functions to f. Also, CONBRIO filters out a false alarm by checking feasibility of a corresponding symbolic execution path with regard to f 's symbolic calling contexts obtained by combining symbolic execution paths of f 's closely related predecessor functions. In the experiments on the crash bugs of 15 real-world C programs, CONBRIO shows both high bug detection ability (i.e. 91.0% of the target bugs detected) and high precision (i.e. a true to false alarm ratio is 1:4.5). Also, CONBRIO detects 14 new bugs in 9 target C programs studied in papers on crash bug detection techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Precise Concolic Unit Testing of C Programs Using Extended Units and Symbolic Alarm Filtering 1518272890204 Yunho Kim Korea Advanced Institute of Science and Technology yunho.kim03@gmail.com Yunja Choi Kyungpook National University yuchoi76@knu.ac.kr Moonzoo Kim Korea Advanced Institute of Science and Technology moonzoo@cs.kaist.ac.kr automated unit testing unit test driver/stub generation dynamic symbolic execution false alarm reduction Automated unit testing reduces manual effort to write unit test drivers/stubs and generate unit test inputs. However, automatically generated unit test drivers/stubs raise false alarms because they often over-approximate real contexts of a target function f and allow infeasible executions off. To solve this problem, we have developed a concolic unit testing technique CONBRIO. To provide realistic context to f, it constructs an extended unit of f that consists of f and closely relevant functions to f. Also, CONBRIO filters out a false alarm by checking feasibility of a corresponding symbolic execution path with regard to f 's symbolic calling contexts obtained by combining symbolic execution paths of f 's closely related predecessor functions. In the experiments on the crash bugs of 15 real-world C programs, CONBRIO shows both high bug detection ability (i.e. 91.0% of the target bugs detected) and high precision (i.e. a true to false alarm ratio is 1:4.5). Also, CONBRIO detects 14 new bugs in 9 target C programs studied in papers on crash bug detection techniques.",
              "pageNumber": 315,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 10: Program Reduction Techniques",
          "lineItems": [
            {
              "id": "27EM1yOcl06VoUdRoAY7Qo",
              "type": "authorPaper",
              "text": "Spatio-Temporal Context Reduction: A Pointer-Analysis-Based Static Approach for Detecting Use-After-Free Vulnerabilities",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BH1zWphsTffq4XQps07wg/5yHiAA3ajLarfEkXKmgne7.pdf",
              "extraLocations": [],
              "authorNames": "Hua Yan (University of New South Wales), Yulei Sui (University of Technology Sydney), Shiping Chen (Data61), Jingling Xue (University of New South Wales)",
              "abstract": "Zero-day Use-After-Free (UAF) vulnerabilities are increasingly popular and highly dangerous, but few mitigations exist. We introduce a new pointer-analysis-based static analysis, CRed, for finding UAF bugs in multi-MLOC C source code efficiently and effectively. Cred achieves this by making three advances: (i) a spatio-temporal context reduction technique for scaling down soundly and precisely the exponential number of contexts that would otherwise be considered at a pair of free and use sites, (ii) a multi-stage analysis for filtering out false alarms efficiently, and (iii) a path-sensitive demand-driven approach for finding the points-to information required. We have implemented CRed in LLVM-3.8.0 and compared it with four different state-of-the-art static tools: CBMC (model checking), Clang (abstract interpretation), Coccinelle (pattern matching), and Supa (pointer analysis) using all the C test cases in Juliet Test Suite (JTS) and 10 open-source C applications. For the ground-truth validated with JTS, CRed detects all the 138 known UAF bugs as CBMC and Supa do while Clang and Coccinelle miss some bugs, with no false alarms from any tool. For practicality validated with the 10 applications (totaling 3+ MLOC), CRed reports 132 warnings including 85 bugs in 7.6 hours while the existing tools are either unscalable by terminating within 3 days only for one application (CBMC) or impractical by finding virtually no bugs (Clang and Coccinelle) or issuing an excessive number of false alarms (Supa).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Spatio-Temporal Context Reduction: A Pointer-Analysis-Based Static Approach for Detecting Use-After-Free Vulnerabilities 1517966313686 Hua Yan University of New South Wales yanhuacs@gmail.com Yulei Sui University of Technology Sydney yulei.sui@uts.edu.au Shiping Chen Data61 Shiping.Chen@data61.csiro.au Jingling Xue University of New South Wales j.xue@unsw.edu.au use after free program analysis bug detection Zero-day Use-After-Free (UAF) vulnerabilities are increasingly popular and highly dangerous, but few mitigations exist. We introduce a new pointer-analysis-based static analysis, CRed, for finding UAF bugs in multi-MLOC C source code efficiently and effectively. Cred achieves this by making three advances: (i) a spatio-temporal context reduction technique for scaling down soundly and precisely the exponential number of contexts that would otherwise be considered at a pair of free and use sites, (ii) a multi-stage analysis for filtering out false alarms efficiently, and (iii) a path-sensitive demand-driven approach for finding the points-to information required. We have implemented CRed in LLVM-3.8.0 and compared it with four different state-of-the-art static tools: CBMC (model checking), Clang (abstract interpretation), Coccinelle (pattern matching), and Supa (pointer analysis) using all the C test cases in Juliet Test Suite (JTS) and 10 open-source C applications. For the ground-truth validated with JTS, CRed detects all the 138 known UAF bugs as CBMC and Supa do while Clang and Coccinelle miss some bugs, with no false alarms from any tool. For practicality validated with the 10 applications (totaling 3+ MLOC), CRed reports 132 warnings including 85 bugs in 7.6 hours while the existing tools are either unscalable by terminating within 3 days only for one application (CBMC) or impractical by finding virtually no bugs (Clang and Coccinelle) or issuing an excessive number of false alarms (Supa).",
              "pageNumber": 327,
              "isPageNumberRoman": false
            },
            {
              "id": "2Upnn3eXYoh4q9WsyImob",
              "type": "authorPaper",
              "text": "Program Splicing",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3GzvLDJDyvhGV814ZqQjMV/5PljSrUUNExRaRT9kY641T.pdf",
              "extraLocations": [],
              "authorNames": "Yanxin Lu (Rice University), Swarat Chaudhuri (Rice University), Chris Jermaine (Rice University), David Melski (Grammatech Inc.)",
              "abstract": "We introduce program splicing, a programming methodology that aims to automate the work ow of copying, pasting, and modifying code available online. Here, the programmer starts by writing a \"draft\" that mixes un nished code, natural language comments, and correctness requirements. A program synthesizer that interacts with a large, searchable database of program snippets is used to automatically complete the draft into a program that meets the re-quirements. The synthesis process happens in two stages. First, the synthesizer identi es a small number of programs in the database that are relevant to the synthesis task. Next it uses an enumerative search to systematically ll the draft with expressions and statements from these relevant programs. The resulting program is returned to the programmer, who can modify it and possibly invoke additional rounds of synthesis. We present an implementation of program splicing, called Splicer, for the Java programming language. Splicer uses a corpus of over 3.5 million procedures from an open-source software repository. Our evaluation uses the system in a suite of everyday programming tasks, and includes a comparison with a state-of-the-art competing approach as well as a user study. The results point to the broad scope and scalability of program splicing and indicate that the approach can signi cantly boost programmer productivity.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Program Splicing 1518543671994 Yanxin Lu Rice University yanxin.lu@rice.edu Swarat Chaudhuri Rice University swarat@rice.edu Chris Jermaine Rice University cmj4@rice.edu David Melski Grammatech Inc. melski@grammatech.com Big Data Program Synthesis We introduce program splicing, a programming methodology that aims to automate the work ow of copying, pasting, and modifying code available online. Here, the programmer starts by writing a \"draft\" that mixes un nished code, natural language comments, and correctness requirements. A program synthesizer that interacts with a large, searchable database of program snippets is used to automatically complete the draft into a program that meets the re-quirements. The synthesis process happens in two stages. First, the synthesizer identi es a small number of programs in the database that are relevant to the synthesis task. Next it uses an enumerative search to systematically ll the draft with expressions and statements from these relevant programs. The resulting program is returned to the programmer, who can modify it and possibly invoke additional rounds of synthesis. We present an implementation of program splicing, called Splicer, for the Java programming language. Splicer uses a corpus of over 3.5 million procedures from an open-source software repository. Our evaluation uses the system in a suite of everyday programming tasks, and includes a comparison with a state-of-the-art competing approach as well as a user study. The results point to the broad scope and scalability of program splicing and indicate that the approach can signi cantly boost programmer productivity.",
              "pageNumber": 338,
              "isPageNumberRoman": false
            },
            {
              "id": "2wUfivqCVjSqtV01i0rKjN",
              "type": "authorPaper",
              "text": "Chopped Symbolic Execution",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4dB4MqN33HWSe06nX7cqo8/4A2sy5Nn535KnCMdVFvrXE.pdf",
              "extraLocations": [],
              "authorNames": "Andrea Mattavelli (Imperial College London), Noam Rinetzky (Tel Aviv University), Cristian Cadar (Imperial College London)",
              "abstract": "Symbolic execution is a powerful program analysis technique that systematically explores multiple program paths. However, despite important technical advances, symbolic execution often struggles to reach deep parts of the code due to the well-known path explosion problem and constraint solving limitations. In this paper, we propose chopped symbolic execution, a novel form of symbolic execution that allows users to specify uninter-esting parts of the code to exclude during the analysis, thus only targeting the exploration to paths of importance. However, the excluded parts are not summarily ignored, as this may lead to both false positives and false negatives. Instead, they are executed lazily, when their effect may be observable by code under anal-ysis. Chopped symbolic execution leverages various on-demand static analyses at runtime to automatically exclude code fragments while resolving their side effects, thus avoiding expensive manual annotations and imprecision. Our preliminary results show that the approach can effectively improve the effectiveness of symbolic execution in several different scenarios, including failure reproduction and test suite augmentation.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Chopped Symbolic Execution 1518473562421 Andrea Mattavelli Imperial College London amattave@imperial.ac.uk Noam Rinetzky Tel Aviv University maon@cs.tau.ac.il Cristian Cadar Imperial College London c.cadar@imperial.ac.uk Symbolic execution Static analysis Program slicing Symbolic execution is a powerful program analysis technique that systematically explores multiple program paths. However, despite important technical advances, symbolic execution often struggles to reach deep parts of the code due to the well-known path explosion problem and constraint solving limitations. In this paper, we propose chopped symbolic execution, a novel form of symbolic execution that allows users to specify uninter-esting parts of the code to exclude during the analysis, thus only targeting the exploration to paths of importance. However, the excluded parts are not summarily ignored, as this may lead to both false positives and false negatives. Instead, they are executed lazily, when their effect may be observable by code under anal-ysis. Chopped symbolic execution leverages various on-demand static analyses at runtime to automatically exclude code fragments while resolving their side effects, thus avoiding expensive manual annotations and imprecision. Our preliminary results show that the approach can effectively improve the effectiveness of symbolic execution in several different scenarios, including failure reproduction and test suite augmentation.",
              "pageNumber": 350,
              "isPageNumberRoman": false
            },
            {
              "id": "5g31z9diIxi34mB6Hvwe09",
              "type": "authorPaper",
              "text": "Perses: Syntax-Guided Program Reduction",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7EGalavwAIiq3Xl1qGd5XK/4fupulIFoGpbHOylSj3kFV.pdf",
              "extraLocations": [],
              "authorNames": "Chengnian Sun (University of California Davis), Yuanbo Li (University of California Davis), Qirun Zhang (University of California Davis), Tianxiao Gu (University of California Davis), Zhendong Su (University of California Davis)",
              "abstract": "Given a program P that exhibits a certain property &#x03C8; (e.g., a C program that crashes GCC when it is being compiled), the goal of program reduction is to minimize P to a smaller variant P? that still exhibits the same property, i.e., &#x03C8;(P'). Program reduction is important and widely demanded for testing and debugging. For example, all compiler/interpreter development projects need effective program reduction to minimize failure-inducing test programs to ease debugging. However, state-of-the-art program reduction techniques — notably Delta Debugging (DD), Hierarchical Delta Debugging (HDD), and C-Reduce — do not perform well in terms of speed (reduction time) and quality (size of reduced programs), or are highly customized for certain languages and thus lack generality. This paper presents Perses, a novel framework for effective, efficient, and general program reduction. The key insight is to exploit, in a general manner, the formal syntax of the programs under reduction and ensure that each reduction step considers only smaller, syntactically valid variants to avoid futile efforts on syntactically invalid variants. Our framework supports not only deletion (as for DD and HDD), but also general, effective program transformations. We have designed and implemented Perses, and evaluated it for two language settings: C and Java. Our evaluation results on 20 C programs triggering bugs in GCC and Clang demonstrate Perses's strong practicality compared to the state-of-the-art: (1) smaller size — Perses's results are respectively 2% and 45% in size of those from DD and HDD; and (2) shorter reduction time — Perses takes 23% and 47% time taken by DD and HDD respectively. Even when compared to the highly customized and optimized C-Reduce for C/C++, Perses takes only 38-60% reduction time.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Perses: Syntax-Guided Program Reduction 1518473877664 Chengnian Sun University of California Davis cnsun@ucdavis.edu Yuanbo Li University of California Davis yboli@ucdavis.edu Qirun Zhang University of California Davis qrzhang@ucdavis.edu Tianxiao Gu University of California Davis txgu@ucdavis.edu Zhendong Su University of California Davis su@ucdavis.edu program reduction delta debugging debugging Given a program P that exhibits a certain property &#x03C8; (e.g., a C program that crashes GCC when it is being compiled), the goal of program reduction is to minimize P to a smaller variant P? that still exhibits the same property, i.e., &#x03C8;(P'). Program reduction is important and widely demanded for testing and debugging. For example, all compiler/interpreter development projects need effective program reduction to minimize failure-inducing test programs to ease debugging. However, state-of-the-art program reduction techniques — notably Delta Debugging (DD), Hierarchical Delta Debugging (HDD), and C-Reduce — do not perform well in terms of speed (reduction time) and quality (size of reduced programs), or are highly customized for certain languages and thus lack generality. This paper presents Perses, a novel framework for effective, efficient, and general program reduction. The key insight is to exploit, in a general manner, the formal syntax of the programs under reduction and ensure that each reduction step considers only smaller, syntactically valid variants to avoid futile efforts on syntactically invalid variants. Our framework supports not only deletion (as for DD and HDD), but also general, effective program transformations. We have designed and implemented Perses, and evaluated it for two language settings: C and Java. Our evaluation results on 20 C programs triggering bugs in GCC and Clang demonstrate Perses's strong practicality compared to the state-of-the-art: (1) smaller size — Perses's results are respectively 2% and 45% in size of those from DD and HDD; and (2) shorter reduction time — Perses takes 23% and 47% time taken by DD and HDD respectively. Even when compared to the highly customized and optimized C-Reduce for C/C++, Perses takes only 38-60% reduction time.",
              "pageNumber": 361,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 11: Security, Privacy and Trust I",
          "lineItems": [
            {
              "id": "4RQerwj3sVRual3nVQkDI1",
              "type": "authorPaper",
              "text": "Secure Coding Practices in Java: Challenges and Vulnerabilities",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3o2zXw08GLZHHzo4KXdBon/1sIzAZUbSd0wvJ0Yz0jFNw.pdf",
              "extraLocations": [],
              "authorNames": "Na Meng (Virginia Tech), Stefan Nagy (Virginia Tech), Danfeng (Daphne) Yao (Virginia Tech), Wenjie Zhuang (Virginia Tech), Gustavo Arango-Argoty (Virginia Tech)",
              "abstract": "The Java platform and its third-party libraries provide useful features to facilitate secure coding. However, misusing them can cost developers time and effort, as well as introduce security vulnerabilities in software. We conducted an empirical study on StackOverflow posts, aiming to understand developers' concerns on Java secure coding, their programming obstacles, and insecure coding practices. We observed a wide adoption of the authentication and authorization features provided by Spring Security—a third-party framework designed to secure enterprise applications. We found that programming challenges are usually related to APIs or libraries, including the complicated cross-language data handling of cryptography APIs, and the complex Java-based or XML-based approaches to configure Spring Security. In addition, we reported multiple security vulnerabilities in the suggested code of accepted answers on the StackOverflow forum. The vulnerabilities included disabling the default protection against Cross-Site Request Forgery (CSRF) attacks, breaking SSL/TLS security through bypassing certificate validation, and using insecure cryptographic hash functions. Our findings reveal the insufficiency of secure coding assistance and documentation, as well as the huge gap between security theory and coding practices.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Secure Coding Practices in Java: Challenges and Vulnerabilities 1517237503203 Na Meng Virginia Tech nm8247@vt.edu Stefan Nagy Virginia Tech snagy2@vt.edu Danfeng (Daphne) Yao Virginia Tech danfeng@vt.edu Wenjie Zhuang Virginia Tech kaito@vt.edu Gustavo Arango-Argoty Virginia Tech gustavo1@vt.edu Secure coding Spring security CSRF SSL/TLS certificate validation cryptographic hash functions authentication authorization StackOverflow cryptography The Java platform and its third-party libraries provide useful features to facilitate secure coding. However, misusing them can cost developers time and effort, as well as introduce security vulnerabilities in software. We conducted an empirical study on StackOverflow posts, aiming to understand developers' concerns on Java secure coding, their programming obstacles, and insecure coding practices. We observed a wide adoption of the authentication and authorization features provided by Spring Security—a third-party framework designed to secure enterprise applications. We found that programming challenges are usually related to APIs or libraries, including the complicated cross-language data handling of cryptography APIs, and the complex Java-based or XML-based approaches to configure Spring Security. In addition, we reported multiple security vulnerabilities in the suggested code of accepted answers on the StackOverflow forum. The vulnerabilities included disabling the default protection against Cross-Site Request Forgery (CSRF) attacks, breaking SSL/TLS security through bypassing certificate validation, and using insecure cryptographic hash functions. Our findings reveal the insufficiency of secure coding assistance and documentation, as well as the huge gap between security theory and coding practices.",
              "pageNumber": 372,
              "isPageNumberRoman": false
            },
            {
              "id": "4krJ0LeCceLv6xHyDCa0ur",
              "type": "authorPaper",
              "text": "EnMobile: Entity-Based Characterization and Analysis of Mobile Malware",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Z7koA2jFooE8hHRKnmcU8/6vKkdMpZxRA1eH4TYnCsvA.pdf",
              "extraLocations": [],
              "authorNames": "Wei Yang (University of Illinois at Urbana-Champaign), Mukul Prasad (Fujitsu Laboratories of America), Tao Xie (University of Illinois at Urbana-Champaign)",
              "abstract": "Modern mobile malware tend to conduct their malicious exploits through sophisticated patterns of interactions that involve multiple entities, e.g., the mobile platform, human users, and network locations. Such malware often evade the detection by existing approaches due to their limited expressiveness and accuracy in characterizing and detecting these malware. To address these issues, in this paper, we recognize entities in the environment of an app, the app's interactions with such entities, and the provenance of these interactions, i.e., the intent and ownership of each interaction, as the key to comprehensively characterizing modern mobile apps, and mobile malware in particular. With this insight, we propose a novel approach named EnMobile including a new entity-based characterization of mobile-app behaviors, and corresponding static analyses, to accurately characterize an app's interactions with entities. We implement EnMobile and provide a practical application of EnMobile in a signature-based scheme for detecting mobile malware. We evaluate EnMobile on a set of 6614 apps consisting of malware from Genome and Drebin along with benign apps from Google Play. Our results show that EnMobile detects malware with substantially higher precision and recall than four state-of-the-art approaches, namely Apposcopy, Drebin, MUDFLOW, and AppContext.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 EnMobile: Entity-Based Characterization and Analysis of Mobile Malware 1518483817432 Wei Yang University of Illinois at Urbana-Champaign weiyang3@illinois.edu Mukul Prasad Fujitsu Laboratories of America mukul@us.fujitsu.com Tao Xie University of Illinois at Urbana-Champaign taoxie@illinois.edu Program Analysis Mobile Security Modern mobile malware tend to conduct their malicious exploits through sophisticated patterns of interactions that involve multiple entities, e.g., the mobile platform, human users, and network locations. Such malware often evade the detection by existing approaches due to their limited expressiveness and accuracy in characterizing and detecting these malware. To address these issues, in this paper, we recognize entities in the environment of an app, the app's interactions with such entities, and the provenance of these interactions, i.e., the intent and ownership of each interaction, as the key to comprehensively characterizing modern mobile apps, and mobile malware in particular. With this insight, we propose a novel approach named EnMobile including a new entity-based characterization of mobile-app behaviors, and corresponding static analyses, to accurately characterize an app's interactions with entities. We implement EnMobile and provide a practical application of EnMobile in a signature-based scheme for detecting mobile malware. We evaluate EnMobile on a set of 6614 apps consisting of malware from Genome and Drebin along with benign apps from Google Play. Our results show that EnMobile detects malware with substantially higher precision and recall than four state-of-the-art approaches, namely Apposcopy, Drebin, MUDFLOW, and AppContext.",
              "pageNumber": 384,
              "isPageNumberRoman": false
            },
            {
              "id": "YuKbtDiHS4QHi72DzV4lT",
              "type": "authorPaper",
              "text": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf",
              "extraLocations": [],
              "authorNames": "Katsiaryna Labunets (Delft University of Technology), Fabio Massacci (University of Trento), Federica Paci (University of Southampton), Sabrina Marczak (Pontifícia Universidade Catòlica do Rio Grande do Sul), Flávio Moreira de Oliveira (Pontifícia Universidade Catòlica do Rio Grande do Sul)",
              "abstract": "Context: Tabular and graphical representations are used to communicate security risk assessments for IT systems. However, there is no consensus on which type of representation better supports the comprehension of risks (such as the relationships between threats, vulnerabilities and security controls). Vessey's cognitive fit theory predicts that graphs should be better because they capture spatial relationships. Method: We report the results of two studies performed in two countries with 69 and 83 participants respectively, in which we assessed the effectiveness of tabular and graphical representations concerning the extraction of correct information about security risks. Results: Participants who applied tabular risk models gave more precise and complete answers to the comprehension questions when requested to find simple and complex information about threats, vulnerabilities, or other elements of the risk models. Conclusions: Our findings can be explained by Vessey's cognitive fit theory as tabular models implicitly capture elementary linear spatial relationships. Interest for ICSE: It is almost taken for granted in Software Engineering that graphical-, diagram-based models are \"the\" way to go (e.g., the SE Body of Knowledge). This paper provides some experimental-based doubts that this might not always be the case. It will provide an interesting debate that might ripple to traditional requirements and design notations outside security.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations 1518446887747 Katsiaryna Labunets Delft University of Technology k.labunets@tudelft.nl Fabio Massacci University of Trento fabio.massacci@unitn.it Federica Paci University of Southampton F.M.Paci@soton.ac.uk Sabrina Marczak Pontifícia Universidade Catòlica do Rio Grande do Sul sabrina.marczak@pus.br Flávio Moreira de Oliveira Pontifícia Universidade Catòlica do Rio Grande do Sul flavio.oliveira@pucrs.br Empirical Study Security Risk Assessment Risk Modeling Comprehensibility Cognitive Fit Context: Tabular and graphical representations are used to communicate security risk assessments for IT systems. However, there is no consensus on which type of representation better supports the comprehension of risks (such as the relationships between threats, vulnerabilities and security controls). Vessey's cognitive fit theory predicts that graphs should be better because they capture spatial relationships. Method: We report the results of two studies performed in two countries with 69 and 83 participants respectively, in which we assessed the effectiveness of tabular and graphical representations concerning the extraction of correct information about security risks. Results: Participants who applied tabular risk models gave more precise and complete answers to the comprehension questions when requested to find simple and complex information about threats, vulnerabilities, or other elements of the risk models. Conclusions: Our findings can be explained by Vessey's cognitive fit theory as tabular models implicitly capture elementary linear spatial relationships. Interest for ICSE: It is almost taken for granted in Software Engineering that graphical-, diagram-based models are \"the\" way to go (e.g., the SE Body of Knowledge). This paper provides some experimental-based doubts that this might not always be the case. It will provide an interesting debate that might ripple to traditional requirements and design notations outside security.",
              "pageNumber": 395,
              "isPageNumberRoman": false
            },
            {
              "id": "5U9we1fK9AJblAlYuWFNf9",
              "type": "authorPaper",
              "text": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf",
              "extraLocations": [],
              "authorNames": "Irit Hadar (University of Haifa), Tomer Hasson (University of Haifa), Oshrat Ayalon (Tel Aviv University), Eran Toch (Tel Aviv University), Michael Birnhack (Tel Aviv University), Sofia Sherman (University of Haifa), Arod Balissa (Tel Aviv University)",
              "abstract": "Privacy by design (PbD) is a policy measure that guides software developers to apply inherent solutions to achieve better privacy protection. For PbD to be a viable option, it is important to understand developers' perceptions, interpretation and practices as to informational privacy (or data protection). To this end, we conducted in-depth interviews with 27 developers from different domains, who practice software design. Grounded analysis of the data revealed an interplay between several different forces affecting the way in which developers handle privacy concerns. Borrowing the schema of Social Cognitive Theory (SCT), we classified and analyzed the cognitive, organizational and behavioral factors that play a role in developers' privacy decision making. Our findings indicate that developers use the vocabulary of data security to approach privacy challenges, and that this vocabulary limits their perceptions of privacy mainly to third-party threats coming from outside of the organization; that organizational privacy climate is a powerful means for organizations to guide developers toward particular practices of privacy; and that software architectural patterns frame privacy solutions that are used throughout the development process, possibly explaining developers' preference of policy-based solutions to architectural solutions. Further, we show, through the use of the SCT schema for framing the findings of this study, how a theoretical model of the factors that influence developers' privacy practices can be conceptualized and used as a guide for future research toward effective implementation of PbD.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Privacy by Designers: Software Developers' Privacy Mindset 1517567399656 Irit Hadar University of Haifa hadari@is.haifa.ac.il Tomer Hasson University of Haifa tomer.hasson@gmail.com Oshrat Ayalon Tel Aviv University oshratra@post.tau.ac.il Eran Toch Tel Aviv University erant@post.tau.ac.il Michael Birnhack Tel Aviv University birnhack@post.tau.ac.il Sofia Sherman University of Haifa sonya.sherman@gmail.com Arod Balissa Tel Aviv University arodba@gmail.com Data protection Privacy Privacy by design Qualitative research Grounded analysis Social cognitive theory Organizational climate Privacy by design (PbD) is a policy measure that guides software developers to apply inherent solutions to achieve better privacy protection. For PbD to be a viable option, it is important to understand developers' perceptions, interpretation and practices as to informational privacy (or data protection). To this end, we conducted in-depth interviews with 27 developers from different domains, who practice software design. Grounded analysis of the data revealed an interplay between several different forces affecting the way in which developers handle privacy concerns. Borrowing the schema of Social Cognitive Theory (SCT), we classified and analyzed the cognitive, organizational and behavioral factors that play a role in developers' privacy decision making. Our findings indicate that developers use the vocabulary of data security to approach privacy challenges, and that this vocabulary limits their perceptions of privacy mainly to third-party threats coming from outside of the organization; that organizational privacy climate is a powerful means for organizations to guide developers toward particular practices of privacy; and that software architectural patterns frame privacy solutions that are used throughout the development process, possibly explaining developers' preference of policy-based solutions to architectural solutions. Further, we show, through the use of the SCT schema for framing the findings of this study, how a theoretical model of the factors that influence developers' privacy practices can be conceptualized and used as a guide for future research toward effective implementation of PbD.",
              "pageNumber": 396,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 12: Empirical Software Engineering",
          "lineItems": [
            {
              "id": "5YeuZlE1MD63I6SNje9ctC",
              "type": "authorPaper",
              "text": "Does the Propagation of Artifact Changes Across Tasks Reflect Work Dependencies?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/k7JQInKioHiNAlLceXGcq/4Zizzu8Ywfs4vylMPr16Jt.pdf",
              "extraLocations": [],
              "authorNames": "Christoph Mayr-Dorn (Johannes Kepler University), Alexander Egyed (Johannes Kepler University)",
              "abstract": "Developers commonly define tasks to help coordinate software development efforts–-whether they be feature implementation, refactoring, or bug fixes. Developers establish links between tasks to express implicit dependencies that needs explicit handling–-dependencies that often require the developers responsible for a given task to assess how changes in a linked task affect their own work and vice versa (i.e., change propagation). While seemingly useful, it is unknown if change propagation indeed coincides with task links. No study has investigated to what extent change propagation actually occurs between task pairs and whether it is able to serve as a metric for characterizing the underlying task dependency. In this paper, we study the temporal relationship between developer reading and changing of source code in relationship to task links. We identify seven situations that explain the varying correlation of change propagation with linked task pairs and find six motifs describing when change propagation occurs between non-linked task pairs. Our paper demonstrates that task links are indeed useful for recommending which artifacts to monitor for changes, which developers to involve in a task, or which tasks to inspect.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Does the Propagation of Artifact Changes Across Tasks Reflect Work Dependencies? 1518435461703 Christoph Mayr-Dorn Johannes Kepler University christoph.mayr-dorn@jku.at Alexander Egyed Johannes Kepler University alexander.egyed@jku.at task links change propagation bugzilla mylyn empirical study Developers commonly define tasks to help coordinate software development efforts–-whether they be feature implementation, refactoring, or bug fixes. Developers establish links between tasks to express implicit dependencies that needs explicit handling–-dependencies that often require the developers responsible for a given task to assess how changes in a linked task affect their own work and vice versa (i.e., change propagation). While seemingly useful, it is unknown if change propagation indeed coincides with task links. No study has investigated to what extent change propagation actually occurs between task pairs and whether it is able to serve as a metric for characterizing the underlying task dependency. In this paper, we study the temporal relationship between developer reading and changing of source code in relationship to task links. We identify seven situations that explain the varying correlation of change propagation with linked task pairs and find six motifs describing when change propagation occurs between non-linked task pairs. Our paper demonstrates that task links are indeed useful for recommending which artifacts to monitor for changes, which developers to involve in a task, or which tasks to inspect.",
              "pageNumber": 397,
              "isPageNumberRoman": false
            },
            {
              "id": "Bjxl1oGZ2HkEvNyfmCJNt",
              "type": "authorPaper",
              "text": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf",
              "extraLocations": [],
              "authorNames": "Lingling Fan (East China Normal University), Ting Su (Nanyang Technological University), Sen Chen (East China Normal University), Guozhu Meng (Chinese Academy of Sciences), Yang Liu (Nanyang Technological University), Lihua Xu (East China Normal University), Geguang Pu (East China Normal University), Zhendong Su (University of California)",
              "abstract": "Mobile apps have become ubiquitous. For app developers, it is a key priority to ensure their apps' correctness and reliability. However, many apps still suffer from occasional to frequent crashes, weakening their competitive edge. Large-scale, deep analyses of the characteristics of real-world app crashes can provide useful insights to guide developers, or help improve testing and analysis tools. However, such studies do not exist — this paper fills this gap. Over a four-month long effort, we have collected 16,245 unique exception traces from 2,486 open-source Android apps, and observed that framework-specific exceptions account for the majority of these crashes. We then extensively investigated the 8,243 framework-specific exceptions (which took six person-months): (1) identifying their characteristics (e.g., manifestation locations, common fault categories), (2) evaluating their manifestation via state-of-the-art bug detection techniques, and (3) reviewing their fixes. Besides the insights they provide, these findings motivate and enable follow-up research on mobile apps, such as bug detection, fault localization and patch generation. In addition, to demonstrate the utility of our findings, we have optimized Stoat, a dynamic testing tool, and implemented ExLocator, an exception localization tool, for Android apps. Stoat is able to quickly uncover three previously-unknown, confirmed/fixed crashes in Gmail and Google+; ExLocator is capable of precisely locating the root causes of identified exceptions in real-world apps. Our substantial dataset is made publicly available to share with and benefit the community.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Large-Scale Analysis of Framework-Specific Exceptions in Android Apps 1517980513147 Lingling Fan East China Normal University ecnujanefan@gmail.com Ting Su Nanyang Technological University tsuletgo@gmail.com Sen Chen East China Normal University ecnuchensen@gmail.com Guozhu Meng Chinese Academy of Sciences gzmeng@ntu.edu.sg Yang Liu Nanyang Technological University yangliu@ntu.edu.sg Lihua Xu East China Normal University lhxu@cs.ecnu.edu.cn Geguang Pu East China Normal University ggpu@sei.ecnu.edu.cn Zhendong Su University of California su@cs.ucdavis.edu Empirical study mobile app bugs testing static analysis Mobile apps have become ubiquitous. For app developers, it is a key priority to ensure their apps' correctness and reliability. However, many apps still suffer from occasional to frequent crashes, weakening their competitive edge. Large-scale, deep analyses of the characteristics of real-world app crashes can provide useful insights to guide developers, or help improve testing and analysis tools. However, such studies do not exist — this paper fills this gap. Over a four-month long effort, we have collected 16,245 unique exception traces from 2,486 open-source Android apps, and observed that framework-specific exceptions account for the majority of these crashes. We then extensively investigated the 8,243 framework-specific exceptions (which took six person-months): (1) identifying their characteristics (e.g., manifestation locations, common fault categories), (2) evaluating their manifestation via state-of-the-art bug detection techniques, and (3) reviewing their fixes. Besides the insights they provide, these findings motivate and enable follow-up research on mobile apps, such as bug detection, fault localization and patch generation. In addition, to demonstrate the utility of our findings, we have optimized Stoat, a dynamic testing tool, and implemented ExLocator, an exception localization tool, for Android apps. Stoat is able to quickly uncover three previously-unknown, confirmed/fixed crashes in Gmail and Google+; ExLocator is capable of precisely locating the root causes of identified exceptions in real-world apps. Our substantial dataset is made publicly available to share with and benefit the community.",
              "pageNumber": 408,
              "isPageNumberRoman": false
            },
            {
              "id": "1wvp6095LrzHLvotamZRPV",
              "type": "authorPaper",
              "text": "[Journal First] Effect Sizes and their Variance for AB/BA Crossover Design Studies",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2vbLjCzIIhv5QjDxqXRXg6/4cvS5U8l4xLwOmfEQoV3vI.pdf",
              "extraLocations": [],
              "authorNames": "Lech Madeyski (Wroclaw University of Science and Technology), Barbara Kitchenham (Keele University)",
              "abstract": "We addressed the issues related to repeated measures experimental design such as an AB/BA crossover design (where each participant uses each method) that have been neither discussed nor addressed in the software engineering literature. Firstly, there are potentially two different standardized mean difference effect sizes that can be calculated, depending on whether the mean difference is standardized by the pooled within groups variance or the within-participants variance. Hence, we provided equations for non-standardized and standardized effect sizes and explained the need for two different types of standardized effect size, one for the repeated measures and one that would be equivalent to an independent groups design. Secondly, as for any estimated parameters and also for the purposes of undertaking meta-analysis, it is necessary to calculate the variance of the standardized mean difference effect sizes (which is not the same as the variance of the study). Hence, we provided formulas for the small sample size effect size variance and the medium sample size approximation to the effect size variance, for both types of standardized effect size. We also presented the model underlying the AB/BA crossover design and provided two examples (an empirical analysis of the real data set by Scanniello, as well as simulated data) to demonstrate how to construct the two standardized mean difference effect sizes and their variances, both from standard descriptive statistics and from the outputs provided by the linear mixed model package lme4 in R. A take-home message coming from the provided equations and empirical analysis of the two examples is that crossover designs should be considered (instead of between groups design) only if: - previous research has suggested that rho is greater than zero and preferably greater than 0.25; - there is either strong theoretical argument, or empirical evidence from a well-powered study, that the period by technique interaction is negligible. Summarizing, the journal first EMSE paper (http://doi.org/10.1007/s10664-017-9574-5): - Presents the formulas needed to calculate both non-standardized mean difference effect sizes and standardized mean difference effect sizes for AB/BA crossover designs (see Section 4 and 5 of the journal first EMSE paper). - Presents the formulas needed to estimate the variances of the non-standardized and standardized effect sizes which in the later cases need to be appropriate for the small to medium sample sizes commonly used in software engineering crossover designs (see Section 5 of the EMSE paper). - Explains how to calculate the effect sizes and their variances both from the descriptive statistics that should be reported from crossover experiments and from the raw data (see Section 6 of the EMSE paper). It is worth mentioning that we based our formulas on our own corrections to the formulas presented earlier by Curtin et al. (http://doi.org/10.1002/sim.1205). Our corrections for the variances of standardized weighted mean difference of an AB/BA cross-over trial were accepted by the author of the original formulas (Curtin), submitted jointly as a letter to Editor of Statistics in Medicine to assure the widespread (also beyond the software engineering domain) adoption of the corrected formulas, and accepted (http://doi.org/10.1002/sim.7379). We proposed an alternative formulation of the standardized effect size for individual difference effects that is comparable with the standardized effect size commonly used for pretest/posttest studies. We also corrected the small sample size and moderate sample size variances reported by Curtin et al. for both the individual difference effect size and the standardized effect size comparable to independent groups trials, showing the derivation of the formulas from the variance of a t-variable. Using these results, researchers can now correctly calculate standardized effect size variances, allowing the calculation of confidence intervals for AB/BA cross-over trials, which in turn provides a direct link to null hypothesis testing and supports meta-analysis. Meta-analysts can now validly aggregate together results from independent groups, pretest/posttest and AB/BA cross-over trials. Last but not least, the presented contributions allow corrections of previously reported results.\" ",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Effect Sizes and their Variance for AB/BA Crossover Design Studies 1516660951502 Lech Madeyski Wroclaw University of Science and Technology Lech.Madeyski@pwr.edu.pl Barbara Kitchenham Keele University b.a.kitchenham@keele.ac.uk Empirical software engineering Meta-analysis Effect size We addressed the issues related to repeated measures experimental design such as an AB/BA crossover design (where each participant uses each method) that have been neither discussed nor addressed in the software engineering literature. Firstly, there are potentially two different standardized mean difference effect sizes that can be calculated, depending on whether the mean difference is standardized by the pooled within groups variance or the within-participants variance. Hence, we provided equations for non-standardized and standardized effect sizes and explained the need for two different types of standardized effect size, one for the repeated measures and one that would be equivalent to an independent groups design. Secondly, as for any estimated parameters and also for the purposes of undertaking meta-analysis, it is necessary to calculate the variance of the standardized mean difference effect sizes (which is not the same as the variance of the study). Hence, we provided formulas for the small sample size effect size variance and the medium sample size approximation to the effect size variance, for both types of standardized effect size. We also presented the model underlying the AB/BA crossover design and provided two examples (an empirical analysis of the real data set by Scanniello, as well as simulated data) to demonstrate how to construct the two standardized mean difference effect sizes and their variances, both from standard descriptive statistics and from the outputs provided by the linear mixed model package lme4 in R. A take-home message coming from the provided equations and empirical analysis of the two examples is that crossover designs should be considered (instead of between groups design) only if: - previous research has suggested that rho is greater than zero and preferably greater than 0.25; - there is either strong theoretical argument, or empirical evidence from a well-powered study, that the period by technique interaction is negligible. Summarizing, the journal first EMSE paper (http://doi.org/10.1007/s10664-017-9574-5): - Presents the formulas needed to calculate both non-standardized mean difference effect sizes and standardized mean difference effect sizes for AB/BA crossover designs (see Section 4 and 5 of the journal first EMSE paper). - Presents the formulas needed to estimate the variances of the non-standardized and standardized effect sizes which in the later cases need to be appropriate for the small to medium sample sizes commonly used in software engineering crossover designs (see Section 5 of the EMSE paper). - Explains how to calculate the effect sizes and their variances both from the descriptive statistics that should be reported from crossover experiments and from the raw data (see Section 6 of the EMSE paper). It is worth mentioning that we based our formulas on our own corrections to the formulas presented earlier by Curtin et al. (http://doi.org/10.1002/sim.1205). Our corrections for the variances of standardized weighted mean difference of an AB/BA cross-over trial were accepted by the author of the original formulas (Curtin), submitted jointly as a letter to Editor of Statistics in Medicine to assure the widespread (also beyond the software engineering domain) adoption of the corrected formulas, and accepted (http://doi.org/10.1002/sim.7379). We proposed an alternative formulation of the standardized effect size for individual difference effects that is comparable with the standardized effect size commonly used for pretest/posttest studies. We also corrected the small sample size and moderate sample size variances reported by Curtin et al. for both the individual difference effect size and the standardized effect size comparable to independent groups trials, showing the derivation of the formulas from the variance of a t-variable. Using these results, researchers can now correctly calculate standardized effect size variances, allowing the calculation of confidence intervals for AB/BA cross-over trials, which in turn provides a direct link to null hypothesis testing and supports meta-analysis. Meta-analysts can now validly aggregate together results from independent groups, pretest/posttest and AB/BA cross-over trials. Last but not least, the presented contributions allow corrections of previously reported results.\"",
              "pageNumber": 420,
              "isPageNumberRoman": false
            },
            {
              "id": "7J66iVnLsFvgZnnMHRfiiL",
              "type": "authorPaper",
              "text": "A Large-Scale Empirical Study on the Effects of Code Obfuscations on Android Apps and Anti-Malware Products",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7f234whcYWFE7F5MkE14fI/2SWs4RmA9Epgmb4okKjMz0.pdf",
              "extraLocations": [],
              "authorNames": "Mahmoud Hammad (University of California, Irvine), Joshua Garcia (University of California, Irvine), Sam Malek (University of California, Irvine)",
              "abstract": "The Android platform has been the dominant mobile platform in recent years resulting in millions of apps and security threats against those apps. Anti-malware products aim to protect smartphone users from these threats, especially from malicious apps. However, malware authors use code obfuscation on their apps to evade detection by anti-malware products. To assess the effects of code obfuscation on Android apps and anti-malware products, we have conducted a large-scale empirical study that evaluates the effectiveness of the top anti-malware products against various obfuscation tools and strategies. To that end, we have obfuscated 3,000 benign apps and 3,000 malicious apps and generated 73,362 obfuscated apps using 29 obfuscation strategies from 7 open-source, academic, and commercial obfuscation tools. The findings of our study indicate that (1) code obfuscation significantly impacts Android anti-malware products; (2) the majority of anti-malware products are severely impacted by even trivial obfuscations; (3) in general, combined obfuscation strategies do not successfully evade anti-malware products more than individual strategies; (4) the detection of anti-malware products depend not only on the applied obfuscation strategy but also on the leveraged obfuscation tool; (5) anti-malware products are slow to adopt signatures of malicious apps; and (6) code obfuscation often results in changes to an app's semantic behaviors.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 A Large-Scale Empirical Study on the Effects of Code Obfuscations on Android Apps and Anti-Malware Products 1518364165731 Mahmoud Hammad University of California, Irvine hammadm@uci.edu Joshua Garcia University of California, Irvine joshug4@uci.edu Sam Malek University of California, Irvine malek@uci.edu Android empirical study Security Code Obfuscation Anti malware products The Android platform has been the dominant mobile platform in recent years resulting in millions of apps and security threats against those apps. Anti-malware products aim to protect smartphone users from these threats, especially from malicious apps. However, malware authors use code obfuscation on their apps to evade detection by anti-malware products. To assess the effects of code obfuscation on Android apps and anti-malware products, we have conducted a large-scale empirical study that evaluates the effectiveness of the top anti-malware products against various obfuscation tools and strategies. To that end, we have obfuscated 3,000 benign apps and 3,000 malicious apps and generated 73,362 obfuscated apps using 29 obfuscation strategies from 7 open-source, academic, and commercial obfuscation tools. The findings of our study indicate that (1) code obfuscation significantly impacts Android anti-malware products; (2) the majority of anti-malware products are severely impacted by even trivial obfuscations; (3) in general, combined obfuscation strategies do not successfully evade anti-malware products more than individual strategies; (4) the detection of anti-malware products depend not only on the applied obfuscation strategy but also on the leveraged obfuscation tool; (5) anti-malware products are slow to adopt signatures of malicious apps; and (6) code obfuscation often results in changes to an app's semantic behaviors.",
              "pageNumber": 421,
              "isPageNumberRoman": false
            },
            {
              "id": "6TAVMd0ujUqMdz5CVb72jG",
              "type": "authorPaper",
              "text": "[Journal First] An Empirical Study on the Interplay Between Semantic Coupling and Co-change of Software Classes",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4daDPdF3SLwTXzMDDUsn1K/6WppK0TRL3zRRr0ITDSe93.pdf",
              "extraLocations": [],
              "authorNames": "Nemitari Ajienka (Edge Hill University), Andrea Capiluppi (Brunel University London), Steve Counsell (Brunel University London)",
              "abstract": "The evolution of software systems is an inevitable process which has to be managed effectively to enhance software quality. Change impact analysis (CIA) is a technique that identifies impact sets, i.e., the set of classes that require correction as a result of a change made to a class or artefact. These sets can also be considered as ripple effects and typically non-local: changes propagate to different parts of a system. Two classes are considered logically coupled if they have co-changed in the past; past research has shown that the precision of CIA techniques increases if logical and semantic coupling (i.e., the extent to which the lexical content of two classes is related) are both considered. However, the relationship between semantic and logical coupling of software artefacts has not been extensively studied and no dependencies established between these two types of coupling. Are two often co-changed artefacts also strongly connected from a semantic point of view? Are two semantically similar artefacts bound to co-change in the future? Answering those questions would help increase the precision of CIA. It would also help software maintainers to focus on a smaller subset of artefacts more likely to co-evolve in the future. This study investigated the relationship between semantic and logical coupling. Using Chi-squared statistical tests, we identified similarities in semantic coupling using class corpora and class identifiers. We then computed Spearman's rank correlation between semantic and logical coupling metrics for class pairs to detect whether semantic and logical relationships co-varied in OO software. Finally, we investigated the overlap between semantic and logical relationships by identifying the proportion of classes linked through both coupling types. Our empirical study and results were based on seventy-nine open-source software projects. Results showed that: (a) measuring the semantic similarity of classes by using their identifiers is computationally efficient; (b) using identifier-based coupling can be used interchangeably with semantic similarity based on their corpora, albeit not always; (c) no correlation between the strengths of semantic and change coupling was found. Finally, (d) a directional relationship between the two was identified; 70% of semantic dependencies are linked through change coupling but not vice versa. Based on our findings, we conclude that identifying more efficient methods of semantic coupling computation as well as a directional relationship between semantic and change dependencies could help to improve CIA methods that integrate semantic coupling information. This may also help to reveal implicit dependencies not captured by static source code analysis.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] An Empirical Study on the Interplay Between Semantic Coupling and Co-change of Software Classes 1519507519498 Nemitari Ajienka Edge Hill University Nemitari.Ajienka@edgehill.ac.uk Andrea Capiluppi Brunel University London Andrea.Capiluppi@brunel.ac.uk Steve Counsell Brunel University London Steve.Counsell@brunel.ac.uk Semantic coupling co-change Java software metrics The evolution of software systems is an inevitable process which has to be managed effectively to enhance software quality. Change impact analysis (CIA) is a technique that identifies impact sets, i.e., the set of classes that require correction as a result of a change made to a class or artefact. These sets can also be considered as ripple effects and typically non-local: changes propagate to different parts of a system. Two classes are considered logically coupled if they have co-changed in the past; past research has shown that the precision of CIA techniques increases if logical and semantic coupling (i.e., the extent to which the lexical content of two classes is related) are both considered. However, the relationship between semantic and logical coupling of software artefacts has not been extensively studied and no dependencies established between these two types of coupling. Are two often co-changed artefacts also strongly connected from a semantic point of view? Are two semantically similar artefacts bound to co-change in the future? Answering those questions would help increase the precision of CIA. It would also help software maintainers to focus on a smaller subset of artefacts more likely to co-evolve in the future. This study investigated the relationship between semantic and logical coupling. Using Chi-squared statistical tests, we identified similarities in semantic coupling using class corpora and class identifiers. We then computed Spearman's rank correlation between semantic and logical coupling metrics for class pairs to detect whether semantic and logical relationships co-varied in OO software. Finally, we investigated the overlap between semantic and logical relationships by identifying the proportion of classes linked through both coupling types. Our empirical study and results were based on seventy-nine open-source software projects. Results showed that: (a) measuring the semantic similarity of classes by using their identifiers is computationally efficient; (b) using identifier-based coupling can be used interchangeably with semantic similarity based on their corpora, albeit not always; (c) no correlation between the strengths of semantic and change coupling was found. Finally, (d) a directional relationship between the two was identified; 70% of semantic dependencies are linked through change coupling but not vice versa. Based on our findings, we conclude that identifying more efficient methods of semantic coupling computation as well as a directional relationship between semantic and change dependencies could help to improve CIA methods that integrate semantic coupling information. This may also help to reveal implicit dependencies not captured by static source code analysis.",
              "pageNumber": 432,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 13: Test Improvement",
          "lineItems": [
            {
              "id": "7fjONJFo2vXboG4H20Fiy5",
              "type": "authorPaper",
              "text": "DeFlaker: Automatically Detecting Flaky Tests",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf",
              "extraLocations": [],
              "authorNames": "Jonathan Bell (George Mason University), Owolabi Legunsen (University of Illinois at Urbana-Champaign), Michael Hilton (Carnegie Mellon University), Lamyaa Eloussi (University of Illinois at Urbana-Champaign), Tifany Yung (University of Illinois at Urbana-Champaign), Darko Marinov (University of Illinois at Urbana-Champaign)",
              "abstract": "Developers often run tests to check that their latest changes to a code repository did not break any previously working functionality. Ideally, any new test failures would indicate regressions caused by the latest changes. However, some test failures may not be due to the latest changes but due to non-determinism in the tests, popularly called flaky tests. The typical way to detect flaky tests is to rerun failing tests repeatedly. Unfortunately, rerunning failing tests can be costly and can slow down the development cycle. We present the first extensive evaluation of rerunning failing tests and propose a new technique, called DeFlaker, that detects if a test failure is due to a flaky test without rerunning and with very low runtime overhead. DeFlaker monitors the coverage of latest code changes and marks as flaky any newly failing test that did not execute any of the changes. We deployed DeFlaker live, in the build process of 96 Java projects on TravisCI, and found 87 previously unknown flaky tests in 10 of these projects. We also ran experiments on project histories, where DeFlaker detected 1,874 flaky tests from 4,846 failures, with a low false alarm rate (1.5%). DeFlaker had a higher recall (95.5% vs. 23%) of confirmed flaky tests than Maven's default flaky test detector.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 DeFlaker: Automatically Detecting Flaky Tests 1518491305991 Jonathan Bell George Mason University bellj@gmu.edu Owolabi Legunsen University of Illinois at Urbana-Champaign legunse2@illinois.edu Michael Hilton Carnegie Mellon University mhilton@cmu.edu Lamyaa Eloussi University of Illinois at Urbana-Champaign eloussi2@illinois.edu Tifany Yung University of Illinois at Urbana-Champaign yung4@illinois.edu Darko Marinov University of Illinois at Urbana-Champaign marinov@illinois.edu software testing flaky tests code coverage Developers often run tests to check that their latest changes to a code repository did not break any previously working functionality. Ideally, any new test failures would indicate regressions caused by the latest changes. However, some test failures may not be due to the latest changes but due to non-determinism in the tests, popularly called flaky tests. The typical way to detect flaky tests is to rerun failing tests repeatedly. Unfortunately, rerunning failing tests can be costly and can slow down the development cycle. We present the first extensive evaluation of rerunning failing tests and propose a new technique, called DeFlaker, that detects if a test failure is due to a flaky test without rerunning and with very low runtime overhead. DeFlaker monitors the coverage of latest code changes and marks as flaky any newly failing test that did not execute any of the changes. We deployed DeFlaker live, in the build process of 96 Java projects on TravisCI, and found 87 previously unknown flaky tests in 10 of these projects. We also ran experiments on project histories, where DeFlaker detected 1,874 flaky tests from 4,846 failures, with a low false alarm rate (1.5%). DeFlaker had a higher recall (95.5% vs. 23%) of confirmed flaky tests than Maven's default flaky test detector.",
              "pageNumber": 433,
              "isPageNumberRoman": false
            },
            {
              "id": "4VNZkE7ZRtxC2COWmXmuCC",
              "type": "authorPaper",
              "text": "DetReduce: Minimizing Android GUI Test Suites for Regression Testing",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/65qbeRBREN0W4K0rpvhsnv/1pNi1RIt2umVAlWTxVJIml.pdf",
              "extraLocations": [],
              "authorNames": "Wontae Choi (University of California, Berkeley), Koushik Sen (University of California, Berkeley), George Necul (University of California, Berkeley), Wenyu Wang (University of Illinois, Urbana-Champaign)",
              "abstract": "In recent years, several automated GUI testing techniques for Android apps have been proposed. These tools have been shown to be effective in achieving good test coverage and in finding bugs without human intervention. Being automated, these tools typically run for a long time (say, for several hours), either until they saturate test coverage or until a testing time budget expires. Thus, these automated tools are not good at generating concise regression test suites that could be used for testing in incremental development of the apps and in regression testing. We propose a heuristic technique that helps create a small regression test suite for an Android app from a large test suite generated by an automated Android GUI testing tool. The key insight behind our technique is that if we can identify and remove some common forms of redundancies introduced by existing automated GUI testing tools, then we can drastically lower the time required to minimize a GUI test suite. We have implemented our algorithm in a prototype tool called DetReduce. We applied DetReduce to several Android apps and found that DetReduce reduces a test-suite by an average factor of16.9× in size and14.7× in running time. We also found that for a test suite generated by running SwiftHand and a randomized test generation algorithm for 8 hours, DetReduce minimizes the test suite in an average of 14.6 hours.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 DetReduce: Minimizing Android GUI Test Suites for Regression Testing 1518500332375 Wontae Choi University of California, Berkeley wtchoi@cs.berkeley.edu Koushik Sen University of California, Berkeley ksen@cs.berkeley.edu George Necul University of California, Berkeley necula@cs.berkeley.edu Wenyu Wang University of Illinois, Urbana-Champaign wenyu2@illinois.edu Android GUI Test minimization In recent years, several automated GUI testing techniques for Android apps have been proposed. These tools have been shown to be effective in achieving good test coverage and in finding bugs without human intervention. Being automated, these tools typically run for a long time (say, for several hours), either until they saturate test coverage or until a testing time budget expires. Thus, these automated tools are not good at generating concise regression test suites that could be used for testing in incremental development of the apps and in regression testing. We propose a heuristic technique that helps create a small regression test suite for an Android app from a large test suite generated by an automated Android GUI testing tool. The key insight behind our technique is that if we can identify and remove some common forms of redundancies introduced by existing automated GUI testing tools, then we can drastically lower the time required to minimize a GUI test suite. We have implemented our algorithm in a prototype tool called DetReduce. We applied DetReduce to several Android apps and found that DetReduce reduces a test-suite by an average factor of16.9× in size and14.7× in running time. We also found that for a test suite generated by running SwiftHand and a randomized test generation algorithm for 8 hours, DetReduce minimizes the test suite in an average of 14.6 hours.",
              "pageNumber": 445,
              "isPageNumberRoman": false
            },
            {
              "id": "5fEv0AvokdHROF5PssYsPz",
              "type": "authorPaper",
              "text": "Time to Clean Your Test Objectives",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf",
              "extraLocations": [],
              "authorNames": "Michaël Marcozzi (Imperial College London), Sébastien Bardin (CEA), Nikolai Kosmatov (CEA), Mike Papadakis (University of Luxembourg), Virgile Prevosto (CEA), Loïc Correnson (CEA)",
              "abstract": "Testing is the primary approach for detecting software defects. A major challenge faced by testers lies in crafting efficient test suites, able to detect a maximum number of bugs with manageable effort. To do so, they rely on coverage criteria, which define some precise test objectives to be covered. However, many common criteria specify a significant number of objectives that occur to be infeasible or redundant in practice, like covering dead code or semantically equal mutants. Such objectives are well-known to be harmful to the design of test suites, impacting both the efficiency and precision of the tester's effort. This work introduces a sound and scalable technique to prune out a significant part of the infeasible and redundant objectives produced by a panel of white-box criteria. In a nutshell, we reduce this task to proving the validity of logical assertions in the code under test. The technique is implemented in a tool that relies on weakest-precondition calculus and SMT solving for proving the assertions. The tool is built on top of the Frama-C verification platform, which we carefully tune for our specific scalability needs. The experiments reveal that the pruning capabilities of the tool can reduce the number of targeted test objectives in a program by up to 27% and scale to real programs of 200K lines, making it possible to automate a painstaking part of their current testing process.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Time to Clean Your Test Objectives 1517859683574 Michaël Marcozzi Imperial College London m.marcozzi@imperial.ac.uk Sébastien Bardin CEA sebastien.bardin@cea.fr Nikolai Kosmatov CEA nikolai.kosmatov@cea.fr Mike Papadakis University of Luxembourg michail.papadakis@uni.lu Virgile Prevosto CEA virgile.prevosto@cea.fr Loïc Correnson CEA loic.correnson@cea.fr Coverage Criteria Infeasible Objectives Redundant Objectives Testing is the primary approach for detecting software defects. A major challenge faced by testers lies in crafting efficient test suites, able to detect a maximum number of bugs with manageable effort. To do so, they rely on coverage criteria, which define some precise test objectives to be covered. However, many common criteria specify a significant number of objectives that occur to be infeasible or redundant in practice, like covering dead code or semantically equal mutants. Such objectives are well-known to be harmful to the design of test suites, impacting both the efficiency and precision of the tester's effort. This work introduces a sound and scalable technique to prune out a significant part of the infeasible and redundant objectives produced by a panel of white-box criteria. In a nutshell, we reduce this task to proving the validity of logical assertions in the code under test. The technique is implemented in a tool that relies on weakest-precondition calculus and SMT solving for proving the assertions. The tool is built on top of the Frama-C verification platform, which we carefully tune for our specific scalability needs. The experiments reveal that the pruning capabilities of the tool can reduce the number of targeted test objectives in a program by up to 27% and scale to real programs of 200K lines, making it possible to automate a painstaking part of their current testing process.",
              "pageNumber": 456,
              "isPageNumberRoman": false
            },
            {
              "id": "5w84DyTBnW7Ka2EmSD1qEo",
              "type": "authorPaper",
              "text": "Prioritizing Browser Environments for Web Application Test Execution",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1EX24cXorp3idnq1F0su6Q/7Mxb1ZK2acB4XRbw7iHpAC.pdf",
              "extraLocations": [],
              "authorNames": "Jung-Hyun Kwon (KAIST), In-Young Ko (KAIST), Gregg Rothermel (University of Nebraska–Lincoln)",
              "abstract": "When testing client-side web applications, it is important to consider different web-browser environments. Different properties of these environments such as web-browser types and underlying platforms may cause a web application to exhibit different types of failures. As web applications evolve, they must be regression tested across these different environments. Because there are many environments to consider this process can be expensive, resulting in delayed feedback about failures in applications. In this work, we propose six techniques for providing a developer with faster feedback on failures when regression testing web applications across different web-browser environments. Our techniques draw on methods used in test case prioritization; however, in our case we prioritize web-browser environments, based on information on recent and frequent failures. We evaluated our approach using four non-trivial and popular open-source web applications. Our results show that our techniques outperform two baseline methods, namely, no ordering and random ordering, in terms of the cost-effectiveness. The improvement rates ranged from -12.24% to 39.05% for no ordering, and from -0.04% to 45.85% for random ordering.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Prioritizing Browser Environments for Web Application Test Execution 1518355882305 Jung-Hyun Kwon KAIST junghyun.kwon@kaist.ac.kr In-Young Ko KAIST iko@kaist.ac.kr Gregg Rothermel University of Nebraska–Lincoln grother@cse.unl.edu Web application testing Regression testing Browser environments When testing client-side web applications, it is important to consider different web-browser environments. Different properties of these environments such as web-browser types and underlying platforms may cause a web application to exhibit different types of failures. As web applications evolve, they must be regression tested across these different environments. Because there are many environments to consider this process can be expensive, resulting in delayed feedback about failures in applications. In this work, we propose six techniques for providing a developer with faster feedback on failures when regression testing web applications across different web-browser environments. Our techniques draw on methods used in test case prioritization; however, in our case we prioritize web-browser environments, based on information on recent and frequent failures. We evaluated our approach using four non-trivial and popular open-source web applications. Our results show that our techniques outperform two baseline methods, namely, no ordering and random ordering, in terms of the cost-effectiveness. The improvement rates ranged from -12.24% to 39.05% for no ordering, and from -0.04% to 45.85% for random ordering.",
              "pageNumber": 468,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 14: Empirical Studies of Code",
          "lineItems": [
            {
              "id": "6CKOfOiQYILjEzXQjuT6Lh",
              "type": "authorPaper",
              "text": "[Journal First] An Empirical Study of Early Access Games on the Steam Platform",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6KvsuI65yZCa9wUUD3UekZ/4mHfpuzr4RGZSA12LoRp5r.pdf",
              "extraLocations": [],
              "authorNames": "Dayi Lin (SAIL - Queen's University), Cor-Paul Bezemer (SAIL - Queen's University), Ahmed E. Hassan (SAIL - Queen's University)",
              "abstract": "\"Early access\" is a release strategy for software that allows consumers to purchase an unfinished version of the software. In turn, consumers can influence the software development process by giving developers early feedback. This early access model has become increasingly popular through digital distribution platforms, such as Steam which is the most popular distribution platform for games. The plethora of options offered by Steam to communicate between developers and game players contribute to the popularity of the early access model. The early access model made a name for itself through several successful games, such as the DayZ game. The multiplayer survival-based game reached 400,000 sales during its first week as an early access game. However, the benefits of the early access model have been questioned as well. For instance, the Spacebase DF-9 game abandoned the early access stage unexpectedly, disappointing many players of the game. Shortly after abandoning the early access stage and terminating the development, twelve employees were laid off including the programmer and project lead. In this paper, we conduct an empirical study on 1,182 Early Access Games (EAGs) on the Steam platform to understand the characteristics, advantages and limitations of the early access model. We find that 15% of the games on Steam make use of the early access model, with the most popular EAG having as many as 29 million owners. 88% of the EAGs are classified by their developers as so-called \"indie\" games, indicating that most EAGs are developed by individual developers or small studios. We study the interaction between players and developers of EAGs and the Steam platform. We observe that on the one hand, developers update their games more frequently in the early access stage. On the other hand, the percentage of players that review a game during its early access stage is lower than the percentage of players that review the game after it leaves the early access stage. However, the average rating of the reviews is much higher during the early access stage, suggesting that players are more tolerant of imperfections in the early access stage. The positive review rate does not correlate with the length or the game update frequency of the early access stage. In addition, we discuss several learned lessons from the failure of an early access game. The main learned lesson from this failure is that the communication between the game developer and the players of the EAG is crucial. Players enjoy getting involved in the development of an early access game and they get emotionally involved in the decision-making about the game. Based on our findings, we suggest game developers to use the early access model as a method for eliciting early feedback and more positive reviews to attract additional new players. In addition, our findings suggest that developers can determine their release schedule without worrying about the length of the early access stage and the game update frequency during the early access stage.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] An Empirical Study of Early Access Games on the Steam Platform 1516725067122 Dayi Lin SAIL - Queen's University dayi.lin@cs.queensu.ca Cor-Paul Bezemer SAIL - Queen's University bezemer@cs.queensu.ca Ahmed E. Hassan SAIL - Queen's University ahmed@cs.queensu.ca early access games computer games Steam \"Early access\" is a release strategy for software that allows consumers to purchase an unfinished version of the software. In turn, consumers can influence the software development process by giving developers early feedback. This early access model has become increasingly popular through digital distribution platforms, such as Steam which is the most popular distribution platform for games. The plethora of options offered by Steam to communicate between developers and game players contribute to the popularity of the early access model. The early access model made a name for itself through several successful games, such as the DayZ game. The multiplayer survival-based game reached 400,000 sales during its first week as an early access game. However, the benefits of the early access model have been questioned as well. For instance, the Spacebase DF-9 game abandoned the early access stage unexpectedly, disappointing many players of the game. Shortly after abandoning the early access stage and terminating the development, twelve employees were laid off including the programmer and project lead. In this paper, we conduct an empirical study on 1,182 Early Access Games (EAGs) on the Steam platform to understand the characteristics, advantages and limitations of the early access model. We find that 15% of the games on Steam make use of the early access model, with the most popular EAG having as many as 29 million owners. 88% of the EAGs are classified by their developers as so-called \"indie\" games, indicating that most EAGs are developed by individual developers or small studios. We study the interaction between players and developers of EAGs and the Steam platform. We observe that on the one hand, developers update their games more frequently in the early access stage. On the other hand, the percentage of players that review a game during its early access stage is lower than the percentage of players that review the game after it leaves the early access stage. However, the average rating of the reviews is much higher during the early access stage, suggesting that players are more tolerant of imperfections in the early access stage. The positive review rate does not correlate with the length or the game update frequency of the early access stage. In addition, we discuss several learned lessons from the failure of an early access game. The main learned lesson from this failure is that the communication between the game developer and the players of the EAG is crucial. Players enjoy getting involved in the development of an early access game and they get emotionally involved in the decision-making about the game. Based on our findings, we suggest game developers to use the early access model as a method for eliciting early feedback and more positive reviews to attract additional new players. In addition, our findings suggest that developers can determine their release schedule without worrying about the length of the early access stage and the game update frequency during the early access stage.",
              "pageNumber": 480,
              "isPageNumberRoman": false
            },
            {
              "id": "1hmeafItSfLGpsmNuL4lFr",
              "type": "authorPaper",
              "text": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf",
              "extraLocations": [],
              "authorNames": "Benjamin Danglot (Inria Nord-Europe), Philippe Preux (Université Lille), Benoit Baudry (Inria Rennes Bretage Atlantique), Martin Monperrus (KTH Royale Institure of Technology)",
              "abstract": "Can the execution of software be perturbed without breaking the correctness of the output? In this paper, we devise a protocol to answer this question from a novel perspective. In an experimental study, we observe that many perturbations do not break the correctness in ten subject programs. We call this phenomenon \"correctness attraction\". The uniqueness of this protocol is that it considers a systematic exploration of the perturbation space as well as perfect oracles to determine the correctness of the output. To this extent, our findings on the stability of software under execution perturbations have a level of validity that has never been reported before in the scarce related work. A qualitative manual analysis enables us to set up the first taxonomy ever of the reasons behind correctness attraction.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation 1518430775593 Benjamin Danglot Inria Nord-Europe benjamin.danglot@inria.fr Philippe Preux Université Lille philippe.preux@inria.fr Benoit Baudry Inria Rennes Bretage Atlantique benoit.baudry@kth.se Martin Monperrus KTH Royale Institure of Technology martin.monperrus@kth.cse.se perturbation analysis software correctness empirical study Can the execution of software be perturbed without breaking the correctness of the output? In this paper, we devise a protocol to answer this question from a novel perspective. In an experimental study, we observe that many perturbations do not break the correctness in ten subject programs. We call this phenomenon \"correctness attraction\". The uniqueness of this protocol is that it considers a systematic exploration of the perturbation space as well as perfect oracles to determine the correctness of the output. To this extent, our findings on the stability of software under execution perturbations have a level of validity that has never been reported before in the scarce related work. A qualitative manual analysis enables us to set up the first taxonomy ever of the reasons behind correctness attraction.",
              "pageNumber": 481,
              "isPageNumberRoman": false
            },
            {
              "id": "76rBbihaEaT0FRC9rlyvKq",
              "type": "authorPaper",
              "text": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf",
              "extraLocations": [],
              "authorNames": "Fabio Palomba (University of Zurich), Gabriele Bavota (Università della Svizzera Italiana), Massimiliano Di Penta (University of Sannio), Fausto Fasano (University of Molise), Rocco Oliveto (University of Molise), Andrea De Lucia (University of Salerno)",
              "abstract": "Code smells are symptoms of poor design and implementation choices that may hinder code comprehensibility and maintainability. Despite the effort devoted by the research community in studying code smells, the extent to which code smells in software systems affect software maintainability remains still unclear. In this paper we present a large scale empirical investigation on the diffuseness of code smells and their impact on code change- and fault-proneness. The study was conducted across a total of 395 releases of 30 open source projects and considering 17,350 manually validated instances of 13 different code smell types. The results show that smells characterized by long and/or complex code (e.g., Complex Class) are highly diffused, and that smelly classes have a higher change- and fault-proneness than smell-free classes.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation 1518454417075 Fabio Palomba University of Zurich palomba@ifi.uzh.ch Gabriele Bavota Università della Svizzera Italiana gabriele.bavota@usi.ch Massimiliano Di Penta University of Sannio dipenta@unisannio.it Fausto Fasano University of Molise fausto.fasano@unimol.it Rocco Oliveto University of Molise rocco.oliveto@unimol.it Andrea De Lucia University of Salerno adelucia@unisa.it code smells empirical studies mining software repositories Code smells are symptoms of poor design and implementation choices that may hinder code comprehensibility and maintainability. Despite the effort devoted by the research community in studying code smells, the extent to which code smells in software systems affect software maintainability remains still unclear. In this paper we present a large scale empirical investigation on the diffuseness of code smells and their impact on code change- and fault-proneness. The study was conducted across a total of 395 releases of 30 open source projects and considering 17,350 manually validated instances of 13 different code smell types. The results show that smells characterized by long and/or complex code (e.g., Complex Class) are highly diffused, and that smelly classes have a higher change- and fault-proneness than smell-free classes.",
              "pageNumber": 482,
              "isPageNumberRoman": false
            },
            {
              "id": "uqFDaIUHfYQYWYlJJJagg",
              "type": "authorPaper",
              "text": "Accurate and Efficient Refactoring Detection in Commit History",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf",
              "extraLocations": [],
              "authorNames": "Nikolaos Tsantalis (Concordia University), Matin Mansouri (Concordia University), Laleh Eshkevari (Concordia University), Davood Mazinanian (Concordia University), Danny Dig (Oregon State University)",
              "abstract": "Refactoring detection algorithms have been crucial to a variety of applications: (i) empirical studies about the evolution of code, tests, and faults, (ii) tools for library API migration, (iii) improving the comprehension of changes and code reviews, etc. However, recent research has questioned the accuracy of the state-of-the-art refactoring detection tools, which poses threats to the reliability of their application. Moreover, previous refactoring detection tools are very sensitive to user-provided similarity thresholds, which further reduces their practical accuracy. In addition, their requirement to build the project versions/revisions under analysis makes them inapplicable in many real-world scenarios. To reinvigorate a previously fruitful line of research that has stifled, we designed, implemented, and evaluated RMiner, a technique that overcomes the above limitations. At the heart of RMiner is an AST-based statement matching algorithm that determines refactoring candidates without requiring user-defined thresholds. To empirically evaluate RMiner, we created the most comprehensive oracle to date that uses triangulation to create a dataset with considerably reduced bias, representing 3,188 refactorings from 185 open-source projects. Using this oracle, we found that RMiner has a precision of 98% and recall of 87%, which is a significant improvement over the previous state-of-the-art.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Accurate and Efficient Refactoring Detection in Commit History 1516461314188 Nikolaos Tsantalis Concordia University nikolaos.tsantalis@concordia.ca Matin Mansouri Concordia University m_anso@cse.concordia.ca Laleh Eshkevari Concordia University laleheshkevari@gmail.com Davood Mazinanian Concordia University d_mazina@cse.concordia.ca Danny Dig Oregon State University digd@eecs.oregonstate.edu Refactoring Commit Git Abstract Syntax Tree Oracle Accuracy Refactoring detection algorithms have been crucial to a variety of applications: (i) empirical studies about the evolution of code, tests, and faults, (ii) tools for library API migration, (iii) improving the comprehension of changes and code reviews, etc. However, recent research has questioned the accuracy of the state-of-the-art refactoring detection tools, which poses threats to the reliability of their application. Moreover, previous refactoring detection tools are very sensitive to user-provided similarity thresholds, which further reduces their practical accuracy. In addition, their requirement to build the project versions/revisions under analysis makes them inapplicable in many real-world scenarios. To reinvigorate a previously fruitful line of research that has stifled, we designed, implemented, and evaluated RMiner, a technique that overcomes the above limitations. At the heart of RMiner is an AST-based statement matching algorithm that determines refactoring candidates without requiring user-defined thresholds. To empirically evaluate RMiner, we created the most comprehensive oracle to date that uses triangulation to create a dataset with considerably reduced bias, representing 3,188 refactorings from 185 open-source projects. Using this oracle, we found that RMiner has a precision of 98% and recall of 87%, which is a significant improvement over the previous state-of-the-art.",
              "pageNumber": 483,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 15: Security, Privacy and Trust II",
          "lineItems": [
            {
              "id": "1sFKNCxwgouSoTHYVXoW0V",
              "type": "authorPaper",
              "text": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf",
              "extraLocations": [],
              "authorNames": "Radu Calinescu (University of York), Danny Weyns (Katholieke Universiteit Leuven), Simos Gerasimou (University of York), M. Usman Iftikhar (Linnaeus University), Ibrahim Habli (University of York), Tim Kelly (University of York)",
              "abstract": "Software systems are increasingly expected to cope with variable workloads, component failures and other uncertainties through self-adaptation. As such, self-adaptive software has been the subject of intense research over the past decade. Our work focuses on the use of self-adaptive software in applications with strict functional and non-functional requirements. These applications need compelling assurances that the software continues to meet its requirements while it reconfigures its architecture and parameters at runtime. To address this need, we introduce an end-to-end methodology for the ENgineering of TRUstworthy Self-adaptive sofTware (ENTRUST).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases 1517733985838 Radu Calinescu University of York Radu.Calinescu@york.ac.uk Danny Weyns Katholieke Universiteit Leuven danny.weyns@kuleuven.be Simos Gerasimou University of York Simos.Gerasimou@york.ac.uk M. Usman Iftikhar Linnaeus University usman.iftikhar@lnu.se Ibrahim Habli University of York ibrahim.habli@york.ac.uk Tim Kelly University of York tim.kelly@york.ac.uk self adaptive software systems software engineering methodology assurance evidence assurance cases Software systems are increasingly expected to cope with variable workloads, component failures and other uncertainties through self-adaptation. As such, self-adaptive software has been the subject of intense research over the past decade. Our work focuses on the use of self-adaptive software in applications with strict functional and non-functional requirements. These applications need compelling assurances that the software continues to meet its requirements while it reconfigures its architecture and parameters at runtime. To address this need, we introduce an end-to-end methodology for the ENgineering of TRUstworthy Self-adaptive sofTware (ENTRUST).",
              "pageNumber": 495,
              "isPageNumberRoman": false
            },
            {
              "id": "5m6qA23gBOBIZrcZhVeyfY",
              "type": "authorPaper",
              "text": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf",
              "extraLocations": [],
              "authorNames": "Sylvain Frey (University of Southampton), Awais Rashid (University of Bristol), Pauline Anthonysamy (Google), Maria Pinto-Albuquerque (Instituto Universitario the Lisboa (ISCTE-IUL)), Syad Asad Naqvi (Lancaster University)",
              "abstract": "Motivation: The security of any system is a direct consequence of stakeholders' decisions regarding security requirements and their relative prioritisation. Such decisions are taken with varying degrees of expertise in security. In some organisations – particularly those with resources – these are the preserve of computer (or information) security teams. In others – typically smaller organisations – the computing services team may be charged with the responsibility. Often managers have a role to play as guardians of business targets and goals. Be it common workplace practices or strategic decision making, security decisions underpin not only the initial security requirements and their prioritisation but also the adaptation and evolution of these requirements as new business or security contexts arise. However, little is currently understood about how these various demographics approach cyber security decisions and the strategies and approaches that underpin those decisions. What are the typical decision patterns, if any, the consequences of such patterns and their impact (positive or negative) on the security of the system in question? Nor is there any substantial understanding of how the strategies and decision patterns of these different groups contrast. Is security expertise necessarily an advantage when making security decisions in a given context? Answers to these questions are key to understanding the \"how\" and \"why\" behind security decision processes. The Game: In this talk [1], we present a tabletop game – Decisions and Disruptions (D-D) [2] – as a means to investigate these very questions. The game tasks a group of players with managing the security of a small utility company while facing a variety of threats. The game provides a requirements sandbox in which players can experiment with threats, learn about decision making and its consequences, and reflect on their own perception of risk. The game is intentionally kept short – 2 hours – and simple enough to be played without prior training. A cyber-physical infrastructure, depicted through a Lego(R) board, makes the game easy to understand and accessible to players from varying backgrounds and security expertise, without being too trivial a setting for security experts. Key insights: We played D-D with 43 players divided into homogeneous groups (group sizes of 2-6 players): 4 groups of security experts, 4 groups of non-technical managers and 4 groups of general computer scientists. Such observations should, of course, not be generalised, however, the substantial sample size enables in-depth qualitative analysis. Our analysis reveals a number of novel insights regarding security decisions of our three demographics: - Strategies: Security experts had a strong interest in advanced technological solutions and tended to neglect intelligence gathering, to their own detriment: some security expert teams achieved poor results in the game. Managers, too, were technology-driven and focused on data protection while neglecting human factors more than other groups. Computer scientists tended to balance human factors and intelligence gathering with technical solutions, and achieved the best results of the three demographics. - Decision Processes: Technical experience significantly changes the way players think. Teams with little technical experience had shallow, intuition-driven discussions with few concrete arguments. Technical teams, and the most experienced in particular, had much richer debates, driven by concrete scenarios, anecdotes from experience, and procedural thinking. Security experts showed a high confidence in their decisions – despite some of them having bad consequences – while the other groups tended to doubt their own skills – even when they were playing good games. - Patterns: A number of characteristic plays could be identified, some good (balance between priorities, open-mindedness, and adapting strategies based on inputs that challenge one's pre-conceptions), some bad (excessive focus on particular issues, confidence in charismatic leaders), some ugly (\"tunnel vision\" syndrome by over-confident players). These patterns are documented and discussed in the full paper – showing the virtue of the positive ones, discouraging the negative ones, and inviting the readers to do their own introspection. Conclusion: D-D complements existing work on gamification as a means to improve security awareness, education, and training. Beyond the analysis of the security decisions of the three demographics, there is a definite educational and awareness-raising aspect to D-D (as noted consistently by players in all our subject groups). Game boxes will be brought to the conference for demonstration purposes, and the audience will be invited to experiment with D-D themselves, make their own decisions, and reflect on their own perception of security. [1] Original journal paper: S. Frey, A. Rashid, P. Anthonysamy, M. Pinto-Albuquerque, and S. A. Naqvi. The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game. IEEE TSE, 2017. [2] Game rules available at: http://decisions-disruptions.org",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game 1518268191226 Sylvain Frey University of Southampton frey.sylvain@gmail.com Awais Rashid University of Bristol awais.rashid@bristol.ac.uk Pauline Anthonysamy Google anthonysp@google.com Maria Pinto-Albuquerque Instituto Universitario the Lisboa (ISCTE-IUL) maria.albuquerque@iscte-iul.pt Syad Asad Naqvi Lancaster University s.naqvi@lancaster.ac.uk security decisions security requirements game decision patterns Motivation: The security of any system is a direct consequence of stakeholders' decisions regarding security requirements and their relative prioritisation. Such decisions are taken with varying degrees of expertise in security. In some organisations – particularly those with resources – these are the preserve of computer (or information) security teams. In others – typically smaller organisations – the computing services team may be charged with the responsibility. Often managers have a role to play as guardians of business targets and goals. Be it common workplace practices or strategic decision making, security decisions underpin not only the initial security requirements and their prioritisation but also the adaptation and evolution of these requirements as new business or security contexts arise. However, little is currently understood about how these various demographics approach cyber security decisions and the strategies and approaches that underpin those decisions. What are the typical decision patterns, if any, the consequences of such patterns and their impact (positive or negative) on the security of the system in question? Nor is there any substantial understanding of how the strategies and decision patterns of these different groups contrast. Is security expertise necessarily an advantage when making security decisions in a given context? Answers to these questions are key to understanding the \"how\" and \"why\" behind security decision processes. The Game: In this talk [1], we present a tabletop game – Decisions and Disruptions (D-D) [2] – as a means to investigate these very questions. The game tasks a group of players with managing the security of a small utility company while facing a variety of threats. The game provides a requirements sandbox in which players can experiment with threats, learn about decision making and its consequences, and reflect on their own perception of risk. The game is intentionally kept short – 2 hours – and simple enough to be played without prior training. A cyber-physical infrastructure, depicted through a Lego(R) board, makes the game easy to understand and accessible to players from varying backgrounds and security expertise, without being too trivial a setting for security experts. Key insights: We played D-D with 43 players divided into homogeneous groups (group sizes of 2-6 players): 4 groups of security experts, 4 groups of non-technical managers and 4 groups of general computer scientists. Such observations should, of course, not be generalised, however, the substantial sample size enables in-depth qualitative analysis. Our analysis reveals a number of novel insights regarding security decisions of our three demographics: - Strategies: Security experts had a strong interest in advanced technological solutions and tended to neglect intelligence gathering, to their own detriment: some security expert teams achieved poor results in the game. Managers, too, were technology-driven and focused on data protection while neglecting human factors more than other groups. Computer scientists tended to balance human factors and intelligence gathering with technical solutions, and achieved the best results of the three demographics. - Decision Processes: Technical experience significantly changes the way players think. Teams with little technical experience had shallow, intuition-driven discussions with few concrete arguments. Technical teams, and the most experienced in particular, had much richer debates, driven by concrete scenarios, anecdotes from experience, and procedural thinking. Security experts showed a high confidence in their decisions – despite some of them having bad consequences – while the other groups tended to doubt their own skills – even when they were playing good games. - Patterns: A number of characteristic plays could be identified, some good (balance between priorities, open-mindedness, and adapting strategies based on inputs that challenge one's pre-conceptions), some bad (excessive focus on particular issues, confidence in charismatic leaders), some ugly (\"tunnel vision\" syndrome by over-confident players). These patterns are documented and discussed in the full paper – showing the virtue of the positive ones, discouraging the negative ones, and inviting the readers to do their own introspection. Conclusion: D-D complements existing work on gamification as a means to improve security awareness, education, and training. Beyond the analysis of the security decisions of the three demographics, there is a definite educational and awareness-raising aspect to D-D (as noted consistently by players in all our subject groups). Game boxes will be brought to the conference for demonstration purposes, and the audience will be invited to experiment with D-D themselves, make their own decisions, and reflect on their own perception of security. [1] Original journal paper: S. Frey, A. Rashid, P. Anthonysamy, M. Pinto-Albuquerque, and S. A. Naqvi. The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game. IEEE TSE, 2017. [2] Game rules available at: http://decisions-disruptions.org",
              "pageNumber": 496,
              "isPageNumberRoman": false
            },
            {
              "id": "2LUUlpw4FPyyQRgM77Z5Zn",
              "type": "authorPaper",
              "text": "[Journal First] Lightweight, Obfuscation-Resilient Detection and Family Identification of Android Malware",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nEJytH1hn6nJ0tb77mA8t/6GTTGGl8wHMuhMg7g3ja9B.pdf",
              "extraLocations": [],
              "authorNames": "Joshua Garcia (University of California, Irvine), Mahmoud Hammad (University of California, Irvine), Sam Malek (University of California, Irvine)",
              "abstract": "The number of malicious Android apps has been and continues to increase rapidly. These malware can damage or alter other files or settings, install additional applications, obfuscate their behaviors, propagate quickly, and so on. To identify and handle such malware, a security analyst can significantly benefit from identifying the family to which a malicious app belongs rather than only detecting if an app is malicious. To address these challenges, we present a novel machine learning-based Android malware detection and family-identification approach, RevealDroid, that operates without the need to perform complex program analyses or extract large sets of features. RevealDroid's selected features leverage categorized Android API usage, reflection-based features, and features from native binaries of apps. We assess RevealDroid for accuracy, efficiency, and obfuscation resilience using a large dataset consisting of more than 54,000 malicious and benign apps. Our experiments show that RevealDroid achieves an accuracy of 98% in detection of malware and an accuracy of 95% in determination of their families. We further demonstrate RevealDroid's superiority against state-of-the-art approaches. [URL of original paper: https://dl.acm.org/citation.cfm?id=3162625]",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Lightweight, Obfuscation-Resilient Detection and Family Identification of Android Malware 1518211741935 Joshua Garcia University of California, Irvine joshug4@uci.edu Mahmoud Hammad University of California, Irvine hammadm@uci.edu Sam Malek University of California, Irvine malek@uci.edu obfuscation machine learning lightweight native code reflection Android malware The number of malicious Android apps has been and continues to increase rapidly. These malware can damage or alter other files or settings, install additional applications, obfuscate their behaviors, propagate quickly, and so on. To identify and handle such malware, a security analyst can significantly benefit from identifying the family to which a malicious app belongs rather than only detecting if an app is malicious. To address these challenges, we present a novel machine learning-based Android malware detection and family-identification approach, RevealDroid, that operates without the need to perform complex program analyses or extract large sets of features. RevealDroid's selected features leverage categorized Android API usage, reflection-based features, and features from native binaries of apps. We assess RevealDroid for accuracy, efficiency, and obfuscation resilience using a large dataset consisting of more than 54,000 malicious and benign apps. Our experiments show that RevealDroid achieves an accuracy of 98% in detection of malware and an accuracy of 95% in determination of their families. We further demonstrate RevealDroid's superiority against state-of-the-art approaches. [URL of original paper: https://dl.acm.org/citation.cfm?id=3162625]",
              "pageNumber": 497,
              "isPageNumberRoman": false
            },
            {
              "id": "4AxGpuB0XLbYuowQf6Hsbu",
              "type": "authorPaper",
              "text": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf",
              "extraLocations": [],
              "authorNames": "Patrick Morrison (North Carolina State University), Rahul Pandita (Phase Change Software), Xusheng Xiao (Case Western Reserve University), Ram Chillarege (Chillarege), Laurie Williams (North Carolina State University)",
              "abstract": "Software defect data has long been used to drive software development process improvement. If security defects (i.e., vulnerabilities) are discovered and resolved by different software development practices than non-security defects, the knowledge of that distinction could be applied to drive process improvement. The goal of this research is to support technical leaders in making security-specific software development process improvements by analyzing the differences between the discovery and resolution of defects versus that of vulnerabilities. We extend Orthogonal Defect Classification (ODC), a scheme for classifying software defects to support software development process improvement, to study process-related differences between vulnerabilities and defects, creating ODC + Vulnerabilities (ODC+V). We applied ODC+V to classify 583 vulnerabilities and 583 defects across 133 releases of three open-source projects (Firefox, phpMyAdmin, and Chrome). Compared with defects, vulnerabilities are found later in the development cycle and are more likely to be resolved through changes to conditional logic. In Firefox, vulnerabilities are resolved 33% more quickly than defects. From a process improvement perspective, these results indicate opportunities may exist for more efficient vulnerability detection and resolution. We found ODC+V's property of associating vulnerability and defect discovery and resolution events with their software development process contexts helpful for gaining insight into three open source software projects. The addition of the SecurityImpact attribute, in particular, brought visibility into when threat types are discovered during the development process. We would expect use of ODC+V (and of base ODC) periodically over time to be helpful for steering software development projects toward their quality assurance goals.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects? 1518430384691 Patrick Morrison North Carolina State University pjmorris@ncsu.edu Rahul Pandita Phase Change Software rpandita@phasechange.ai Xusheng Xiao Case Western Reserve University xusheng.xiao@case.edu Ram Chillarege Chillarege info@chillarege.com Laurie Williams North Carolina State University williams@csc.ncsu.edu metrics security Software defect data has long been used to drive software development process improvement. If security defects (i.e., vulnerabilities) are discovered and resolved by different software development practices than non-security defects, the knowledge of that distinction could be applied to drive process improvement. The goal of this research is to support technical leaders in making security-specific software development process improvements by analyzing the differences between the discovery and resolution of defects versus that of vulnerabilities. We extend Orthogonal Defect Classification (ODC), a scheme for classifying software defects to support software development process improvement, to study process-related differences between vulnerabilities and defects, creating ODC + Vulnerabilities (ODC+V). We applied ODC+V to classify 583 vulnerabilities and 583 defects across 133 releases of three open-source projects (Firefox, phpMyAdmin, and Chrome). Compared with defects, vulnerabilities are found later in the development cycle and are more likely to be resolved through changes to conditional logic. In Firefox, vulnerabilities are resolved 33% more quickly than defects. From a process improvement perspective, these results indicate opportunities may exist for more efficient vulnerability detection and resolution. We found ODC+V's property of associating vulnerability and defect discovery and resolution events with their software development process contexts helpful for gaining insight into three open source software projects. The addition of the SecurityImpact attribute, in particular, brought visibility into when threat types are discovered during the development process. We would expect use of ODC+V (and of base ODC) periodically over time to be helpful for steering software development projects toward their quality assurance goals.",
              "pageNumber": 498,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 16: Communities and Ecosystems",
          "lineItems": [
            {
              "id": "58HXRM9VSqbUAKRq7ofJ2v",
              "type": "authorPaper",
              "text": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf",
              "extraLocations": [],
              "authorNames": "Maurício Aniche (Delft University of Technology), Christoph Treude (University of Adelaide), Igor Steinmacher (Northern Arizona University), Igor Wiese (Technological University of Paraná (UTFPR)), Gustavo Pinto (University of Pará), Margaret-Anne Storey (University of Victoria), Marco Aurélio Gerosa (Northern Arizona University)",
              "abstract": "Many developers rely on modern news aggregator sites such as reddit and hn to stay up to date with the latest technological developments and trends. In order to understand what motivates developers to contribute, what kind of content is shared, and how knowledge is shaped by the community, we interviewed and surveyed developers that participate on the reddit programming subreddit and we analyzed a sample of posts on both reddit and hn. We learned what kind of content is shared in these websites and developer motivations for posting, sharing, discussing, evaluating, and aggregating knowledge on these aggregators, while revealing challenges developers face in terms of how content and participant behavior is moderated. Our insights aim to improve the practices developers follow when using news aggregators, as well as guide tool makers on how to improve their tools. Our findings are also relevant to researchers that study developer communities of practice.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 How Modern News Aggregators Help Development Communities Shape and Share Knowledge 1518424828392 Maurício Aniche Delft University of Technology m.f.aniche@tudelft.nl Christoph Treude University of Adelaide christoph.treude@adelaide.edu.au Igor Steinmacher Northern Arizona University igor.steinmacher@nau.edu Igor Wiese Technological University of Paraná (UTFPR) igor@utfpr.edu.br Gustavo Pinto University of Pará gpinto@ufpa.br Margaret-Anne Storey University of Victoria mstorey@uvic.ca Marco Aurélio Gerosa Northern Arizona University marco.gerosa@nau.edu News aggregators development communities knowledge sharing social computing Many developers rely on modern news aggregator sites such as reddit and hn to stay up to date with the latest technological developments and trends. In order to understand what motivates developers to contribute, what kind of content is shared, and how knowledge is shaped by the community, we interviewed and surveyed developers that participate on the reddit programming subreddit and we analyzed a sample of posts on both reddit and hn. We learned what kind of content is shared in these websites and developer motivations for posting, sharing, discussing, evaluating, and aggregating knowledge on these aggregators, while revealing challenges developers face in terms of how content and participant behavior is moderated. Our insights aim to improve the practices developers follow when using news aggregators, as well as guide tool makers on how to improve their tools. Our findings are also relevant to researchers that study developer communities of practice.",
              "pageNumber": 499,
              "isPageNumberRoman": false
            },
            {
              "id": "kmuOKGhadb3tcaXnmfNK7",
              "type": "authorPaper",
              "text": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5zZif4Y9gORqhqO7eKhhoZ/2NGpYIgnByWOIFiwUyBUr0.pdf",
              "extraLocations": [],
              "authorNames": "Asher Trockman (University of Evansville), Shurui Zhou (Carnegie Mellon University), Christian Kästner (Carnegie Mellon University), Bogdan Vasilescu (Carnegie Mellon University)",
              "abstract": "In fast-paced, reuse-heavy, and distributed software development, the transparency provided by social coding platforms like GitHub is essential to decision making. Developers infer the quality of projects using visible cues, known as signals, collected from personal profile and repository pages. We report on a large-scale, mixed-methods empirical study of npm packages that explores the emerging phenomenon of repository badges, with which maintainers signal underlying qualities about their projects to contributors and users. We investigate which qualities maintainers intend to signal and how well badges correlate with those qualities. After surveying developers, mining 294,941 repositories, and applying statistical modeling and time-series analyses, we find that non-trivial badges, which display the build status, test coverage, and up-to-dateness of dependencies, are mostly reliable signals, correlating with more tests, better pull requests, and fresher dependencies. Displaying such badges correlates with best practices, but the effects do not always persist.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem 1518501819718 Asher Trockman University of Evansville asher.trockman@gmail.com Shurui Zhou Carnegie Mellon University shuruiz@cs.cmu.edu Christian Kästner Carnegie Mellon University kaestner@cmu.edu Bogdan Vasilescu Carnegie Mellon University vasilescu@cmu.edu repository badge signaling theory regression discontinuity design mining software repositories dependency manager In fast-paced, reuse-heavy, and distributed software development, the transparency provided by social coding platforms like GitHub is essential to decision making. Developers infer the quality of projects using visible cues, known as signals, collected from personal profile and repository pages. We report on a large-scale, mixed-methods empirical study of npm packages that explores the emerging phenomenon of repository badges, with which maintainers signal underlying qualities about their projects to contributors and users. We investigate which qualities maintainers intend to signal and how well badges correlate with those qualities. After surveying developers, mining 294,941 repositories, and applying statistical modeling and time-series analyses, we find that non-trivial badges, which display the build status, test coverage, and up-to-dateness of dependencies, are mostly reliable signals, correlating with more tests, better pull requests, and fresher dependencies. Displaying such badges correlates with best practices, but the effects do not always persist.",
              "pageNumber": 511,
              "isPageNumberRoman": false
            },
            {
              "id": "4ottu0ZfZCwFxt6gsQCjPL",
              "type": "authorPaper",
              "text": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf",
              "extraLocations": [],
              "authorNames": "Daniel German (University of Victoria), Gregorio Robles (Universidad Rey Juan Carlos), Germán Poo-Caamaño (University of Victoria), Xin Yang (Osaka University), Hajimu Iida (Nara Institute of Technology), Katsuro Inoue (Osaka University)",
              "abstract": "Modern code reviews improve the quality of software products. Although modern code reviews rely heavily on human interactions, little is known regarding whether they are performed fairly. Fairness plays a role in any process where decisions that affect others are made. When a system is perceived to be unfair, it affects negatively the productivity and motivation of its participants. In this paper, using fairness theory we create a framework that describes how fairness affects modern code reviews. To demonstrate its applicability, and the importance of fairness in code reviews, we conducted an em-pirical study that asked developers of a large industrial open source ecosystem (OpenStack) what their perceptions are regarding fairness in their code reviewing process. Our study shows that, in general, the code review process in OpenStack is perceived as fair; however, a significant portion of respondents perceive it as unfair. We also show that the variability in the way they prioritize code reviews signals a lack of consistency and the existence of bias (potentially increasing the perception of unfairness). The contributions of this paper are: (1) we propose a framework—based on fairness theory—for studying and managing social behaviour in modern code reviews, (2) we provide support for the framework through the results of a case study on a large industrial-backed open source project, (3) we present evidence that fairness is an issue in the code review process of a large open source ecosystem, and, (4) we present a set of guidelines for practitioners to address unfairness in modern code reviews.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 \"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews 1518499667744 Daniel German University of Victoria dmg@uvic.ca Gregorio Robles Universidad Rey Juan Carlos grex@gsyc.urjc.es Germán Poo-Caamaño University of Victoria gpoo@uvic.ca Xin Yang Osaka University xinyang@ist.osaka-u.ac.jp Hajimu Iida Nara Institute of Technology iida@itc.naist.jp Katsuro Inoue Osaka University inoue@ist.osaka-u.ac.jp Fairness Software Development Code Reviews Open source software human and social aspects transparency Modern code reviews improve the quality of software products. Although modern code reviews rely heavily on human interactions, little is known regarding whether they are performed fairly. Fairness plays a role in any process where decisions that affect others are made. When a system is perceived to be unfair, it affects negatively the productivity and motivation of its participants. In this paper, using fairness theory we create a framework that describes how fairness affects modern code reviews. To demonstrate its applicability, and the importance of fairness in code reviews, we conducted an em-pirical study that asked developers of a large industrial open source ecosystem (OpenStack) what their perceptions are regarding fairness in their code reviewing process. Our study shows that, in general, the code review process in OpenStack is perceived as fair; however, a significant portion of respondents perceive it as unfair. We also show that the variability in the way they prioritize code reviews signals a lack of consistency and the existence of bias (potentially increasing the perception of unfairness). The contributions of this paper are: (1) we propose a framework—based on fairness theory—for studying and managing social behaviour in modern code reviews, (2) we provide support for the framework through the results of a case study on a large industrial-backed open source project, (3) we present evidence that fairness is an issue in the code review process of a large open source ecosystem, and, (4) we present a set of guidelines for practitioners to address unfairness in modern code reviews.",
              "pageNumber": 523,
              "isPageNumberRoman": false
            },
            {
              "id": "7jRSciMrZtZexTy0gUoCPz",
              "type": "authorPaper",
              "text": "[Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract]",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/ktxzV8GdMxTKUoO3iqAdi/4ppbixCN5xA3Zv0WUGwaIa.pdf",
              "extraLocations": [],
              "authorNames": "Davide Di Ruscio (University of L’Aquila, Italy), Mirco Franzago (University of L’Aquila, Italy), Ivano Malavolta (Vrije Universiteit Amsterdam), Henry Muccini (University of L’Aquila, Italy)",
              "abstract": "This proposal is about a study we recently published in the IEEE Transaction of Software Engineering journal [4]. Context: Collaborative software engineering (CoSE) deals with methods, processes and tools for enhancing collaboration, communication, and co-ordination (3C) among team members. CoSE can be employed to conceive different kinds of artifacts during the development and evolution of software systems. For instance, when focusing on software design, multiple stakeholders with different expertise and responsibility collaborate on the system design. Model-Driven Software Engineering (MDSE) provides suitable techniques and tools for specifying, manipulating, and analyzing modeling artifacts including metamodels, models, and transformations. Collaborative MDSE consists of methods or techniques in which multiple stakeholders manage, collaborate, and are aware of each others' work on a set of shared models. A collaborative MDSE approach is composed of three main complementary dimensions: (i) a model management infrastructure for managing the life cycle of the models, (ii) a set of collaboration means for allowing involved stakeholders to work on the modelling artifacts collaboratively, and (iii) a set of communication means for allowing involved stakeholders to exchange, share, and communicate information within the team. Collaborative MDSE is attracting several research efforts from different research areas (e.g., model-driven engineering, global software engineering, etc.), resulting in a variegated scientific body of knowledge on the topic. Objective: In this study we aim at identifying, classifying, and understanding existing collaborative MDSE approaches. More specifically, our goal is to assess (i) the key characteristics of collaborative MDSE approaches (e.g., model editing environments, model versioning mechanisms, model repositories, support for communication and decision making), (ii) their faced challenges and limitations, and (iii) the interest of researchers in collaborative MDSE approaches over time and their focus on the three dimensions of collaborative MDSE. Method: In order to achieve this, we designed and conducted a systematic mapping study on collaborative MDSE. Starting from over 3,000 potentially relevant studies, we applied a rigorous selection procedure resulting in 106 selected papers, further clustered into 48 primary studies, along a time span of nineteen years. A suitable classification framework has been empirically defined and rigorously applied for extracting key information from each selected study. We collated, summarized, and analyzed extracted data by applying scientifically sound data synthesis techniques. Results: In addition to a number of specific insights, our analysis revealed the following key findings: (i) there is a growing scientific interest on collaborative MDSE in the last years; (ii) multi-view modeling, validation support, reuse, and branching are more rarely covered with respect to other aspects about collaborative MDSE; (iii) different primary studies focus differently on individual dimensions of collaborative MDSE (i.e., model management, collaboration, and communication); (iv) most approaches are language-specific, with a prominence of UML-based approaches; (v) few approaches support the interplay between synchronous and asynchronous collaboration. Conclusion: This study gives a solid foundation for a thorough identification and comparison of existing and future approaches for collaborative MDSE. Those results can be used by both researchers and practitioners for identifying existing research/technical gaps to attack, better scoping their own contributions to the field, or better understanding or refining existing ones.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract] 1516898913292 Davide Di Ruscio University of L’Aquila, Italy davide.diruscio@univaq.it Mirco Franzago University of L’Aquila, Italy mircofranzago@gmail.com Ivano Malavolta Vrije Universiteit Amsterdam i.malavolta@vu.nl Henry Muccini University of L’Aquila, Italy henry.muccini@univaq.it Collaborative MDSE CoMDSE C MDSE model driven engineering collaborative software engineering CoSE systematic mapping study This proposal is about a study we recently published in the IEEE Transaction of Software Engineering journal [4]. Context: Collaborative software engineering (CoSE) deals with methods, processes and tools for enhancing collaboration, communication, and co-ordination (3C) among team members. CoSE can be employed to conceive different kinds of artifacts during the development and evolution of software systems. For instance, when focusing on software design, multiple stakeholders with different expertise and responsibility collaborate on the system design. Model-Driven Software Engineering (MDSE) provides suitable techniques and tools for specifying, manipulating, and analyzing modeling artifacts including metamodels, models, and transformations. Collaborative MDSE consists of methods or techniques in which multiple stakeholders manage, collaborate, and are aware of each others' work on a set of shared models. A collaborative MDSE approach is composed of three main complementary dimensions: (i) a model management infrastructure for managing the life cycle of the models, (ii) a set of collaboration means for allowing involved stakeholders to work on the modelling artifacts collaboratively, and (iii) a set of communication means for allowing involved stakeholders to exchange, share, and communicate information within the team. Collaborative MDSE is attracting several research efforts from different research areas (e.g., model-driven engineering, global software engineering, etc.), resulting in a variegated scientific body of knowledge on the topic. Objective: In this study we aim at identifying, classifying, and understanding existing collaborative MDSE approaches. More specifically, our goal is to assess (i) the key characteristics of collaborative MDSE approaches (e.g., model editing environments, model versioning mechanisms, model repositories, support for communication and decision making), (ii) their faced challenges and limitations, and (iii) the interest of researchers in collaborative MDSE approaches over time and their focus on the three dimensions of collaborative MDSE. Method: In order to achieve this, we designed and conducted a systematic mapping study on collaborative MDSE. Starting from over 3,000 potentially relevant studies, we applied a rigorous selection procedure resulting in 106 selected papers, further clustered into 48 primary studies, along a time span of nineteen years. A suitable classification framework has been empirically defined and rigorously applied for extracting key information from each selected study. We collated, summarized, and analyzed extracted data by applying scientifically sound data synthesis techniques. Results: In addition to a number of specific insights, our analysis revealed the following key findings: (i) there is a growing scientific interest on collaborative MDSE in the last years; (ii) multi-view modeling, validation support, reuse, and branching are more rarely covered with respect to other aspects about collaborative MDSE; (iii) different primary studies focus differently on individual dimensions of collaborative MDSE (i.e., model management, collaboration, and communication); (iv) most approaches are language-specific, with a prominence of UML-based approaches; (v) few approaches support the interplay between synchronous and asynchronous collaboration. Conclusion: This study gives a solid foundation for a thorough identification and comparison of existing and future approaches for collaborative MDSE. Those results can be used by both researchers and practitioners for identifying existing research/technical gaps to attack, better scoping their own contributions to the field, or better understanding or refining existing ones.",
              "pageNumber": 535,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 17: Testing I",
          "lineItems": [
            {
              "id": "7IAN8vGa55x2VSMUAUTmbk",
              "type": "authorPaper",
              "text": "[Journal First] ChangeLocator: Locate Crash-Inducing Changes Based on Crash Reports",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6UNHbzVwmZVSsRWnuhsdWp/2bRMUsVOinygp3ZsKkc26P.pdf",
              "extraLocations": [],
              "authorNames": "Rongxin Wu (The Hong Kong University of Science and Technology), Ming Wen (The Hong Kong University of Science and Technology), Shing-Chi Cheung (The Hong Kong University of Science and Technology), Hongyu Zhang (The University of Newcastle)",
              "abstract": "Software crashes are severe manifestations of software bugs. Debugging crashing bugs is tedious and time-consuming. Understanding software changes that induce a crashing bug can provide useful contextual information for bug fixing and is highly demanded by developers. Locating the bug inducing changes is also useful for automatic program repair, since it narrows down the root causes and reduces the search space of bug fix location. However, currently there are no systematic studies on locating the software changes to a source code repository that induce a crashing bug reflected by a bucket of crash reports. To tackle this problem, we first conducted an empirical study on characterizing the bug inducing changes for crashing bugs (denoted as crashinducing changes). We also propose ChangeLocator, a method to automatically locate crash-inducing changes for a given bucket of crash reports. We base our approach on a learning model that uses features originated from our empirical study and train the model using the data from the historical fixed crashes. We evaluated ChangeLocator with six release versions of Netbeans project. The results show that it can locate the crash-inducing changes for 44.7%, 68.5%, and 74.5% of the bugs by examining only top 1, 5 and 10 changes in the recommended list, respectively. It significantly outperforms the existing state-of-the-art approach.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] ChangeLocator: Locate Crash-Inducing Changes Based on Crash Reports 1517031700819 Rongxin Wu The Hong Kong University of Science and Technology wurongxin@cse.ust.hk Ming Wen The Hong Kong University of Science and Technology mwenaa@cse.ust.hk Shing-Chi Cheung The Hong Kong University of Science and Technology scc@cse.ust.hk Hongyu Zhang The University of Newcastle hongyu.zhang@newcastle.edu.au crash-inducing change software crash crash stack bug localization Software crashes are severe manifestations of software bugs. Debugging crashing bugs is tedious and time-consuming. Understanding software changes that induce a crashing bug can provide useful contextual information for bug fixing and is highly demanded by developers. Locating the bug inducing changes is also useful for automatic program repair, since it narrows down the root causes and reduces the search space of bug fix location. However, currently there are no systematic studies on locating the software changes to a source code repository that induce a crashing bug reflected by a bucket of crash reports. To tackle this problem, we first conducted an empirical study on characterizing the bug inducing changes for crashing bugs (denoted as crashinducing changes). We also propose ChangeLocator, a method to automatically locate crash-inducing changes for a given bucket of crash reports. We base our approach on a learning model that uses features originated from our empirical study and train the model using the data from the historical fixed crashes. We evaluated ChangeLocator with six release versions of Netbeans project. The results show that it can locate the crash-inducing changes for 44.7%, 68.5%, and 74.5% of the bugs by examining only top 1, 5 and 10 changes in the recommended list, respectively. It significantly outperforms the existing state-of-the-art approach.",
              "pageNumber": 536,
              "isPageNumberRoman": false
            },
            {
              "id": "1kOo1ZQFx5SXlzrp3kY41v",
              "type": "authorPaper",
              "text": "Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/53KVBZlCxSM8SKMrWZTReW/5SVStngTUruEo7SDPWMIhR.pdf",
              "extraLocations": [],
              "authorNames": "Mike Papadakis (University of Luxembourg), Donghwan Shin (Korea Advanced Institute of Science and Technology), Shin Yoo (Korea Advanced Institute of Science and Technology), Doo-Hwan Bae (Korea Advanced Institute of Science and Technology)",
              "abstract": "Empirical validation of software testing studies is increasingly relying on mutants. This practice is motivated by the strong correlation between mutant scores and real fault detection that is reported in the literature. In contrast, our study shows that correlations are the results of the confounding effects of the test suite size. In particular, we investigate the relation between two independent variables, mutation score and test suite size, with one dependent variable the detection of (real) faults. We use two data sets, CoreBench and De-fects4J, with large C and Java programs and real faults and provide evidence that all correlations between mutation scores and real fault detection are weak when controlling for test suite size. We also found that both independent variables significantly influence the dependent one, with significantly better fits, but overall with relative low prediction power. By measuring the fault detection capability of the top ranked, according to mutation score, test suites (opposed to randomly selected test suites of the same size), we found that achieving higher mutation scores improves significantly the fault detection. Taken together, our data suggest that mutants provide good guidance for improving the fault detection of test suites, but their correlation with fault detection are weak.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults 1518466330130 Mike Papadakis University of Luxembourg michail.papadakis@uni.lu Donghwan Shin Korea Advanced Institute of Science and Technology donghwan@se.kaist.ac.kr Shin Yoo Korea Advanced Institute of Science and Technology shin.yoo@kaist.ac.kr Doo-Hwan Bae Korea Advanced Institute of Science and Technology bae@se.kaist.ac.kr mutation testing real faults test suite effectiveness Empirical validation of software testing studies is increasingly relying on mutants. This practice is motivated by the strong correlation between mutant scores and real fault detection that is reported in the literature. In contrast, our study shows that correlations are the results of the confounding effects of the test suite size. In particular, we investigate the relation between two independent variables, mutation score and test suite size, with one dependent variable the detection of (real) faults. We use two data sets, CoreBench and De-fects4J, with large C and Java programs and real faults and provide evidence that all correlations between mutation scores and real fault detection are weak when controlling for test suite size. We also found that both independent variables significantly influence the dependent one, with significantly better fits, but overall with relative low prediction power. By measuring the fault detection capability of the top ranked, according to mutation score, test suites (opposed to randomly selected test suites of the same size), we found that achieving higher mutation scores improves significantly the fault detection. Taken together, our data suggest that mutants provide good guidance for improving the fault detection of test suites, but their correlation with fault detection are weak.",
              "pageNumber": 537,
              "isPageNumberRoman": false
            },
            {
              "id": "5CIL7QVh6EvLMzIUCYwrIO",
              "type": "authorPaper",
              "text": "Efficient Sampling of SAT Solutions for Testing",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2fyL1Vd11RDdXakS4SXepo/4LVpbk5KkDNS1ZKZjpyWq5.pdf",
              "extraLocations": [],
              "authorNames": "Rafael Dutra (University of California, Berkeley), Kevin Laeufer (University of California, Berkeley), Jonathan Bachrach (University of California, Berkeley), Koushik Sen (University of California, Berkeley)",
              "abstract": "In software and hardware testing, generating multiple inputs which satisfy a given set of constraints is an important problem with applications in fuzz testing and stimulus generation. However, it is a challenge to perform the sampling efficiently, while generating a diverse set of inputs which satisfy the constraints. We developed a new algorithm QuickSampler which requires a small number of solver calls to produce millions of samples which satisfy the constraints with high probability. We evaluate QuickSampler on large real-world benchmarks and show that it can produce unique valid solutions orders of magnitude faster than other state-of-the-art sampling tools, with a distribution which is reasonably close to uniform in practice.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Efficient Sampling of SAT Solutions for Testing 1518502054504 Rafael Dutra University of California, Berkeley rtd@cs.berkeley.edu Kevin Laeufer University of California, Berkeley laeufer@cs.berkeley.edu Jonathan Bachrach University of California, Berkeley jrb@eecs.berkeley.edu Koushik Sen University of California, Berkeley ksen@cs.berkeley.edu sampling stimulus generation constraint-based testing constrained random verification In software and hardware testing, generating multiple inputs which satisfy a given set of constraints is an important problem with applications in fuzz testing and stimulus generation. However, it is a challenge to perform the sampling efficiently, while generating a diverse set of inputs which satisfy the constraints. We developed a new algorithm QuickSampler which requires a small number of solver calls to produce millions of samples which satisfy the constraints with high probability. We evaluate QuickSampler on large real-world benchmarks and show that it can produce unique valid solutions orders of magnitude faster than other state-of-the-art sampling tools, with a distribution which is reasonably close to uniform in practice.",
              "pageNumber": 549,
              "isPageNumberRoman": false
            },
            {
              "id": "3Pgg8zuuA7u43ChD4ziM30",
              "type": "authorPaper",
              "text": "[Journal First] Are Fix-Inducing Changes a Moving Target?: A Longitudinal Case Study of Just-in-Time Defect Prediction",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3uRSaEmVCZ8sxcHsoTOQlj/IB9wBk3BHYMYBlqgTMQQj.pdf",
              "extraLocations": [],
              "authorNames": "Shane McIntosh (McGill University), Yasutaka Kamei (Kyushu University)",
              "abstract": "Just-In-Time (JIT) models identify fix-inducing code changes. JIT models are trained using techniques that assume that past fix-inducing changes are similar to future ones. However, this assumption may not hold, e.g., as system complexity tends to accrue, expertise may become more important as systems age. In this paper, we study JIT models as systems evolve. Through a longitudinal case study of 37,524 changes from the rapidly evolving Qt and OpenStack systems, we find that fluctuations in the properties of fix-inducing changes can impact the performance and interpretation of JIT models. More specifically: (a) the discriminatory power (AUC) and calibration (Brier) scores of JIT models drop considerably one year after being trained; (b) the role that code change properties (e.g., Size, Experience) play within JIT models fluctuates over time; and (c) those fluctuations yield over- and underestimates of the future impact of code change properties on the likelihood of inducing fixes. To avoid erroneous or misleading predictions, JIT models should be retrained using recently recorded data (within three months). Moreover, quality improvement plans should be informed by JIT models that are trained using six months (or more) of historical data, since they are more resilient to period-specific fluctuations in the importance of code change properties.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Are Fix-Inducing Changes a Moving Target?: A Longitudinal Case Study of Just-in-Time Defect Prediction 1516633923203 Shane McIntosh McGill University shane.mcintosh@mcgill.ca Yasutaka Kamei Kyushu University kamei@ait.kyushu-u.ac.jp Just In Time prediction Defect prediction Mining software repositories Just-In-Time (JIT) models identify fix-inducing code changes. JIT models are trained using techniques that assume that past fix-inducing changes are similar to future ones. However, this assumption may not hold, e.g., as system complexity tends to accrue, expertise may become more important as systems age. In this paper, we study JIT models as systems evolve. Through a longitudinal case study of 37,524 changes from the rapidly evolving Qt and OpenStack systems, we find that fluctuations in the properties of fix-inducing changes can impact the performance and interpretation of JIT models. More specifically: (a) the discriminatory power (AUC) and calibration (Brier) scores of JIT models drop considerably one year after being trained; (b) the role that code change properties (e.g., Size, Experience) play within JIT models fluctuates over time; and (c) those fluctuations yield over- and underestimates of the future impact of code change properties on the likelihood of inducing fixes. To avoid erroneous or misleading predictions, JIT models should be retrained using recently recorded data (within three months). Moreover, quality improvement plans should be informed by JIT models that are trained using six months (or more) of historical data, since they are more resilient to period-specific fluctuations in the importance of code change properties.",
              "pageNumber": 560,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 18: Studying Software Engineers I",
          "lineItems": [
            {
              "id": "3W1okIo81oCyhqKnHFSe0x",
              "type": "authorPaper",
              "text": "Understanding Developers' Needs on Deprecation as a Language Feature",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2P1QIz0vZHnpdIEQ9etDfn/70WC3YCsckq6uPXtWKXnDs.pdf",
              "extraLocations": [],
              "authorNames": "Anand Ashok Sawant (Delft University of Technology), Mauricio Aniche (Delft University of Technology), Arie van Deursen (Delft University of Technology), Alberto Bacchelli (University of Zurich)",
              "abstract": "Deprecation is a language feature that allows API producers to mark a feature as obsolete. We aim to gain a deep understanding of the needs of API producers and consumers alike regarding deprecation. To that end, we investigate why API producers deprecate features, whether they remove deprecated features, how they expect consumers to react, and what prompts an API consumer to react to deprecation. To achieve this goal we conduct semi-structured interviews with 17 third-party Java API producers and survey 170 Java developers. We observe that the current deprecation mechanism in Java and the proposal to enhance it does not address all the needs of a developer. This leads us to propose and evaluate three further enhancements to the deprecation mechanism.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Understanding Developers' Needs on Deprecation as a Language Feature 1518471215848 Anand Ashok Sawant Delft University of Technology A.A.Sawant@tudelft.nl Mauricio Aniche Delft University of Technology m.f.aniche@tudelft.nl Arie van Deursen Delft University of Technology Arie.vanDeursen@tudelft.nl Alberto Bacchelli University of Zurich bacchelli@ifi.uzh.ch API deprecation Java Deprecation is a language feature that allows API producers to mark a feature as obsolete. We aim to gain a deep understanding of the needs of API producers and consumers alike regarding deprecation. To that end, we investigate why API producers deprecate features, whether they remove deprecated features, how they expect consumers to react, and what prompts an API consumer to react to deprecation. To achieve this goal we conduct semi-structured interviews with 17 third-party Java API producers and survey 170 Java developers. We observe that the current deprecation mechanism in Java and the proposal to enhance it does not address all the needs of a developer. This leads us to propose and evaluate three further enhancements to the deprecation mechanism.",
              "pageNumber": 561,
              "isPageNumberRoman": false
            },
            {
              "id": "1HbqmmixtXH0nAoDLULfZX",
              "type": "authorPaper",
              "text": "On the Dichotomy of Debugging Behavior Among Programmers",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/xP54rozvutqKTsorAW4JU/7Y1r5jMBEpcFZDC2Ip9iV.pdf",
              "extraLocations": [],
              "authorNames": "Moritz Beller (Delft University of Technology), Niels Spruit (Delft University of Technology), Diomidis Spinellis (Athens University of Economics and Business), Andy Zaidman (Delft University of Technology)",
              "abstract": "Debugging is an inevitable activity in most software projects, often difficult and more time-consuming than expected, giving it the nickname the \"dirty little secret of computer science.\" Surprisingly, we have little knowledge on how software engineers debug software problems in the real world, whether they use dedicated debugging tools, and how knowledgeable they are about debugging. This study aims to shed light on these aspects by following a mixed-methods research approach. We conduct an online survey capturing how 176 developers reflect on debugging. We augment this subjective survey data with objective observations on how 458 developers use the debugger included in their integrated development environments (IDEs) by instrumenting the popular Eclipse and IntelliJ IDEs with the purpose-built plugin WatchDog 2.0. To clarify the insights and discrepancies observed in the previous steps, we followed up by conducting interviews with debugging experts and regular debugging users. Our results indicate that IDE-provided debuggers are not used as often as expected, as \"printf debugging\" remains a feasible choice for many programmers. Furthermore, both knowledge and use of advanced debugging features are low. These results call to strengthen hands-on debugging experience in computer science curricula and have already refined the implementation of modern IDE debuggers.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 On the Dichotomy of Debugging Behavior Among Programmers 1518021553716 Moritz Beller Delft University of Technology m.m.beller@tudelft.nl Niels Spruit Delft University of Technology spruit.niels@gmail.com Diomidis Spinellis Athens University of Economics and Business dds@aueb.gr Andy Zaidman Delft University of Technology a.e.zaidman@tudelft.nl Debugging Testing WatchDog IntelliJ Eclipse Debugging is an inevitable activity in most software projects, often difficult and more time-consuming than expected, giving it the nickname the \"dirty little secret of computer science.\" Surprisingly, we have little knowledge on how software engineers debug software problems in the real world, whether they use dedicated debugging tools, and how knowledgeable they are about debugging. This study aims to shed light on these aspects by following a mixed-methods research approach. We conduct an online survey capturing how 176 developers reflect on debugging. We augment this subjective survey data with objective observations on how 458 developers use the debugger included in their integrated development environments (IDEs) by instrumenting the popular Eclipse and IntelliJ IDEs with the purpose-built plugin WatchDog 2.0. To clarify the insights and discrepancies observed in the previous steps, we followed up by conducting interviews with debugging experts and regular debugging users. Our results indicate that IDE-provided debuggers are not used as often as expected, as \"printf debugging\" remains a feasible choice for many programmers. Furthermore, both knowledge and use of advanced debugging features are low. These results call to strengthen hands-on debugging experience in computer science curricula and have already refined the implementation of modern IDE debuggers.",
              "pageNumber": 572,
              "isPageNumberRoman": false
            },
            {
              "id": "7LzCKHtOvNgBUqwNIyBIdx",
              "type": "authorPaper",
              "text": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf",
              "extraLocations": [],
              "authorNames": "Xin Xia (Monash University), Lingfeng Bao (Zhejiang University), David Lo (Singapore Management University), Zhenchang Xing (Australian National University), Ahmed E. Hassan (Queen’s University), Shanping Li (Zhejiang University)",
              "abstract": "This paper is published in IEEE Transaction on Software Engineering (DOI: 10.1109/TSE.2017.2734091). Comparing with previous programming comprehension studies that are usually in controlled settings or have a small number of participants, we perform a more realistic investigation of program comprehension activities. To do this, we extend our ActivitySpace framework to collect and analyze Human-Computer Interaction (HCI) data across many applications (not just the IDEs). We collect 3,148 working hour data from 78 professional developers in a field study. We follow Minelli et al.'s approach to assign developers' activities into four categories: navigation, editing, comprehension, and other. Then we measure comprehension time by calculating the time that developers spend on program comprehension. We find that on average developers spend ~58% of their time on program comprehension activities, and that they frequently use web browsers and document editors to perform program comprehension activities. We also investigate the impact of programming language, developers' experience, and project phase on the time that is spent on program comprehension.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals 1516766018373 Xin Xia Monash University xin.xia@monash.edu Lingfeng Bao Zhejiang University lingfengbao@zju.edu.cn David Lo Singapore Management University davidlo@smu.edu.sg Zhenchang Xing Australian National University zhenchang.xing@anu.edu.au Ahmed E. Hassan Queen’s University ahmed@cs.queensu.ca Shanping Li Zhejiang University shan@zju.edu.cn Program Comprehension Field Study Inference Model This paper is published in IEEE Transaction on Software Engineering (DOI: 10.1109/TSE.2017.2734091). Comparing with previous programming comprehension studies that are usually in controlled settings or have a small number of participants, we perform a more realistic investigation of program comprehension activities. To do this, we extend our ActivitySpace framework to collect and analyze Human-Computer Interaction (HCI) data across many applications (not just the IDEs). We collect 3,148 working hour data from 78 professional developers in a field study. We follow Minelli et al.'s approach to assign developers' activities into four categories: navigation, editing, comprehension, and other. Then we measure comprehension time by calculating the time that developers spend on program comprehension. We find that on average developers spend ~58% of their time on program comprehension activities, and that they frequently use web browsers and document editors to perform program comprehension activities. We also investigate the impact of programming language, developers' experience, and project phase on the time that is spent on program comprehension.",
              "pageNumber": 584,
              "isPageNumberRoman": false
            },
            {
              "id": "7h0nWCXKu81EwOMiysC9jm",
              "type": "authorPaper",
              "text": "[Journal First] Data Scientists in Software Teams: State of the Art and Challenges",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47NY96sCKYhfY6lLApaAdS/UjTg5agZVWapuv8BiuO4t.pdf",
              "extraLocations": [],
              "authorNames": "Miryung Kim (UCLA), Thomas Zimmermann (Microsoft Research), Robert DeLine (Microsoft Research), Andrew Begel (Microsoft Research)",
              "abstract": "The demand for analyzing large scale telemetry, machine, and quality data is rapidly increasing in software industry. Data scientists are becoming popular within software teams. For example, Facebook, LinkedIn and Microsoft are creating a new career path for data scientists. In this paper, we present a large-scale survey with 793 professional data scientists at Microsoft to understand their educational background, problem topics that they work on, tool usages, and activities. We cluster these data scientists based on the time spent for various activities and identify 9 distinct clusters of data scientists and their corresponding characteristics. We also discuss the challenges that they face and the best practices they share with other data scientists. Our study finds several trends about data scientists in the software engineering context at Microsoft, and should inform managers on how to leverage data science capability effectively within their teams.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Data Scientists in Software Teams: State of the Art and Challenges 1517096057163 Miryung Kim UCLA miryung@cs.ucla.edu Thomas Zimmermann Microsoft Research tzimmer@microsoft.com Robert DeLine Microsoft Research rdeline@microsoft.com Andrew Begel Microsoft Research abegel@microsoft.com Software productivity data science The demand for analyzing large scale telemetry, machine, and quality data is rapidly increasing in software industry. Data scientists are becoming popular within software teams. For example, Facebook, LinkedIn and Microsoft are creating a new career path for data scientists. In this paper, we present a large-scale survey with 793 professional data scientists at Microsoft to understand their educational background, problem topics that they work on, tool usages, and activities. We cluster these data scientists based on the time spent for various activities and identify 9 distinct clusters of data scientists and their corresponding characteristics. We also discuss the challenges that they face and the best practices they share with other data scientists. Our study finds several trends about data scientists in the software engineering context at Microsoft, and should inform managers on how to leverage data science capability effectively within their teams.",
              "pageNumber": 585,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 19: Program Analysis I",
          "lineItems": [
            {
              "id": "3A7dBcsjyn16xXUNc4mOL2",
              "type": "authorPaper",
              "text": "Dataflow Tunneling: Mining Inter-Request Data Dependencies for Request-Based Applications",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Uzz3NxpxluiWAcTMOBAcC/7GhgmQEAmFhlEO0HUMJxtg.pdf",
              "extraLocations": [],
              "authorNames": "Xiao Yu (North Carolina State University), Guoliang Jin (North Carolina State University)",
              "abstract": "Request-based applications, e.g., most server-side applications, expose services to users in a request-based paradigm, in which requests are served by request-handler methods. An important task for request-based applications is inter-request analysis, which analyzes request-handler methods that are related by inter-request data dependencies together. However, in the request-based paradigm, data dependencies between related request-handler methods are implicitly established by the underlying frameworks that execute these methods. As a result, existing analysis tools are usually limited to the scope of each single method without the knowledge of dependencies between different methods. In this paper, we design an approach called dataflow tunneling to capture inter-request data dependencies from concrete application executions and produce data-dependency specifications. Our approach answers two key questions: (1) what request-handler methods have data dependencies and (2) what these data dependencies are. Our evaluation using applications developed with two representative and popular frameworks shows that our approach is general and accurate. We also present a characteristic study and a use case of cache tuning based on the mined specifications. We envision that our approach can provide key information to enable future inter-request analysis techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Dataflow Tunneling: Mining Inter-Request Data Dependencies for Request-Based Applications 1518474711744 Xiao Yu North Carolina State University xyu10@ncsu.edu Guoliang Jin North Carolina State University guoliang_jin@ncsu.edu web application request based applications web frameworks inter request analysis tracing Request-based applications, e.g., most server-side applications, expose services to users in a request-based paradigm, in which requests are served by request-handler methods. An important task for request-based applications is inter-request analysis, which analyzes request-handler methods that are related by inter-request data dependencies together. However, in the request-based paradigm, data dependencies between related request-handler methods are implicitly established by the underlying frameworks that execute these methods. As a result, existing analysis tools are usually limited to the scope of each single method without the knowledge of dependencies between different methods. In this paper, we design an approach called dataflow tunneling to capture inter-request data dependencies from concrete application executions and produce data-dependency specifications. Our approach answers two key questions: (1) what request-handler methods have data dependencies and (2) what these data dependencies are. Our evaluation using applications developed with two representative and popular frameworks shows that our approach is general and accurate. We also present a characteristic study and a use case of cache tuning based on the mined specifications. We envision that our approach can provide key information to enable future inter-request analysis techniques.",
              "pageNumber": 586,
              "isPageNumberRoman": false
            },
            {
              "id": "bl7N9fPRz7RtEoXKwCO4z",
              "type": "authorPaper",
              "text": "Launch-Mode-Aware Context-Sensitive Activity Transition Analysis",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7bwDE4dip5GdlJ7qdGkqCb/3FhNZoNCmobGEDVZfHkbdb.pdf",
              "extraLocations": [],
              "authorNames": "Yifei Zhang (UNSW Sydney), Yulei Sui (University of Technology Sydney), Jingling Xue (UNSW Sydney)",
              "abstract": "Existing static analyses model activity transitions in Android apps context-insensitively, making it impossible to distinguish different activity launch modes, reducing the pointer analysis precision for an activity's callbacks, and potentially resulting in infeasible activity transition paths. In this paper, we introduce Chime, a launch-mode-aware context-sensitive activity transition analysis that models different instances of an activity class according to its launch mode and the transitions between activities context-sensitively, by working together with an object-sensitive pointer analysis. Our evaluation shows that our context-sensitive activity transition analysis is more precise than its context-insensitive counterpart in capturing activity transitions, facilitating GUI testing, and improving the pointer analysis precision.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Launch-Mode-Aware Context-Sensitive Activity Transition Analysis 1518436112757 Yifei Zhang UNSW Sydney yzhang@cse.unsw.edu.au Yulei Sui University of Technology Sydney yulei.sui@uts.edu.au Jingling Xue UNSW Sydney jingling@cse.unsw.edu.au Android Pointer Analysis Activity Transition Analysis Existing static analyses model activity transitions in Android apps context-insensitively, making it impossible to distinguish different activity launch modes, reducing the pointer analysis precision for an activity's callbacks, and potentially resulting in infeasible activity transition paths. In this paper, we introduce Chime, a launch-mode-aware context-sensitive activity transition analysis that models different instances of an activity class according to its launch mode and the transitions between activities context-sensitively, by working together with an object-sensitive pointer analysis. Our evaluation shows that our context-sensitive activity transition analysis is more precise than its context-insensitive counterpart in capturing activity transitions, facilitating GUI testing, and improving the pointer analysis precision.",
              "pageNumber": 598,
              "isPageNumberRoman": false
            },
            {
              "id": "309xfratdqN34DWGrhUZtA",
              "type": "authorPaper",
              "text": "UFO: Predictive Concurrency Use-After-Free Detection",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7vaMmExpgCAHR0lMMVfalr/3tsMUkD88ozwlPiOx8VtCM.pdf",
              "extraLocations": [],
              "authorNames": "Jeff Huang (Texas A&M University)",
              "abstract": "Use-After-Free (UAF) vulnerabilities are caused by the program operating on a dangling pointer and can be exploited to compromise critical software systems. While there have been many tools to mitigate UAF vulnerabilities, UAF remains one of the most common attack vectors. UAF is particularly di cult to detect in concurrent programs, in which a UAF may only occur with rare thread schedules. In this paper, we present a novel technique, UFO, that can precisely predict UAFs based on a single observed execution trace with a provably higher detection capability than existing techniques with no false positives. The key technical advancement of UFO is an extended maximal thread causality model that captures the largest possible set of feasible traces that can be inferred from a given multithreaded execution trace. By formulating UAF detection as a constraint solving problem atop this model, we can explore a much larger thread scheduling space than classical happens-before based techniques. We have evaluated UFO on several real-world large complex C/C++ programs including Chromium and FireFox. UFO scales to real-world systems with hundreds of millions of events in their execution and has detected a large number of real concurrency UAFs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 UFO: Predictive Concurrency Use-After-Free Detection 1518535118359 Jeff Huang Texas A&M University jeff@cse.tamu.edu UAF Concurrency Vulnerabilities UFO Use-After-Free (UAF) vulnerabilities are caused by the program operating on a dangling pointer and can be exploited to compromise critical software systems. While there have been many tools to mitigate UAF vulnerabilities, UAF remains one of the most common attack vectors. UAF is particularly di cult to detect in concurrent programs, in which a UAF may only occur with rare thread schedules. In this paper, we present a novel technique, UFO, that can precisely predict UAFs based on a single observed execution trace with a provably higher detection capability than existing techniques with no false positives. The key technical advancement of UFO is an extended maximal thread causality model that captures the largest possible set of feasible traces that can be inferred from a given multithreaded execution trace. By formulating UAF detection as a constraint solving problem atop this model, we can explore a much larger thread scheduling space than classical happens-before based techniques. We have evaluated UFO on several real-world large complex C/C++ programs including Chromium and FireFox. UFO scales to real-world systems with hundreds of millions of events in their execution and has detected a large number of real concurrency UAFs.",
              "pageNumber": 609,
              "isPageNumberRoman": false
            },
            {
              "id": "4Wn6uGecBnTz4JqwW3XJWd",
              "type": "authorPaper",
              "text": "Collective Program Analysis",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1YWeiRVFEvw8IOF1AlKGcG/4IZyDB4ZYAHK9x1p2oaznN.pdf",
              "extraLocations": [],
              "authorNames": "Ganesha Upadhyaya (Iowa State University), Hridesh Rajan (Iowa State University)",
              "abstract": "Popularity of data-driven software engineering has led to an increasing demand on the infrastructures to support efficient execution of tasks that require deeper source code analysis. While task optimization and parallelization are the adopted solutions, other research directions are less explored. We present collective program analysis (CPA), a technique for scaling large scale source code analyses, especially those that make use of control and data flow analysis, by leveraging analysis specific similarity. Analysis specific similarity is about, whether two or more programs can be considered similar for a given analysis. The key idea of collective program analysis is to cluster programs based on analysis specific similarity, such that running the analysis on one candidate in each cluster is sufficient to produce the result for others. For determining analysis specific similarity and clustering analysis-equivalent programs, we use a sparse representation and a canonical labeling scheme. Our evaluation shows that for a variety of source code analyses on a large dataset of programs, substantial reduction in the analysis time can be achieved; on average a 69% reduction when compared to a baseline and on average a 36% reduction when compared to a prior technique. We also found that a large amount of analysis-equivalent programs exists in large datasets.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Collective Program Analysis 1518514910614 Ganesha Upadhyaya Iowa State University ganeshau@iastate.edu Hridesh Rajan Iowa State University hridesh@iastate.edu Source code analysis Clustering Boa Popularity of data-driven software engineering has led to an increasing demand on the infrastructures to support efficient execution of tasks that require deeper source code analysis. While task optimization and parallelization are the adopted solutions, other research directions are less explored. We present collective program analysis (CPA), a technique for scaling large scale source code analyses, especially those that make use of control and data flow analysis, by leveraging analysis specific similarity. Analysis specific similarity is about, whether two or more programs can be considered similar for a given analysis. The key idea of collective program analysis is to cluster programs based on analysis specific similarity, such that running the analysis on one candidate in each cluster is sufficient to produce the result for others. For determining analysis specific similarity and clustering analysis-equivalent programs, we use a sparse representation and a canonical labeling scheme. Our evaluation shows that for a variety of source code analyses on a large dataset of programs, substantial reduction in the analysis time can be achieved; on average a 69% reduction when compared to a baseline and on average a 36% reduction when compared to a prior technique. We also found that a large amount of analysis-equivalent programs exists in large datasets.",
              "pageNumber": 620,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 20: Human and Social Aspects of Computing II",
          "lineItems": [
            {
              "id": "7mhj9Iy8HwU8tbdu6FlnfB",
              "type": "authorPaper",
              "text": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf",
              "extraLocations": [],
              "authorNames": "Hung Phan (Iowa State University), Hoan Nguyen (Iowa State University), Ngoc Tran (University of Texas at Dallas), Linh Truong (University of Texas at Dallas), Anh Nguyen (Independent Researcher), Tien Nguyen (University of Texas at Dallas)",
              "abstract": "Software developers often make use of the online forums such as StackOverflow to learn how to use software libraries and their APIs. However, the code snippets in such a forum often contain undeclared, ambiguous, or largely unqualified external references. Such declaration ambiguity and external reference ambiguity present challenges for developers in learning to correctly use the APIs. In this paper, we propose StatType, a statistical approach to resolve the fully qualified names (FQNs) for the API elements in such code snippets. Unlike existing approaches that are based on heuristics, StatType has two well-integrated factors. We first learn from a large training code corpus the FQNs that often co-occur. Then, to derive the FQN for an API name in a code snippet, we use that knowledge and leverage the context consisting of neighboring API names. To realize those factors, we treat the problem as statistical machine translation from source code with partially qualified names to source code with FQNs of the APIs. Our empirical evaluation on real-world code and StackOverflow posts shows that StatType achieves very high accuracy with 97.6% precision and 96.7% recall, which is 16.5% relatively higher than the state-of-the-art approach.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums 1517759945649 Hung Phan Iowa State University hungphd@iastate.edu Hoan Nguyen Iowa State University hoan@iastate.edu Ngoc Tran University of Texas at Dallas ngoctran@utdallas.edu Linh Truong University of Texas at Dallas linh.h.truong@utdallas.edu Anh Nguyen Independent Researcher ntanhbk44@gmail.com Tien Nguyen University of Texas at Dallas tien.n.nguyen@utdallas.edu Type Resolution Type Inference Type Annotations Partial Program Analysis Statistical Machine Translation Naturalness Big Code Software developers often make use of the online forums such as StackOverflow to learn how to use software libraries and their APIs. However, the code snippets in such a forum often contain undeclared, ambiguous, or largely unqualified external references. Such declaration ambiguity and external reference ambiguity present challenges for developers in learning to correctly use the APIs. In this paper, we propose StatType, a statistical approach to resolve the fully qualified names (FQNs) for the API elements in such code snippets. Unlike existing approaches that are based on heuristics, StatType has two well-integrated factors. We first learn from a large training code corpus the FQNs that often co-occur. Then, to derive the FQN for an API name in a code snippet, we use that knowledge and leverage the context consisting of neighboring API names. To realize those factors, we treat the problem as statistical machine translation from source code with partially qualified names to source code with FQNs of the APIs. Our empirical evaluation on real-world code and StackOverflow posts shows that StatType achieves very high accuracy with 97.6% precision and 96.7% recall, which is 16.5% relatively higher than the state-of-the-art approach.",
              "pageNumber": 632,
              "isPageNumberRoman": false
            },
            {
              "id": "241CLEnIq0g6r9bU5IgmV1",
              "type": "authorPaper",
              "text": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf",
              "extraLocations": [],
              "authorNames": "Andrew Head (UC Berkeley), Caitlin Sadowski (Google), Emerson Murphy-Hill (NC State University), Andrea Knight (Google)",
              "abstract": "Without usable and accurate documentation of how to use an API, developers can find themselves deterred from reusing relevant code. In C++, one place developers can find documentation is in a header file. When information is missing, they may look at the corresponding implementation code. To understand what's missing from C++ API documentation and the factors influencing whether it will be fixed, we conducted a mixed-methods study involving two experience sampling surveys with hundreds of developers at the moment they visited implementation code, interviews with 18 of those developers, and interviews with 8 API maintainers. In many cases, updating documentation may provide only limited value for developers, while requiring effort maintainers don't want to invest. We identify a set of questions maintainers and tool developers should consider when improving API-level documentation.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects 1518478754634 Andrew Head UC Berkeley andrewhead@berkeley.edu Caitlin Sadowski Google supertri@google.com Emerson Murphy-Hill NC State University emerson@csc.ncsu.edu Andrea Knight Google aknight@google.com documentation human factors developer workflow APIs usability Without usable and accurate documentation of how to use an API, developers can find themselves deterred from reusing relevant code. In C++, one place developers can find documentation is in a header file. When information is missing, they may look at the corresponding implementation code. To understand what's missing from C++ API documentation and the factors influencing whether it will be fixed, we conducted a mixed-methods study involving two experience sampling surveys with hundreds of developers at the moment they visited implementation code, interviews with 18 of those developers, and interviews with 8 API maintainers. In many cases, updating documentation may provide only limited value for developers, while requiring effort maintainers don't want to invest. We identify a set of questions maintainers and tool developers should consider when improving API-level documentation.",
              "pageNumber": 643,
              "isPageNumberRoman": false
            },
            {
              "id": "7fsVbEz9Z6Qnhp2GkgWcg1",
              "type": "authorPaper",
              "text": "Deuce: A Lightweight User Interface for Structured Editing",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1Mth4BXOFVTJCjWvB4WHOp/3upLdV7XPhjL0r2C6eiYqe.pdf",
              "extraLocations": [],
              "authorNames": "Brian Hempel (University of Chicago), Justin Lubin (University of Chicago), Grace Lu (University of Chicago), Ravi Chugh (University of Chicago)",
              "abstract": "We present a structure-aware code editor, called Deuce, that is equipped with direct manipulation capabilities for invoking automated program transformations. Compared to traditional refactoring environments, Deuce employs a direct manipulation interface that is tightly integrated within a text-based editing workflow. In particular, Deuce draws (i) clickable widgets atop the source code that allow the user to structurally select the unstructured text for subexpressions and other relevant features, and (ii) a lightweight, interactive menu of potential transformations based on the current selections. We implement and evaluate our design with mostly standard transformations in the context of a small functional programming language. A controlled user study with 21 participants demonstrates that structural selection is preferred to a more traditional text-selection interface and may be faster overall once users gain experience with the tool. These results accord with Deuce's aim to provide human-friendly structural interactions on top of familiar text-based editing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Deuce: A Lightweight User Interface for Structured Editing 1517506593540 Brian Hempel University of Chicago brianhempel@uchicago.edu Justin Lubin University of Chicago justinlubin@uchicago.edu Grace Lu University of Chicago gracelu@uchicago.edu Ravi Chugh University of Chicago rchugh@uchicago.edu Structured Editing Refactoring Sketch-n-Sketch We present a structure-aware code editor, called Deuce, that is equipped with direct manipulation capabilities for invoking automated program transformations. Compared to traditional refactoring environments, Deuce employs a direct manipulation interface that is tightly integrated within a text-based editing workflow. In particular, Deuce draws (i) clickable widgets atop the source code that allow the user to structurally select the unstructured text for subexpressions and other relevant features, and (ii) a lightweight, interactive menu of potential transformations based on the current selections. We implement and evaluate our design with mostly standard transformations in the context of a small functional programming language. A controlled user study with 21 participants demonstrates that structural selection is preferred to a more traditional text-selection interface and may be faster overall once users gain experience with the tool. These results accord with Deuce's aim to provide human-friendly structural interactions on top of familiar text-based editing.",
              "pageNumber": 654,
              "isPageNumberRoman": false
            },
            {
              "id": "6mI6xPKzQQQ3CTrlLOvPiH",
              "type": "authorPaper",
              "text": "From UI Design Image to GUI Skeleton: A Neural Machine Translator to Bootstrap Mobile GUI Implementation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JXA3aEoFlChCTeObvRL5D/4SROMnxHfcqnH3f5jpBxW6.pdf",
              "extraLocations": [],
              "authorNames": "Chunyang Chen (Nanyang Technological University), Ting Su (Nanyang Technological University), Guozhu Meng (Nanyang Technological University), Zhenchang Xing (Australian National University), Yang Liu (Nanyang Technological University)",
              "abstract": "A GUI skeleton is the starting point for implementing a UI design image. To obtain a GUI skeleton from a UI design image, developers have to visually understand UI elements and their spatial layout in the image, and then translate this understanding into proper GUI components and their compositions. Automating this visual understanding and translation would be beneficial for bootstraping mobile GUI implementation, but it is a challenging task due to the diversity of UI designs and the complexity of GUI skeletons to generate. Existing tools are rigid as they depend on heuristically-designed visual understanding and GUI generation rules. In this paper, we present a neural machine translator that combines recent advances in computer vision and machine translation for translating a UI design image into a GUI skeleton. Our translator learns to extract visual features in UI images, encode these features' spatial layouts, and generate GUI skeletons in a unified neural network framework, without requiring manual rule development. For training our translator, we develop an automated GUI exploration method to automatically collect large-scale UI data from real-world applications. We carry out extensive experiments to evaluate the accuracy, generality and usefulness of our approach.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 From UI Design Image to GUI Skeleton: A Neural Machine Translator to Bootstrap Mobile GUI Implementation 1518177440549 Chunyang Chen Nanyang Technological University chen0966@e.ntu.edu.sg Ting Su Nanyang Technological University suting@ntu.edu.sg Guozhu Meng Nanyang Technological University gzmeng@ntu.edu.sg Zhenchang Xing Australian National University zhenchang.xing@anu.edu.au Yang Liu Nanyang Technological University yangliu@ntu.edu.sg User interface reverse engineering deep learning A GUI skeleton is the starting point for implementing a UI design image. To obtain a GUI skeleton from a UI design image, developers have to visually understand UI elements and their spatial layout in the image, and then translate this understanding into proper GUI components and their compositions. Automating this visual understanding and translation would be beneficial for bootstraping mobile GUI implementation, but it is a challenging task due to the diversity of UI designs and the complexity of GUI skeletons to generate. Existing tools are rigid as they depend on heuristically-designed visual understanding and GUI generation rules. In this paper, we present a neural machine translator that combines recent advances in computer vision and machine translation for translating a UI design image into a GUI skeleton. Our translator learns to extract visual features in UI images, encode these features' spatial layouts, and generate GUI skeletons in a unified neural network framework, without requiring manual rule development. For training our translator, we develop an automated GUI exploration method to automatically collect large-scale UI data from real-world applications. We carry out extensive experiments to evaluate the accuracy, generality and usefulness of our approach.",
              "pageNumber": 665,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 21: Testing II",
          "lineItems": [
            {
              "id": "1HYKMjTwvyUK0EBJz9yFD8",
              "type": "authorPaper",
              "text": "When Testing Meets Code Review: Why and How Developers Review Tests",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf",
              "extraLocations": [],
              "authorNames": "Davide Spadini (Delft University of Technology / Software Improvement Group), Maurício Aniche (Delft University of Technology), Margaret-Anne Storey (University of Victoria), Magiel Bruntink (Software Improvement Group), Alberto Bacchelli (University of Zurich)",
              "abstract": "Automated testing is considered an essential process for ensuring software quality. However, writing and maintaining high-quality test code is challenging and frequently considered of secondary importance. For production code, many open source and industrial software projects employ code review, a well-established software quality practice, but the question remains whether and how code review is also used for ensuring the quality of test code. The aim of this research is to answer this question and to increase our understanding of what developers think and do when it comes to reviewing test code. We conducted both quantitative and qualitative methods to analyze more than 300,000 code reviews, and interviewed 12 developers about how they review test files. This work resulted in an overview of current code reviewing practices, a set of identified obstacles limiting the review of test code, and a set of issues that developers would like to see improved in code review tools. The study reveals that reviewing test files is very different from reviewing production files, and that the navigation within the review itself is one of the main issues developers currently face. Based on our findings, we propose a series of recommendations and suggestions for the design of tools and future research.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 When Testing Meets Code Review: Why and How Developers Review Tests 1518514282721 Davide Spadini Delft University of Technology / Software Improvement Group d.spadini@sig.eu Maurício Aniche Delft University of Technology m.f.aniche@tudelft.nl Margaret-Anne Storey University of Victoria mstorey@uvic.ca Magiel Bruntink Software Improvement Group m.bruntink@sig.eu Alberto Bacchelli University of Zurich bacchelli@ifi.uzh.ch software testing automated testing code review Gerrit Automated testing is considered an essential process for ensuring software quality. However, writing and maintaining high-quality test code is challenging and frequently considered of secondary importance. For production code, many open source and industrial software projects employ code review, a well-established software quality practice, but the question remains whether and how code review is also used for ensuring the quality of test code. The aim of this research is to answer this question and to increase our understanding of what developers think and do when it comes to reviewing test code. We conducted both quantitative and qualitative methods to analyze more than 300,000 code reviews, and interviewed 12 developers about how they review test files. This work resulted in an overview of current code reviewing practices, a set of identified obstacles limiting the review of test code, and a set of issues that developers would like to see improved in code review tools. The study reveals that reviewing test files is very different from reviewing production files, and that the navigation within the review itself is one of the main issues developers currently face. Based on our findings, we propose a series of recommendations and suggestions for the design of tools and future research.",
              "pageNumber": 677,
              "isPageNumberRoman": false
            },
            {
              "id": "4ra50qp7wP20lYcIgu5Zc3",
              "type": "authorPaper",
              "text": "Redefining Prioritization: Continuous Prioritization for Continuous Integration",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3IKbJCjT6A0XNalPeqtwYx/48mKfZ4yhnkLlYNigdnCns.pdf",
              "extraLocations": [],
              "authorNames": "Jingjing Liang (University of Nebraska - Lincoln), Sebastian Elbaum (University of Nebraska - Lincoln), Gregg Rothermel (University of Nebraska - Lincoln)",
              "abstract": "Continuous integration (CI) development environments allow soft-ware engineers to frequently integrate and test their code. While CI environments provide advantages, they also utilize non-trivial amounts of time and resources. To address this issue, researchers have adapted techniques for test case prioritization (TCP) to CI environments. To date, however, the techniques considered have operated on test suites, and have not achieved substantial improvements. Moreover, they can be inappropriate to apply when system build costs are high. In this work we explore an alternative: prioritization of commits. We use a lightweight approach based on test suite failure and execution history that is highly effcient; our approach \"continuously\" prioritizes commits that are waiting for execution in response to the arrival of each new commit and the completion of each previously scheduled commit. We have evaluated our approach on three non-trivial CI data sets. Our results show that our approach can be more effective than prior techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Redefining Prioritization: Continuous Prioritization for Continuous Integration 1518115713984 Jingjing Liang University of Nebraska - Lincoln jliang@cse.unl.edu Sebastian Elbaum University of Nebraska - Lincoln elbaum@cse.unl.edu Gregg Rothermel University of Nebraska - Lincoln grother@cse.unl.edu continuous integration regression testing large scale testing Continuous integration (CI) development environments allow soft-ware engineers to frequently integrate and test their code. While CI environments provide advantages, they also utilize non-trivial amounts of time and resources. To address this issue, researchers have adapted techniques for test case prioritization (TCP) to CI environments. To date, however, the techniques considered have operated on test suites, and have not achieved substantial improvements. Moreover, they can be inappropriate to apply when system build costs are high. In this work we explore an alternative: prioritization of commits. We use a lightweight approach based on test suite failure and execution history that is highly effcient; our approach \"continuously\" prioritizes commits that are waiting for execution in response to the arrival of each new commit and the completion of each previously scheduled commit. We have evaluated our approach on three non-trivial CI data sets. Our results show that our approach can be more effective than prior techniques.",
              "pageNumber": 688,
              "isPageNumberRoman": false
            },
            {
              "id": "4fBOXU9K2psQqOMnn3D7bt",
              "type": "authorPaper",
              "text": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf",
              "extraLocations": [],
              "authorNames": "Kwabena Ebo Bennin (City University of Hong Kong), Jacky Keung (City University of Hong Kong), Passakorn Phannachitta (Chiang Mai University), Akito Monden (Okayama University), Solomon Mensah (Chiang Mai University)",
              "abstract": "This study presents MAHAKIL, a novel and efficient synthetic oversampling approach for software defect datasets that is based on the chromosomal theory of inheritance. Exploiting this theory, MAHAKIL interprets two distinct sub-classes as parents and generates a new instance that inherits different traits from each parent and contributes to the diversity within the data distribution. We extensively compare MAHAKIL with five other sampling approaches using 20 releases of defect datasets from the PROMISE repository and five prediction models. Our experiments indicate that MAHAKIL improves the prediction performance for all the models and achieves better and more significant pf values than the other oversampling approaches, based on robust statistical tests.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction 1518258557133 Kwabena Ebo Bennin City University of Hong Kong kebennin2-c@my.cityu.edu.hk Jacky Keung City University of Hong Kong Jacky.Keung@my.cityu.edu.hk Passakorn Phannachitta Chiang Mai University smensah2-c@my.cityu.edu.hk Akito Monden Okayama University monden@okayama-u.ac.jp Solomon Mensah Chiang Mai University hk Software defect prediction Class imbalance learning Synthetic sample generation Data sampling methods Classification problems This study presents MAHAKIL, a novel and efficient synthetic oversampling approach for software defect datasets that is based on the chromosomal theory of inheritance. Exploiting this theory, MAHAKIL interprets two distinct sub-classes as parents and generates a new instance that inherits different traits from each parent and contributes to the diversity within the data distribution. We extensively compare MAHAKIL with five other sampling approaches using 20 releases of defect datasets from the PROMISE repository and five prediction models. Our experiments indicate that MAHAKIL improves the prediction performance for all the models and achieves better and more significant pf values than the other oversampling approaches, based on robust statistical tests.",
              "pageNumber": 699,
              "isPageNumberRoman": false
            },
            {
              "id": "12juq5scC0G6Vv3Q9JRE2W",
              "type": "authorPaper",
              "text": "[Journal First] On the Use of Hidden Markov Model to Predict the Time to Fix Bugs",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4cSxEsEH079Uzvt1ewbxGs/2pB5Js1Y9qRj6SNwMZQQHH.pdf",
              "extraLocations": [],
              "authorNames": "Mayy Habayeb (Ryerson University), Syed Shariyar Murtaza (Ryerson University), Andriy Miranskyy (Ryerson University), Ayse Basar Bener (Ryerson University)",
              "abstract": "A significant amount of time is spent by software developers in investigating bug reports. It is useful to indicate when a bug report will be closed, since it would help software teams to prioritise their work. Several studies have been conducted to address this problem in the past decade. Most of these studies have used the frequency of occurrence of certain developer activities as input attributes in building their prediction models. However, these approaches tend to ignore the temporal nature of the occurrence of these activities. In this paper, a novel approach using Hidden Markov models (HMMs) and temporal sequences of developer activities is proposed. The approach is empirically demonstrated in a case study using eight years of bug reports collected from the Firefox project.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] On the Use of Hidden Markov Model to Predict the Time to Fix Bugs 1518456687232 Mayy Habayeb Ryerson University mayy.habayeb@gmail.com Syed Shariyar Murtaza Ryerson University syed.shariyar@gmail.com Andriy Miranskyy Ryerson University avm@ryerson.ca Ayse Basar Bener Ryerson University ayse.bener@ryerson.ca Bug repositories Temporal activities Time to fix a bug Hidden Markov model A significant amount of time is spent by software developers in investigating bug reports. It is useful to indicate when a bug report will be closed, since it would help software teams to prioritise their work. Several studies have been conducted to address this problem in the past decade. Most of these studies have used the frequency of occurrence of certain developer activities as input attributes in building their prediction models. However, these approaches tend to ignore the temporal nature of the occurrence of these activities. In this paper, a novel approach using Hidden Markov models (HMMs) and temporal sequences of developer activities is proposed. The approach is empirically demonstrated in a case study using eight years of bug reports collected from the Firefox project.",
              "pageNumber": 700,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 22: Studying Software Engineers II",
          "lineItems": [
            {
              "id": "4YEYF77mWb3wd2V6fSLwJs",
              "type": "authorPaper",
              "text": "[Journal First] What Makes a Great Manager of Software Engineers?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf",
              "extraLocations": [],
              "authorNames": "Eirini Kalliamvakou (University of Victoria), Christian Bird (Microsoft), Thomas Zimmermann (Microsoft), Andrew Begel (Microsoft), Robert DeLine (Microsoft), Daniel German (University of Victoria)",
              "abstract": "Having great managers is as critical to success as having a good team or organization. A great manager is seen as fuelling the team they manage, enabling it to use its full potential. Though software engineering research studies factors that may affect the performance and productivity of software engineers and teams (like tools and skill), it has overlooked the software engineering manager. On the one hand, experts are questioning how the abundant work in management applies to software engineering. On the other hand, practitioners are looking to researchers for evidence-based guidance on how to manage software teams. We conducted a mixed methods empirical study to investigate what manager attributes developers and engineering managers perceive important and why. We present a conceptual framework of manager attributes, and find that technical skills are not the sign of greatness for an engineering manager. Through statistical analysis we identify how engineers and managers relate in their views, and how software engineering differs from other knowledge work groups.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] What Makes a Great Manager of Software Engineers? 1517010833779 Eirini Kalliamvakou University of Victoria ikaliam@uvic.ca Christian Bird Microsoft cbird@microsoft.com Thomas Zimmermann Microsoft tzimmer@microsoft.com Andrew Begel Microsoft andrew.begel@microsoft.com Robert DeLine Microsoft rdeline@microsoft.com Daniel German University of Victoria dmg@uvic.ca Manager Software Engineering Knowledge Work Empirical Study Conceptual Framework Manager Attributes Technical Skills Having great managers is as critical to success as having a good team or organization. A great manager is seen as fuelling the team they manage, enabling it to use its full potential. Though software engineering research studies factors that may affect the performance and productivity of software engineers and teams (like tools and skill), it has overlooked the software engineering manager. On the one hand, experts are questioning how the abundant work in management applies to software engineering. On the other hand, practitioners are looking to researchers for evidence-based guidance on how to manage software teams. We conducted a mixed methods empirical study to investigate what manager attributes developers and engineering managers perceive important and why. We present a conceptual framework of manager attributes, and find that technical skills are not the sign of greatness for an engineering manager. Through statistical analysis we identify how engineers and managers relate in their views, and how software engineering differs from other knowledge work groups.",
              "pageNumber": 701,
              "isPageNumberRoman": false
            },
            {
              "id": "5PaamXWOrd9XcOlRNanoFy",
              "type": "authorPaper",
              "text": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf",
              "extraLocations": [],
              "authorNames": "Wieslaw Kopec (Polish-Japanese Academy of Information Technology), Bartlomiej Balcerzak (Polish-Japanese Academy of Information Technology), Radoslaw Nielek (Polish-Japanese Academy of Information Technology), Grzegorz Kowalik (Polish-Japanese Academy of Information Technology), Adam Wierzbicki (Polish-Japanese Academy of Information Technology), Fabio Casati (University of Trento)",
              "abstract": "Globally observed trends in aging indicate that older adults constitute a growing share of the population and an increasing demographic in the modern technologies marketplace. Therefore, it has become important to address the issue of participation of older adults in the process of developing solutions suitable for their group. In this study, we approached this topic by organizing a hackathon involving teams of young programmers and older adult participants. In our paper we describe a case study of that hackathon, in which our objective was to motivate older adults to participate in software engineering processes. Based on our results from an array of qualitative methods, we propose a set of good practices that may lead to improved older adult participation in similar events and an improved process of developing apps that target older adults.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Older Adults and Hackathons: A Qualitative Study 1518494825695 Wieslaw Kopec Polish-Japanese Academy of Information Technology kopec@pja.edu.pl Bartlomiej Balcerzak Polish-Japanese Academy of Information Technology bartlomiej.balcerzak@pja.edu.pl Radoslaw Nielek Polish-Japanese Academy of Information Technology nielek@pja.edu.pl Grzegorz Kowalik Polish-Japanese Academy of Information Technology grzegorz.kowalik@pja.edu.pl Adam Wierzbicki Polish-Japanese Academy of Information Technology adamw@pja.edu.pl Fabio Casati University of Trento fabio.casati@unitn.it older adults elderly participatory design co-design user-centered design user experience hackathons qualitative methods intergenerational interaction intergenerational cooperation Globally observed trends in aging indicate that older adults constitute a growing share of the population and an increasing demographic in the modern technologies marketplace. Therefore, it has become important to address the issue of participation of older adults in the process of developing solutions suitable for their group. In this study, we approached this topic by organizing a hackathon involving teams of young programmers and older adult participants. In our paper we describe a case study of that hackathon, in which our objective was to motivate older adults to participate in software engineering processes. Based on our results from an array of qualitative methods, we propose a set of good practices that may lead to improved older adult participation in similar events and an improved process of developing apps that target older adults.",
              "pageNumber": 702,
              "isPageNumberRoman": false
            },
            {
              "id": "2Hh6zs64JuWPLsDeYjDqLe",
              "type": "authorPaper",
              "text": "[Journal First] Does Syntax Highlighting Help Programming Novices?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3JFh3A5Bq7RbQ9rmj9ApFQ/61S7AqzTq8KHZfKNCtl9NR.pdf",
              "extraLocations": [],
              "authorNames": "Christoph Hannebauer (University of Duisburg-Essen), Marc Hesenius (University of Duisburg-Essen), Volker Gruhn (University of Duisburg-Essen)",
              "abstract": "Background: Program comprehension is an important skill for programmers – extending and debugging existing source code is part of the daily routine. Syntax highlighting is one of the most common tools used to support developers in understanding algorithms. However, most research in this area originates from a time when programmers used a completely different tool chain. Objective: We examined the influence of syntax highlighting on novices' ability to comprehend source code. Additional analyses cover the influence of task type and programming experience on the code comprehension ability itself and its relation to syntax highlighting. Method: We conducted a controlled experiment with 390 undergraduate students in an introductory Java programming course. We measured the correctness with which they solved small coding tasks. Each test subject received some tasks with syntax highlighting and some without. Results: The data provided no evidence that syntax highlighting improves novices' ability to comprehend source code. Limitations: There are very few similar experiments and it is unclear as of yet which factors impact the effectiveness of syntax highlighting. One major limitation may be the types of tasks chosen for this experiment. Conclusion: The results suggest that syntax highlighting squanders a feedback channel from the IDE to the programmer that can be used more effectively.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Does Syntax Highlighting Help Programming Novices? 1518075416045 Christoph Hannebauer University of Duisburg-Essen christoph@hannebauer.name Marc Hesenius University of Duisburg-Essen marc.hesenius@paluno.uni-due.de Volker Gruhn University of Duisburg-Essen volker.gruhn@paluno.uni-due.de Syntax Highlighting Source Code Typography Code Colouring IDE Interface Program Comprehension Background: Program comprehension is an important skill for programmers – extending and debugging existing source code is part of the daily routine. Syntax highlighting is one of the most common tools used to support developers in understanding algorithms. However, most research in this area originates from a time when programmers used a completely different tool chain. Objective: We examined the influence of syntax highlighting on novices' ability to comprehend source code. Additional analyses cover the influence of task type and programming experience on the code comprehension ability itself and its relation to syntax highlighting. Method: We conducted a controlled experiment with 390 undergraduate students in an introductory Java programming course. We measured the correctness with which they solved small coding tasks. Each test subject received some tasks with syntax highlighting and some without. Results: The data provided no evidence that syntax highlighting improves novices' ability to comprehend source code. Limitations: There are very few similar experiments and it is unclear as of yet which factors impact the effectiveness of syntax highlighting. One major limitation may be the types of tasks chosen for this experiment. Conclusion: The results suggest that syntax highlighting squanders a feedback channel from the IDE to the programmer that can be used more effectively.",
              "pageNumber": 704,
              "isPageNumberRoman": false
            },
            {
              "id": "wH8o8c28lX2c6X2uNowrN",
              "type": "authorPaper",
              "text": "Do Programmers Work at Night or During the Weekend?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3PZI2iH7OZcqmfOhovoPWi/4jMoJeCniCPfvSDteaaNux.pdf",
              "extraLocations": [],
              "authorNames": "Maëlick Claes (University of Oulu), Mika Mäntylä (University of Oulu), Miikka Kuutila (University of Oulu), Bram Adams (Polytechnique Montreal)",
              "abstract": "Abnormal working hours can reduce work health, general well-being, and productivity, independent from a profession. To inform future approaches for automatic stress and overload detection, this paper establishes empirically collected measures of the work patterns of software engineers. To this aim, we perform the first largescale study of software engineers' working hours by investigating the time stamps of commit activities of 86 large open source software projects, both containing hired and volunteer developers. We find that two thirds of software engineers mainly follow typical office hours, empirically established to be from 10h to 18h, and do not usually work during nights and weekends. Large variations between projects and individuals exist. Surprisingly, we found no support that project maturation would decrease abnormal working hours. In the Firefox case study, we found that hired developers work more during office hours while seniority, either in terms of number of commits or job status, did not impact working hours. We conclude that the use of working hours or timestamps of work products for stress detection requires establishing baselines at the level of individuals.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Do Programmers Work at Night or During the Weekend? 1518501529313 Maëlick Claes University of Oulu maelick.claes@oulu.fi Mika Mäntylä University of Oulu mika.mantyla@oulu.fi Miikka Kuutila University of Oulu miikka.kuutila@oulu.fi Bram Adams Polytechnique Montreal bram.adams@polymtl.ca software repository mining overtime overwork open source apache mozilla weekend night Abnormal working hours can reduce work health, general well-being, and productivity, independent from a profession. To inform future approaches for automatic stress and overload detection, this paper establishes empirically collected measures of the work patterns of software engineers. To this aim, we perform the first largescale study of software engineers' working hours by investigating the time stamps of commit activities of 86 large open source software projects, both containing hired and volunteer developers. We find that two thirds of software engineers mainly follow typical office hours, empirically established to be from 10h to 18h, and do not usually work during nights and weekends. Large variations between projects and individuals exist. Surprisingly, we found no support that project maturation would decrease abnormal working hours. In the Firefox case study, we found that hired developers work more during office hours while seniority, either in terms of number of commits or job status, did not impact working hours. We conclude that the use of working hours or timestamps of work products for stress detection requires establishing baselines at the level of individuals.",
              "pageNumber": 705,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 23: Program Analysis II",
          "lineItems": [
            {
              "id": "5MWn78VUM6vMoRe2HjipwB",
              "type": "authorPaper",
              "text": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf",
              "extraLocations": [],
              "authorNames": "Leen Lambers (Hasso-Plattner-Institut Potsdam), Daniel Strüber (Universität Koblenz-Landau), Gabriele Taentzer (Universität Marburg), Kristopher Born (Universität Marburg), Jevgenij Huebert (Universität Marburg)",
              "abstract": "Conflict and dependency analysis (CDA) of graph transformation has been shown to be a versatile foundation for understanding interactions in many software engineering domains, including software analysis and design, model-driven engineering, and testing. In this paper, we propose a novel static CDA technique that is multi-granular in the sense that it can detect all conflicts and dependencies on multiple granularity levels. Specifically, we provide an efficient algorithm suite for computing binary, coarse-grained, and fine-grained conflicts and dependencies: Binary granularity indicates the presence or absence of conflicts and dependencies, coarse granularity focuses on root causes for conflicts and dependencies, and fine granularity shows each conflict and dependency in full detail. Doing so, we can address specific performance and usability requirements that we identified in a literature survey of CDA usage scenarios. In an experimental evaluation, our algorithm suite computes conflicts and dependencies rapidly. Finally, we present a user study, in which the participants found our coarse-grained results more understandable than the fine-grained ones reported in a state-of-the-art tool. Our overall contribution is twofold: (i) we significantly speed up the computation of fine-grained and binary CDA results and, (ii) complement them with coarse-grained ones, which offer usability benefits for numerous use cases.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation 1518348110036 Leen Lambers Hasso-Plattner-Institut Potsdam Leen.Lambers@hpi.de Daniel Strüber Universität Koblenz-Landau strueber@uni-koblenz.de Gabriele Taentzer Universität Marburg taentzer@mathematik.uni-marburg.de Kristopher Born Universität Marburg born@mathematik.uni-marburg.de Jevgenij Huebert Universität Marburg huebert@mathematik.uni-marburg.de automated static analysis Conflict and dependency analysis (CDA) of graph transformation has been shown to be a versatile foundation for understanding interactions in many software engineering domains, including software analysis and design, model-driven engineering, and testing. In this paper, we propose a novel static CDA technique that is multi-granular in the sense that it can detect all conflicts and dependencies on multiple granularity levels. Specifically, we provide an efficient algorithm suite for computing binary, coarse-grained, and fine-grained conflicts and dependencies: Binary granularity indicates the presence or absence of conflicts and dependencies, coarse granularity focuses on root causes for conflicts and dependencies, and fine granularity shows each conflict and dependency in full detail. Doing so, we can address specific performance and usability requirements that we identified in a literature survey of CDA usage scenarios. In an experimental evaluation, our algorithm suite computes conflicts and dependencies rapidly. Finally, we present a user study, in which the participants found our coarse-grained results more understandable than the fine-grained ones reported in a state-of-the-art tool. Our overall contribution is twofold: (i) we significantly speed up the computation of fine-grained and binary CDA results and, (ii) complement them with coarse-grained ones, which offer usability benefits for numerous use cases.",
              "pageNumber": 716,
              "isPageNumberRoman": false
            },
            {
              "id": "6sZbbpEmhvKTzSYYym4IrX",
              "type": "authorPaper",
              "text": "Self-Hiding Behavior in Android Apps: Detection and Characterization",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/39EtsVbEnvoJFUJzXaNfZd/1AQQQyk7kMtppqX7fIsDeH.pdf",
              "extraLocations": [],
              "authorNames": "Zhiyong Shan (Wichita State University), Iulian Neamtiu (New Jersey Institute of Technology), Raina Samuel (New Jersey Institute of Technology)",
              "abstract": "Applications (apps) that conceal their activities are fundamentally deceptive; app marketplaces and end-users should treat such apps as suspicious. However, due to its nature and intent, activity concealing is not disclosed up-front, which puts users at risk. In this paper, we focus on characterization and detection of such techniques, e.g., hiding the app or removing traces, which we call \"self hiding behavior\" (SHB). SHB has not been studied per se – rather it has been reported on only as a byproduct of malware investigations. We address this gap via a study and suite of static analyses targeted at SH in Android apps. Specifically, we present (1) a detailed characterization of SHB, (2) a suite of static analyses to detect such behavior, and (3) a set of detectors that employ SHB to distinguish between benign and malicious apps. We show that SHB ranges from hiding the app's presence or activity to covering an app's traces, e.g., by blocking phone calls/text messages or removing calls and messages from logs. Using our static analysis tools on a large dataset of 9,452 Android apps (benign as well as malicious) we expose the frequency of 12 such SH behaviors. Our approach is effective: it has revealed that malicious apps employ 1.5 SHBs per app on average. Surprisingly, SH behavior is also employed by legitimate (\"benign\") apps, which can affect users negatively in multiple ways. When using our approach for separating malicious from benign apps, our approach has high precision and recall (combined F-measure = 87.19%). Our approach is also efficient, with analysis typically taking just 37 seconds per app. We believe that our findings and analysis tool are beneficial to both app marketplaces and end-users.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Self-Hiding Behavior in Android Apps: Detection and Characterization 1518464809371 Zhiyong Shan Wichita State University zhiyong.shan@wichita.edu Iulian Neamtiu New Jersey Institute of Technology ineamtiu@njit.edu Raina Samuel New Jersey Institute of Technology res9@njit.edu Android static analysis malware mobile security Applications (apps) that conceal their activities are fundamentally deceptive; app marketplaces and end-users should treat such apps as suspicious. However, due to its nature and intent, activity concealing is not disclosed up-front, which puts users at risk. In this paper, we focus on characterization and detection of such techniques, e.g., hiding the app or removing traces, which we call \"self hiding behavior\" (SHB). SHB has not been studied per se – rather it has been reported on only as a byproduct of malware investigations. We address this gap via a study and suite of static analyses targeted at SH in Android apps. Specifically, we present (1) a detailed characterization of SHB, (2) a suite of static analyses to detect such behavior, and (3) a set of detectors that employ SHB to distinguish between benign and malicious apps. We show that SHB ranges from hiding the app's presence or activity to covering an app's traces, e.g., by blocking phone calls/text messages or removing calls and messages from logs. Using our static analysis tools on a large dataset of 9,452 Android apps (benign as well as malicious) we expose the frequency of 12 such SH behaviors. Our approach is effective: it has revealed that malicious apps employ 1.5 SHBs per app on average. Surprisingly, SH behavior is also employed by legitimate (\"benign\") apps, which can affect users negatively in multiple ways. When using our approach for separating malicious from benign apps, our approach has high precision and recall (combined F-measure = 87.19%). Our approach is also efficient, with analysis typically taking just 37 seconds per app. We believe that our findings and analysis tool are beneficial to both app marketplaces and end-users.",
              "pageNumber": 728,
              "isPageNumberRoman": false
            },
            {
              "id": "77oTcbWm6X3tAjdnTgDzd1",
              "type": "authorPaper",
              "text": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf",
              "extraLocations": [],
              "authorNames": "Fabio Palomba (University of Zurich), Annibale Panichella (Delft University of Technology), Andy Zaidman (Delft University of Technology), Rocco Oliveto (University of Molise), Andrea De Lucia (University of Salerno)",
              "abstract": "Code smells are symptoms of poor design or implementation choices that have a negative effect on several aspects of software maintenance and evolution, such as program comprehension or change-and fault-proneness. This is why researchers have spent a lot of effort on devising methods that help developers to automatically detect them in source code. Almost all the techniques presented in literature are based on the analysis of structural properties extracted from source code, although alternative sources of information (e.g., textual analysis) for code smell detection have also been recently investigated. Nevertheless, some studies have indicated that code smells detected by existing tools based on the analysis of structural properties are generally ignored (and thus not refactored) by the developers. In this paper, we aim at understanding whether code smells detected using textual analysis are perceived and refactored by developers in the same or different way than code smells detected through structural analysis. To this aim, we set up two different experiments. We have first carried out a software repository mining study to analyze how developers act on textually or structurally detected code smells. Subsequently, we have conducted a user study with industrial developers and quality experts in order to qualitatively analyze how they perceive code smells identified using the two different sources of information. Results indicate that textually detected code smells are easier to identify and for this reason they are considered easier to refactor with respect to code smells detected using structural properties. On the other hand, the latter are often perceived as more severe, but more difficult to exactly identify and remove.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells 1518257323475 Fabio Palomba University of Zurich palomba@ifi.uzh.ch Annibale Panichella Delft University of Technology a.panichella@tudelft.nl Andy Zaidman Delft University of Technology a.e.zaidman@tudelft.nl Rocco Oliveto University of Molise rocco.oliveto@unimol.it Andrea De Lucia University of Salerno adelucia@unisa.it code smells empirical study mining software repositories Code smells are symptoms of poor design or implementation choices that have a negative effect on several aspects of software maintenance and evolution, such as program comprehension or change-and fault-proneness. This is why researchers have spent a lot of effort on devising methods that help developers to automatically detect them in source code. Almost all the techniques presented in literature are based on the analysis of structural properties extracted from source code, although alternative sources of information (e.g., textual analysis) for code smell detection have also been recently investigated. Nevertheless, some studies have indicated that code smells detected by existing tools based on the analysis of structural properties are generally ignored (and thus not refactored) by the developers. In this paper, we aim at understanding whether code smells detected using textual analysis are perceived and refactored by developers in the same or different way than code smells detected through structural analysis. To this aim, we set up two different experiments. We have first carried out a software repository mining study to analyze how developers act on textually or structurally detected code smells. Subsequently, we have conducted a user study with industrial developers and quality experts in order to qualitatively analyze how they perceive code smells identified using the two different sources of information. Results indicate that textually detected code smells are easier to identify and for this reason they are considered easier to refactor with respect to code smells detected using structural properties. On the other hand, the latter are often perceived as more severe, but more difficult to exactly identify and remove.",
              "pageNumber": 740,
              "isPageNumberRoman": false
            },
            {
              "id": "SD0gmopsZzqwqUumrrZ0T",
              "type": "authorPaper",
              "text": "ConflictJS: Finding and Understanding Conflicts Between JavaScript Libraries",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7twbgTuy2NJmU9AzxtFLxY/3aHDfMIHUsHnzDo5nGLCfY.pdf",
              "extraLocations": [],
              "authorNames": "Jibesh Patra (TU Darmstadt), Pooja N. Dixit (TU Darmstadt), Michael Pradel (TU Darmstadt)",
              "abstract": "It is a common practice for client-side web applications to build on various third-party JavaScript libraries. Due to the lack of namespaces in JavaScript, these libraries all share the same global namespace. As a result, one library may inadvertently modify or even delete the APIs of another library, causing unexpected behavior of library clients. Given the quickly increasing number of libraries, manually keeping track of such conflicts is practically impossible both for library developers and users. This paper presents ConflictJS, an automated and scalable approach to analyze libraries for conflicts. The key idea is to tackle the huge search space of possible conflicts in two phases. At first, a dynamic analysis of individual libraries identifies pairs of potentially conflicting libraries. Then, targeted test synthesis validates potential conflicts by creating a client application that suffers from a conflict. The overall approach is free of false positives, in the sense that it reports a problem only when such a client exists. We use ConflictJS to analyze and study conflicts among 951 real-world libraries. The results show that one out of four libraries is potentially conflicting and that 166 libraries are involved in at least one certain conflict. The detected conflicts cause crashes and other kinds of unexpected behavior. Our work helps library developers to prevent conflicts, library users to avoid combining conflicting libraries, and provides evidence that designing a language without explicit namespaces has undesirable effects.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 ConflictJS: Finding and Understanding Conflicts Between JavaScript Libraries 1518187212860 Jibesh Patra TU Darmstadt jibesh.patra@gmail.com Pooja N. Dixit TU Darmstadt poojandixit@gmail.com Michael Pradel TU Darmstadt michael@binaervarianz.de JavaScript libraries testing It is a common practice for client-side web applications to build on various third-party JavaScript libraries. Due to the lack of namespaces in JavaScript, these libraries all share the same global namespace. As a result, one library may inadvertently modify or even delete the APIs of another library, causing unexpected behavior of library clients. Given the quickly increasing number of libraries, manually keeping track of such conflicts is practically impossible both for library developers and users. This paper presents ConflictJS, an automated and scalable approach to analyze libraries for conflicts. The key idea is to tackle the huge search space of possible conflicts in two phases. At first, a dynamic analysis of individual libraries identifies pairs of potentially conflicting libraries. Then, targeted test synthesis validates potential conflicts by creating a client application that suffers from a conflict. The overall approach is free of false positives, in the sense that it reports a problem only when such a client exists. We use ConflictJS to analyze and study conflicts among 951 real-world libraries. The results show that one out of four libraries is potentially conflicting and that 166 libraries are involved in at least one certain conflict. The detected conflicts cause crashes and other kinds of unexpected behavior. Our work helps library developers to prevent conflicts, library users to avoid combining conflicting libraries, and provides evidence that designing a language without explicit namespaces has undesirable effects.",
              "pageNumber": 741,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 24: Software Comprehension",
          "lineItems": [
            {
              "id": "7BZBxz2N1zr1eeSHQsTbly",
              "type": "authorPaper",
              "text": "Debugging Data Flows in Reactive Programs",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/26QEHcXcpHFGmR9nd5fSPW/57Rpui1pbPGVNJ0KqbEOcB.pdf",
              "extraLocations": [],
              "authorNames": "Herman Banken (Delft University of Technology), Erik Meijer (Delft University of Technology), Georgios Gousios (Delft University of Technology)",
              "abstract": "Reactive Programming is a style of programming that provides developers with a set of abstractions that facilitate event handling and stream processing. Traditional debug tools lack support for Reactive Programming, leading developers to fallback to the most rudimentary debug tool available: logging to the console. In this paper, we present the design and implementation of RxFiddle, a visualization and debugging tool targeted to Rx, the most popular form of Reactive Programming. RxFiddle visualizes the dependencies and structure of the data flow, as well as the data inside the flow. We evaluate RxFiddle with an experiment involving 111 developers. The results show that RxFiddle can help developers finish debugging tasks faster than with traditional debugging tools.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Debugging Data Flows in Reactive Programs 1518186077223 Herman Banken Delft University of Technology hermanb@ch.tudelft.nl Erik Meijer Delft University of Technology h.j.m.meijer@tudelft.nl Georgios Gousios Delft University of Technology g.gousios@tudelft.nl reactive programming debugging visualization program comprehension Reactive Programming is a style of programming that provides developers with a set of abstractions that facilitate event handling and stream processing. Traditional debug tools lack support for Reactive Programming, leading developers to fallback to the most rudimentary debug tool available: logging to the console. In this paper, we present the design and implementation of RxFiddle, a visualization and debugging tool targeted to Rx, the most popular form of Reactive Programming. RxFiddle visualizes the dependencies and structure of the data flow, as well as the data inside the flow. We evaluate RxFiddle with an experiment involving 111 developers. The results show that RxFiddle can help developers finish debugging tasks faster than with traditional debugging tools.",
              "pageNumber": 752,
              "isPageNumberRoman": false
            },
            {
              "id": "334Dk7YT6qcRjs2JPl7pBW",
              "type": "authorPaper",
              "text": "Do You Remember This Source Code?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf",
              "extraLocations": [],
              "authorNames": "Jacob Krüger (Harz University of Applied Sciences & Otto-von-Guericke-University), Jens Wiemann (Otto-von-Guericke-University), Wolfram Fenske (Otto-von-Guericke-University), Gunter Saake (Otto-von-Guericke-University), Thomas Leich (Harz University of Applied Sciences & METOP GmbH)",
              "abstract": "Being familiar with the source code of a program comprises knowledge about its purpose, structure, and details. Consequently, familiarity is an important factor in many contexts of software development, especially for maintenance and program comprehension. As a result, familiarity is considered to some extent in many different approaches, for example, to model costs or to identify experts. Still, all approaches we are aware of require a manual assessment of familiarity and empirical analyses of forgetting in software development are missing. In this paper, we address this issue with an empirical study that we conducted with 60 open-source developers. We used a survey to receive information on the developers' familiarity and analyze the responses based on data we extract from their used version control systems. The results show that forgetting is an important factor when considering familiarity and program comprehension of developers. We find that a forgetting curve is partly applicable for software development, investigate three factors - the number of edits, ratio of owned code, and tracking behavior - that can impact familiarity with code, and derive a general memory strength for our participants. Our findings can be used to scope approaches that have to consider familiarity and they provide insights into forgetting in the context of software development.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Do You Remember This Source Code? 1518105988101 Jacob Krüger Harz University of Applied Sciences & Otto-von-Guericke-University jkrueger@ovgu.de Jens Wiemann Otto-von-Guericke-University jens.wiemann@hotmail.com Wolfram Fenske Otto-von-Guericke-University wfenske@ovgu.de Gunter Saake Otto-von-Guericke-University saake@ovgu.de Thomas Leich Harz University of Applied Sciences & METOP GmbH tleich@hs-harz.de familiarity forgetting empirical study maintenance program comprehension expert identification knowledge management Being familiar with the source code of a program comprises knowledge about its purpose, structure, and details. Consequently, familiarity is an important factor in many contexts of software development, especially for maintenance and program comprehension. As a result, familiarity is considered to some extent in many different approaches, for example, to model costs or to identify experts. Still, all approaches we are aware of require a manual assessment of familiarity and empirical analyses of forgetting in software development are missing. In this paper, we address this issue with an empirical study that we conducted with 60 open-source developers. We used a survey to receive information on the developers' familiarity and analyze the responses based on data we extract from their used version control systems. The results show that forgetting is an important factor when considering familiarity and program comprehension of developers. We find that a forgetting curve is partly applicable for software development, investigate three factors - the number of edits, ratio of owned code, and tracking behavior - that can impact familiarity with code, and derive a general memory strength for our participants. Our findings can be used to scope approaches that have to consider familiarity and they provide insights into forgetting in the context of software development.",
              "pageNumber": 764,
              "isPageNumberRoman": false
            },
            {
              "id": "1E3MZAsoH4xxlcWRRLOJeR",
              "type": "authorPaper",
              "text": "Inferring Hierarchical Motifs from Execution Traces",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TTXoZtYTdhZLsqHykC3ZK/3TvbLeZaB2ApWjzhC0Nfly.pdf",
              "extraLocations": [],
              "authorNames": "Saba Alimadadi (Northeastern University), Ali Mesbah (University of British Columbia), Karthik Pattabiraman (University of British Columbia)",
              "abstract": "Program comprehension is a necessary step for performing many software engineering tasks. Dynamic analysis is effective in producing execution traces that assist comprehension. Traces are rich sources of information regarding the behaviour of a program. However, it is challenging to gain insight from traces due to their overwhelming amount of data and complexity. We propose a generic technique for facilitating comprehension by inferring recurring execution motifs. Inspired by bioinformatics, motifs are patterns in traces that are flexible to small changes in execution, and are captured in a hierarchical model. The hierarchical nature of the model provides an overview of the behaviour at a high-level, while preserving the execution details and intermediate levels in a structured manner. We design a visualization that allows developers to observe and interact with the model. We implement our approach in an open-source tool, called Sabalan, and evaluate it through a user experiment. The results show that using Sabalan improves developers' accuracy in performing comprehension tasks by 54%.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Inferring Hierarchical Motifs from Execution Traces 1518500358997 Saba Alimadadi Northeastern University saba@northeastern.edu Ali Mesbah University of British Columbia amesbah@ece.ubc.ca Karthik Pattabiraman University of British Columbia karthikp@ece.ubc.ca Program comprehension behavioural model hierarchical motifs Program comprehension is a necessary step for performing many software engineering tasks. Dynamic analysis is effective in producing execution traces that assist comprehension. Traces are rich sources of information regarding the behaviour of a program. However, it is challenging to gain insight from traces due to their overwhelming amount of data and complexity. We propose a generic technique for facilitating comprehension by inferring recurring execution motifs. Inspired by bioinformatics, motifs are patterns in traces that are flexible to small changes in execution, and are captured in a hierarchical model. The hierarchical nature of the model provides an overview of the behaviour at a high-level, while preserving the execution details and intermediate levels in a structured manner. We design a visualization that allows developers to observe and interact with the model. We implement our approach in an open-source tool, called Sabalan, and evaluate it through a user experiment. The results show that using Sabalan improves developers' accuracy in performing comprehension tasks by 54%.",
              "pageNumber": 776,
              "isPageNumberRoman": false
            },
            {
              "id": "7o5nw1Zjulkup3OmraTVZ1",
              "type": "authorPaper",
              "text": "[Journal First] A Comparison of Program Comprehension Strategies by Blind and Sighted Programmers",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6L8BvympA8qNy2olAr6lux/L085iQAOXSGrvjP6JWaUM.pdf",
              "extraLocations": [],
              "authorNames": "Ameer Armaly (University of Notre Dame), Paige Rodeghero (University of Notre Dame), Collin McMillan (University of Notre Dame)",
              "abstract": "Programmers who are blind use a screen reader to speak source code one word at a time, as though the code were text. This process of reading is in stark contrast to sighted programmers, who skim source code rapidly with their eyes. At present, it is not known whether the difference in these processes has effects on the program comprehension gained from reading code. These effects are important because they could reduce both the usefulness of accessibility tools and the generalizability of software engineering studies to persons with low vision. In this paper, we present an empirical study comparing the program comprehension of blind and sighted programmers. We found that both blind and sighted programmers prioritize reading method signatures over other areas of code. Both groups obtained an equal and high degree of comprehension, despite the different reading processes.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] A Comparison of Program Comprehension Strategies by Blind and Sighted Programmers 1516922679741 Ameer Armaly University of Notre Dame aarmaly@nd.edu Paige Rodeghero University of Notre Dame prodeghe@nd.edu Collin McMillan University of Notre Dame cmc@nd.edu Program comprehension accessibility technology blindness Programmers who are blind use a screen reader to speak source code one word at a time, as though the code were text. This process of reading is in stark contrast to sighted programmers, who skim source code rapidly with their eyes. At present, it is not known whether the difference in these processes has effects on the program comprehension gained from reading code. These effects are important because they could reduce both the usefulness of accessibility tools and the generalizability of software engineering studies to persons with low vision. In this paper, we present an empirical study comparing the program comprehension of blind and sighted programmers. We found that both blind and sighted programmers prioritize reading method signatures over other areas of code. Both groups obtained an equal and high degree of comprehension, despite the different reading processes.",
              "pageNumber": 788,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 25: Performance and Maintenance",
          "lineItems": [
            {
              "id": "4CYww4UHP6azRLYVNg2aSn",
              "type": "authorPaper",
              "text": "Identifying Patch Correctness in Test-Based Program Repair",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11zxitYXACvMuqaLV1rFPF/1DtebWtKrtzfb6ply0HQ69.pdf",
              "extraLocations": [],
              "authorNames": "Yingfei Xiong (Peking University), Xinyuan Liu (Peking University), Muhan Zeng (Peking University), Lu Zhang (Peking University), Gang Huang (Peking University)",
              "abstract": "Test-based automatic program repair has attracted a lot of attention in recent years However, the test suites in practice are often too weak to guarantee correctness and existing approaches often generate a large number of incorrect patches. To reduce the number of incorrect patches generated, we propose a novel approach that heuristically determines the correctness of the generated patches. The core idea is to exploit the behavior similarity of test case executions. The passing tests on original and patched programs are likely to behave similarly while the failing tests on original and patched programs are likely to behave differently. Also, if two tests exhibit similar runtime behavior, the two tests are likely to have the same test results. Based on these observations, we generate new test inputs to enhance the test suites and use their behavior similarity to determine patch correctness. Our approach is evaluated on a dataset consisting of 139 patches generated from existing program repair systems including jGenProg, Nopol, jKali, ACS, and HDRepair. Our approach successfully prevented 56.3% of the incorrect patches to be generated, without blocking any correct patches.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Identifying Patch Correctness in Test-Based Program Repair 1518149614860 Yingfei Xiong Peking University xiongyf@pku.edu.cn Xinyuan Liu Peking University liuxinyuan@pku.edu.cn Muhan Zeng Peking University mhzeng@pku.edu.cn Lu Zhang Peking University zhanglucs@pku.edu.cn Gang Huang Peking University hg@pku.edu.cn Test based program repair patch correctness patch classification test generation Test-based automatic program repair has attracted a lot of attention in recent years However, the test suites in practice are often too weak to guarantee correctness and existing approaches often generate a large number of incorrect patches. To reduce the number of incorrect patches generated, we propose a novel approach that heuristically determines the correctness of the generated patches. The core idea is to exploit the behavior similarity of test case executions. The passing tests on original and patched programs are likely to behave similarly while the failing tests on original and patched programs are likely to behave differently. Also, if two tests exhibit similar runtime behavior, the two tests are likely to have the same test results. Based on these observations, we generate new test inputs to enhance the test suites and use their behavior similarity to determine patch correctness. Our approach is evaluated on a dataset consisting of 139 patches generated from existing program repair systems including jGenProg, Nopol, jKali, ACS, and HDRepair. Our approach successfully prevented 56.3% of the incorrect patches to be generated, without blocking any correct patches.",
              "pageNumber": 789,
              "isPageNumberRoman": false
            },
            {
              "id": "1kV4zzvk3xmx3SAdkMGqXg",
              "type": "authorPaper",
              "text": "How not to Structure Your Database-Backed Web Applications: A Study of Performance Bugs in the Wild",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1heAUnsML3vNOxAklvY2o5/5r7WaaxVGeRjbQD2Yx8PMD.pdf",
              "extraLocations": [],
              "authorNames": "Junwen Yang (University of Chicago), Cong Yan (University of Washington), Pranav Subramaniam (University of Chicago), Shan Lu (University of Chicago), Alvin Cheung (University of Washington)",
              "abstract": "Many web applications use databases for persistent data storage, and using Object Relational Mapping (ORM) frameworks is a common way to develop such database-backed web applications. Unfortunately, developing efficient ORM applications is challenging, as the ORM framework hides the underlying database query generation and execution. This problem is becoming more severe as these applications need to process an increasingly large amount of persistent data. Recent research has targeted specific aspects of performance problems in ORM applications. However, there has not been any systematic study to identify common performance anti-patterns in real-world such applications, how they affect resulting application performance, and remedies for them. In this paper, we try to answer these questions through a comprehensive study of 12 representative real-world ORM applications. We generalize 9 ORM performance anti-patterns from more than 200 performance issues that we obtain by studying their bug-tracking systems and profiling their latest versions. To prove our point, we manually fix 64 performance issues in their latest versions and obtain a median speedup of 2× (and up to 39× max) with fewer than 5 lines of code change in most cases. Many of the issues we found have been confirmed by developers, and we have implemented ways to identify other code fragments with similar issues as well.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 How not to Structure Your Database-Backed Web Applications: A Study of Performance Bugs in the Wild 1518478347712 Junwen Yang University of Chicago junwen@uchicago.edu Cong Yan University of Washington congy@cs.washington.edu Pranav Subramaniam University of Chicago psubramaniam@uchicago.edu Shan Lu University of Chicago shanlu@uchicago.edu Alvin Cheung University of Washington akcheung@cs.washington.edu performance anti-patterns Object-Relational Mapping frameworks database-backed applications bug study Many web applications use databases for persistent data storage, and using Object Relational Mapping (ORM) frameworks is a common way to develop such database-backed web applications. Unfortunately, developing efficient ORM applications is challenging, as the ORM framework hides the underlying database query generation and execution. This problem is becoming more severe as these applications need to process an increasingly large amount of persistent data. Recent research has targeted specific aspects of performance problems in ORM applications. However, there has not been any systematic study to identify common performance anti-patterns in real-world such applications, how they affect resulting application performance, and remedies for them. In this paper, we try to answer these questions through a comprehensive study of 12 representative real-world ORM applications. We generalize 9 ORM performance anti-patterns from more than 200 performance issues that we obtain by studying their bug-tracking systems and profiling their latest versions. To prove our point, we manually fix 64 performance issues in their latest versions and obtain a median speedup of 2× (and up to 39× max) with fewer than 5 lines of code change in most cases. Many of the issues we found have been confirmed by developers, and we have implemented ways to identify other code fragments with similar issues as well.",
              "pageNumber": 800,
              "isPageNumberRoman": false
            },
            {
              "id": "1dmMQaW14t1UbXd0H51AD0",
              "type": "authorPaper",
              "text": "Speedoo: Prioritizing Performance Optimization Opportunities",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1n3EHZ69Ja5of7qLpXnL86/5IDS4UmAOw5scrzvbU1Gyb.pdf",
              "extraLocations": [],
              "authorNames": "Zhifei Chen (Nanjing University), Bihuan Chen (Fudan University), Lu Xiao (Stevens Institute of Technology), Xiao Wang (Stevens Institute of Technology), Lin Chen (Nanjing University), Yang Liu (Nanyang Technological University), Baowen Xu (Nanjing University)",
              "abstract": "Performance problems widely exist in modern software systems. Existing performance optimization techniques, including profiling-based and pattern-based techniques, usually fail to consider the architectural impacts among methods that easily slow down the overall system performance. This paper contributes a new approach, named Speedoo, to identify groups of methods that should be treated together and deserve high priorities for performance optimization. The uniqueness of Speedoo is to measure and rank the performance optimization opportunities of a method based on 1) the architectural impact and 2) the optimization potential. For each highly ranked method, we locate a respective Optimization Space based on 5 performance patterns generalized from empirical observations. The top ranked optimization spaces are suggested to developers as potential optimization opportunities. Our evaluation on three real-life projects has demonstrated that 18.52% to 42.86% of methods in the top ranked optimization spaces indeed undertook performance optimization in the projects. This outperforms one of the state-of-the-art profiling tools YourKit by 2 to 3 times. An important implication of this study is that developers should treat methods in an optimization space together as a group rather than as individuals in performance optimization. The proposed approach can provide guidelines and reduce developers' manual effort.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Speedoo: Prioritizing Performance Optimization Opportunities 1517985542206 Zhifei Chen Nanjing University chenzhifei731@gmail.com Bihuan Chen Fudan University chenbihuan@gmail.com Lu Xiao Stevens Institute of Technology lxiao6@stevens.edu Xiao Wang Stevens Institute of Technology xwang97@stevens.edu Lin Chen Nanjing University lchen@nju.edu.cn Yang Liu Nanyang Technological University yangliu@ntu.edu.sg Baowen Xu Nanjing University bwxu@nju.edu.cn Performance Metrics Architecture Performance problems widely exist in modern software systems. Existing performance optimization techniques, including profiling-based and pattern-based techniques, usually fail to consider the architectural impacts among methods that easily slow down the overall system performance. This paper contributes a new approach, named Speedoo, to identify groups of methods that should be treated together and deserve high priorities for performance optimization. The uniqueness of Speedoo is to measure and rank the performance optimization opportunities of a method based on 1) the architectural impact and 2) the optimization potential. For each highly ranked method, we locate a respective Optimization Space based on 5 performance patterns generalized from empirical observations. The top ranked optimization spaces are suggested to developers as potential optimization opportunities. Our evaluation on three real-life projects has demonstrated that 18.52% to 42.86% of methods in the top ranked optimization spaces indeed undertook performance optimization in the projects. This outperforms one of the state-of-the-art profiling tools YourKit by 2 to 3 times. An important implication of this study is that developers should treat methods in an optimization space together as a group rather than as individuals in performance optimization. The proposed approach can provide guidelines and reduce developers' manual effort.",
              "pageNumber": 811,
              "isPageNumberRoman": false
            },
            {
              "id": "5vBSCuAirRFrwwNgNGslGB",
              "type": "authorPaper",
              "text": "[Journal First] Empirical Study on the Discrepancy Between Performance Testing Results from Virtual and Physical Environments",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5dzewdYm8fckCzQjpRCjmg/7gDFgjNlZ9YHeIL4bQ4bMr.pdf",
              "extraLocations": [],
              "authorNames": "Muhammad Moiz Arif (Concordia University), Weiyi Shang (Concordia University), Emad Shihab (Concordia University)",
              "abstract": "Large software systems often undergo performance tests to ensure their capability to handle expected loads. These performance tests often consume large amounts of computing resources and time since heavy loads need to be generated. Making it worse, the ever evolving eld requires frequent updates to the performance testing environment. In practice, virtual machines (VMs) are widely exploited to provide exible and less costly environments for performance tests. However, the use of VMs may introduce confounding overhead (e.g., a higher than expected memory utilization with unstable I/O tra c) to the testing environment and lead to unre-alistic performance testing results. Yet, little research has studied the impact on test results of using VMs in performance testing activities. To evaluate the discrepancy between the performance testing results from virtual and physical environments, we perform a case study on two open source systems – namely Dell DVD Store (DS2) and CloudStore. We conduct the same performance tests in both virtual and physical environments and compare the performance testing results based on the three aspects that are typically examined for performance testing results: 1) single performance metric (e.g. CPU Time from virtual environment vs. CPU Time from physical environment), 2) the relationship among performance metrics (e.g. correlation between CPU and I/O) and 3) performance models that are built to predict system performance. Our results show that 1) A single metric from virtual and physical environments do not follow the same distribution, hence practitioners cannot simply use a scaling factor to compare the performance between environments, 2) correlations among performance metrics in virtual environments are different from those in physical environments 3) statistical models built based on the performance metrics from virtual environments are different from the models built from physical environments suggesting that practitioners cannot use the performance testing results across virtual and physical environments. In order to assist the practitioners leverage performance testing results in both environments, we investigate ways to reduce the discrepancy. We find that such discrepancy can be reduced by normalizing performance metrics based on deviance. Overall, we suggest that practitioners should not use the performance testing results from virtual environment with the simple assumption of straightforward performance overhead. Instead, practitioners should consider leveraging normalization techniques to reduce the discrepancy before examining performance testing results from virtual and physical environments.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Empirical Study on the Discrepancy Between Performance Testing Results from Virtual and Physical Environments 1517846498541 Muhammad Moiz Arif Concordia University mo_ari@encs.concordia.ca Weiyi Shang Concordia University shang@encs.concordia.ca Emad Shihab Concordia University eshihab@encs.concordia.ca Software performance engineering Software performance analysis Testing on virtual environments Large software systems often undergo performance tests to ensure their capability to handle expected loads. These performance tests often consume large amounts of computing resources and time since heavy loads need to be generated. Making it worse, the ever evolving eld requires frequent updates to the performance testing environment. In practice, virtual machines (VMs) are widely exploited to provide exible and less costly environments for performance tests. However, the use of VMs may introduce confounding overhead (e.g., a higher than expected memory utilization with unstable I/O tra c) to the testing environment and lead to unre-alistic performance testing results. Yet, little research has studied the impact on test results of using VMs in performance testing activities. To evaluate the discrepancy between the performance testing results from virtual and physical environments, we perform a case study on two open source systems – namely Dell DVD Store (DS2) and CloudStore. We conduct the same performance tests in both virtual and physical environments and compare the performance testing results based on the three aspects that are typically examined for performance testing results: 1) single performance metric (e.g. CPU Time from virtual environment vs. CPU Time from physical environment), 2) the relationship among performance metrics (e.g. correlation between CPU and I/O) and 3) performance models that are built to predict system performance. Our results show that 1) A single metric from virtual and physical environments do not follow the same distribution, hence practitioners cannot simply use a scaling factor to compare the performance between environments, 2) correlations among performance metrics in virtual environments are different from those in physical environments 3) statistical models built based on the performance metrics from virtual environments are different from the models built from physical environments suggesting that practitioners cannot use the performance testing results across virtual and physical environments. In order to assist the practitioners leverage performance testing results in both environments, we investigate ways to reduce the discrepancy. We find that such discrepancy can be reduced by normalizing performance metrics based on deviance. Overall, we suggest that practitioners should not use the performance testing results from virtual environment with the simple assumption of straightforward performance overhead. Instead, practitioners should consider leveraging normalization techniques to reduce the discrepancy before examining performance testing results from virtual and physical environments.",
              "pageNumber": 822,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 26: Requirements and Recommender Systems",
          "lineItems": [
            {
              "id": "45hD9ykAbeAU7NqFXaj6gu",
              "type": "authorPaper",
              "text": "The Evolution of Requirements Practices in Software Startups",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf",
              "extraLocations": [],
              "authorNames": "Catarina Gralha (Universidade NOVA de Lisboa), Daniela Damian (University of Victoria), Anthony Wasserman (Carnegie Mellon University), Miguel Goulão (Universidade NOVA de Lisboa), João Araújo (Universidade NOVA de Lisboa)",
              "abstract": "We use Grounded Theory to study the evolution of requirements practices of 16 software startups as they grow and introduce new products and services. These startups operate in a dynamic environment, with significant time and market pressure, and rarely have time for systematic requirements analysis. Our theory describes the evolution of practice along six dimensions that emerged as relevant to their requirements activities: requirements artefacts, knowledge management, requirements-related roles, planning, technical debt and product quality. Beyond the relationships among the dimensions, our theory also explains the turning points that drove the evolution along these dimensions. These changes are reactive, rather than planned, suggesting an overall pragmatic lightness, i.e., flexibility, in the startups' evolution towards engineering practices for requirements. Our theory organises knowledge about evolving requirements practice in maturing startups, and provides practical insights for startups' assessing their own evolution as they face challenges to their growth. Our research also suggests that a startup's evolution along the six dimensions is not fundamental to its success, but has significant effects on their product, their employees and the company.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 The Evolution of Requirements Practices in Software Startups 1517823904714 Catarina Gralha Universidade NOVA de Lisboa acg.almeida@campus.fct.unl.pt Daniela Damian University of Victoria danielad@uvic.ca Anthony Wasserman Carnegie Mellon University tonyw@sv.cmu.edu Miguel Goulão Universidade NOVA de Lisboa mgoul@fct.unl.pt João Araújo Universidade NOVA de Lisboa joao.araujo@fct.unl.pt requirements engineering startups evolution grounded theory We use Grounded Theory to study the evolution of requirements practices of 16 software startups as they grow and introduce new products and services. These startups operate in a dynamic environment, with significant time and market pressure, and rarely have time for systematic requirements analysis. Our theory describes the evolution of practice along six dimensions that emerged as relevant to their requirements activities: requirements artefacts, knowledge management, requirements-related roles, planning, technical debt and product quality. Beyond the relationships among the dimensions, our theory also explains the turning points that drove the evolution along these dimensions. These changes are reactive, rather than planned, suggesting an overall pragmatic lightness, i.e., flexibility, in the startups' evolution towards engineering practices for requirements. Our theory organises knowledge about evolving requirements practice in maturing startups, and provides practical insights for startups' assessing their own evolution as they face challenges to their growth. Our research also suggests that a startup's evolution along the six dimensions is not fundamental to its success, but has significant effects on their product, their employees and the company.",
              "pageNumber": 823,
              "isPageNumberRoman": false
            },
            {
              "id": "uPH5RYwYULBHNMtWtpayu",
              "type": "authorPaper",
              "text": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf",
              "extraLocations": [],
              "authorNames": "Michael Rath (Technical University Ilmenau), Jacob Rendall (University of Notre Dame), Jin L.C. Guo (McGill University), Jane Cleland-Huang (University of Notre Dame), Patrick Mäder (Technical University Ilmenau)",
              "abstract": "Software and systems traceability is widely accepted as an essential element for supporting many software development tasks. Today's version control systems provide inbuilt features that allow developers to tag each commit with one or more issue ID, thereby providing the building blocks from which project-wide traceability can be established between feature requests, bug fixes, commits, source code, and specific developers. However, our analysis of six open source projects showed that on average only 60% of the commits were linked to specific issues. Without these fundamental links the entire set of project-wide links will be incomplete, and therefore not trustworthy. In this paper we address the fundamental problem of missing links between commits and issues. Our approach leverages a combination of process and text-related features characterizing issues and code changes to train a classifier to identify missing issue tags in commit messages, thereby generating the missing links. We conducted a series of experiments to evaluate our approach against six open source projects and showed that it was able to effectively recommend links for tagging issues at an average of 96% recall and 33% precision. In a related task for augmenting a set of existing trace links, the classifier returned precision at levels greater than 89% in all projects and recall of 50%.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Traceability in the Wild: Automatically Augmenting Incomplete Trace Links 1517929658740 Michael Rath Technical University Ilmenau michael.rath@tu-ilmenau.de Jacob Rendall University of Notre Dame jrendal1@nd.edu Jin L.C. Guo McGill University jguo@cs.mcgill.ca Jane Cleland-Huang University of Notre Dame JaneClelandHuang@nd.edu Patrick Mäder Technical University Ilmenau patrick.maeder@tu-ilmenau.de Traceability Link Recovery Machine Learning Open Source Software and systems traceability is widely accepted as an essential element for supporting many software development tasks. Today's version control systems provide inbuilt features that allow developers to tag each commit with one or more issue ID, thereby providing the building blocks from which project-wide traceability can be established between feature requests, bug fixes, commits, source code, and specific developers. However, our analysis of six open source projects showed that on average only 60% of the commits were linked to specific issues. Without these fundamental links the entire set of project-wide links will be incomplete, and therefore not trustworthy. In this paper we address the fundamental problem of missing links between commits and issues. Our approach leverages a combination of process and text-related features characterizing issues and code changes to train a classifier to identify missing issue tags in commit messages, thereby generating the missing links. We conducted a series of experiments to evaluate our approach against six open source projects and showed that it was able to effectively recommend links for tagging issues at an average of 96% recall and 33% precision. In a related task for augmenting a set of existing trace links, the classifier returned precision at levels greater than 89% in all projects and recall of 50%.",
              "pageNumber": 834,
              "isPageNumberRoman": false
            },
            {
              "id": "26Ov7uMl4ICKs0RZ8j58nW",
              "type": "authorPaper",
              "text": "A Temporal Permission Analysis and Enforcement Framework for Android",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf",
              "extraLocations": [],
              "authorNames": "Alireza Sadeghi (University of California, Irvine), Reyhaneh Jabbarvand (University of California, Irvine), Negar Ghorbani (University of California, Irvine), Hamid Bagheri (University of Nebraska, Lincoln), Sam Malek (University of California, Irvine)",
              "abstract": "Permission-induced attacks, i.e., security breaches enabled by permission misuse, are among the most critical and frequent issues threatening the security of Android devices. By ignoring the temporal aspects of an attack during the analysis and enforcement, the state-of-the-art approaches aimed at protecting the users against such attacks are prone to have low-coverage in detection and high-disruption in prevention of permission-induced attacks. To address the aforementioned shortcomings, we present TERMINATOR, a temporal permission analysis and enforcement framework for Android. Leveraging temporal logic model checking, TERMINATOR's analyzer identifies permission-induced threats with respect to dynamic permission states of the apps. At runtime, TERMINATOR's enforcer selectively leases (i.e., temporarily grants) permissions to apps when the system is in a safe state, and revokes the permissions when the system moves to an unsafe state realizing the identified threats. The results of our experiments, conducted over thousands of apps, indicate that TERMINATOR is able to provide an effective, yet non-disruptive defense against permission-induced attacks. We also show that our approach, which does not require modification to the Android framework or apps' implementation logic, is highly reliable and widely applicable.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 A Temporal Permission Analysis and Enforcement Framework for Android 1517178014029 Alireza Sadeghi University of California, Irvine alirezs1@uci.edu Reyhaneh Jabbarvand University of California, Irvine jabbarvr@uci.edu Negar Ghorbani University of California, Irvine negargh@uci.edu Hamid Bagheri University of Nebraska, Lincoln bagheri@unl.edu Sam Malek University of California, Irvine malek@uci.edu Android Access Control (Permission) Temporal Logic Permission-induced attacks, i.e., security breaches enabled by permission misuse, are among the most critical and frequent issues threatening the security of Android devices. By ignoring the temporal aspects of an attack during the analysis and enforcement, the state-of-the-art approaches aimed at protecting the users against such attacks are prone to have low-coverage in detection and high-disruption in prevention of permission-induced attacks. To address the aforementioned shortcomings, we present TERMINATOR, a temporal permission analysis and enforcement framework for Android. Leveraging temporal logic model checking, TERMINATOR's analyzer identifies permission-induced threats with respect to dynamic permission states of the apps. At runtime, TERMINATOR's enforcer selectively leases (i.e., temporarily grants) permissions to apps when the system is in a safe state, and revokes the permissions when the system moves to an unsafe state realizing the identified threats. The results of our experiments, conducted over thousands of apps, indicate that TERMINATOR is able to provide an effective, yet non-disruptive defense against permission-induced attacks. We also show that our approach, which does not require modification to the Android framework or apps' implementation logic, is highly reliable and widely applicable.",
              "pageNumber": 846,
              "isPageNumberRoman": false
            },
            {
              "id": "Dj1bWYLC20feDjdlYTpsu",
              "type": "authorPaper",
              "text": "[Journal First] Global-Aware Recommendations for Repairing Violations in Exception Handling",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eNWZZMvEzSZ7Kd4fLfQ6B/657yWIupHe5IFrgvcnH8bJ.pdf",
              "extraLocations": [],
              "authorNames": "Eiji Adachi Barbosa (UFRN), Alessandro Garcia (PUC-Rio)",
              "abstract": "This paper presents an extended abstract incorporated as a journalrst paper into the ICSE'18 program.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Global-Aware Recommendations for Repairing Violations in Exception Handling 1517857680010 Eiji Adachi Barbosa UFRN eijiadachi@gmail.com Alessandro Garcia PUC-Rio undefined Exception Handling Recommender system Software maintenance This paper presents an extended abstract incorporated as a journalrst paper into the ICSE'18 program.",
              "pageNumber": 858,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 27: Testing III",
          "lineItems": [
            {
              "id": "7nvWArJzCfK9VikccofsYa",
              "type": "authorPaper",
              "text": "RFC-Directed Differential Testing of Certificate Validation in SSL/TLS Implementations",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/15kHg7CwgytsDlnTv3z6u2/ZUw4RKFVhfsc0Bb1AsNmQ.pdf",
              "extraLocations": [],
              "authorNames": "Chu Chen (ICTT and ISN Laboratory), Cong Tian (ICTT and ISN Laboratory), Zhenhua Duan (ICTT and ISN Laboratory), Liang Zhao (ICTT and ISN Laboratory)",
              "abstract": "Certificate validation in Secure Socket Layer or Transport Layer Security protocol (SSL/TLS) is critical to Internet security.\tThus, it is significant to check whether certificate validation in SSL/TLS is correctly implemented. With this motivation, we propose a novel differential testing approach which is directed by the standard Request For Comments (RFC). First, rules of certificates are extracted automatically from RFCs. Second, low-level test cases are generated through dynamic symbolic execution. Third, high-level test cases, i.e. certificates, are assembled automatically. Finally, with the assembled certificates being test cases, certificate validations in SSL/TLS implementations are tested to reveal latent vulnerabilities or bugs. Our approach named RFCcert has the following advantages: (1) certificates of RFCcert are discrepancy-targeted since they are assembled according to standards instead of genetics; (2) with the obtained certificates, RFCcert not only reveals the invalidity of traditional differential testing but also is able to conduct testing that traditional differential testing cannot do; and (3) the supporting tool of RFCcert has been implemented and extensive experiments show that the approach is effective in finding bugs of SSL/TLS implementations.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 RFC-Directed Differential Testing of Certificate Validation in SSL/TLS Implementations 1518009437121 Chu Chen ICTT and ISN Laboratory chenchu@stu.xidian.edu.cn Cong Tian ICTT and ISN Laboratory ctian@mail.xidian.edu.cn Zhenhua Duan ICTT and ISN Laboratory zhhduan@mail.xidian.edu.cn Liang Zhao ICTT and ISN Laboratory lzhao@mail.xidian.edu.cn Differential testing certificate validation SSL/TLS dynamic symbolic execution Request For Comments Certificate validation in Secure Socket Layer or Transport Layer Security protocol (SSL/TLS) is critical to Internet security.\tThus, it is significant to check whether certificate validation in SSL/TLS is correctly implemented. With this motivation, we propose a novel differential testing approach which is directed by the standard Request For Comments (RFC). First, rules of certificates are extracted automatically from RFCs. Second, low-level test cases are generated through dynamic symbolic execution. Third, high-level test cases, i.e. certificates, are assembled automatically. Finally, with the assembled certificates being test cases, certificate validations in SSL/TLS implementations are tested to reveal latent vulnerabilities or bugs. Our approach named RFCcert has the following advantages: (1) certificates of RFCcert are discrepancy-targeted since they are assembled according to standards instead of genetics; (2) with the obtained certificates, RFCcert not only reveals the invalidity of traditional differential testing but also is able to conduct testing that traditional differential testing cannot do; and (3) the supporting tool of RFCcert has been implemented and extensive experiments show that the approach is effective in finding bugs of SSL/TLS implementations.",
              "pageNumber": 859,
              "isPageNumberRoman": false
            },
            {
              "id": "4BMrfPDcpbFADZAxnPPUUh",
              "type": "authorPaper",
              "text": "Symbolic Verification of Regular Properties",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IJNV2SslZXLkkcU0nrqLc/73G8pFObrprdyJDH04r5wl.pdf",
              "extraLocations": [],
              "authorNames": "Hengbiao Yu (National University of Defense Technology, Changsha), Zhenbang Chen (National University of Defense Technology, Changsha), Ji Wang (National University of Defense Technology, Changsha), Zhendong Su (University of California, Davis), Wei Dong (National University of Defense Technology, Changsha)",
              "abstract": "Verifying the regular properties of programs has been a significant challenge. This paper tackles this challenge by presenting symbolic regular verification (SRV) that offers significant speedups over the state-of-the-art. SRV is based on dynamic symbolic execution (DSE) and enabled by novel techniques for mitigating path explosion: (1) a regular property-oriented path slicing algorithm, and (2) a synergistic combination of property-oriented path slicing and guiding. Slicing prunes redundant paths, while guiding boosts the search for counterexamples. We have implemented SRV for Java and evaluated it on 15 real-world open-source Java programs (totaling 259K lines of code). Our evaluation results demonstrate the effectiveness and efficiency of SRV. Compared with the state-of-the-art — pure DSE, pure guiding, and pure path slicing — SRV achieves average speedups of more than 8.4X, 8.6X, and 7X, respectively, making symbolic regular property verification significantly more practical.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Symbolic Verification of Regular Properties 1517989048105 Hengbiao Yu National University of Defense Technology, Changsha hengbiaoyu@nudt.edu.cn Zhenbang Chen National University of Defense Technology, Changsha zbchen@nudt.edu.cn Ji Wang National University of Defense Technology, Changsha wj@nudt.edu.cn Zhendong Su University of California, Davis su@cs.ucdavis.edu Wei Dong National University of Defense Technology, Changsha wdong@nudt.edu.cn Regular property Verification Dynamic Symbolic Execution Slicing Guiding Verifying the regular properties of programs has been a significant challenge. This paper tackles this challenge by presenting symbolic regular verification (SRV) that offers significant speedups over the state-of-the-art. SRV is based on dynamic symbolic execution (DSE) and enabled by novel techniques for mitigating path explosion: (1) a regular property-oriented path slicing algorithm, and (2) a synergistic combination of property-oriented path slicing and guiding. Slicing prunes redundant paths, while guiding boosts the search for counterexamples. We have implemented SRV for Java and evaluated it on 15 real-world open-source Java programs (totaling 259K lines of code). Our evaluation results demonstrate the effectiveness and efficiency of SRV. Compared with the state-of-the-art — pure DSE, pure guiding, and pure path slicing — SRV achieves average speedups of more than 8.4X, 8.6X, and 7X, respectively, making symbolic regular property verification significantly more practical.",
              "pageNumber": 871,
              "isPageNumberRoman": false
            },
            {
              "id": "3Idish882wor0EfyDUPNcm",
              "type": "authorPaper",
              "text": "[Journal First] Metamorphic Testing of RESTful Web APIs",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2LyedqPxjqMs5M0a7ONlmb/7dHldjNf2ey5gxorIcbznJ.pdf",
              "extraLocations": [],
              "authorNames": "Sergio Segura (Universidad de Sevilla), José A. Parejo (Universidad de Sevilla), Javier Troya (Universidad de Sevilla), Antonio Ruiz-Cortés (Universidad de Sevilla)",
              "abstract": "Web Application Programming Interfaces (APIs) specify how to access services and data over the network, typically using Web services. Web APIs are rapidly proliferating as a key element to foster reusability, integration, and innovation, enabling new consumption models such as mobile or smart TV apps. Companies such as Facebook, Twitter, Google, eBay or Netflix receive billions of API calls every day from thousands of different third-party applications and devices, which constitutes more than half of their total traffic. As Web APIs are progressively becoming the cornerstone of software integration, their validation is getting more critical. In this context, the fast detection of bugs is of utmost importance to increase the quality of internal products and third-party applications. However, testing Web APIs is challenging mainly due to the difficulty to assess whether the output of an API call is correct, i.e., the oracle problem. For instance, consider the Web API of the popular music streaming service Spotify. Suppose a search for albums with the query \"redhouse\" returning 21 total matches: Is this output correct? Do all the albums in the result set contain the keyword? Are there any albums containing the keyword not included in the result set? Answering these questions is difficult, even with small result sets, and often infeasible when the results are counted by thousands or millions. Metamorphic testing alleviates the oracle problem by providing an alternative when the expected output of a test execution is complex or unknown. Rather than checking the output of an individual program execution, metamorphic testing checks whether multiple executions of the program under test fulfil certain necessary properties called metamorphic relations. For instance, consider the following metamorphic relation in Spotify: two searches for albums with the same query should return the same number of total results regardless of the size of pagination. Suppose that a new Spotify search is performed using the exact same query as before and increasing the maximum number of results per page from 20 (default value) to 50: This search returns 27 total albums (6 more matches than in the previous search), which reveals a bug. This is an example of a real and reproducible fault detected using the approach presented in this paper and reported to Spotify. According to Spotify developers, it was a regression fault caused by a fix with undesired side effects. In this paper [1], we present a metamorphic testing approach for the automated detection of faults in RESTful Web APIs (henceforth also referred to as simply Web APIs). We introduce the concept of metamorphic relation output patterns. A Metamorphic Relation Output Pattern (MROP) defines an abstract output relation typically identified in Web APIs, regardless of their application domain. Each MROP is defined in terms of set operations among test outputs such as equality, union, subset, or intersection. MROPs provide a helpful guide for the identification of metamorphic relations, broadening the scope of our work beyond a particular Web API. Based on the notion of MROP, a methodology is proposed for the application of the approach to any Web API following the REST architectural pattern. The approach was evaluated in several steps. First, we used the proposed methodology to identify 33 metamorphic relations in four Web APIs developed by undergraduate students. All the relations are instances of the proposed MROPs. Then, we assessed the effectiveness of the identified relations at revealing 317 automatically seeded faults (i.e., mutants) in the APIs under test. As a result, 302 seeded faults were detected, achieving a mutation score of 95.3%. Second, we evaluated the approach using real Web APIs and faults. In particular, we identified 20 metamorphic relations in the Web API of Spotify and 40 metamorphic relations in the Web API of YouTube. Each metamorphic relation was implemented and automatically executed using both random and manual test data. In total, 469K metamorphic tests were generated. As a result, 21 metamorphic relations were violated, and 11 issues revealed and reported (3 issues in Spotify and 8 issues in YouTube). To date, 10 of the reported issues have been either confirmed by the API developers or reproduced by other users supporting the effectiveness of our approach.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Metamorphic Testing of RESTful Web APIs 1516699588762 Sergio Segura Universidad de Sevilla sergiosegura@us.es José A. Parejo Universidad de Sevilla japarejo@us.es Javier Troya Universidad de Sevilla jtroya@us.es Antonio Ruiz-Cortés Universidad de Sevilla aruiz@us.es Metamorphic testing REST RESTful Web services Web API Web Application Programming Interfaces (APIs) specify how to access services and data over the network, typically using Web services. Web APIs are rapidly proliferating as a key element to foster reusability, integration, and innovation, enabling new consumption models such as mobile or smart TV apps. Companies such as Facebook, Twitter, Google, eBay or Netflix receive billions of API calls every day from thousands of different third-party applications and devices, which constitutes more than half of their total traffic. As Web APIs are progressively becoming the cornerstone of software integration, their validation is getting more critical. In this context, the fast detection of bugs is of utmost importance to increase the quality of internal products and third-party applications. However, testing Web APIs is challenging mainly due to the difficulty to assess whether the output of an API call is correct, i.e., the oracle problem. For instance, consider the Web API of the popular music streaming service Spotify. Suppose a search for albums with the query \"redhouse\" returning 21 total matches: Is this output correct? Do all the albums in the result set contain the keyword? Are there any albums containing the keyword not included in the result set? Answering these questions is difficult, even with small result sets, and often infeasible when the results are counted by thousands or millions. Metamorphic testing alleviates the oracle problem by providing an alternative when the expected output of a test execution is complex or unknown. Rather than checking the output of an individual program execution, metamorphic testing checks whether multiple executions of the program under test fulfil certain necessary properties called metamorphic relations. For instance, consider the following metamorphic relation in Spotify: two searches for albums with the same query should return the same number of total results regardless of the size of pagination. Suppose that a new Spotify search is performed using the exact same query as before and increasing the maximum number of results per page from 20 (default value) to 50: This search returns 27 total albums (6 more matches than in the previous search), which reveals a bug. This is an example of a real and reproducible fault detected using the approach presented in this paper and reported to Spotify. According to Spotify developers, it was a regression fault caused by a fix with undesired side effects. In this paper [1], we present a metamorphic testing approach for the automated detection of faults in RESTful Web APIs (henceforth also referred to as simply Web APIs). We introduce the concept of metamorphic relation output patterns. A Metamorphic Relation Output Pattern (MROP) defines an abstract output relation typically identified in Web APIs, regardless of their application domain. Each MROP is defined in terms of set operations among test outputs such as equality, union, subset, or intersection. MROPs provide a helpful guide for the identification of metamorphic relations, broadening the scope of our work beyond a particular Web API. Based on the notion of MROP, a methodology is proposed for the application of the approach to any Web API following the REST architectural pattern. The approach was evaluated in several steps. First, we used the proposed methodology to identify 33 metamorphic relations in four Web APIs developed by undergraduate students. All the relations are instances of the proposed MROPs. Then, we assessed the effectiveness of the identified relations at revealing 317 automatically seeded faults (i.e., mutants) in the APIs under test. As a result, 302 seeded faults were detected, achieving a mutation score of 95.3%. Second, we evaluated the approach using real Web APIs and faults. In particular, we identified 20 metamorphic relations in the Web API of Spotify and 40 metamorphic relations in the Web API of YouTube. Each metamorphic relation was implemented and automatically executed using both random and manual test data. In total, 469K metamorphic tests were generated. As a result, 21 metamorphic relations were violated, and 11 issues revealed and reported (3 issues in Spotify and 8 issues in YouTube). To date, 10 of the reported issues have been either confirmed by the API developers or reproduced by other users supporting the effectiveness of our approach.",
              "pageNumber": 882,
              "isPageNumberRoman": false
            },
            {
              "id": "4mgLVhfbfp6ENV3BOC2Q0P",
              "type": "authorPaper",
              "text": "[Journal First] Integrating Technical Debt Management and Software Quality Management Processes: A Framework and Field Tests",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5VVcsBrL8djdrhDf5ufhWq/5fvSeX2ZAwnPyyIw2IrelG.pdf",
              "extraLocations": [],
              "authorNames": "Narayan Ramasubbu (University of Pittsburgh), Chris Kemerer (University of Pittsburgh)",
              "abstract": "Technical debt, defined as the maintenance obligations arising from shortcuts taken during the design, development, and deployment of software systems, has been shown to significantly impact the reliability and long-term evolution of software systems [1], [2]. Although academic research has moved beyond using technical debt only as a metaphor, and has begun compiling strong empirical evidence on the economic implications of technical debt, industry practitioners continue to find managing technical debt a challenging balancing act [3]. Despite the increasing awareness of the importance of managing technical debt in software product development, systematic processes for implementing technical debt management in software production have not been readily available. To address this gap, we developed and field tested a normative process framework that systematically incorporates steps for managing technical debt in commercial software production. The framework integrates processes required for technical debt management with existing software quality management processes prescribed by the project management body of knowledge (PMBOK) [4], and organizes the different processes for technical debt management under three steps: (1) make technical debt visible, (2) perform cost-benefit analysis, and (3) control technical debt. To implement the processes, we introduce a new artifact, called the technical debt register, which stores, for each software asset, the outstanding principal and the associated interest estimated for the technical debt embedded in the asset. The technical debt register also stores the desired control target for each software asset's technical debt, which is populated and used during the cost-benefit analysis and control target calculations. There are three main benefits from this integrated approach. First, it enables the uncovering of hidden technical debt embedded in systems. Established quality assurance and control practices can be utilized to effectively associate software defects with specific design and deployment decisions made by programmers. Such associations make technical debt visible to the team and thereby facilitate the quantification of debt-related principal and interest. Second, it helps to bridge the gaps that exist between the technical and economic assessments of technical debt, and aid in formulating actionable policies related to technical debt management. Finally, integrating technical debt management processes with established quality frameworks aids the wider adoption of emerging prescriptions for managing technical debt. We partnered with three commercial software product development organizations to implement the framework in real-world software production settings. All three organizations, irrespective of their varying software process maturity levels, were able to adopt the proposed framework and integrate the prescribed technical debt management processes with their existing software quality management processes. Our longitudinal data and case-study interviews indicate that the organizations were able to accrue economic benefits from the adoption and use of the integrated framework. And, based on our field study observations, we also identified a set of best practices that support the implementation and use of our framework: facilitating engagement between business and engineering stakeholders, adoption of policies based on a probabilistic analysis framework, and limiting process overheads.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Integrating Technical Debt Management and Software Quality Management Processes: A Framework and Field Tests 1516658494349 Narayan Ramasubbu University of Pittsburgh narayanr@pitt.edu Chris Kemerer University of Pittsburgh undefined Technical debt software quality software maintenance software engineering economics cost of quality software product development software process case study Technical debt, defined as the maintenance obligations arising from shortcuts taken during the design, development, and deployment of software systems, has been shown to significantly impact the reliability and long-term evolution of software systems [1], [2]. Although academic research has moved beyond using technical debt only as a metaphor, and has begun compiling strong empirical evidence on the economic implications of technical debt, industry practitioners continue to find managing technical debt a challenging balancing act [3]. Despite the increasing awareness of the importance of managing technical debt in software product development, systematic processes for implementing technical debt management in software production have not been readily available. To address this gap, we developed and field tested a normative process framework that systematically incorporates steps for managing technical debt in commercial software production. The framework integrates processes required for technical debt management with existing software quality management processes prescribed by the project management body of knowledge (PMBOK) [4], and organizes the different processes for technical debt management under three steps: (1) make technical debt visible, (2) perform cost-benefit analysis, and (3) control technical debt. To implement the processes, we introduce a new artifact, called the technical debt register, which stores, for each software asset, the outstanding principal and the associated interest estimated for the technical debt embedded in the asset. The technical debt register also stores the desired control target for each software asset's technical debt, which is populated and used during the cost-benefit analysis and control target calculations. There are three main benefits from this integrated approach. First, it enables the uncovering of hidden technical debt embedded in systems. Established quality assurance and control practices can be utilized to effectively associate software defects with specific design and deployment decisions made by programmers. Such associations make technical debt visible to the team and thereby facilitate the quantification of debt-related principal and interest. Second, it helps to bridge the gaps that exist between the technical and economic assessments of technical debt, and aid in formulating actionable policies related to technical debt management. Finally, integrating technical debt management processes with established quality frameworks aids the wider adoption of emerging prescriptions for managing technical debt. We partnered with three commercial software product development organizations to implement the framework in real-world software production settings. All three organizations, irrespective of their varying software process maturity levels, were able to adopt the proposed framework and integrate the prescribed technical debt management processes with their existing software quality management processes. Our longitudinal data and case-study interviews indicate that the organizations were able to accrue economic benefits from the adoption and use of the integrated framework. And, based on our field study observations, we also identified a set of best practices that support the implementation and use of our framework: facilitating engagement between business and engineering stakeholders, adoption of policies based on a probabilistic analysis framework, and limiting process overheads.",
              "pageNumber": 883,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 28: Mining Software Repositories",
          "lineItems": [
            {
              "id": "6r4hlduabH4VjY4M8ay3NG",
              "type": "authorPaper",
              "text": "[Journal First] Understanding the Factors for Fast Answers in Technical Q&A Websites: An Empirical Study of Four Stack Exchange Websites",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gXwmxc37m3Zs7S7KAHn9L/15wH8DdvqszwuqgTZmAuHG.pdf",
              "extraLocations": [],
              "authorNames": "Mike Papadakis (University of Luxembourg), Shaowei Wang (SAIL Queen's University), Tse-Hsun Chen (Concordia University), Ahmed E. Hassan (SAIL Queen's University)",
              "abstract": "Technical questions and answers (Q&A) websites accumulate a significant amount of knowledge from users. Developers are especially active on these Q&A websites, since developers are constantly facing new development challenges that require help from other experts. Over the years, Q&A website designers have derived several incentive systems (e.g., gamification) to encourage users to answer questions that are posted by others. However, the current incentive systems primarily focus on the quantity and quality of the answers instead of encouraging the rapid answering of questions. Improving the speed of getting an answer can significantly improve the user experience and increase user engagement on such Q&A websites. In this paper [1], we study the factors for fast answers on such Q&A websites. Our goal is to explore how one may improve the current incentive systems to motivate fast answering of questions. We use a logistic regression model to analyze 46 factors along four dimensions (i.e., question, asker, answer, and answerer dimension) in order to understand the relationship between the studied factors and the needed time to get an accepted answer. The question dimension calculates various textual and readability features of a question, as well as the popularity and difficulty of the question's tags. The asker dimension calculates the reputation of an asker and his/her historical tendency to get answers. The answer dimension computes textual features from the text of the accepted answer. The answerer dimension computes the historical activity level of the answerer who answered the question. We conduct our study on the four most popular (i.e., with the most questions) Q&A Stack Exchange websites: Stack Overflow, Mathematics, Ask Ubuntu, and Superuser. We find that i) factors in the answerer dimension have the strongest effect on the needed time to get an accepted answer, after controlling for other factors; ii) the current incentive system does not recognize non-frequent answerers who often answer questions which frequent answerers are not able to answer well. Such questions that are answered by non-frequent answerers are as important as those that are answered by frequent answerers; iii) the current incentive system motivates frequent answerers well, but such frequent answerers tend to answer short questions. Our findings suggest that the designers of Q&A website should improve their incentive systems to motivate non-frequent answerers to be more active and to answer questions faster, in order to shorten the waiting time for an answer (especially for questions that require specific knowledge that frequent answerers might not possess). In addition, the question answering incentive system needs to factor in the value and difficulty of answering the questions (e.g., by providing more rewards to harder questions or questions that remain unanswered for a long period of time).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Understanding the Factors for Fast Answers in Technical Q&A Websites: An Empirical Study of Four Stack Exchange Websites 1518465964528 Mike Papadakis University of Luxembourg michail.papadakis@uni.lu Shaowei Wang SAIL Queen's University shaowei@cs.queensu.ca Tse-Hsun Chen Concordia University peterc@encs.concordia.ca Ahmed E. Hassan SAIL Queen's University ahmed@cs.queensu.cs Q&amp;A website Factor importance analysis Response time Technical questions and answers (Q&A) websites accumulate a significant amount of knowledge from users. Developers are especially active on these Q&A websites, since developers are constantly facing new development challenges that require help from other experts. Over the years, Q&A website designers have derived several incentive systems (e.g., gamification) to encourage users to answer questions that are posted by others. However, the current incentive systems primarily focus on the quantity and quality of the answers instead of encouraging the rapid answering of questions. Improving the speed of getting an answer can significantly improve the user experience and increase user engagement on such Q&A websites. In this paper [1], we study the factors for fast answers on such Q&A websites. Our goal is to explore how one may improve the current incentive systems to motivate fast answering of questions. We use a logistic regression model to analyze 46 factors along four dimensions (i.e., question, asker, answer, and answerer dimension) in order to understand the relationship between the studied factors and the needed time to get an accepted answer. The question dimension calculates various textual and readability features of a question, as well as the popularity and difficulty of the question's tags. The asker dimension calculates the reputation of an asker and his/her historical tendency to get answers. The answer dimension computes textual features from the text of the accepted answer. The answerer dimension computes the historical activity level of the answerer who answered the question. We conduct our study on the four most popular (i.e., with the most questions) Q&A Stack Exchange websites: Stack Overflow, Mathematics, Ask Ubuntu, and Superuser. We find that i) factors in the answerer dimension have the strongest effect on the needed time to get an accepted answer, after controlling for other factors; ii) the current incentive system does not recognize non-frequent answerers who often answer questions which frequent answerers are not able to answer well. Such questions that are answered by non-frequent answerers are as important as those that are answered by frequent answerers; iii) the current incentive system motivates frequent answerers well, but such frequent answerers tend to answer short questions. Our findings suggest that the designers of Q&A website should improve their incentive systems to motivate non-frequent answerers to be more active and to answer questions faster, in order to shorten the waiting time for an answer (especially for questions that require specific knowledge that frequent answerers might not possess). In addition, the question answering incentive system needs to factor in the value and difficulty of answering the questions (e.g., by providing more rewards to harder questions or questions that remain unanswered for a long period of time).",
              "pageNumber": 884,
              "isPageNumberRoman": false
            },
            {
              "id": "6JmTUHDayp3HGWPwxet9OD",
              "type": "authorPaper",
              "text": "[Journal First] Towards Reusing Hints from Past Fixes: An Exploratory Study on Thousands of Real Samples",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/40hy9tlXTmRgfderpGDdg6/3ne6Pkg9Hj4fJLRwiT7QKS.pdf",
              "extraLocations": [],
              "authorNames": "Hao Zhong (Shanghai Jiao Tong University), Na Meng (Virginia Tech)",
              "abstract": "Researchers have recently proposed various automatic program repair (APR) approaches that reuse past fixes to fix new bugs. However, some fundamental questions, such as how new fixes overlap with old fixes, have not been investigated. Intuitively, the overlap between old and new fixes decides how APR approaches can construct new fixes with old ones. Based on this intuition, we systematically designed six overlap metrics, and performed an empirical study on 5,735 bug fixes to investigate the usefulness of past fixes when composing new fixes. For each bug fix, we created delta dependency graphs (i.e., program dependency graphs for code changes), and identified how bug fixes overlapped with each other in terms of the content, code structure, and identifier names of fixes. Our results show that if an APR approach composes new fixes by fully or partially reusing the content of past fixes, only 2.1% and 3.2% new fixes can be created from single or multiple past fixes in the same project, compared with 0.9% and 1.2% fixes created from past fixes across projects. However, if an APR approach composes new fixes by fully or partially reusing the code structure of past fixes, up to 41.3% and 29.7% new fixes can be created.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Towards Reusing Hints from Past Fixes: An Exploratory Study on Thousands of Real Samples 1517616480566 Hao Zhong Shanghai Jiao Tong University zhonghao@sjtu.edu.cn Na Meng Virginia Tech nm8247@cs.vt.edu reusing past fix empirical study program repair Researchers have recently proposed various automatic program repair (APR) approaches that reuse past fixes to fix new bugs. However, some fundamental questions, such as how new fixes overlap with old fixes, have not been investigated. Intuitively, the overlap between old and new fixes decides how APR approaches can construct new fixes with old ones. Based on this intuition, we systematically designed six overlap metrics, and performed an empirical study on 5,735 bug fixes to investigate the usefulness of past fixes when composing new fixes. For each bug fix, we created delta dependency graphs (i.e., program dependency graphs for code changes), and identified how bug fixes overlapped with each other in terms of the content, code structure, and identifier names of fixes. Our results show that if an APR approach composes new fixes by fully or partially reusing the content of past fixes, only 2.1% and 3.2% new fixes can be created from single or multiple past fixes in the same project, compared with 0.9% and 1.2% fixes created from past fixes across projects. However, if an APR approach composes new fixes by fully or partially reusing the code structure of past fixes, up to 41.3% and 29.7% new fixes can be created.",
              "pageNumber": 885,
              "isPageNumberRoman": false
            },
            {
              "id": "3O0L3IWWqT1a2ZrgFxzPs2",
              "type": "authorPaper",
              "text": "Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eEvTc6qHbldivQpa5eYeD/5IW1xFsfcWW8UXnTSd983J.pdf",
              "extraLocations": [],
              "authorNames": "Tianyi Zhang (University of California, Los Angeles), Ganesha Upadhyaya (Iowa State University), Anastasia Reinhardt (George Fox University), Hridesh Rajan (Iowa State University), Miryung Kim (University of California, Los Angeles)",
              "abstract": "Programmers often consult an online Q&A forum such as Stack Overflow to learn new APIs. This paper presents an empirical study on the prevalence and severity of API misuse on Stack Overflow. To reduce manual assessment effort, we design ExampleCheck, an API usage mining framework that extracts patterns from over 380K Java repositories on GitHub and subsequently reports potential API usage violations in Stack Overflow posts. We analyze 217,818 Stack Overflow posts using ExampleCheck and find that 31% may have potential API usage violations that could produce unexpected behavior such as program crashes and resource leaks. Such API misuse is caused by three main reasons—missing control constructs, missing or incorrect order of API calls, and incorrect guard conditions. Even the posts that are accepted as correct answers or upvoted by other programmers are not necessarily more reliable than other posts in terms of API misuse. This study result calls for a new approach to augment Stack Overflow with alternative API usage details that are not typically shown in curated examples.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow 1518481769485 Tianyi Zhang University of California, Los Angeles tianyi.zhang@cs.ucla.edu Ganesha Upadhyaya Iowa State University ganeshau@iastate.edu Anastasia Reinhardt George Fox University areinhardt14@georgefox.edu Hridesh Rajan Iowa State University hridesh@iastate.edu Miryung Kim University of California, Los Angeles miryung@cs.ucla.edu online Q&amp;A forums API usage pattern code example assessment Programmers often consult an online Q&A forum such as Stack Overflow to learn new APIs. This paper presents an empirical study on the prevalence and severity of API misuse on Stack Overflow. To reduce manual assessment effort, we design ExampleCheck, an API usage mining framework that extracts patterns from over 380K Java repositories on GitHub and subsequently reports potential API usage violations in Stack Overflow posts. We analyze 217,818 Stack Overflow posts using ExampleCheck and find that 31% may have potential API usage violations that could produce unexpected behavior such as program crashes and resource leaks. Such API misuse is caused by three main reasons—missing control constructs, missing or incorrect order of API calls, and incorrect guard conditions. Even the posts that are accepted as correct answers or upvoted by other programmers are not necessarily more reliable than other posts in terms of API misuse. This study result calls for a new approach to augment Stack Overflow with alternative API usage details that are not typically shown in curated examples.",
              "pageNumber": 886,
              "isPageNumberRoman": false
            },
            {
              "id": "ipI8tH2rzWKFK6vURzXeB",
              "type": "authorPaper",
              "text": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf",
              "extraLocations": [],
              "authorNames": "Lingfeng Bao (Zhejiang University), Zhenchang Xing (Australian National University), Xin Xia (Monash University), David Lo (Singapore Management University), Ahmed E. Hassan (Queen’s University)",
              "abstract": "This paper is published in Journal of Empirical Software Engineering (DOI: 10.1007/s10664-017-9547-8). Studying developers' behavior is crucial for designing effective techniques and tools to support developers' daily work. However, there are two challenges in collecting and analyzing developers' behavior data. First, instrumenting many software tools commonly used in real work settings (e.g., IDEs, web browsers) is difficult and requires significant resources. Second, the collected behavior data consist of low-level and fine-grained event sequences, which must be abstracted into high-level development activities for further analysis. To address these two challenges, we first use our ActivitySpace framework to improve the generalizability of the data collection. Then, we propose a Condition Random Field (CRF) based approach to segment and label the developers' low-level actions into a set of basic, yet meaningful development activities. To evaluate our proposed approach, we deploy the ActivitySpace framework in an industry partner's company and collect the real working data from ten professional developers' one-week work. We conduct an experiment with the collected data and a small number of initial human-labeled training data using the CRF model and the other three baselines (i.e., a heuristic-rules based method, a SVM classifier, and a random weighted classifier). The proposed CRF model achieves better performance (i.e., 0.728 accuracy and 0.672 macro-averaged F1-score) than the other three baselines.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications 1516764230770 Lingfeng Bao Zhejiang University lingfengbao@zju.edu.cn Zhenchang Xing Australian National University zhenchang.xing@anu.edu.au Xin Xia Monash University xin.xia@monash.edu David Lo Singapore Management University davidlo@smu.edu.sg Ahmed E. Hassan Queen’s University ahmed@cs.queensu.ca Software development Developers' interaction data Condition Random Field This paper is published in Journal of Empirical Software Engineering (DOI: 10.1007/s10664-017-9547-8). Studying developers' behavior is crucial for designing effective techniques and tools to support developers' daily work. However, there are two challenges in collecting and analyzing developers' behavior data. First, instrumenting many software tools commonly used in real work settings (e.g., IDEs, web browsers) is difficult and requires significant resources. Second, the collected behavior data consist of low-level and fine-grained event sequences, which must be abstracted into high-level development activities for further analysis. To address these two challenges, we first use our ActivitySpace framework to improve the generalizability of the data collection. Then, we propose a Condition Random Field (CRF) based approach to segment and label the developers' low-level actions into a set of basic, yet meaningful development activities. To evaluate our proposed approach, we deploy the ActivitySpace framework in an industry partner's company and collect the real working data from ten professional developers' one-week work. We conduct an experiment with the collected data and a small number of initial human-labeled training data using the CRF model and the other three baselines (i.e., a heuristic-rules based method, a SVM classifier, and a random weighted classifier). The proposed CRF model achieves better performance (i.e., 0.728 accuracy and 0.672 macro-averaged F1-score) than the other three baselines.",
              "pageNumber": 897,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 29: Models and Modeling I",
          "lineItems": [
            {
              "id": "4eRrKRfXTdL4IVeJByIPvZ",
              "type": "authorPaper",
              "text": "Propagating Configuration Decisions with Modal Implication Graphs",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf",
              "extraLocations": [],
              "authorNames": "Sebastian Krieter (University of Magdeburg; Harz University of Applied Sciences), Thomas Thüm (TU Braunschweig), Sandro Schulze (University of Magdeburg), Reimar Schröter (University of Magdeburg), Gunter Saake (University of Magdeburg)",
              "abstract": "Highly-configurable systems encompass thousands of interdependent configuration options, which require a non-trivial configuration process. Decision propagation enables a backtracking-free configuration process by computing values implied by user decisions. However, employing decision propagation for large-scale systems is a time-consuming task and, thus, can be a bottleneck in interactive configuration processes and analyses alike. We propose modal implication graphs to improve the performance of decision propagation by precomputing intermediate values used in the process. Our evaluation results show a significant improvement over state-of-the-art algorithms for 120 real-world systems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Propagating Configuration Decisions with Modal Implication Graphs 1518430783492 Sebastian Krieter University of Magdeburg; Harz University of Applied Sciences sebastian.krieter@ovgu.de Thomas Thüm TU Braunschweig t.thuem@tu-braunschweig.de Sandro Schulze University of Magdeburg sandro.schulze@ovgu.de Reimar Schröter University of Magdeburg reimar.schroeter@ovgu.de Gunter Saake University of Magdeburg saake@iti.cs.uni-magdeburg.de Software product line Configuration Decision Propagation Highly-configurable systems encompass thousands of interdependent configuration options, which require a non-trivial configuration process. Decision propagation enables a backtracking-free configuration process by computing values implied by user decisions. However, employing decision propagation for large-scale systems is a time-consuming task and, thus, can be a bottleneck in interactive configuration processes and analyses alike. We propose modal implication graphs to improve the performance of decision propagation by precomputing intermediate values used in the process. Our evaluation results show a significant improvement over state-of-the-art algorithms for 120 real-world systems.",
              "pageNumber": 898,
              "isPageNumberRoman": false
            },
            {
              "id": "7CxeMlkbmN2SGFbn5JHRSj",
              "type": "authorPaper",
              "text": "A Combinatorial Approach for Exposing Off-Nominal Behaviors",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1niPYcBs9KMjWLu6UZNJfB/2u0THsBx1px4D7wndMcz96.pdf",
              "extraLocations": [],
              "authorNames": "Kaushik Madala (University of North Texas), Hyunsook Do (University of North Texas), Daniel Aceituna (DISTek Integration)",
              "abstract": "Off-nominal behaviors (ONBs) have been a major concern in the areas of embedded systems and safety-critical systems. To address ONB problems, some researchers have proposed model-based approaches that can expose ONBs by analyzing natural language requirements documents. While these approaches produced promising results, they require a lot of human effort and time. In this paper, to reduce human effort and time, we propose a combinatorial–based approach, Combinatorial Causal Component Model (Combi-CCM), which uses structured requirements patterns and combinations generated using the IPOG algorithm. We conducted an empirical study using several requirements documents to evaluate our approach, and our results indicate that the proposed approach can reduce human effort and time while maintaining the same ONB exposure ability obtained by the control techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 A Combinatorial Approach for Exposing Off-Nominal Behaviors 1518034503449 Kaushik Madala University of North Texas kaushikmadala@my.unt.edu Hyunsook Do University of North Texas hyunsook.do@unt.edu Daniel Aceituna DISTek Integration Daniel.Aceituna@distek.com Off-Nominal Behaviors Requirements Verification Combinatorial Approach Model-based Approach Off-nominal behaviors (ONBs) have been a major concern in the areas of embedded systems and safety-critical systems. To address ONB problems, some researchers have proposed model-based approaches that can expose ONBs by analyzing natural language requirements documents. While these approaches produced promising results, they require a lot of human effort and time. In this paper, to reduce human effort and time, we propose a combinatorial–based approach, Combinatorial Causal Component Model (Combi-CCM), which uses structured requirements patterns and combinations generated using the IPOG algorithm. We conducted an empirical study using several requirements documents to evaluate our approach, and our results indicate that the proposed approach can reduce human effort and time while maintaining the same ONB exposure ability obtained by the control techniques.",
              "pageNumber": 910,
              "isPageNumberRoman": false
            },
            {
              "id": "2xKXvWFXLmg27cvhEZguFs",
              "type": "authorPaper",
              "text": "Identifying Design Problems in the Source Code: A Grounded Theory",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf",
              "extraLocations": [],
              "authorNames": "Leonardo Sousa (PUC-Rio), Anderson Oliveira (PUC-Rio), Willian Oizumi (PUC-Rio), Simone Barbosa (PUC-Rio), Alessandro Garcia (PUC-Rio), Jaejoon Lee (Lancaster University), Marcos Kalinowski (PUC-Rio), Rafael de Mello (PUC-Rio), Baldoino Fonseca (UFAL), Roberto Oliveira (PUC-Rio), Carlos Lucena (PUC-Rio), Rodrigo Paes (UFAL)",
              "abstract": "The prevalence of design problems may cause re-engineering or even discontinuation of the system. Due to missing, informal or outdated design documentation, developers often have to rely on the source code to identify design problems. Therefore, developers have to analyze different symptoms that manifest in several code elements, which may quickly turn into a complex task. Although researchers have been investigating techniques to help developers in identifying design problems, there is little knowledge on how developers actually proceed to identify design problems. In order to tackle this problem, we conducted a multi-trial industrial experiment with professionals from 5 software companies to build a grounded theory. The resulting theory offers explanations on how developers identify design problems in practice. For instance, it reveals the characteristics of symptoms that developers consider helpful. Moreover, developers often combine different types of symptoms to identify a single design problem. This knowledge serves as a basis to further understand the phenomena and advance towards more effective identification techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Identifying Design Problems in the Source Code: A Grounded Theory 1518452100848 Leonardo Sousa PUC-Rio ssousaleo@gmail.com Anderson Oliveira PUC-Rio aoliveira@inf.puc-rio.br Willian Oizumi PUC-Rio woizumi@inf.puc-rio.br Simone Barbosa PUC-Rio simone@inf.puc-rio.br Alessandro Garcia PUC-Rio afgarcia@inf.puc-rio.br Jaejoon Lee Lancaster University j.lee3@lancaster.ac.uk Marcos Kalinowski PUC-Rio kalinowski@inf.puc-rio.br Rafael de Mello PUC-Rio rmaiani@inf.puc-rio.br Baldoino Fonseca UFAL baldoino@ic.ufal.br Roberto Oliveira PUC-Rio lucena@inf.puc-rio.br Carlos Lucena PUC-Rio roliveira@inf.puc-rio.br Rodrigo Paes UFAL rodrigo@ic.ufal.br design problem grounded theory software design symptoms The prevalence of design problems may cause re-engineering or even discontinuation of the system. Due to missing, informal or outdated design documentation, developers often have to rely on the source code to identify design problems. Therefore, developers have to analyze different symptoms that manifest in several code elements, which may quickly turn into a complex task. Although researchers have been investigating techniques to help developers in identifying design problems, there is little knowledge on how developers actually proceed to identify design problems. In order to tackle this problem, we conducted a multi-trial industrial experiment with professionals from 5 software companies to build a grounded theory. The resulting theory offers explanations on how developers identify design problems in practice. For instance, it reveals the characteristics of symptoms that developers consider helpful. Moreover, developers often combine different types of symptoms to identify a single design problem. This knowledge serves as a basis to further understand the phenomena and advance towards more effective identification techniques.",
              "pageNumber": 921,
              "isPageNumberRoman": false
            },
            {
              "id": "uCIO3NouaVrMQdVucR0uL",
              "type": "authorPaper",
              "text": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf",
              "extraLocations": [],
              "authorNames": "Kostadin Damevski (Virginia Commonwealth University), Hui Chen (Brooklyn College), David C. Shepherd (ABB Inc.), Nicholas A. Kraft (ABB Inc.), Lori Pollock (University of Delaware)",
              "abstract": "Interaction data, gathered from developers' daily clicks and key presses in the IDE, has found use in both empirical studies and in recommendation systems for software engineering. We observe that this data has several characteristics, common across IDEs: 1) exponentially distributed - some events or commands dominate the trace (e.g., cursor movement commands), while most other commands occur relatively infrequently; 2) noisy - the traces include spurious commands (or clicks), or unrelated events, that may not be important to the behavior of interest; 3) comprise of overlapping events and commands - specific commands can be invoked by separate mechanisms, and similar events can be triggered by different sources. These characteristics of this data are analogous to the characteristics of synonymy and polysemy in natural language corpora. Therefore, this paper (and presentation) presents a new modeling approach for this type of data, leveraging topic models typically applied to streams of natural language text.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models 1518144948484 Kostadin Damevski Virginia Commonwealth University kdamevskI@vcu.edu Hui Chen Brooklyn College huichen@ieee.org David C. Shepherd ABB Inc. david.shepherd@us.abb.com Nicholas A. Kraft ABB Inc. nicholas.a.kraft@us.abb.com Lori Pollock University of Delaware pollock@udel.edu command recommendation systems IDE interaction data Interaction data, gathered from developers' daily clicks and key presses in the IDE, has found use in both empirical studies and in recommendation systems for software engineering. We observe that this data has several characteristics, common across IDEs: 1) exponentially distributed - some events or commands dominate the trace (e.g., cursor movement commands), while most other commands occur relatively infrequently; 2) noisy - the traces include spurious commands (or clicks), or unrelated events, that may not be important to the behavior of interest; 3) comprise of overlapping events and commands - specific commands can be invoked by separate mechanisms, and similar events can be triggered by different sources. These characteristics of this data are analogous to the characteristics of synonymy and polysemy in natural language corpora. Therefore, this paper (and presentation) presents a new modeling approach for this type of data, leveraging topic models typically applied to streams of natural language text.",
              "pageNumber": 932,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 30: Code Search, Synthesis, Performance",
          "lineItems": [
            {
              "id": "3Fk49iD7biipvFzutQkXnf",
              "type": "authorPaper",
              "text": "Deep Code Search",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6YGOIojlzNINpMgNCiWexy/1XBHyJ8bsQpXg13bh3bS9O.pdf",
              "extraLocations": [],
              "authorNames": "Xiaodong Gu (The Hong Kong University of Science and Technology), Hongyu Zhang (The University of Newcastle), Sunghun Kim (The Hong Kong University of Science and Technology)",
              "abstract": "To implement a program functionality, developers can reuse previously written code snippets by searching through a large-scale codebase. Over the years, many code search tools have been proposed to help developers. The existing approaches often treat source code as textual documents and utilize information retrieval models to retrieve relevant code snippets that match a given query. These approaches mainly rely on the textual similarity between source code and natural language query. They lack a deep understanding of the semantics of queries and source code. In this paper, we propose a novel deep neural network named CODEnn (Code-Description Embedding Neural Network). Instead of matching text similarity, CODEnn jointly embeds code snippets and natural language descriptions into a high-dimensional vector space, in such a way that code snippet and its corresponding description have similar vectors. Using the unified vector representation, code snippets related to a natural language query can be retrieved according to their vectors. Semantically related words can also be recognized and irrelevant/noisy keywords in queries can be handled. As a proof-of-concept application, we implement a code search tool named DeepCS using the proposed CODEnn model. We empirically evaluate DeepCS on a large scale codebase collected from GitHub. The experimental results show that our approach can effectively retrieve relevant code snippets and outperforms previous techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Deep Code Search 1518164129048 Xiaodong Gu The Hong Kong University of Science and Technology guxiaodong1987@126.com Hongyu Zhang The University of Newcastle hongyu.zhang@newcastle.edu.au Sunghun Kim The Hong Kong University of Science and Technology hunkim@cse.ust.hk code search deep learning joint embedding To implement a program functionality, developers can reuse previously written code snippets by searching through a large-scale codebase. Over the years, many code search tools have been proposed to help developers. The existing approaches often treat source code as textual documents and utilize information retrieval models to retrieve relevant code snippets that match a given query. These approaches mainly rely on the textual similarity between source code and natural language query. They lack a deep understanding of the semantics of queries and source code. In this paper, we propose a novel deep neural network named CODEnn (Code-Description Embedding Neural Network). Instead of matching text similarity, CODEnn jointly embeds code snippets and natural language descriptions into a high-dimensional vector space, in such a way that code snippet and its corresponding description have similar vectors. Using the unified vector representation, code snippets related to a natural language query can be retrieved according to their vectors. Semantically related words can also be recognized and irrelevant/noisy keywords in queries can be handled. As a proof-of-concept application, we implement a code search tool named DeepCS using the proposed CODEnn model. We empirically evaluate DeepCS on a large scale codebase collected from GitHub. The experimental results show that our approach can effectively retrieve relevant code snippets and outperforms previous techniques.",
              "pageNumber": 933,
              "isPageNumberRoman": false
            },
            {
              "id": "6ySIgTldMpHr5Lgb0IcFke",
              "type": "authorPaper",
              "text": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf",
              "extraLocations": [],
              "authorNames": "Raphael Sirres (National Library of Luxembourg), Tegawendé F. Bissyandé (SnT), Dongsun Kim (SnT), David Lo (Singapore Management University), Jacques Klein (SnT), Kisub Kim (SnT), Yves Le Traon (SnT)",
              "abstract": "Source code terms such as method names and variable types are often different from conceptual words mentioned in a search query. This vocabulary mismatch problem can make code search inefficient. In this paper, we present Code voCaBulary (CoCaBu), an approach to resolving the vocabulary mismatch problem when dealing with free-form code search queries. Our approach leverages common developer questions and the associated expert answers to augment user queries with the relevant, but missing, structural code entities in order to improve the performance of matching relevant code examples within large code repositories. To instantiate this approach, we build GitSearch, a code search engine, on top of GitHub and Stack Overflow Q&amp;A data. We evaluate GitSearch in several dimensions to demonstrate that (1) its code search results are correct with respect to user-accepted answers; (2) the results are qualitatively better than those of existing Internet-scale code search engines; (3) our engine is competitive against web search engines, such as Google, in helping users solve programming tasks; and (4) GitSearch provides code examples that are acceptable or interesting to the community as answers for Stack Overflow questions.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search 1518149454787 Raphael Sirres National Library of Luxembourg bconnectlu@gmail.com Tegawendé F. Bissyandé SnT tegawende.bissyande@uni.lu Dongsun Kim SnT dongsun.kim@uni.lu David Lo Singapore Management University davidlo@smu.edu.sg Jacques Klein SnT jacques.klein@uni.lu Kisub Kim SnT kisub.kim@uni.lu Yves Le Traon SnT yves.letraon@uni.lu Code search GitHub Free form search Query augmentation StackOverflow Vocabulary mismatch Source code terms such as method names and variable types are often different from conceptual words mentioned in a search query. This vocabulary mismatch problem can make code search inefficient. In this paper, we present Code voCaBulary (CoCaBu), an approach to resolving the vocabulary mismatch problem when dealing with free-form code search queries. Our approach leverages common developer questions and the associated expert answers to augment user queries with the relevant, but missing, structural code entities in order to improve the performance of matching relevant code examples within large code repositories. To instantiate this approach, we build GitSearch, a code search engine, on top of GitHub and Stack Overflow Q&amp;A data. We evaluate GitSearch in several dimensions to demonstrate that (1) its code search results are correct with respect to user-accepted answers; (2) the results are qualitatively better than those of existing Internet-scale code search engines; (3) our engine is competitive against web search engines, such as Google, in helping users solve programming tasks; and (4) GitSearch provides code examples that are acceptable or interesting to the community as answers for Stack Overflow questions.",
              "pageNumber": 945,
              "isPageNumberRoman": false
            },
            {
              "id": "Mx12yT92BYgF8MKdlqJWk",
              "type": "authorPaper",
              "text": "FaCoY – A Code-to-Code Search Engine",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf",
              "extraLocations": [],
              "authorNames": "Kisub Kim (SnT), Dongsun Kim (SnT), Tegawendé F. Bissyandé (SnT), Eunjong Choi (Nara Institute of Science and Technology (NAIST)), Li Li (Faculty of Information Technology), Jacques Klein (SnT), Yves Le Traon (SnT)",
              "abstract": "Code search is an unavoidable activity in software development. Various approaches and techniques have been explored in the literature to support code search tasks. Most of these approaches focus on serving user queries provided as natural language free-form input. However, there exists a wide range of use-case scenarios where a code-to-code approach would be most beneficial. For example, research directions in code transplantation, code diversity, patch recommendation can leverage a code-to-code search engine to find essential ingredients for their techniques. In this paper, we propose FaCoY, a novel approach for statically finding code fragments which may be semantically similar to user input code. FaCoY implements a query alternation strategy: instead of directly matching code query tokens with code in the search space, FaCoY first attempts to identify other tokens which may also be relevant in implementing the functional behavior of the input code. With various experiments, we show that (1) FaCoY is more effective than online code-to-code search engines; (2) FaCoY can detect more semantic code clones (i.e., Type-4) in BigCloneBench than the state-of-the-art; (3) FaCoY, while static, can detect code fragments which are indeed similar with respect to runtime execution behavior; and (4) FaCoY can be useful in code/patch recommendation.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 FaCoY – A Code-to-Code Search Engine 1518465129512 Kisub Kim SnT kisub.kim@uni.lu Dongsun Kim SnT dongsun.kim@uni.lu Tegawendé F. Bissyandé SnT tegawende.bissyande@uni.lu Eunjong Choi Nara Institute of Science and Technology (NAIST) choi@is.naist.jp Li Li Faculty of Information Technology li.li@monash.edu Jacques Klein SnT jacques.klein@uni.lu Yves Le Traon SnT Yves.LeTraon@uni.lu code search semantic clones code to code search Code search is an unavoidable activity in software development. Various approaches and techniques have been explored in the literature to support code search tasks. Most of these approaches focus on serving user queries provided as natural language free-form input. However, there exists a wide range of use-case scenarios where a code-to-code approach would be most beneficial. For example, research directions in code transplantation, code diversity, patch recommendation can leverage a code-to-code search engine to find essential ingredients for their techniques. In this paper, we propose FaCoY, a novel approach for statically finding code fragments which may be semantically similar to user input code. FaCoY implements a query alternation strategy: instead of directly matching code query tokens with code in the search space, FaCoY first attempts to identify other tokens which may also be relevant in implementing the functional behavior of the input code. With various experiments, we show that (1) FaCoY is more effective than online code-to-code search engines; (2) FaCoY can detect more semantic code clones (i.e., Type-4) in BigCloneBench than the state-of-the-art; (3) FaCoY, while static, can detect code fragments which are indeed similar with respect to runtime execution behavior; and (4) FaCoY can be useful in code/patch recommendation.",
              "pageNumber": 946,
              "isPageNumberRoman": false
            },
            {
              "id": "5i2RwM4qSLOlIIiPlMRmPz",
              "type": "authorPaper",
              "text": "Generalized Data Structure Synthesis",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/42oFsoJ7RHGAgoPbI5dzk5/2V1Gp0VfIP3nDtDc89Gm45.pdf",
              "extraLocations": [],
              "authorNames": "Calvin Loncaric (University of Washington, Seattle), Michael D. Ernst (University of Washington, Seattle), Emina Torlak (University of Washington, Seattle)",
              "abstract": "Data structure synthesis is the task of generating data structure implementations from high-level specifications. Recent work in this area has shown potential to save programmer time and reduce the risk of defects. Existing techniques focus on data structures for manipulating subsets of a single collection, but real-world programs often track multiple related collections and aggregate properties such as sums, counts, minimums, and maximums. This paper shows how to synthesize data structures that track subsets and aggregations of multiple related collections. Our technique decomposes the synthesis task into alternating steps of query synthesis and incrementalization. The query synthesis step implements pure operations over the data structure state by leveraging existing enumerative synthesis techniques, specialized to the data structures domain. The incrementalization step implements imperative state modifications by re-framing them as fresh queries that determine what to change, coupled with a small amount of code to apply the change. As an added benefit of this approach over previous work, the synthesized data structure is optimized for not only the queries in the specification but also the required update operations. We have evaluated our approach in four large case studies, demonstrating that these extensions are broadly applicable.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Generalized Data Structure Synthesis 1518477069478 Calvin Loncaric University of Washington, Seattle loncaric@cs.washington.edu Michael D. Ernst University of Washington, Seattle mernst@cs.washington.edu Emina Torlak University of Washington, Seattle emina@cs.washington.edu Program synthesis automatic programming data structures Data structure synthesis is the task of generating data structure implementations from high-level specifications. Recent work in this area has shown potential to save programmer time and reduce the risk of defects. Existing techniques focus on data structures for manipulating subsets of a single collection, but real-world programs often track multiple related collections and aggregate properties such as sums, counts, minimums, and maximums. This paper shows how to synthesize data structures that track subsets and aggregations of multiple related collections. Our technique decomposes the synthesis task into alternating steps of query synthesis and incrementalization. The query synthesis step implements pure operations over the data structure state by leveraging existing enumerative synthesis techniques, specialized to the data structures domain. The incrementalization step implements imperative state modifications by re-framing them as fresh queries that determine what to change, coupled with a small amount of code to apply the change. As an added benefit of this approach over previous work, the synthesized data structure is optimized for not only the queries in the specification but also the required update operations. We have evaluated our approach in four large case studies, demonstrating that these extensions are broadly applicable.",
              "pageNumber": 958,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 31: Software Tools and Environments",
          "lineItems": [
            {
              "id": "1albjIz6NCLyytujiq0185",
              "type": "authorPaper",
              "text": "A Graph Solver for the Automated Generation of Consistent Domain-Specific Models",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6eq1ZquQwyvOqG174Q7zcO/4GkhGJCKWGFeeRD8zmyZ6C.pdf",
              "extraLocations": [],
              "authorNames": "Oszkár Semeráth (MTA-BME Lendület Cyber-Physical Systems Research Group), András Szabolcs Nagy (MTA-BME Lendület Cyber-Physical Systems Research Group), Dániel Varró (McGill University)",
              "abstract": "Many testing and benchmarking scenarios in software and systems engineering depend on the systematic generation of graph models. For instance, tool qualification necessitated by safety standards would require a large set of consistent (well-formed or malformed) instance models specific to a domain. However, automatically generating consistent graph models which comply with a metamodel and satisfy all well-formedness constraints of industrial domains is a significant challenge. Existing solutions which map graph models into first-order logic specification to use back-end logic solvers (like Alloy or Z3) have severe scalability issues. In the paper, we propose a graph solver framework for the automated generation of consistent domain-specific instance models which operates directly over graphs by combining advanced techniques such as refinement of partial models, shape analysis, incremental graph query evaluation, and rule-based design space exploration to provide a more efficient guidance. Our initial performance evaluation carried out in four domains demonstrates that our approach is able to generate models which are 1-2 orders of magnitude larger (with 500 to 6000 objects!) compared to mapping-based approaches natively using Alloy.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 A Graph Solver for the Automated Generation of Consistent Domain-Specific Models 1518277259312 Oszkár Semeráth MTA-BME Lendület Cyber-Physical Systems Research Group semerath@mit.bme.hu András Szabolcs Nagy MTA-BME Lendület Cyber-Physical Systems Research Group nagya@mit.bme.hu Dániel Varró McGill University varro@mit.bme.hu Graph generation Test generation Domain Specific Modeling Languages Logic Solver Graph Solver Many testing and benchmarking scenarios in software and systems engineering depend on the systematic generation of graph models. For instance, tool qualification necessitated by safety standards would require a large set of consistent (well-formed or malformed) instance models specific to a domain. However, automatically generating consistent graph models which comply with a metamodel and satisfy all well-formedness constraints of industrial domains is a significant challenge. Existing solutions which map graph models into first-order logic specification to use back-end logic solvers (like Alloy or Z3) have severe scalability issues. In the paper, we propose a graph solver framework for the automated generation of consistent domain-specific instance models which operates directly over graphs by combining advanced techniques such as refinement of partial models, shape analysis, incremental graph query evaluation, and rule-based design space exploration to provide a more efficient guidance. Our initial performance evaluation carried out in four domains demonstrates that our approach is able to generate models which are 1-2 orders of magnitude larger (with 500 to 6000 objects!) compared to mapping-based approaches natively using Alloy.",
              "pageNumber": 969,
              "isPageNumberRoman": false
            },
            {
              "id": "1Kje7mXnOniGxHlIaQYjUM",
              "type": "authorPaper",
              "text": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf",
              "extraLocations": [],
              "authorNames": "Shafiul Azam Chowdhury (The University of Texas at Arlington), Soumik Mohian (The University of Texas at Arlington), Sidharth Mehra (The University of Texas at Arlington), Siddhant Gawsane (The University of Texas at Arlington), Taylor T. Johnson (The University of Texas at Arlington), Christoph Csallner (The University of Texas at Arlington)",
              "abstract": "Cyber-physical system (CPS) development tool chains are widely used in the design, simulation, and verification of CPS data-flow models. Commercial CPS tool chains such as MathWorks' Simulink generate artifacts such as code binaries that are widely deployed in embedded systems. Hardening such tool chains by testing is crucial since formally verifying them is currently infeasible. Existing differential testing frameworks such as CyFuzz can not generate models rich in language features, partly because these tool chains do not leverage the available informal Simulink specifications. Furthermore, no study of existing Simulink models is available, which could guide CyFuzz to generate realistic models. To address these shortcomings, we created the first large collection of public Simulink models and used the collected models' properties to guide random model generation. To further guide model generation we systematically collected semi-formal Simulink specifications. In our experiments on several hundred models, the resulting SLforge generator was more effective and efficient than the state-of-the-art tool CyFuzz. SLforge also found 8 new confirmed bugs in Simulink.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge 1518364353100 Shafiul Azam Chowdhury The University of Texas at Arlington shafiulazam.chowdhury@mavs.uta.edu Soumik Mohian The University of Texas at Arlington soumik.mohian@mavs.uta.edu Sidharth Mehra The University of Texas at Arlington sidharth.mehra@mavs.uta.edu Siddhant Gawsane The University of Texas at Arlington siddhant.gawsane@mavs.uta.edu Taylor T. Johnson The University of Texas at Arlington taylor.johnson@vanderbilt.edu Christoph Csallner The University of Texas at Arlington csallner@uta.edu cyber-physical system Simulink differential testing tool chain bug Cyber-physical system (CPS) development tool chains are widely used in the design, simulation, and verification of CPS data-flow models. Commercial CPS tool chains such as MathWorks' Simulink generate artifacts such as code binaries that are widely deployed in embedded systems. Hardening such tool chains by testing is crucial since formally verifying them is currently infeasible. Existing differential testing frameworks such as CyFuzz can not generate models rich in language features, partly because these tool chains do not leverage the available informal Simulink specifications. Furthermore, no study of existing Simulink models is available, which could guide CyFuzz to generate realistic models. To address these shortcomings, we created the first large collection of public Simulink models and used the collected models' properties to guide random model generation. To further guide model generation we systematically collected semi-formal Simulink specifications. In our experiments on several hundred models, the resulting SLforge generator was more effective and efficient than the state-of-the-art tool CyFuzz. SLforge also found 8 new confirmed bugs in Simulink.",
              "pageNumber": 981,
              "isPageNumberRoman": false
            },
            {
              "id": "4HcxGFiVvsuoubrA1RaEwL",
              "type": "authorPaper",
              "text": "Context-Aware Conversational Developer Assistants",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1XKrnlNgYAXbi9HEtIyOPn/7I9QtgsXIQ77QNhvWlsTtx.pdf",
              "extraLocations": [],
              "authorNames": "Nick Bradley (University of British Columbia), Thomas Fritz (University of Zurich), Reid Holmes (University of British Columbia)",
              "abstract": "Building and maintaining modern software systems requires developers to perform a variety of tasks that span various tools and information sources. The crosscutting nature of these development tasks requires developers to maintain complex mental models and forces them (a) to manually split their high-level tasks into low-level commands that are supported by the various tools, and (b) to (re) establish their current context in each tool. In this paper we present Devy, a Conversational Developer Assistant (CDA) that enables developers to focus on their high-level development tasks. Devy reduces the number of manual, often complex, low-level commands that developers need to perform, freeing them to focus on their high-level tasks. Specifically, Devy infers high-level intent from developer's voice commands and combines this with an automatically-generated context model to determine appropriate workflows for invoking low-level tool actions; where needed, Devy can also prompt the developer for additional information. Through a mixed methods evaluation with 21 industrial developers, we found that Devy provided an intuitive interface that was able to support many development tasks while helping developers stay focused within their development environment. While industrial developers were largely supportive of the automation Devy enabled, they also provided insights into several other tasks and workflows CDAs could support to enable them to better focus on the important parts of their development tasks.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Context-Aware Conversational Developer Assistants 1518472112192 Nick Bradley University of British Columbia ncbrad@cs.ubc.ca Thomas Fritz University of Zurich fritz@ifi.uzh.ch Reid Holmes University of British Columbia rtholmes@cs.ubc.ca Conversational Development Assistants Natural User Interfaces Building and maintaining modern software systems requires developers to perform a variety of tasks that span various tools and information sources. The crosscutting nature of these development tasks requires developers to maintain complex mental models and forces them (a) to manually split their high-level tasks into low-level commands that are supported by the various tools, and (b) to (re) establish their current context in each tool. In this paper we present Devy, a Conversational Developer Assistant (CDA) that enables developers to focus on their high-level development tasks. Devy reduces the number of manual, often complex, low-level commands that developers need to perform, freeing them to focus on their high-level tasks. Specifically, Devy infers high-level intent from developer's voice commands and combines this with an automatically-generated context model to determine appropriate workflows for invoking low-level tool actions; where needed, Devy can also prompt the developer for additional information. Through a mixed methods evaluation with 21 industrial developers, we found that Devy provided an intuitive interface that was able to support many development tasks while helping developers stay focused within their development environment. While industrial developers were largely supportive of the automation Devy enabled, they also provided insights into several other tasks and workflows CDAs could support to enable them to better focus on the important parts of their development tasks.",
              "pageNumber": 993,
              "isPageNumberRoman": false
            },
            {
              "id": "4euxxVVWAohEXfUozg8MIm",
              "type": "authorPaper",
              "text": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf",
              "extraLocations": [],
              "authorNames": "Christopher Mendez (Oregon State University), Hema Susmita Padala (Oregon State University), Zoe Steine-Hanson (Oregon State University), Claudia Hildebrand (Oregon State University), Amber Horvath (Oregon State University), Charles Hill (Oregon State University), Logan Simpson (Oregon State University), Nupoor Patil (Oregon State University), Anita Sarma (Oregon State University), Margaret Burnett (Oregon State University)",
              "abstract": "Research has revealed that significant barriers exist when entering Open-Source Software (OSS) communities and that women disproportionately experience such barriers. However, this research has focused mainly on social/cultural factors, ignoring the environment itself — the tools and infrastructure. To shed some light onto how tools and infrastructure might somehow factor into OSS barriers to entry, we conducted a field study with five teams of software professionals, who worked through five use-cases to analyze the tools and infrastructure used in their OSS projects. These software professionals found tool/infrastructure barriers in 7% to 71% of the use-case steps that they analyzed, most of which are tied to newcomer barriers that have been established in the literature. Further, over 80% of the barrier types they found include attributes that are biased against women.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective 1518404411425 Christopher Mendez Oregon State University mendezc@oregonstate.edu Hema Susmita Padala Oregon State University padalah@oregonstate.edu Zoe Steine-Hanson Oregon State University steinehz@oregonstate.edu Claudia Hildebrand Oregon State University minic@oregonstate.edu Amber Horvath Oregon State University horvatha@oregonstate.edu Charles Hill Oregon State University hillc@eecs.oregonstate.edu Logan Simpson Oregon State University LoganSimpson1@outlook.com Nupoor Patil Oregon State University nupoor.patil43@gmail.com Anita Sarma Oregon State University anita.sarma@oregonstate.edu Margaret Burnett Oregon State University burnett@eecs.oregonstate.edu open source software newcomer gender Research has revealed that significant barriers exist when entering Open-Source Software (OSS) communities and that women disproportionately experience such barriers. However, this research has focused mainly on social/cultural factors, ignoring the environment itself — the tools and infrastructure. To shed some light onto how tools and infrastructure might somehow factor into OSS barriers to entry, we conducted a field study with five teams of software professionals, who worked through five use-cases to analyze the tools and infrastructure used in their OSS projects. These software professionals found tool/infrastructure barriers in 7% to 71% of the use-case steps that they analyzed, most of which are tied to newcomer barriers that have been established in the literature. Further, over 80% of the barrier types they found include attributes that are biased against women.",
              "pageNumber": 1004,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 32: Search-Based Software Engineering I",
          "lineItems": [
            {
              "id": "4rs4AQCZ3rAdp8PG99zgPr",
              "type": "authorPaper",
              "text": "Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/VwB38GE70VKZwyWn3vYpD/2vNhnZhaJwrULtleN0eIAX.pdf",
              "extraLocations": [],
              "authorNames": "Raja Ben Abdessalem (SnT Centre), Shiva Nejati (SnT Centre), Lionel C. Briand (SnT Centre), Thomas Stifter (IEE S.A.)",
              "abstract": "Vision-based control systems are key enablers of many autonomous vehicular systems, including self-driving cars. Testing such systems is complicated by complex and multidimensional input spaces. We propose an automated testing algorithm that builds on learnable evolutionary algorithms. These algorithms rely on machine learning or a combination of machine learning and Darwinian genetic operators to guide the generation of new solutions (test scenarios in our context). Our approach combines multiobjective population-based search algorithms and decision tree classification models to achieve the following goals: First, classification models guide the search-based generation of tests faster towards critical test scenarios (i.e., test scenarios leading to failures). Second, search algorithms refine classification models so that the models can accurately characterize critical regions (i.e., the regions of a test input space that are likely to contain most critical test scenarios). Our evaluation performed on an industrial automotive automotive system shows that: (1) Our algorithm outperforms a baseline evolutionary search algorithm and generates 78% more distinct, critical test scenarios compared to the baseline algorithm. (2) Our algorithm accurately characterizes critical regions of the system under test, thus identifying the conditions that are likely to lead to system failures.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms 1517908279331 Raja Ben Abdessalem SnT Centre benabdessalem@svv.lu Shiva Nejati SnT Centre nejati@svv.lu Lionel C. Briand SnT Centre briand@svv.lu Thomas Stifter IEE S.A. thomas.stifter@iee.lu Search-based Software Engineering Evolutionary algorithms Software Testing Automotive Software Systems Vision-based control systems are key enablers of many autonomous vehicular systems, including self-driving cars. Testing such systems is complicated by complex and multidimensional input spaces. We propose an automated testing algorithm that builds on learnable evolutionary algorithms. These algorithms rely on machine learning or a combination of machine learning and Darwinian genetic operators to guide the generation of new solutions (test scenarios in our context). Our approach combines multiobjective population-based search algorithms and decision tree classification models to achieve the following goals: First, classification models guide the search-based generation of tests faster towards critical test scenarios (i.e., test scenarios leading to failures). Second, search algorithms refine classification models so that the models can accurately characterize critical regions (i.e., the regions of a test input space that are likely to contain most critical test scenarios). Our evaluation performed on an industrial automotive automotive system shows that: (1) Our algorithm outperforms a baseline evolutionary search algorithm and generates 78% more distinct, critical test scenarios compared to the baseline algorithm. (2) Our algorithm accurately characterizes critical regions of the system under test, thus identifying the conditions that are likely to lead to system failures.",
              "pageNumber": 1016,
              "isPageNumberRoman": false
            },
            {
              "id": "gEbrlZqrnbItO4bR5QBw8",
              "type": "authorPaper",
              "text": "To Preserve or Not to Preserve Invalid Solutions in Search-Based Software Engineering: A Case Study in Software Product Lines",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eLhDKSnOjZaBnTjUD3mLd/4zL0DqW0XJoJyYVopX6pxS.pdf",
              "extraLocations": [],
              "authorNames": "Jianmei Guo (Alibaba Group), Kai Shi (East China University of Science and Technology)",
              "abstract": "Multi-objective evolutionary algorithms (MOEAs) have been successfully applied for software product lines (SPLs) to search for optimal or near-optimal solutions that balance multiple objectives. However, MOEAs usually produce invalid solutions that violate the constraints predefined. As invalid solutions are unbuildable in practice, we debate the preservation of invalid solutions during the search. We conduct experiments on seven real-world SPLs, including five largest SPLs hitherto reported and two SPLs with realistic values and constraints of quality attributes. We identify three potential limitations of preserving invalid solutions. Furthermore, based on the state-of-the-art, we design five algorithm variants that adopt different evolutionary operators. By performance evaluation, we provide empirical guidance on how to preserve valid solutions. Our empirical study demonstrates that whether or not to preserve invalid solutions deserves more attention in the community, and in some cases, we have to preserve valid solutions all along the way.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 To Preserve or Not to Preserve Invalid Solutions in Search-Based Software Engineering: A Case Study in Software Product Lines 1517030664842 Jianmei Guo Alibaba Group guojianmei@gmail.com Kai Shi East China University of Science and Technology BH4AWS@163.com Search-based software engineering software product lines multi objective evolutionary algorithms constraint solving validity Multi-objective evolutionary algorithms (MOEAs) have been successfully applied for software product lines (SPLs) to search for optimal or near-optimal solutions that balance multiple objectives. However, MOEAs usually produce invalid solutions that violate the constraints predefined. As invalid solutions are unbuildable in practice, we debate the preservation of invalid solutions during the search. We conduct experiments on seven real-world SPLs, including five largest SPLs hitherto reported and two SPLs with realistic values and constraints of quality attributes. We identify three potential limitations of preserving invalid solutions. Furthermore, based on the state-of-the-art, we design five algorithm variants that adopt different evolutionary operators. By performance evaluation, we provide empirical guidance on how to preserve valid solutions. Our empirical study demonstrates that whether or not to preserve invalid solutions deserves more attention in the community, and in some cases, we have to preserve valid solutions all along the way.",
              "pageNumber": 1027,
              "isPageNumberRoman": false
            },
            {
              "id": "9Ih7dTd7MkbWMLq5UZNRF",
              "type": "authorPaper",
              "text": "Nemo: Multi-criteria Test-Suite Minimization with Integer Nonlinear Programming",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gVQozZZzSv6Yh0cmO8GQb/6R13qIhxIq6zydaKQZnCij.pdf",
              "extraLocations": [],
              "authorNames": "Jun-Wei Lin (University of California, Irvine), Reyhaneh Jabbarvand (University of California, Irvine), Joshua Garcia (University of California, Irvine), Sam Malek (University of California, Irvine)",
              "abstract": "Multi-criteria test-suite minimization aims to remove redundant test cases from a test suite based on some criteria such as code coverage, while trying to optimally maintain the capability of the reduced suite based on other criteria such as fault-detection effectiveness. Existing techniques addressing this problem with integer linear programming claim to produce optimal solutions. However, the multi-criteria test-suite minimization problem is inherently nonlinear, due to the fact that test cases are often dependent on each other in terms of test-case criteria. In this paper, we propose a framework that formulates the multi-criteria test-suite minimization problem as an integer nonlinear programming problem. To solve this problem optimally, we programmatically transform this nonlinear problem into a linear one and then solve the problem using modern linear solvers. We have implemented our framework as a tool, called Nemo, that supports a number of modern linear and nonlinear solvers. We have evaluated Nemo with a publicly available dataset and minimization problems involving multiple criteria including statement coverage, fault-revealing capability, and test execution time. The experimental results show that Nemo can be used to efficiently find an optimal solution for multi-criteria test-suite minimization problems with modern solvers, and the optimal solutions outperform the suboptimal ones by up to 164.29% in terms of the criteria considered in the problem.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Nemo: Multi-criteria Test-Suite Minimization with Integer Nonlinear Programming 1518384824991 Jun-Wei Lin University of California, Irvine junwel1@uci.edu Reyhaneh Jabbarvand University of California, Irvine jabbarvr@uci.edu Joshua Garcia University of California, Irvine joshug4@uci.edu Sam Malek University of California, Irvine malek@uci.edu Test-suite minimization integer programming Multi-criteria test-suite minimization aims to remove redundant test cases from a test suite based on some criteria such as code coverage, while trying to optimally maintain the capability of the reduced suite based on other criteria such as fault-detection effectiveness. Existing techniques addressing this problem with integer linear programming claim to produce optimal solutions. However, the multi-criteria test-suite minimization problem is inherently nonlinear, due to the fact that test cases are often dependent on each other in terms of test-case criteria. In this paper, we propose a framework that formulates the multi-criteria test-suite minimization problem as an integer nonlinear programming problem. To solve this problem optimally, we programmatically transform this nonlinear problem into a linear one and then solve the problem using modern linear solvers. We have implemented our framework as a tool, called Nemo, that supports a number of modern linear and nonlinear solvers. We have evaluated Nemo with a publicly available dataset and minimization problems involving multiple criteria including statement coverage, fault-revealing capability, and test execution time. The experimental results show that Nemo can be used to efficiently find an optimal solution for multi-criteria test-suite minimization problems with modern solvers, and the optimal solutions outperform the suboptimal ones by up to 164.29% in terms of the criteria considered in the problem.",
              "pageNumber": 1039,
              "isPageNumberRoman": false
            },
            {
              "id": "3wo6kNAVHSqFVW7YTLIjI4",
              "type": "authorPaper",
              "text": "Is \"Better Data\" Better Than \"Better Data Miners\"?",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hzCUfPHZDYwOVdpeABHj9/5kDwErSTWTzzBsrepPdBwv.pdf",
              "extraLocations": [],
              "authorNames": "Amritanshu Agrawal (North Carolina State University), Tim Menzies (North Carolina State University)",
              "abstract": "We report and fix an important systematic error in prior studies that ranked classifiers for software analytics. Those studies did not (a) assess classifiers on multiple criteria and they did not (b) study how variations in the data affect the results. Hence, this paper applies (a) multi-performance criteria while (b) fixing the weaker regions of the training data (using SMOTUNED, which is an auto-tuning version of SMOTE). This approach leads to dramatically large increases in software defect predictions when applied in a 5*5 cross-validation study for 3,681 JAVA classes (containing over a million lines of code) from open source systems, SMOTUNED increased AUC and recall by 60% and 20% respectively. These improvements are independent of the classifier used to predict for defects. Same kind of pattern (improvement) was observed when a comparative analysis of SMOTE and SMOTUNED was done against the most recent class imbalance technique. In conclusion, for software analytic tasks like defect prediction, (1) data pre-processing can be more important than classifier choice, (2) ranking studies are incomplete without such pre-processing, and (3) SMOTUNED is a promising candidate for pre-processing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Is \"Better Data\" Better Than \"Better Data Miners\"? 1518365189728 Amritanshu Agrawal North Carolina State University aagrawa8@ncsu.edu Tim Menzies North Carolina State University tim@menzies.us Search based SE defect prediction classification data analytics for software engineering SMOTE imbalanced data preprocessing We report and fix an important systematic error in prior studies that ranked classifiers for software analytics. Those studies did not (a) assess classifiers on multiple criteria and they did not (b) study how variations in the data affect the results. Hence, this paper applies (a) multi-performance criteria while (b) fixing the weaker regions of the training data (using SMOTUNED, which is an auto-tuning version of SMOTE). This approach leads to dramatically large increases in software defect predictions when applied in a 5*5 cross-validation study for 3,681 JAVA classes (containing over a million lines of code) from open source systems, SMOTUNED increased AUC and recall by 60% and 20% respectively. These improvements are independent of the classifier used to predict for defects. Same kind of pattern (improvement) was observed when a comparative analysis of SMOTE and SMOTUNED was done against the most recent class imbalance technique. In conclusion, for software analytic tasks like defect prediction, (1) data pre-processing can be more important than classifier choice, (2) ranking studies are incomplete without such pre-processing, and (3) SMOTUNED is a promising candidate for pre-processing.",
              "pageNumber": 1050,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 33: Testing IV",
          "lineItems": [
            {
              "id": "2422KOoBfXU602iKerQTIc",
              "type": "authorPaper",
              "text": "[Journal First] Analyzing the Effects of Test Driven Development in GitHub",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7E87zq66ELDArjurWiTGlC/7pQU2PsyQiLteaW3D5kgMw.pdf",
              "extraLocations": [],
              "authorNames": "Neil Borle (University of Alberta), Meysam Feghhi (University of Alberta), Eleni Stroulia (University of Alberta), Russell Grenier (University of Alberta), Abram Hindle (University of Alberta)",
              "abstract": "Testing is an integral part of the software development lifecycle, approached with varying degrees of rigor by different process models. Agile process models recommend Test Driven Development (TDD) as a key practice for reducing costs and improving code quality. The objective of this work is to perform a cost-benefit analysis of this practice. Previous work by Fucci et al. engaged in laboratory studies of developers actively engaged in test-driven development practices. Fucci et al. found little difference between test-first behaviour of TDD and test-later behaviour. To that end, we opted to conduct a study about TDD behaviours in the \"wild\" rather than in the laboratory. Thus we have conducted a comparative analysis of GitHub repositories that adopts TDD to a lesser or greater extent, in order to determine how TDD affects software development productivity and software quality. We classified GitHub repositories archived in 2015 in terms of how rigorously they practiced TDD, thus creating a TDD spectrum. We then matched and compared various subsets of these repositories on this TDD spectrum with control sets of equal size. The control sets were samples from all GitHub repositories that matched certain characteristics, and that contained at least one test file. We compared how the TDD sets differed from the control sets on the following characteristics: number of test files, average commit velocity, number of bug-referencing commits, number of issues recorded, usage of continuous integration, number of pull requests, and distribution of commits per author. We found that Java TDD projects were relatively rare. In addition, there were very few significant differences in any of the metrics we used to compare TDD-like and non-TDD projects; therefore, our results do not reveal any observable benefits from using TDD.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Analyzing the Effects of Test Driven Development in GitHub 1518040393805 Neil Borle University of Alberta nborle@ualberta.ca Meysam Feghhi University of Alberta feghhi@ualberta.ca Eleni Stroulia University of Alberta stroulia@ualberta.ca Russell Grenier University of Alberta rgreiner@ualberta.ca Abram Hindle University of Alberta hindle1@ualberta.ca Test Driven Development Human Factors in Software Development GitHub Repositories Continuous Integration Testing is an integral part of the software development lifecycle, approached with varying degrees of rigor by different process models. Agile process models recommend Test Driven Development (TDD) as a key practice for reducing costs and improving code quality. The objective of this work is to perform a cost-benefit analysis of this practice. Previous work by Fucci et al. engaged in laboratory studies of developers actively engaged in test-driven development practices. Fucci et al. found little difference between test-first behaviour of TDD and test-later behaviour. To that end, we opted to conduct a study about TDD behaviours in the \"wild\" rather than in the laboratory. Thus we have conducted a comparative analysis of GitHub repositories that adopts TDD to a lesser or greater extent, in order to determine how TDD affects software development productivity and software quality. We classified GitHub repositories archived in 2015 in terms of how rigorously they practiced TDD, thus creating a TDD spectrum. We then matched and compared various subsets of these repositories on this TDD spectrum with control sets of equal size. The control sets were samples from all GitHub repositories that matched certain characteristics, and that contained at least one test file. We compared how the TDD sets differed from the control sets on the following characteristics: number of test files, average commit velocity, number of bug-referencing commits, number of issues recorded, usage of continuous integration, number of pull requests, and distribution of commits per author. We found that Java TDD projects were relatively rare. In addition, there were very few significant differences in any of the metrics we used to compare TDD-like and non-TDD projects; therefore, our results do not reveal any observable benefits from using TDD.",
              "pageNumber": 1062,
              "isPageNumberRoman": false
            },
            {
              "id": "GqGGI3XaIbeJQX0kp9FPW",
              "type": "authorPaper",
              "text": "[Journal First] A Comparative Study to Benchmark Cross-Project Defect Prediction Approaches",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4wjQzs7ahFsVXOSxRYBKNq/40Ftiu3aqu6aAzbzpsyyD4.pdf",
              "extraLocations": [],
              "authorNames": "Steffen Herbold (University of Goettingen), Alexander Trautsch (University of Goettingen), Jens Grabowski (University of Göttingen)",
              "abstract": "Cross-Project Defect Prediction (CPDP) as a means to focus quality assurance of software projects was under heavy investigation in recent years. However, within the current state-of-the-art it is unclear which of the many proposals performs best due to a lack of replication of results and diverse experiment setups that utilize different performance metrics and are based on different underlying data. Within this article, we provide a benchmark for CPDP. We replicate 24 approaches proposed by researchers between 2008 and 2015 and evaluate their performance on software products from five different data sets. Based on our benchmark, we determined that an approach proposed by Camargo Cruz and Ochimizu (2009) based on data standardization performs best and is always ranked among the statistically significant best results for all metrics and data sets. Approaches proposed by Turhan et al. (2009), Menzies et al. (2011), and Watanabe et al. (2008) are also nearly always among the best results. Moreover, we determined that predictions only seldom achieve a high performance of 0.75 recall, precision, and accuracy. Thus, CPDP still has not reached a point where the performance of the results is sufficient for the application in practice.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] A Comparative Study to Benchmark Cross-Project Defect Prediction Approaches 1516703488248 Steffen Herbold University of Goettingen herbold@cs.uni.goettingen.de Alexander Trautsch University of Goettingen alexander.trautsch@cs.uni-goettingen.de Jens Grabowski University of Göttingen grabowski@cs.uni-goettingen.de cross project defect prediction benchmark comparison replication Cross-Project Defect Prediction (CPDP) as a means to focus quality assurance of software projects was under heavy investigation in recent years. However, within the current state-of-the-art it is unclear which of the many proposals performs best due to a lack of replication of results and diverse experiment setups that utilize different performance metrics and are based on different underlying data. Within this article, we provide a benchmark for CPDP. We replicate 24 approaches proposed by researchers between 2008 and 2015 and evaluate their performance on software products from five different data sets. Based on our benchmark, we determined that an approach proposed by Camargo Cruz and Ochimizu (2009) based on data standardization performs best and is always ranked among the statistically significant best results for all metrics and data sets. Approaches proposed by Turhan et al. (2009), Menzies et al. (2011), and Watanabe et al. (2008) are also nearly always among the best results. Moreover, we determined that predictions only seldom achieve a high performance of 0.75 recall, precision, and accuracy. Thus, CPDP still has not reached a point where the performance of the results is sufficient for the application in practice.",
              "pageNumber": 1063,
              "isPageNumberRoman": false
            },
            {
              "id": "CDiDSVoDcwrsuatheeRQt",
              "type": "authorPaper",
              "text": "[Journal First] MSeer – An Advanced Technique for Locating Multiple Bugs in Parallel",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2bXorueAudCxlEMsJerqfd/Og0D36M9R4LoKGCDZbP4J.pdf",
              "extraLocations": [],
              "authorNames": "Ruizhi Gao (University of Texas at Dallas), W. Eric Wong (University of Texas at Dallas)",
              "abstract": "In practice, a program may contain multiple bugs. The simultaneous presence of these bugs may deteriorate the effectiveness of existing fault-localization techniques to locate program bugs. While it is acceptable to use all failed and successful tests to identify suspicious code for programs with exactly one bug, it is not appropriate to use the same approach for programs with multiple bugs because the due-to relationship between failed tests and underlying bugs cannot be easily identified. One solution is to generate fault-focused clusters by grouping failed tests caused by the same bug into the same clusters. We propose MSeer - an advanced fault localization technique for locating multiple bugs in parallel. Our major contributions include the use of (1) a revised Kendall tau distance to measure the distance between two failed tests, (2) an innovative approach to simultaneously estimate the number of clusters and assign initial medoids to these clusters, and (3) an improved K-medoids clustering algorithm to better identify the due-to relationship between failed tests and their corresponding bugs. Case studies on 840 multiple-bug versions of seven programs suggest that MSeer performs better in terms of effectiveness and efficiency than two other techniques for locating multiple bugs in parallel.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] MSeer – An Advanced Technique for Locating Multiple Bugs in Parallel 1517807637655 Ruizhi Gao University of Texas at Dallas gxr116020@utdallas.edu W. Eric Wong University of Texas at Dallas ewong@utdallas.edu Software fault localization parallel debugging multiple bugs clustering distance metrics In practice, a program may contain multiple bugs. The simultaneous presence of these bugs may deteriorate the effectiveness of existing fault-localization techniques to locate program bugs. While it is acceptable to use all failed and successful tests to identify suspicious code for programs with exactly one bug, it is not appropriate to use the same approach for programs with multiple bugs because the due-to relationship between failed tests and underlying bugs cannot be easily identified. One solution is to generate fault-focused clusters by grouping failed tests caused by the same bug into the same clusters. We propose MSeer - an advanced fault localization technique for locating multiple bugs in parallel. Our major contributions include the use of (1) a revised Kendall tau distance to measure the distance between two failed tests, (2) an innovative approach to simultaneously estimate the number of clusters and assign initial medoids to these clusters, and (3) an improved K-medoids clustering algorithm to better identify the due-to relationship between failed tests and their corresponding bugs. Case studies on 840 multiple-bug versions of seven programs suggest that MSeer performs better in terms of effectiveness and efficiency than two other techniques for locating multiple bugs in parallel.",
              "pageNumber": 1064,
              "isPageNumberRoman": false
            },
            {
              "id": "7sdeTr84UmlfIDBLClivYe",
              "type": "authorPaper",
              "text": "[Journal First] Journal First Presentation of an Experience Report on Applying Software Testing Academic Results in Industry: We Need Usable Automated Test Generation",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1FIQLH1yd9XWgg2hiGZiPf/1ryHdgPhETG0NLG0KYTAeF.pdf",
              "extraLocations": [],
              "authorNames": "Andrea Arcuri (Westerdals Oslo ACT and University of Luxembourg)",
              "abstract": "What is the impact of software engineering research on current practices in industry? In this paper, I report on my direct experience as a PhD/post-doc working in software engineering research projects, and then spending the following five years as an engineer in two different companies (the first one being the same I worked in collaboration with during my post-doc). Given a background in software engineering research, what cutting-edge techniques and tools from academia did I use in my daily work when developing and testing the systems of these companies? Regarding validation and verification (my main area of research), the answer is rather short: as far as I can tell, only FindBugs. In this paper, I report on why this was the case, and discuss all the challenging, complex open problems we face in industry and which somehow are \"neglected\" in the academic circles. In particular, I will first discuss what actual tools I could use in my daily work, such as JaCoCo and Selenium. Then, I will discuss the main open problems I faced, particularly related to environment simulators, unit and web testing. After that, popular topics in academia are presented, such as UML, regression and mutation testing. Their lack of impact on the type of projects I worked on in industry is then discussed. Finally, from this industrial experience, I provide my opinions about how this situation can be improved, in particular related to how academics are evaluated, and advocate for a greater involvement into open-source projects.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Journal First Presentation of an Experience Report on Applying Software Testing Academic Results in Industry: We Need Usable Automated Test Generation 1518360200922 Andrea Arcuri Westerdals Oslo ACT and University of Luxembourg arcand@westerdals.no Industry Practice Technology Transfer Impact Applied Research What is the impact of software engineering research on current practices in industry? In this paper, I report on my direct experience as a PhD/post-doc working in software engineering research projects, and then spending the following five years as an engineer in two different companies (the first one being the same I worked in collaboration with during my post-doc). Given a background in software engineering research, what cutting-edge techniques and tools from academia did I use in my daily work when developing and testing the systems of these companies? Regarding validation and verification (my main area of research), the answer is rather short: as far as I can tell, only FindBugs. In this paper, I report on why this was the case, and discuss all the challenging, complex open problems we face in industry and which somehow are \"neglected\" in the academic circles. In particular, I will first discuss what actual tools I could use in my daily work, such as JaCoCo and Selenium. Then, I will discuss the main open problems I faced, particularly related to environment simulators, unit and web testing. After that, popular topics in academia are presented, such as UML, regression and mutation testing. Their lack of impact on the type of projects I worked on in industry is then discussed. Finally, from this industrial experience, I provide my opinions about how this situation can be improved, in particular related to how academics are evaluated, and advocate for a greater involvement into open-source projects.",
              "pageNumber": 1065,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 34: Software Evolution and Maintenance II",
          "lineItems": [
            {
              "id": "6VmoEUO2cNd9mLMaO69iQK",
              "type": "authorPaper",
              "text": "CCAligner: A Token Based Large-Gap Clone Detector",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nE35nG7ocrp4CRl34yq3L/6OCIeXs66z0Os8X3bVIjTD.pdf",
              "extraLocations": [],
              "authorNames": "Pengcheng Wang (University of Science and Technology of China), Jeffrey Svajlenko (University of Saskatchewan), Yanzhao Wu (University of Science and Technology of China), Yun Xu (University of Science and Technology of China), Chanchal K. Roy (University of Saskatchewan)",
              "abstract": "Copying code and then pasting with large number of edits is a common activity in software development, and the pasted code is a kind of complicated Type-3 clone. Due to large number of edits, we consider the clone as a large-gap clone. Large-gap clone can reflect the extension of code, such as change and improvement. The existing state-of-the-art clone detectors suffer from several limitations in detecting large-gap clones. In this paper, we propose a tool, CCAligner, using code window that considers e edit distance for matching to detect large-gap clones. In our approach, a novel e-mismatch index is designed and the asymmetric similarity coefficient is used for similarity measure. We thoroughly evaluate CCAligner both for large-gap clone detection, and for general Type-1, Type-2 and Type-3 clone detection. The results show that CCAligner performs better than other competing tools in large-gap clone detection, and has the best execution time for 10MLOC input with good precision and recall in general Type-1 to Type-3 clone detection. Compared with existing state-of-the-art tools, CCAligner is the best performing large-gap clone detection tool, and remains competitive with the best clone detectors in general Type-1, Type-2 and Type-3 clone detection.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 CCAligner: A Token Based Large-Gap Clone Detector 1517450652764 Pengcheng Wang University of Science and Technology of China wpc520@mail.ustc.edu.cn Jeffrey Svajlenko University of Saskatchewan jeff.svajlenko@gmail.com Yanzhao Wu University of Science and Technology of China wuyanzha@mail.ustc.edu.cn Yun Xu University of Science and Technology of China xuyun@ustc.edu.cn Chanchal K. Roy University of Saskatchewan croy@cs.usask.ca Clone Detection Large-gap Clone Evaluation Copying code and then pasting with large number of edits is a common activity in software development, and the pasted code is a kind of complicated Type-3 clone. Due to large number of edits, we consider the clone as a large-gap clone. Large-gap clone can reflect the extension of code, such as change and improvement. The existing state-of-the-art clone detectors suffer from several limitations in detecting large-gap clones. In this paper, we propose a tool, CCAligner, using code window that considers e edit distance for matching to detect large-gap clones. In our approach, a novel e-mismatch index is designed and the asymmetric similarity coefficient is used for similarity measure. We thoroughly evaluate CCAligner both for large-gap clone detection, and for general Type-1, Type-2 and Type-3 clone detection. The results show that CCAligner performs better than other competing tools in large-gap clone detection, and has the best execution time for 10MLOC input with good precision and recall in general Type-1 to Type-3 clone detection. Compared with existing state-of-the-art tools, CCAligner is the best performing large-gap clone detection tool, and remains competitive with the best clone detectors in general Type-1, Type-2 and Type-3 clone detection.",
              "pageNumber": 1066,
              "isPageNumberRoman": false
            },
            {
              "id": "2Pa8VwB7gJfTU9AmnLvh1O",
              "type": "authorPaper",
              "text": "HireBuild: An Automatic Approach to History-Driven Repair of Build Scripts",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4EunJVbQWNAoytXaDKsWQW/vjspQNQozfRX2hXLvcDJ7.pdf",
              "extraLocations": [],
              "authorNames": "Foyzul Hassan (The University of Texas at San Antonio), Xiaoyin Wang (The University of Texas San Antonio)",
              "abstract": "Advancements in software build tools such as Maven reduce build management effort, but developers still need specialized knowledge and long time to maintain build scripts and resolve build failures. More recent build tools such as Gradle give developers greater extent of customization flexibility, but can be even more difficult to maintain. According to the TravisTorrent dataset of open-source software continuous integration, 22% of code commits include changes in build script files to maintain build scripts or to resolve build failures. Automated program repair techniques have great potential to reduce cost of resolving software failures, but the existing techniques mostly focus on repairing source code so that they cannot directly help resolving software build failures. To address this limitation, we propose HireBuild: History-Driven Repair of Build Scripts, the first approach to automatic patch generation for build scripts, using fix patterns automatically generated from existing build script fixes and recommending fix patterns based on build log similarity. From TravisTorrent dataset, we extracted 175 build failures and their corresponding fixes which revise Gradle build scripts. Among these 175 build failures, we used the 135 earlier build fixes for automatic fix-pattern generation and the more recent 40 build failures (fixes) for evaluation of our approach. Our experiment shows that our approach can fix 11 of 24 reproducible build failures, or 45% of the reproducible build failures, within comparable time of manual fixes.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 HireBuild: An Automatic Approach to History-Driven Repair of Build Scripts 1518507298478 Foyzul Hassan The University of Texas at San Antonio foyzul.hassan@my.utsa.edu Xiaoyin Wang The University of Texas San Antonio xiaoyin.wang@utsa.edu Patch Generation Software Build Scripts Build Logs Advancements in software build tools such as Maven reduce build management effort, but developers still need specialized knowledge and long time to maintain build scripts and resolve build failures. More recent build tools such as Gradle give developers greater extent of customization flexibility, but can be even more difficult to maintain. According to the TravisTorrent dataset of open-source software continuous integration, 22% of code commits include changes in build script files to maintain build scripts or to resolve build failures. Automated program repair techniques have great potential to reduce cost of resolving software failures, but the existing techniques mostly focus on repairing source code so that they cannot directly help resolving software build failures. To address this limitation, we propose HireBuild: History-Driven Repair of Build Scripts, the first approach to automatic patch generation for build scripts, using fix patterns automatically generated from existing build script fixes and recommending fix patterns based on build log similarity. From TravisTorrent dataset, we extracted 175 build failures and their corresponding fixes which revise Gradle build scripts. Among these 175 build failures, we used the 135 earlier build fixes for automatic fix-pattern generation and the more recent 40 build failures (fixes) for evaluation of our approach. Our experiment shows that our approach can fix 11 of 24 reproducible build failures, or 45% of the reproducible build failures, within comparable time of manual fixes.",
              "pageNumber": 1078,
              "isPageNumberRoman": false
            },
            {
              "id": "3ySXsaTuWkSRU8lQbb5lOE",
              "type": "authorPaper",
              "text": "The Road to Live Programming: Insights from the Practice",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5kWabRxvKSbOrbfpQqtqMw/5X6aZ0m8fIIZBmOuIJogyI.pdf",
              "extraLocations": [],
              "authorNames": "Juraj Kubelka (University of Chile), Romain Robbes (Free University of Bozen-Bolzano), Alexandre Bergel (University of Chile)",
              "abstract": "Live Programming environments allow programmers to get feedback instantly while changing software. Liveness is gaining attention among industrial and open-source communities; several IDEs offer high degrees of liveness. While several studies looked at how programmers work during software evolution tasks, none of them consider live environments. We conduct such a study based on an analysis of 17 programming sessions of practitioners using Pharo, a mature Live Programming environment. The study is complemented by a survey and subsequent analysis of 16 programming sessions in additional languages, e.g., JavaScript. We document the approaches taken by developers during their work. We find that some liveness features are extensively used, and have an impact on the way developers navigate source code and objects in their work.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 The Road to Live Programming: Insights from the Practice 1518383531292 Juraj Kubelka University of Chile juraj.kubelka@icloud.com Romain Robbes Free University of Bozen-Bolzano romain.robbes@gmail.com Alexandre Bergel University of Chile alexandre.bergel@me.com Live Programming Software Evolution Exploratory Study Live Programming environments allow programmers to get feedback instantly while changing software. Liveness is gaining attention among industrial and open-source communities; several IDEs offer high degrees of liveness. While several studies looked at how programmers work during software evolution tasks, none of them consider live environments. We conduct such a study based on an analysis of 17 programming sessions of practitioners using Pharo, a mature Live Programming environment. The study is complemented by a survey and subsequent analysis of 16 programming sessions in additional languages, e.g., JavaScript. We document the approaches taken by developers during their work. We find that some liveness features are extensively used, and have an impact on the way developers navigate source code and objects in their work.",
              "pageNumber": 1090,
              "isPageNumberRoman": false
            },
            {
              "id": "2huhMaQjT7bhaqm0HgzCO8",
              "type": "authorPaper",
              "text": "Assessing the Threat of Untracked Changes in Software Evolution",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf",
              "extraLocations": [],
              "authorNames": "Andre Hora (UFMS), Danilo Silva (UFMG), Marco Tulio Valente (UFMG), Romain Robbes (Free University of Bozen-Bolzano)",
              "abstract": "While refactoring is extensively performed by practitioners, many Mining Software Repositories (MSR) approaches do not detect nor keep track of refactorings when performing source code evolution analysis. In the best case, keeping track of refactorings could be unnecessary work; in the worst case, these untracked changes could significantly affect the performance of MSR approaches. Since the extent of the threat is unknown, the goal of this paper is to assess whether it is significant. Based on an extensive empirical study, we answer positively: we found that between 10 and 21% of changes at the method level in 15 large Java systems are untracked. This results in a large proportion (25%) of entities that may have their histories split by these changes, and a measurable effect on at least two MSR approaches. We conclude that handling untracked changes should be systematically considered by MSR studies.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Assessing the Threat of Untracked Changes in Software Evolution 1518045914197 Andre Hora UFMS andrehoraa@gmail.com Danilo Silva UFMG danilofs@dcc.ufmg.br Marco Tulio Valente UFMG mtov@dcc.ufmg.br Romain Robbes Free University of Bozen-Bolzano rrobbes@unibz.it Mining Software Repositories Software Evolution Refactoring While refactoring is extensively performed by practitioners, many Mining Software Repositories (MSR) approaches do not detect nor keep track of refactorings when performing source code evolution analysis. In the best case, keeping track of refactorings could be unnecessary work; in the worst case, these untracked changes could significantly affect the performance of MSR approaches. Since the extent of the threat is unknown, the goal of this paper is to assess whether it is significant. Based on an extensive empirical study, we answer positively: we found that between 10 and 21% of changes at the method level in 15 large Java systems are untracked. This results in a large proportion (25%) of entities that may have their histories split by these changes, and a measurable effect on at least two MSR approaches. We conclude that handling untracked changes should be systematically considered by MSR studies.",
              "pageNumber": 1102,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 35: Models and Modeling II",
          "lineItems": [
            {
              "id": "6Y5WUqz4zQTxto3ZC8DMCs",
              "type": "authorPaper",
              "text": "Programming Not Only by Example",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4OSJhkaFu096tUteSJdWJs/2hPIFheVxQOKQ5wEo4hSMx.pdf",
              "extraLocations": [],
              "authorNames": "Hila Peleg (Technion), Sharon Shoham (Tel Aviv University), Eran Yahav (Technion)",
              "abstract": "Recent years have seen great progress in automated synthesis techniques that can automatically generate code based on some intent expressed by the programmer, but communicating this intent remains a major challenge. When the expressed intent is coarse-grained (for example, restriction on the expected type of an expression), the synthesizer often produces a long list of results for the programmer to choose from, shifting the heavy-lifting to the user. An alternative approach, successfully used in end-user synthesis, is programming by example (PBE), where the user leverages examples to interactively and iteratively refine the intent. However, using only examples is not expressive enough for programmers, who can observe the generated program and refine the intent by directly relating to parts of the generated program. We present a novel approach to interacting with a synthesizer using a granular interaction model. Our approach employs a rich interaction model where (i) the synthesizer decorates a candidate program with debug information that assists in understanding the program and identifying good or bad parts, and (ii) the user is allowed to provide feedback not only on the expected output of a program but also on the program itself. After identifying a program as (partially) correct or incorrect, the user can also explicitly indicate the good or bad parts, to allow the synthesizer to accept or discard parts of the program instead of discarding the program as a whole. We show the value of our approach in a controlled user study. Our study shows that participants have a strong preference for granular feedback instead of examples and can provide granular feedback much faster.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Programming Not Only by Example 1518358809197 Hila Peleg Technion hilap@cs.technion.ac.il Sharon Shoham Tel Aviv University sharon.shoham@gmail.com Eran Yahav Technion yahave@cs.technion.ac.il program synthesis programming by example Recent years have seen great progress in automated synthesis techniques that can automatically generate code based on some intent expressed by the programmer, but communicating this intent remains a major challenge. When the expressed intent is coarse-grained (for example, restriction on the expected type of an expression), the synthesizer often produces a long list of results for the programmer to choose from, shifting the heavy-lifting to the user. An alternative approach, successfully used in end-user synthesis, is programming by example (PBE), where the user leverages examples to interactively and iteratively refine the intent. However, using only examples is not expressive enough for programmers, who can observe the generated program and refine the intent by directly relating to parts of the generated program. We present a novel approach to interacting with a synthesizer using a granular interaction model. Our approach employs a rich interaction model where (i) the synthesizer decorates a candidate program with debug information that assists in understanding the program and identifying good or bad parts, and (ii) the user is allowed to provide feedback not only on the expected output of a program but also on the program itself. After identifying a program as (partially) correct or incorrect, the user can also explicitly indicate the good or bad parts, to allow the synthesizer to accept or discard parts of the program instead of discarding the program as a whole. We show the value of our approach in a controlled user study. Our study shows that participants have a strong preference for granular feedback instead of examples and can provide granular feedback much faster.",
              "pageNumber": 1114,
              "isPageNumberRoman": false
            },
            {
              "id": "4xMVEStc0XJhL8ZkynmYjt",
              "type": "authorPaper",
              "text": "Goal-Conflict Likelihood Assessment Based on Model Counting",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf",
              "extraLocations": [],
              "authorNames": "Renzo Degiovanni (Universidad Nacional de Río Cuarto), Pablo Castro (Universidad Nacional de Río Cuarto and CONICET), Marcelo Arroyo (Universidad Nacional de Río Cuarto), Marcelo Ruiz (Universidad Nacional de Río Cuarto), Nazareno Aguirre (Universidad Nacional de Río Cuarto and CONICET), Marcelo Frias (Instituto Tecnológico de Buenos Aires and CONICET)",
              "abstract": "In goal-oriented requirements engineering approaches, conflict analysis has been proposed as an abstraction for risk analysis. Intuitively, given a set of expected goals to be achieved by the system-to-be, a conflict represents a subtle situation that makes goals diverge, i.e., not be satisfiable as a whole. Conflict analysis is typically driven by the identify-assess-control cycle, aimed at identifying, assessing and resolving conflicts that may obstruct the satisfaction of the expected goals. In particular, the assessment step is concerned with evaluating how likely the identified conflicts are, and how likely and severe are their consequences. So far, existing assessment approaches restrict their analysis to obstacles (conflicts that prevent the satisfaction of a single goal), and assume that certain probabilistic information on the domain is provided, that needs to be previously elicited from experienced users, statistical data or simulations. In this paper, we present a novel automated approach to assess how likely a conflict is, that applies to general conflicts (not only obstacles) without requiring probabilistic information on the domain. Intuitively, given the LTL formulation of the domain and of a set of goals to be achieved, we compute goal conflicts, and exploit string model counting techniques to estimate the likelihood of the occurrence of the corresponding conflicting situations and the severity in which these affect the satisfaction of the goals. This information can then be used to prioritize conflicts to be resolved, and suggest which goals to drive attention to for refinements.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Goal-Conflict Likelihood Assessment Based on Model Counting 1518502299360 Renzo Degiovanni Universidad Nacional de Río Cuarto rdegiovanni@dc.exa.unrc.edu.ar Pablo Castro Universidad Nacional de Río Cuarto and CONICET pcastro@dc.exa.unrc.edu.ar Marcelo Arroyo Universidad Nacional de Río Cuarto marcelo.arroyo@dc.exa.unrc.edu.ar Marcelo Ruiz Universidad Nacional de Río Cuarto mruiz@exa.unrc.edu.ar Nazareno Aguirre Universidad Nacional de Río Cuarto and CONICET naguirre@dc.exa.unrc.edu.ar Marcelo Frias Instituto Tecnológico de Buenos Aires and CONICET mfrias@itba.edu.ar Goal Conflicts Risk Likelihood Assessment Model Counting In goal-oriented requirements engineering approaches, conflict analysis has been proposed as an abstraction for risk analysis. Intuitively, given a set of expected goals to be achieved by the system-to-be, a conflict represents a subtle situation that makes goals diverge, i.e., not be satisfiable as a whole. Conflict analysis is typically driven by the identify-assess-control cycle, aimed at identifying, assessing and resolving conflicts that may obstruct the satisfaction of the expected goals. In particular, the assessment step is concerned with evaluating how likely the identified conflicts are, and how likely and severe are their consequences. So far, existing assessment approaches restrict their analysis to obstacles (conflicts that prevent the satisfaction of a single goal), and assume that certain probabilistic information on the domain is provided, that needs to be previously elicited from experienced users, statistical data or simulations. In this paper, we present a novel automated approach to assess how likely a conflict is, that applies to general conflicts (not only obstacles) without requiring probabilistic information on the domain. Intuitively, given the LTL formulation of the domain and of a set of goals to be achieved, we compute goal conflicts, and exploit string model counting techniques to estimate the likelihood of the occurrence of the corresponding conflicting situations and the severity in which these affect the satisfaction of the goals. This information can then be used to prioritize conflicts to be resolved, and suggest which goals to drive attention to for refinements.",
              "pageNumber": 1125,
              "isPageNumberRoman": false
            },
            {
              "id": "4plj42PrsLeFjrrjm9Cmrr",
              "type": "authorPaper",
              "text": "[Journal First] A Posteriori Typing for Model-Driven Engineering: Concepts, Analysis, and Applications",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4mNiUyA6xEXMQZEdZ4zA4z/7zWVDzPltCbrVhrqyYMy19.pdf",
              "extraLocations": [],
              "authorNames": "Juan de Lara (Universidad Autónoma de Madrid), Esther Guerra (Universidad Autónoma de Madrid)",
              "abstract": "Model-Driven Engineering (MDE) is a software engineering paradigm where models are actively used to specify, test, simulate, analyse and maintain the systems to be built, among other activities. Models can be defined using general-purpose modelling languages like the UML, but for particular domains, the use of domain-specific languages is pervasive. Either way, models must conform to a meta-model which defines their abstract syntax. In MDE, the definition of model management operations – often typed over project-specific meta-models – is recurrent. However, even if two operations are similar, they must be developed from scratch whenever they are applied to instances of different meta-models. This is so as operations defined (i.e., typed) over a meta-model cannot be directly reused for another. Part of this difficulty of reuse is because classes in meta-models are used in two ways: as templates to create objects and as static classifiers for them. These two aspects are inherently tied in most meta-modelling approaches, which results in unnecessarily rigid systems and hinders reusability of MDE artefacts. To enhance flexibility and reuse in MDE, we propose an approach to decouple object creation from typing [1]. The approach relies on standard mechanisms for object creation, and proposes the notion of a posteriori typing as a means to retype objects and enable multiple, partial, dynamic typings. A posteriori typing enhances flexibility because it allows models to be retyped with respect to other meta-models. Hence, we distinguish between creation meta-models used to construct models, and role meta-models into which models are retyped. This permits unanticipated reuse, as a model management operation defined for a role meta-model can be reused as-is with models built using a different creation meta-model, once such models are reclassified. Moreover, our approach permits expressing some types of bidirectional model transformations by reclassification. The transformations defined as reclassifications have better performance than the equivalent ones defined with traditional transformation languages, because reclassification does not require creating new objects. In [1], we propose two mechanisms to define a posteriori typings: type-level (mappings between meta-models) and instance-level (set of model queries). The paper presents the underlying theory and type correctness criteria of both mechanisms, defines some analysis methods, identifies practical restrictions for retyping specifications, and demonstrates the feasibility of the approach by an implementation atop our meta-modelling tool MetaDepth. We also explore application scenarios of a posteriori typing (to define transformations, for model transformation reuse, and to improve transformation expressiveness by dynamic type change), and present an experiment showing the potential performance gains when expressing transformations as retypings. The tool is available at http://metadepth.org/. A catalogue of transformations expressed as retypings, and retypings bridging recurring meta-model heterogeneities, are available at http://miso.es/aposteriori/. [1] Juan de Lara and Esther Guerra. 2017. A posteriori typing for model-driven engineering: Concepts, analysis, and applications. ACM Trans. Softw. Eng. Methodol. 25, 4 (2017), 31:1–31:60. https://doi.org/10.1145/3063384",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] A Posteriori Typing for Model-Driven Engineering: Concepts, Analysis, and Applications 1517965419478 Juan de Lara Universidad Autónoma de Madrid Juan.deLara@uam.es Esther Guerra Universidad Autónoma de Madrid Esther.Guerra@uam.es Model-driven engineering reuse model typing partial typing dynamic typing model transformations bidirectionality MetaDepth Model-Driven Engineering (MDE) is a software engineering paradigm where models are actively used to specify, test, simulate, analyse and maintain the systems to be built, among other activities. Models can be defined using general-purpose modelling languages like the UML, but for particular domains, the use of domain-specific languages is pervasive. Either way, models must conform to a meta-model which defines their abstract syntax. In MDE, the definition of model management operations – often typed over project-specific meta-models – is recurrent. However, even if two operations are similar, they must be developed from scratch whenever they are applied to instances of different meta-models. This is so as operations defined (i.e., typed) over a meta-model cannot be directly reused for another. Part of this difficulty of reuse is because classes in meta-models are used in two ways: as templates to create objects and as static classifiers for them. These two aspects are inherently tied in most meta-modelling approaches, which results in unnecessarily rigid systems and hinders reusability of MDE artefacts. To enhance flexibility and reuse in MDE, we propose an approach to decouple object creation from typing [1]. The approach relies on standard mechanisms for object creation, and proposes the notion of a posteriori typing as a means to retype objects and enable multiple, partial, dynamic typings. A posteriori typing enhances flexibility because it allows models to be retyped with respect to other meta-models. Hence, we distinguish between creation meta-models used to construct models, and role meta-models into which models are retyped. This permits unanticipated reuse, as a model management operation defined for a role meta-model can be reused as-is with models built using a different creation meta-model, once such models are reclassified. Moreover, our approach permits expressing some types of bidirectional model transformations by reclassification. The transformations defined as reclassifications have better performance than the equivalent ones defined with traditional transformation languages, because reclassification does not require creating new objects. In [1], we propose two mechanisms to define a posteriori typings: type-level (mappings between meta-models) and instance-level (set of model queries). The paper presents the underlying theory and type correctness criteria of both mechanisms, defines some analysis methods, identifies practical restrictions for retyping specifications, and demonstrates the feasibility of the approach by an implementation atop our meta-modelling tool MetaDepth. We also explore application scenarios of a posteriori typing (to define transformations, for model transformation reuse, and to improve transformation expressiveness by dynamic type change), and present an experiment showing the potential performance gains when expressing transformations as retypings. The tool is available at http://metadepth.org/. A catalogue of transformations expressed as retypings, and retypings bridging recurring meta-model heterogeneities, are available at http://miso.es/aposteriori/. [1] Juan de Lara and Esther Guerra. 2017. A posteriori typing for model-driven engineering: Concepts, analysis, and applications. ACM Trans. Softw. Eng. Methodol. 25, 4 (2017), 31:1–31:60. https://doi.org/10.1145/3063384",
              "pageNumber": 1136,
              "isPageNumberRoman": false
            },
            {
              "id": "3SXSNY0oPEDCA20mjSDBHA",
              "type": "authorPaper",
              "text": "A Static Verification Framework for Message Passing in Go Using Behavioural Types",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4qni3QmfOZ1L9eUK9sVGyf/OgbS6Mp1QczsiyDiedExx.pdf",
              "extraLocations": [],
              "authorNames": "Julien Lange (University of Kent), Nicholas Ng (Imperial College London), Bernardo Toninho (Imperial College London), Nobuko Yoshida (Imperial College London)",
              "abstract": "The Go programming language has been heavily adopted in industry as a language that efficiently combines systems programming with concurrency. Go's concurrency primitives, inspired by process calculi such as CCS and CSP, feature channel-based communication and lightweight threads, providing a distinct means of structuring concurrent software. Despite its popularity, the Go programming ecosystem offers little to no support for guaranteeing the correctness of message-passing concurrent programs. This work proposes a practical verification framework for message passing concurrency in Go by developing a robust static analysis that infers an abstract model of a program's communication behaviour in the form of a behavioural type, a powerful process calculi typing discipline. We make use of our analysis to deploy a model and termination checking based verification of the inferred behavioural type that is suitable for a range of safety and liveness properties of Go programs, providing several improvements over existing approaches. We evaluate our framework and its implementation on publicly available real-world Go code.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 A Static Verification Framework for Message Passing in Go Using Behavioural Types 1517228577053 Julien Lange University of Kent j.s.lange@kent.ac.uk Nicholas Ng Imperial College London nickng@imperial.ac.uk Bernardo Toninho Imperial College London b.toninho@imperial.ac.uk Nobuko Yoshida Imperial College London n.yoshida@imperial.ac.uk concurrency static analysis behavioural types model checking go programming language The Go programming language has been heavily adopted in industry as a language that efficiently combines systems programming with concurrency. Go's concurrency primitives, inspired by process calculi such as CCS and CSP, feature channel-based communication and lightweight threads, providing a distinct means of structuring concurrent software. Despite its popularity, the Go programming ecosystem offers little to no support for guaranteeing the correctness of message-passing concurrent programs. This work proposes a practical verification framework for message passing concurrency in Go by developing a robust static analysis that infers an abstract model of a program's communication behaviour in the form of a behavioural type, a powerful process calculi typing discipline. We make use of our analysis to deploy a model and termination checking based verification of the inferred behavioural type that is suitable for a range of safety and liveness properties of Go programs, providing several improvements over existing approaches. We evaluate our framework and its implementation on publicly available real-world Go code.",
              "pageNumber": 1137,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 36: Inference and Invariants",
          "lineItems": [
            {
              "id": "5wZyAxnuPsM71PmSYfMd9y",
              "type": "authorPaper",
              "text": "Inferring and Asserting Distributed System Invariants",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/24lb1U1vGXVTQ9ilBi3gLD/5c5Zch9tqgfvr3747kdOg6.pdf",
              "extraLocations": [],
              "authorNames": "Stewart Grant (University of British Columbia), Hendrik Cech (University of Bamberg), Ivan Beschastnikh (University of British Columbia)",
              "abstract": "Distributed systems are difficult to debug and understand. A key reason for this is distributed state, which is not easily accessible and must be pieced together from the states of the individual nodes in the system. We propose Dinv, an automatic approach to help developers of distributed systems uncover the runtime distributed state properties of their systems. Dinv uses static and dynamic program analyses to infer relations between variables at different nodes. For example, in a leader election algorithm, Dinv can relate the variable leader at different nodes to derive the invariant forall &#x2200; nodes i, j, leader_i = leader_j. This can increase the developer's confidence in the correctness of their system. The developer can also use Dinv to convert an inferred invariant into a distributed runtime assertion on distributed state. We applied Dinv to several popular distributed systems, such as etcd Raft, Hashicorp Serf, and Taipei-Torrent, which have between 1.7K and 144K LOC and are widely used. Dinv derived useful invariants for these systems, including invariants that capture the correctness of distributed routing strategies, leadership, and key hash distribution. We also used Dinv to assert correctness of the inferred etcd Raft invariants at runtime, using these asserts to detect injected silent bugs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Inferring and Asserting Distributed System Invariants 1518511109097 Stewart Grant University of British Columbia stewbertgrant@gmail.com Hendrik Cech University of Bamberg hendrik.cech@gmail.com Ivan Beschastnikh University of British Columbia bestchai@cs.ubc.ca distributed systems specification mining runtime checking program analysis Distributed systems are difficult to debug and understand. A key reason for this is distributed state, which is not easily accessible and must be pieced together from the states of the individual nodes in the system. We propose Dinv, an automatic approach to help developers of distributed systems uncover the runtime distributed state properties of their systems. Dinv uses static and dynamic program analyses to infer relations between variables at different nodes. For example, in a leader election algorithm, Dinv can relate the variable leader at different nodes to derive the invariant forall &#x2200; nodes i, j, leader_i = leader_j. This can increase the developer's confidence in the correctness of their system. The developer can also use Dinv to convert an inferred invariant into a distributed runtime assertion on distributed state. We applied Dinv to several popular distributed systems, such as etcd Raft, Hashicorp Serf, and Taipei-Torrent, which have between 1.7K and 144K LOC and are widely used. Dinv derived useful invariants for these systems, including invariants that capture the correctness of distributed routing strategies, leadership, and key hash distribution. We also used Dinv to assert correctness of the inferred etcd Raft invariants at runtime, using these asserts to detect injected silent bugs.",
              "pageNumber": 1149,
              "isPageNumberRoman": false
            },
            {
              "id": "7M3rw7xEtfXgInnXVIMeHE",
              "type": "authorPaper",
              "text": "DroidStar: Callback Typestates for Android Classes",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf",
              "extraLocations": [],
              "authorNames": "Arjun Radhakrishna (Microsoft), Nicholas V. Lewchenko (University of Colorado Boulder), Shawn Meier (University of Colorado Boulder), Sergio Mover (University of Colorado Boulder), Krishna Chaitanya Sripada (University of Colorado Boulder), Damien Zufferey (Max Planck Institute for Software Systems), Bor-Yuh Evan Chang (University of Colorado Boulder), Pavol Cerný (University of Colorado Boulder)",
              "abstract": "Event-driven programming frameworks, such as Android, are based on components with asynchronous interfaces. The protocols for interacting with these components can often be described by finite-state machines we dub *callback typestates. Callback typestates are akin to classical typestates, with the difference that their outputs (callbacks) are produced asynchronously. While useful, these specifications are not commonly available, because writing them is difficult and error-prone. Our goal is to make the task of producing callback typestates significantly easier. We present a callback typestate assistant tool, DroidStar, that requires only limited user interaction to produce a callback typestate. Our approach is based on an active learning algorithm, L*. We improved the scalability of equivalence queries (a key component of L*), thus making active learning tractable on the Android system. We use DroidStar to learn callback typestates for Android classes both for cases where one is already provided by the documentation, and for cases where the documentation is unclear. The results show that DroidStar learns callback typestates accurately and efficiently. Moreover, in several cases, the synthesized callback typestates uncovered surprising and undocumented behaviors.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 DroidStar: Callback Typestates for Android Classes 1518492895253 Arjun Radhakrishna Microsoft arradha@microsoft.com Nicholas V. Lewchenko University of Colorado Boulder Nicholas.Lewchenko@colorado.edu Shawn Meier University of Colorado Boulder Shawn.Meier@colorado.edu Sergio Mover University of Colorado Boulder Sergio.Mover@colorado.edu Krishna Chaitanya Sripada University of Colorado Boulder Krishna.Sripada@colorado.edu Damien Zufferey Max Planck Institute for Software Systems zufferey@mpi-sws.org Bor-Yuh Evan Chang University of Colorado Boulder evan.chang@colorado.edu Pavol Cerný University of Colorado Boulder Pavol.Cerny@colorado.edu typestate specification inference Android active learning Event-driven programming frameworks, such as Android, are based on components with asynchronous interfaces. The protocols for interacting with these components can often be described by finite-state machines we dub *callback typestates. Callback typestates are akin to classical typestates, with the difference that their outputs (callbacks) are produced asynchronously. While useful, these specifications are not commonly available, because writing them is difficult and error-prone. Our goal is to make the task of producing callback typestates significantly easier. We present a callback typestate assistant tool, DroidStar, that requires only limited user interaction to produce a callback typestate. Our approach is based on an active learning algorithm, L*. We improved the scalability of equivalence queries (a key component of L*), thus making active learning tractable on the Android system. We use DroidStar to learn callback typestates for Android classes both for cases where one is already provided by the documentation, and for cases where the documentation is unclear. The results show that DroidStar learns callback typestates accurately and efficiently. Moreover, in several cases, the synthesized callback typestates uncovered surprising and undocumented behaviors.",
              "pageNumber": 1160,
              "isPageNumberRoman": false
            },
            {
              "id": "3x6UvTHm9vt8lRTpQDnEJn",
              "type": "authorPaper",
              "text": "Debugging with Intelligence via Probabilistic Inference",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7CYIpqNdfDVuty6nF4sCz0/4NS9ycJ4Imp4FkgVouytF1.pdf",
              "extraLocations": [],
              "authorNames": "Zhaogui Xu (Nanjing University), Shiqing Ma (Purdue University), Xiangyu Zhang (Purdue University), Shuofei Zhu (Nanjing University), Baowen Xu (Nanjing University)",
              "abstract": "We aim to debug a single failing execution without the assistance from other passing/failing runs. In our context, debugging is a process with substantial uncertainty – lots of decisions have to be made such as what variables shall be inspected first. To deal with such uncertainty, we propose to equip machines with human-like intelligence. Specifically, we develop a highly automated debugging technique that aims to couple human-like reasoning (e.g., dealing with uncertainty and fusing knowledge) with program semantics based analysis, to achieve benefits from the two and mitigate their limitations. We model debugging as a probabilistic inference problem, in which the likelihood of each executed statement instance and variable being correct/faulty is modeled by a random variable. Human knowledge, human-like reasoning rules and program semantics are modeled as conditional probability distributions, also called probabilistic constraints. Solving these constraints identifies the most likely faulty statements. Our results show that the technique is highly effective. It can precisely identify root causes for a set of real-world bugs in a very small number of interactions with developers, much smaller than a recent proposal that does not encode human intelligence. Our user study also confirms that it substantially improves human productivity.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Debugging with Intelligence via Probabilistic Inference 1517673139639 Zhaogui Xu Nanjing University zgxu@smail.nju.edu.cn Shiqing Ma Purdue University ma229@purdue.edu Xiangyu Zhang Purdue University xyzhang@cs.purdue.edu Shuofei Zhu Nanjing University zhushuofei@smail.nju.edu.cn Baowen Xu Nanjing University bwxu@nju.edu.cn Debugging Probabilistic Inference Python We aim to debug a single failing execution without the assistance from other passing/failing runs. In our context, debugging is a process with substantial uncertainty – lots of decisions have to be made such as what variables shall be inspected first. To deal with such uncertainty, we propose to equip machines with human-like intelligence. Specifically, we develop a highly automated debugging technique that aims to couple human-like reasoning (e.g., dealing with uncertainty and fusing knowledge) with program semantics based analysis, to achieve benefits from the two and mitigate their limitations. We model debugging as a probabilistic inference problem, in which the likelihood of each executed statement instance and variable being correct/faulty is modeled by a random variable. Human knowledge, human-like reasoning rules and program semantics are modeled as conditional probability distributions, also called probabilistic constraints. Solving these constraints identifies the most likely faulty statements. Our results show that the technique is highly effective. It can precisely identify root causes for a set of real-world bugs in a very small number of interactions with developers, much smaller than a recent proposal that does not encode human intelligence. Our user study also confirms that it substantially improves human productivity.",
              "pageNumber": 1171,
              "isPageNumberRoman": false
            },
            {
              "id": "2mAtsDpDLdBougNfZzvQNG",
              "type": "authorPaper",
              "text": "Reducer-Based Construction of Conditional Verifiers",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6mfhtixgiQVyhDPMCYId3V/7DUx0uAdd4fytOgP2RvFf5.pdf",
              "extraLocations": [],
              "authorNames": "Dirk Beyer (LMU Munich), Marie-Christine Jakobs (LMU Munich), Thomas Lemberger (LMU Munich), Heike Wehrheim (Paderborn University)",
              "abstract": "Despite recent advances, software verification remains challenging. To solve hard verification tasks, we need to leverage not just one but several different verifiers employing different technologies. To this end, we need to exchange information between verifiers. Conditional model checking was proposed as a solution to exactly this problem: The idea is to let the first verifier output a condition which describes the state space that it successfully verified and to instruct the second verifier to verify the yet unverified state space using this condition. However, most verifiers do not understand conditions as input. In this paper, we propose the usage of an off-the-shelf construction of a conditional verifier from a given traditional verifier and a reducer. The reducer takes as input the program to be verified and the condition, and outputs a residual program whose paths cover the unverified state space described by the condition. As a proof of concept, we designed and implemented one particular reducer and composed three conditional model checkers from the three best verifiers at SV-COMP 2017. We defined a set of claims and experimentally evaluated their validity. All experimental data and results are available for replication.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Reducer-Based Construction of Conditional Verifiers 1519144418147 Dirk Beyer LMU Munich Dirk.Beyer@sosy-lab.org Marie-Christine Jakobs LMU Munich M.Jakobs@lmu.de Thomas Lemberger LMU Munich thomas.lemberger@sosy.ifi.lmu.de Heike Wehrheim Paderborn University wehrheim@upb.de Conditional Model Checking Formal Verification Testing Program Analysis Software Verification Sequential Combination Despite recent advances, software verification remains challenging. To solve hard verification tasks, we need to leverage not just one but several different verifiers employing different technologies. To this end, we need to exchange information between verifiers. Conditional model checking was proposed as a solution to exactly this problem: The idea is to let the first verifier output a condition which describes the state space that it successfully verified and to instruct the second verifier to verify the yet unverified state space using this condition. However, most verifiers do not understand conditions as input. In this paper, we propose the usage of an off-the-shelf construction of a conditional verifier from a given traditional verifier and a reducer. The reducer takes as input the program to be verified and the condition, and outputs a residual program whose paths cover the unverified state space described by the condition. As a proof of concept, we designed and implemented one particular reducer and composed three conditional model checkers from the three best verifiers at SV-COMP 2017. We defined a set of claims and experimentally evaluated their validity. All experimental data and results are available for replication.",
              "pageNumber": 1182,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 37: Surveys and Reviews",
          "lineItems": [
            {
              "id": "7LqMDbQwCcCU9uVokI9VQU",
              "type": "authorPaper",
              "text": "[Journal First] Challenges and Pitfalls on Surveying Evidence in the Software Engineering Technical Literature: An Exploratory Study with Novices",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eOAQt0CIgL4F5n3HwADCt/4duvB0d69UshSNJsqlMUII.pdf",
              "extraLocations": [],
              "authorNames": "Talita Vieira Ribeiro (Federal University of Rio de Janeiro), Jobson Massollar (Federal University of Rio de Janeiro), Guilherme Horta Travassos (Federal University of Rio de Janeiro)",
              "abstract": "The evidence-based software engineering approach advocates the use of evidence from empirical studies to support the decisions on the adoption of software technologies by practitioners in the software industry. To this end, many guidelines have been proposed to contribute to the execution and repeatability of literature reviews, and to the confidence of their results, especially regarding systematic literature reviews (SLR). To investigate similarities and differences, and to characterize the challenges and pitfalls of the planning and generated results of SLR research protocols dealing with the same research question and performed by similar teams of novice researchers in the context of the software engineering field. We qualitatively compared (using Jaccard and Kappa coefficients) and evaluated (using DARE) same goal SLR research protocols and outcomes undertaken by similar research teams. Seven similar SLR protocols regarding quality attributes for use cases executed in 2010 and 2012 enabled us to observe unexpected differences in their planning and execution. Even when the participants reached some agreement in the planning, the outcomes were different. The research protocols and reports allowed us to observe six challenges contributing to the divergences in the results: researchers' inexperience in the topic, researchers' inexperience in the method, lack of clearness and completeness of the papers, lack of a common terminology regarding the problem domain, lack of research verification procedures, and lack of commitment to the SLR. According to our findings, it is not possible to rely on results of SLRs performed by novices. Also, similarities at a starting or intermediate step during different SLR executions may not directly translate to the next steps, since non-explicit information might entail differences in the outcomes, hampering the repeatability and confidence of the SLR process and results. Although we do have expectations that the presence and follow-up of a senior researcher can contribute to increasing SLRs' repeatability, this conclusion can only be drawn upon the existence of additional studies on this topic. Yet, systematic planning, transparency of decisions and verification procedures are key factors to guarantee the reliability of SLRs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Challenges and Pitfalls on Surveying Evidence in the Software Engineering Technical Literature: An Exploratory Study with Novices 1518399169094 Talita Vieira Ribeiro Federal University of Rio de Janeiro talita.vribeiro@gmail.com Jobson Massollar Federal University of Rio de Janeiro jobson@cos.ufrj.br Guilherme Horta Travassos Federal University of Rio de Janeiro ght@cos.ufrj.br Novice researchers Systematic literature review Evidence based software engineering Exploratory study The evidence-based software engineering approach advocates the use of evidence from empirical studies to support the decisions on the adoption of software technologies by practitioners in the software industry. To this end, many guidelines have been proposed to contribute to the execution and repeatability of literature reviews, and to the confidence of their results, especially regarding systematic literature reviews (SLR). To investigate similarities and differences, and to characterize the challenges and pitfalls of the planning and generated results of SLR research protocols dealing with the same research question and performed by similar teams of novice researchers in the context of the software engineering field. We qualitatively compared (using Jaccard and Kappa coefficients) and evaluated (using DARE) same goal SLR research protocols and outcomes undertaken by similar research teams. Seven similar SLR protocols regarding quality attributes for use cases executed in 2010 and 2012 enabled us to observe unexpected differences in their planning and execution. Even when the participants reached some agreement in the planning, the outcomes were different. The research protocols and reports allowed us to observe six challenges contributing to the divergences in the results: researchers' inexperience in the topic, researchers' inexperience in the method, lack of clearness and completeness of the papers, lack of a common terminology regarding the problem domain, lack of research verification procedures, and lack of commitment to the SLR. According to our findings, it is not possible to rely on results of SLRs performed by novices. Also, similarities at a starting or intermediate step during different SLR executions may not directly translate to the next steps, since non-explicit information might entail differences in the outcomes, hampering the repeatability and confidence of the SLR process and results. Although we do have expectations that the presence and follow-up of a senior researcher can contribute to increasing SLRs' repeatability, this conclusion can only be drawn upon the existence of additional studies on this topic. Yet, systematic planning, transparency of decisions and verification procedures are key factors to guarantee the reliability of SLRs.",
              "pageNumber": 1194,
              "isPageNumberRoman": false
            },
            {
              "id": "3uQSnPhRYmhI4mShwBDERX",
              "type": "authorPaper",
              "text": "Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4DXjZ1hszyCVhZZvfNLCgj/2h3ZD73wXPhuAjdGHgymnT.pdf",
              "extraLocations": [],
              "authorNames": "Rolando P. Reyes Ch. (Universidad de las Fuerzas Armadas ESPE), Oscar Dieste (Universidad Politécnica de Madrid), Efraín R. Fonseca C. (Universidad de las Fuerzas Armadas ESPE), Natalia Juristo (Universidad Politécnica de Madrid)",
              "abstract": "Background: Statistical concepts and techniques are often applied incorrectly, even in mature disciplines such as medicine or psychology. Surprisingly, there are very few works that study statistical problems in software engineering (SE). Aim: Assess the existence of statistical errors in SE experiments. Method: Compile the most common statistical errors in experimental disciplines. Survey experiments published in ICSE to assess whether errors occur in high quality SE publications. Results: The same errors as identified in others disciplines were found in ICSE experiments, where 30 of the reviewed papers included several error types such as: a) missing statistical hypotheses, b) missing sample size calculation, c) failure to assess statistical test assumptions, and d) uncorrected multiple testing. This rather large error rate is greater for research papers where experiments are confined to the validation section. The origin of the errors can be traced back to: a) researchers not having sufficient statistical training, and b) a profusion of exploratory research. Conclusions: This paper provides preliminary evidence that SE research suffers from the same statistical problems as other experimental disciplines. However, the SE community appears to be unaware of any shortcomings in its experiments, whereas other disciplines work hard to avoid these threats. Further research is necessary to find the underlying causes and set up corrective measures, but there are some potentially effective actions and are a priori easy to implement: a) improve the statistical training of SE researchers, and b) enforce quality assessment and reporting guidelines in SE publications.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review 1518368242948 Rolando P. Reyes Ch. Universidad de las Fuerzas Armadas ESPE rpreyes1@espe.edu.ec Oscar Dieste Universidad Politécnica de Madrid odieste@fi.upm.es Efraín R. Fonseca C. Universidad de las Fuerzas Armadas ESPE erfonseca@espe.edu.ec Natalia Juristo Universidad Politécnica de Madrid natalia@fi.upm.es Literature review Survey Prevalence Statistical errors Background: Statistical concepts and techniques are often applied incorrectly, even in mature disciplines such as medicine or psychology. Surprisingly, there are very few works that study statistical problems in software engineering (SE). Aim: Assess the existence of statistical errors in SE experiments. Method: Compile the most common statistical errors in experimental disciplines. Survey experiments published in ICSE to assess whether errors occur in high quality SE publications. Results: The same errors as identified in others disciplines were found in ICSE experiments, where 30 of the reviewed papers included several error types such as: a) missing statistical hypotheses, b) missing sample size calculation, c) failure to assess statistical test assumptions, and d) uncorrected multiple testing. This rather large error rate is greater for research papers where experiments are confined to the validation section. The origin of the errors can be traced back to: a) researchers not having sufficient statistical training, and b) a profusion of exploratory research. Conclusions: This paper provides preliminary evidence that SE research suffers from the same statistical problems as other experimental disciplines. However, the SE community appears to be unaware of any shortcomings in its experiments, whereas other disciplines work hard to avoid these threats. Further research is necessary to find the underlying causes and set up corrective measures, but there are some potentially effective actions and are a priori easy to implement: a) improve the statistical training of SE researchers, and b) enforce quality assessment and reporting guidelines in SE publications.",
              "pageNumber": 1195,
              "isPageNumberRoman": false
            },
            {
              "id": "3nq1IS1MEBNGiwp5d2ScMs",
              "type": "authorPaper",
              "text": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf",
              "extraLocations": [],
              "authorNames": "Xin Huang (Nanjing University), He Zhang (Nanjing University), Xin Zhou (Nanjing University), Muhammad Ali Babar (University of Adelaide), Song Yang (Nanjing University)",
              "abstract": "Synthesizing data extracted from primary studies is an integral component of the methodologies in support of Evidence Based Software Engineering (EBSE) such as System Literature Review (SLR). Since a large and increasing number of studies in Software Engineering (SE) incorporate qualitative data, it is important to systematically review and understand different aspects of the Qualitative Research Synthesis (QRS) being used in SE. We have reviewed the use of QRS methods in 328 SLRs published between 2005 and 2015. We also inquired the authors of 274 SLRs to confrm whether or not any QRS methods were used in their respective reviews. 116 of them provided the responses, which were included in our analysis. We found eight QRS methods applied in SE research, two of which, narrative synthesis and thematic synthesis, have been predominantly adopted by SE researchers for synthesizing qualitative data. Our study determines that a signifcant amount of missing knowledge and incomplete understanding of the defned QRS methods in the community. Our effort also identifes an initial set factors that may in?uence the selection and use of appropriate QRS methods in SE.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Synthesizing Qualitative Research in Software Engineering: A Critical Review 1518522673630 Xin Huang Nanjing University njuhuangx@outlook.com He Zhang Nanjing University hezhang@nju.edu.cn Xin Zhou Nanjing University job@wetist.com Muhammad Ali Babar University of Adelaide ali.babar@adelaide.edu.au Song Yang Nanjing University ysongpray@gmail.com research synthesis qualitative (synthesis) methods systematic (literature) review evidence-based software engineering Synthesizing data extracted from primary studies is an integral component of the methodologies in support of Evidence Based Software Engineering (EBSE) such as System Literature Review (SLR). Since a large and increasing number of studies in Software Engineering (SE) incorporate qualitative data, it is important to systematically review and understand different aspects of the Qualitative Research Synthesis (QRS) being used in SE. We have reviewed the use of QRS methods in 328 SLRs published between 2005 and 2015. We also inquired the authors of 274 SLRs to confrm whether or not any QRS methods were used in their respective reviews. 116 of them provided the responses, which were included in our analysis. We found eight QRS methods applied in SE research, two of which, narrative synthesis and thematic synthesis, have been predominantly adopted by SE researchers for synthesizing qualitative data. Our study determines that a signifcant amount of missing knowledge and incomplete understanding of the defned QRS methods in the community. Our effort also identifes an initial set factors that may in?uence the selection and use of appropriate QRS methods in SE.",
              "pageNumber": 1207,
              "isPageNumberRoman": false
            },
            {
              "id": "66aDZsKdBSYC3vX0BoFHfc",
              "type": "authorPaper",
              "text": "[Journal First] Automatic Software Repair: A Survey",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ZwRKZQkILQrDf1dYRc6MX/3GxXiKpuG16Y0aONhuJjab.pdf",
              "extraLocations": [],
              "authorNames": "Luca Gazzola (Università degli Studi di Milano-Bicocca), Leonardo Mariani (Università degli Studi di Milano-Bicocca), Daniela Micucci (Università degli Studi di Milano-Bicocca)",
              "abstract": "Despite their growing complexity and increasing size, modern software applications must satisfy strict release requirements that impose short bug fixing and maintenance cycles, putting significant pressure on developers who are responsible for timely producing high-quality software. To reduce developers workload, repairing and healing techniques have been extensively investigated as solutions for efficiently repairing and maintaining software in the last few years. In particular, repairing solutions have been able to automatically produce useful fixes for several classes of bugs that might be present in software programs. A range of algorithms, techniques, and heuristics have been integrated, experimented, and studied, producing a heterogeneous and articulated research framework where automatic repair techniques are proliferating. This paper organizes the knowledge in the area by surveying a body of 108 papers about automatic software repair techniques, illustrating the algorithms and the approaches, comparing them on representative examples, and discussing the open challenges and the empirical evidence reported so far.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Automatic Software Repair: A Survey 1518297390170 Luca Gazzola Università degli Studi di Milano-Bicocca luca.gazzola@disco.unimib.it Leonardo Mariani Università degli Studi di Milano-Bicocca mariani@disco.unimib.it Daniela Micucci Università degli Studi di Milano-Bicocca micucci@disco.unimib.it Automatic Program Repair Generate and Validate Search Based Semantics driven repair Correct by Construction Program Synthesis Self Repairing Despite their growing complexity and increasing size, modern software applications must satisfy strict release requirements that impose short bug fixing and maintenance cycles, putting significant pressure on developers who are responsible for timely producing high-quality software. To reduce developers workload, repairing and healing techniques have been extensively investigated as solutions for efficiently repairing and maintaining software in the last few years. In particular, repairing solutions have been able to automatically produce useful fixes for several classes of bugs that might be present in software programs. A range of algorithms, techniques, and heuristics have been integrated, experimented, and studied, producing a heterogeneous and articulated research framework where automatic repair techniques are proliferating. This paper organizes the knowledge in the area by surveying a body of 108 papers about automatic software repair techniques, illustrating the algorithms and the approaches, comparing them on representative examples, and discussing the open challenges and the empirical evidence reported so far.",
              "pageNumber": 1219,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Session 38: Search-Based Software Engineering II",
          "lineItems": [
            {
              "id": "5sKfOaLVIoIIAJXfB3lypM",
              "type": "authorPaper",
              "text": "Search-Based Test Data Generation for SQL Queries",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4B2Db8L4U7DekUw6RJzAuW/3TzsZt8feqd0zTtvlqNrZD.pdf",
              "extraLocations": [],
              "authorNames": "Jeroen Castelein (Delft University of Technology), Maurício Aniche (Delft University of Technology), Mozhan Soltani (Delft University of Technology), Annibale Panichella (Delft University of Technology), Arie van Deursen (Delft University of Technology)",
              "abstract": "Database-centric systems strongly rely on SQL queries to manage and manipulate their data. These SQL commands can range from very simple selections to queries that involve several tables, subqueries, and grouping operations. And, as with any important piece of code, developers should properly test SQL queries. In order to completely test a SQL query, developers need to create test data that exercise all possible coverage targets in a query, e.g., JOINs and WHERE predicates. And indeed, this task can be challenging and time-consuming for complex queries. Previous studies have modeled the problem of generating test data as a constraint satisfaction problem and, with the help of SAT solvers, generate the required data. However, such approaches have strong limitations, such as partial support for queries with JOINs, subqueries, and strings (which are commonly used in SQL queries). In this paper, we model test data generation for SQL queries as a search-based problem. Then, we devise and evaluate three different approaches based on random search, biased random search, and genetic algorithms (GAs). The GA, in particular, uses a fitness function based on information extracted from the physical query plan of a database engine as search guidance. We then evaluate each approach in 2,135 queries extracted from three open source software and one industrial software system. Our results show that GA is able to completely cover 98.6% of all queries in the dataset, requiring only a few seconds per query. Moreover, it does not suffer from the limitations affecting state-of-the art techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Search-Based Test Data Generation for SQL Queries 1519058341316 Jeroen Castelein Delft University of Technology jeroencastelein11@gmail.com Maurício Aniche Delft University of Technology m.f.aniche@tudelft.nl Mozhan Soltani Delft University of Technology m.soltani@tudelft.nl Annibale Panichella Delft University of Technology a.panichella@tudelft.nl Arie van Deursen Delft University of Technology a.vandeursen@tudelft.nl search based software engineering automated test data generation SQL databases Database-centric systems strongly rely on SQL queries to manage and manipulate their data. These SQL commands can range from very simple selections to queries that involve several tables, subqueries, and grouping operations. And, as with any important piece of code, developers should properly test SQL queries. In order to completely test a SQL query, developers need to create test data that exercise all possible coverage targets in a query, e.g., JOINs and WHERE predicates. And indeed, this task can be challenging and time-consuming for complex queries. Previous studies have modeled the problem of generating test data as a constraint satisfaction problem and, with the help of SAT solvers, generate the required data. However, such approaches have strong limitations, such as partial support for queries with JOINs, subqueries, and strings (which are commonly used in SQL queries). In this paper, we model test data generation for SQL queries as a search-based problem. Then, we devise and evaluate three different approaches based on random search, biased random search, and genetic algorithms (GAs). The GA, in particular, uses a fitness function based on information extracted from the physical query plan of a database engine as search guidance. We then evaluate each approach in 2,135 queries extracted from three open source software and one industrial software system. Our results show that GA is able to completely cover 98.6% of all queries in the dataset, requiring only a few seconds per query. Moreover, it does not suffer from the limitations affecting state-of-the art techniques.",
              "pageNumber": 1220,
              "isPageNumberRoman": false
            },
            {
              "id": "4npQp1edWz3BXtCSdtqTE0",
              "type": "authorPaper",
              "text": "Multi-objective Integer Programming Approaches for Solving Optimal Feature Selection Problem: A New Perspective on Multi-objective Optimization Problems in SBSE",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1TtVOsFS1qq7UEalN0m3JG/3XBHStq8A8ko8AbWNPERaX.pdf",
              "extraLocations": [],
              "authorNames": "Yinxing Xue (University of Science and Technology of China), Yan-Fu Li (Tsinghua University)",
              "abstract": "The optimal feature selection problem in software product line is typically addressed by the approaches based on Indicator-based Evolutionary Algorithm (IBEA). In this study, we frst expose the mathematical nature of this problem — multi-objective binary integer linear programming. Then, we implement/propose three mathematical programming approaches to solve this problem at di?erent scales. For small-scale problems (roughly, less than 100 features), we implement two established approaches to fnd all exact solutions. For medium-to-large problems (roughly, more than 100 features), we propose one efcient approach that can generate a representation of the entire Pareto front in linear time complexity. The empirical results show that our proposed method can fnd signifcantly more non-dominated solutions in similar or less execution time, in comparison with IBEA and its recent enhancement (i.e., IBED that combines IBEA and Di?erential Evolution).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Multi-objective Integer Programming Approaches for Solving Optimal Feature Selection Problem: A New Perspective on Multi-objective Optimization Problems in SBSE 1518361281801 Yinxing Xue University of Science and Technology of China yinxingxue@gmail.com Yan-Fu Li Tsinghua University liyanfu@tsinghua.edu.cn Optimal Feature Selection Problem Multi Objective Optimization(MOO) Multi Objective Integer Programming (MOIP) Indicator Based Evolutionary Algorithm (IBEA) IBED The optimal feature selection problem in software product line is typically addressed by the approaches based on Indicator-based Evolutionary Algorithm (IBEA). In this study, we frst expose the mathematical nature of this problem — multi-objective binary integer linear programming. Then, we implement/propose three mathematical programming approaches to solve this problem at di?erent scales. For small-scale problems (roughly, less than 100 features), we implement two established approaches to fnd all exact solutions. For medium-to-large problems (roughly, more than 100 features), we propose one efcient approach that can generate a representation of the entire Pareto front in linear time complexity. The empirical results show that our proposed method can fnd signifcantly more non-dominated solutions in similar or less execution time, in comparison with IBEA and its recent enhancement (i.e., IBED that combines IBEA and Di?erential Evolution).",
              "pageNumber": 1231,
              "isPageNumberRoman": false
            },
            {
              "id": "3y5xUZRrDcaoIHhLJMCI1P",
              "type": "authorPaper",
              "text": "[Journal First] Automated Refactoring of OCL Constraints with Search",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7cJGdYhKy3K17vTHSANryU/39zsgbNVg02BjEkeFH5d3S.pdf",
              "extraLocations": [],
              "authorNames": "Hong Lu (Simula Research Laboratory), Shuai Wang (Simula Research Laboratory), Tao Yue (Simula Research Laboratory), Shaukat Ali (Simula Research Laboratory), Jan Nygard (Cancer Registry of Norway)",
              "abstract": "Object Constraint Language (OCL) constraints are typically used for providing precise semantics to models developed with the Unified Modeling Language (UML). When OCL constraints evolve in a regular basis, it is essential that they are easy to understand and maintain. For instance, in cancer registries, to ensure the quality of cancer data, more than one thousand medical rules are defined and evolve regularly. Such rules can be specified with OCL. It is, therefore, important to ensure the understandability and maintainability of medical rules specified with OCL. To tackle such a challenge, we propose an automated search-based OCL constraint refactoring approach (SBORA) by defining and applying three OCL quality metrics (Complexity, Coupling, and Cohesion) and four semantics-preserving refactoring operators (i.e., Context Change, Swap, Split and Merge) which are encoded as potential solutions for search algorithms. A solution is therefore an optimal sequence of refactoring operators, which are sequentially applied to the original set of OCL constraints to automatically obtain a semantically equivalent set of OCL constraints with better understandability and maintainability in terms of Complexity, Coupling, and Cohesion. We evaluate SBORA along with six commonly used multi-objective search algorithms (e.g., Indicator-Based Evolutionary Algorithm (IBEA)) by employing four case studies from different domains: healthcare (i.e., cancer registry system from Cancer Registry of Norway (CRN)), Oil&amp;Gas (i.e., subsea production systems), warehouse (i.e., handling systems), and an open source case study named SEPA. Results show: 1) IBEA achieves the best performance among all the search algorithms and 2) the refactoring approach along with IBEA can manage to reduce on average 29.25% Complexity and 39% Coupling and improve 47.75% Cohesion, as compared to the original OCL constraint set from CRN. To further test the performance of SBORA, we also applied it to refactor an OCL constraint set specified on the UML 2.3 metamodel and we obtained encouraging results. Furthermore, we conducted a controlled experiment with 96 subjects and results show that the understandability and maintainability of the original constraint set can be improved significantly from the perspectives of the 96 participants of the controlled experiment.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 [Journal First] Automated Refactoring of OCL Constraints with Search 1516707895043 Hong Lu Simula Research Laboratory honglu@simula.no Shuai Wang Simula Research Laboratory shuai@simula.no Tao Yue Simula Research Laboratory tao@simula.no Shaukat Ali Simula Research Laboratory shaukat@simula.no Jan Nygard Cancer Registry of Norway Jan.Nygard@kreftregisteret.no Refactoring Search Object Constraint Language Object Constraint Language (OCL) constraints are typically used for providing precise semantics to models developed with the Unified Modeling Language (UML). When OCL constraints evolve in a regular basis, it is essential that they are easy to understand and maintain. For instance, in cancer registries, to ensure the quality of cancer data, more than one thousand medical rules are defined and evolve regularly. Such rules can be specified with OCL. It is, therefore, important to ensure the understandability and maintainability of medical rules specified with OCL. To tackle such a challenge, we propose an automated search-based OCL constraint refactoring approach (SBORA) by defining and applying three OCL quality metrics (Complexity, Coupling, and Cohesion) and four semantics-preserving refactoring operators (i.e., Context Change, Swap, Split and Merge) which are encoded as potential solutions for search algorithms. A solution is therefore an optimal sequence of refactoring operators, which are sequentially applied to the original set of OCL constraints to automatically obtain a semantically equivalent set of OCL constraints with better understandability and maintainability in terms of Complexity, Coupling, and Cohesion. We evaluate SBORA along with six commonly used multi-objective search algorithms (e.g., Indicator-Based Evolutionary Algorithm (IBEA)) by employing four case studies from different domains: healthcare (i.e., cancer registry system from Cancer Registry of Norway (CRN)), Oil&amp;Gas (i.e., subsea production systems), warehouse (i.e., handling systems), and an open source case study named SEPA. Results show: 1) IBEA achieves the best performance among all the search algorithms and 2) the refactoring approach along with IBEA can manage to reduce on average 29.25% Complexity and 39% Coupling and improve 47.75% Cohesion, as compared to the original OCL constraint set from CRN. To further test the performance of SBORA, we also applied it to refactor an OCL constraint set specified on the UML 2.3 metamodel and we obtained encouraging results. Furthermore, we conducted a controlled experiment with 96 subjects and results show that the understandability and maintainability of the original constraint set can be improved significantly from the perspectives of the 96 participants of the controlled experiment.",
              "pageNumber": 1243,
              "isPageNumberRoman": false
            },
            {
              "id": "51g1jNb8CS5dg0bsh0pW4A",
              "type": "authorPaper",
              "text": "Automatically Generating Search Heuristics for Concolic Testing",
              "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5k6pWQxBOWJa9S1UiZ2A2n/6sJ0ZusmvQqfPy9dyjzenc.pdf",
              "extraLocations": [],
              "authorNames": "Sooyoung Cha (Korea University), Seongjoon Hong (Korea University), Junhee Lee (Korea University), Hakjoo Oh (Korea University)",
              "abstract": "We present a technique to automatically generate search heuristics for concolic testing. A key challenge in concolic testing is how to effectively explore the program's execution paths to achieve high code coverage in a limited time budget. Concolic testing employs a search heuristic to address this challenge, which favors exploring particular types of paths that are most likely to maximize the final coverage. However, manually designing a good search heuristic is nontrivial and typically ends up with suboptimal and unstable outcomes. The goal of this paper is to overcome this shortcoming of concolic testing by automatically generating search heuristics. We define a class of search heuristics, namely a parameterized heuristic, and present an algorithm that efficiently finds an optimal heuristic for each subject program. Experimental results with open-source C programs show that our technique successfully generates search heuristics that significantly outperform existing manually-crafted heuristics in terms of branch coverage and bug-finding.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering ICSE 2018 Automatically Generating Search Heuristics for Concolic Testing 1517893018184 Sooyoung Cha Korea University sooyoungcha@korea.ac.kr Seongjoon Hong Korea University seongjoon@korea.ac.kr Junhee Lee Korea University junhee_lee@korea.ac.kr Hakjoo Oh Korea University hakjoo_oh@korea.ac.kr Software Testing Concolic Testing Search Heuristics We present a technique to automatically generate search heuristics for concolic testing. A key challenge in concolic testing is how to effectively explore the program's execution paths to achieve high code coverage in a limited time budget. Concolic testing employs a search heuristic to address this challenge, which favors exploring particular types of paths that are most likely to maximize the final coverage. However, manually designing a good search heuristic is nontrivial and typically ends up with suboptimal and unstable outcomes. The goal of this paper is to overcome this shortcoming of concolic testing by automatically generating search heuristics. We define a class of search heuristics, namely a parameterized heuristic, and present an algorithm that efficiently finds an optimal heuristic for each subject program. Experimental results with open-source C programs show that our technique successfully generates search heuristics that significantly outperform existing manually-crafted heuristics in terms of branch coverage and bug-finding.",
              "pageNumber": 1244,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        }
      ]
    },
    {
      "title": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings",
      "acronym": "ICSE-Companion",
      "year": 2018,
      "frontMatter": [
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_I",
          "text": "Title Page i",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4HkxJAVi6qXafWDJsd3BpV/2YXN4vckvLsX6kvlkS9v4N.pdf",
          "extraLocations": [],
          "pageNumber": 1,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_COPYRIGHT_PAGE",
          "text": "Copyright Page",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7nx56L9hViiyVpC6J1AwU1/6WSVqNU9r8EhlmhlBh9dRN.pdf",
          "extraLocations": [],
          "pageNumber": 3,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_III",
          "text": "Title Page iii",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7sZH5rmWOynkFd5zCQ9Tvz/7hjGHGCfkVS3aOprs4Gvwr.pdf",
          "extraLocations": [],
          "pageNumber": 4,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TABLE_OF_CONTENTS",
          "text": "Table of Contents",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/P6E0weFo0h6R85yJ3JXrz/7MKVpw6lNoRDKz4xdw5gzN.pdf",
          "extraLocations": [],
          "pageNumber": 5,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_GENERAL_CHAIR",
          "text": "Message from the General Chair",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1SoIipY5U72UdIYT5yujoV/6PEoZAjmVpmS9e2GpqbtxF.pdf",
          "extraLocations": [],
          "pageNumber": 27,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_SYMPOSIUM_CHAIR",
          "text": "Message from the 50 Years of Software Engineering Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1YCNE3kWKb2wQUd4x25Y9K/3rgQa2ipYIlZ9Ei5Mqs2Uf.pdf",
          "extraLocations": [],
          "pageNumber": 30,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Demonstrations Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Uf2KDVaAJJ5CsegFSZLsh/7rMYPjbwMwwK2dLAMJuMeB.pdf",
          "extraLocations": [],
          "pageNumber": 31,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_PROGRAM_COMMITTEE",
          "text": "Demonstrations Program Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3zK5GKowpZhsjsDrEE8pXB/5ZsvAgr48eWda3qv12vGT7.pdf",
          "extraLocations": [],
          "pageNumber": 32,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Poster Track Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1RfJNjtHTkVx6uXEbBIw8g/ntjcte1fgr6UmzUx0kJIP.pdf",
          "extraLocations": [],
          "pageNumber": 35,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Posters Program Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ds3qOCpWBXu7LWLJgXv2d/1i0yCsZPb2x7MOVNUK1DV8.pdf",
          "extraLocations": [],
          "pageNumber": 36,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Doctoral Symposium Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5YRVp3QTvvZfExFLMAR6cx/M6aH4RAUbNrrI5I4p2Y0Q.pdf",
          "extraLocations": [],
          "pageNumber": 37,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Doctoral Symposium Program Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/58TzCIgU6AsX7vRANlRuDu/9ezpMgIEXVJvesCY5GJ2Z.pdf",
          "extraLocations": [],
          "pageNumber": 38,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the ACM Student Research Competition Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/50pRpAYhlNT342aDps0qRQ/2NI5gyMK8aAC0GtAzBNuEY.pdf",
          "extraLocations": [],
          "pageNumber": 40,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "ACM Student Research Competition Program Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1MYgI766Il5pwthTndd4KC/1MTBMb5DwmrEiBo8i88LkF.pdf",
          "extraLocations": [],
          "pageNumber": 41,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Technical Briefings Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/kzuinlzNT8Vs6sXU6Noa5/1Xmoq4e7us6ybGtznXX9JT.pdf",
          "extraLocations": [],
          "pageNumber": 44,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Technical Briefings Program Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/j1ZdZVSd6UXKmtyt76S8I/6agM0s1qLZsZJWTyDbi4nN.pdf",
          "extraLocations": [],
          "pageNumber": 45,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Workshop Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4wTGHhzmxQEdk9NFLgt3ZY/3GiKFqhz835NAfarbDYAzE.pdf",
          "extraLocations": [],
          "pageNumber": 46,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Workshops Program Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7vpTHnE9NrmhIaMQAs5Ddk/4BOjO59AzIikCGDmWnhQZy.pdf",
          "extraLocations": [],
          "pageNumber": 47,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Industry Forum Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2J3bH4XhZBX8aial33B1yz/4SqQ1a4BSNwzmWYBExUTG8.pdf",
          "extraLocations": [],
          "pageNumber": 49,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the New Faculty Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7CDHFZQgCRs8PkVqu5Y8jc/1dWUXP9qqDOMIwWELrm5Tk.pdf",
          "extraLocations": [],
          "pageNumber": 51,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the  SCORE Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5GgzypPOJi4ZIk0Xxg7bQT/34SkVBAn2KG0QhJdDPwD2L.pdf",
          "extraLocations": [],
          "pageNumber": 52,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "SCORE Program Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/58iSiDhY16R5ldKH7uhQWj/40cUdgbiJI1AdxM0TkJqbf.pdf",
          "extraLocations": [],
          "pageNumber": 53,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Co-located Events Chair",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7cxOgUJ2JRDdz2RLT3UR9c/2hhgvQL2YYuZhY5sGt9kFM.pdf",
          "extraLocations": [],
          "pageNumber": 55,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the Remaining Chairs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dyqhCOn0x6eWUmDEdwB9R/55bxxV3iRToDwA5dSTHUuo.pdf",
          "extraLocations": [],
          "pageNumber": 56,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_ORGANIZING_COMMITTEE",
          "text": "ICSE 2018 Organizing Committee",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4VUCp2YFTEX1Sz5IV5t3ZE/3uA2OVzvint6mx9YF8KrEq.pdf",
          "extraLocations": [],
          "pageNumber": 59,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_SPONSORS_CONFERENCE_SUPPORT",
          "text": "ICSE 2018 Sponsors and Supporters",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Z0rzsaNxAAj3ssY3VnW5S/1XAo0eeVl8Ie60P6Hk3J6B.pdf",
          "extraLocations": [],
          "pageNumber": 63,
          "isPageNumberRoman": true
        }
      ],
      "backMatter": [
        {
          "class": "BM",
          "type": "BM_AUTHOR_INDEX",
          "text": "Author Index",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/58yBKyTuKKkhS2Se2Dslfd/Npk7FQvjnVQNoukJLEDmy.pdf",
          "extraLocations": [],
          "pageNumber": 555,
          "isPageNumberRoman": false
        },
        {
          "class": "BM",
          "type": "BM_ROSTER",
          "text": "Publisher's Information",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3WOEPNzU63HTgqfKnb4laJ/74O6bsU7ojAGuGUS1C2Crt.pdf",
          "extraLocations": [],
          "pageNumber": 566,
          "isPageNumberRoman": false
        }
      ],
      "sections": [
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Demonstrations",
          "lineItems": [],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Mining Repositories",
          "lineItems": [
            {
              "id": "3vYkOFoY5qvAKyQ3ZFaKxs",
              "type": "authorPaper",
              "text": "Perceval: Software Project Data at Your Will",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/74BfjuU7YgEDIGvOyOw2jn/3kyGXInAHq50ArWx3rxuYp.pdf",
              "extraLocations": [],
              "authorNames": "Santiago Dueñas (Bitergia), Valerio Cosentino (Bitergia), Gregorio Robles (Universidad Rey Juan Carlos), Jesus M. Gonzalez-Barahona (Universidad Rey Juan Carlos)",
              "abstract": "Software development projects, in particular open source ones, heavily rely on the use of tools to support, coordinate and promote development activities. Despite their paramount value, they contribute to fragment the project data, thus challenging practitioners and researchers willing to derive insightful analytics about software projects. In this demo we present Perceval, a loyal helper able to perform automatic and incremental data gathering from almost any tool related with contributing to open source development, among others, source code management, issue tracking systems, mailing lists, forums, and social media. Perceval is an industry strong free software tool that has been widely used in Bitergia, a company devoted to offer commercial software analytics of software projects. It hides the technical complexities related to data acquisition and eases the definition of analytics. A video showcasing the main features of Perceval can be found at https://youtu.be/eH1sYF0Hdc8.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Perceval: Software Project Data at Your Will 1518442290210 Santiago Dueñas Bitergia sduenas@bitergia.com Valerio Cosentino Bitergia valcos@bitergia.com Gregorio Robles Universidad Rey Juan Carlos grex@gsyc.urjc.es Jesus M. Gonzalez-Barahona Universidad Rey Juan Carlos jgb@gsyc.urjc.es software mining empirical software engineering open source software software development software analytics Software development projects, in particular open source ones, heavily rely on the use of tools to support, coordinate and promote development activities. Despite their paramount value, they contribute to fragment the project data, thus challenging practitioners and researchers willing to derive insightful analytics about software projects. In this demo we present Perceval, a loyal helper able to perform automatic and incremental data gathering from almost any tool related with contributing to open source development, among others, source code management, issue tracking systems, mailing lists, forums, and social media. Perceval is an industry strong free software tool that has been widely used in Bitergia, a company devoted to offer commercial software analytics of software projects. It hides the technical complexities related to data acquisition and eases the definition of analytics. A video showcasing the main features of Perceval can be found at https://youtu.be/eH1sYF0Hdc8.",
              "pageNumber": 1,
              "isPageNumberRoman": false
            },
            {
              "id": "5YRZT15P1L2ODYUMXRhB5Z",
              "type": "authorPaper",
              "text": "StackInTheFlow: Behavior-Driven Recommendation System for Stack Overflow Posts",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pf4TOr8bllxPRuTqJOtRM/4f96Fkhh4JVitpN6R8aBMb.pdf",
              "extraLocations": [],
              "authorNames": "Chase Greco (Virginia Commonwealth University), Tyler Haden (Virginia Commonwealth University), Kostadin Damevski (Virginia Commonwealth University)",
              "abstract": "Developer behavior in the IDE, including commands and events and complementing the active source code, provides useful context to in-IDE recommendation systems. This paper presents Stack-In The Flow, a tool that generates interpretable queries to Stack Overflow, and recommends Stack Overflow posts when a developer is observed to be facing difficulty, defined by encountering error messages or not appearing to make progress. StackInTheFlow monitors clicks on its retrieved results, and, over time, personalizes the retrieved posts to a specific set of Stack Overflow tags. Video: http://bit.ly/sitfdemo",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 StackInTheFlow: Behavior-Driven Recommendation System for Stack Overflow Posts 1518365110580 Chase Greco Virginia Commonwealth University grecocd@vcu.edu Tyler Haden Virginia Commonwealth University hadentj@vcu.edu Kostadin Damevski Virginia Commonwealth University kdamevski@vcu.edu Stack Overflow IDE recommendation system Developer behavior in the IDE, including commands and events and complementing the active source code, provides useful context to in-IDE recommendation systems. This paper presents Stack-In The Flow, a tool that generates interpretable queries to Stack Overflow, and recommends Stack Overflow posts when a developer is observed to be facing difficulty, defined by encountering error messages or not appearing to make progress. StackInTheFlow monitors clicks on its retrieved results, and, over time, personalizes the retrieved posts to a specific set of Stack Overflow tags. Video: http://bit.ly/sitfdemo",
              "pageNumber": 5,
              "isPageNumberRoman": false
            },
            {
              "id": "1lrK0agGHt88CXzzZ6AW7o",
              "type": "authorPaper",
              "text": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/18twSkKM4nZSiq4Z1PnB2P/5eXj8AdFfloU2dchJUeYi9.pdf",
              "extraLocations": [],
              "authorNames": "Zhongxin Liu (Zhejiang University), Qiao Huang (Zhejiang University), Xin Xia (Monash University), Emad Shihab (Concordia University), David Lo (Singapore Management University), Shanping Li (Zhejiang University)",
              "abstract": "In software projects, technical debt metaphor is used to describe the situation where developers and managers have to accept compromises in long-term software quality to achieve short-term goals. There are many types of technical debt, and self-admitted technical debt (SATD) was proposed recently to consider debt that is introduced intentionally (e.g., through temporary fix) and admitted by developers themselves. Previous work has shown that SATD can be successfully detected using source code comments. However, most current state-of-the-art approaches identify SATD comments through pattern matching, which achieve high precision but very low recall. That means they may miss many SATD comments and are not practical enough. In this paper, we propose SATD Detector, a tool that is able to (i) automatically detect SATD comments using text mining and (ii) highlight, list and manage detected comments in an integrated development environment (IDE). This tool consists of a Java library and an Eclipse plug-in. The Java library is the back-end, which provides command-line interfaces and Java APIs to re-train the text mining model using users' data and automatically detect SATD comments using either the build-in model or a user-specified model. The Eclipse plug-in, which is the front-end, first leverages our pre-trained composite classifier to detect SATD comments, and then highlights and marks these detected comments in the source code editor of Eclipse. In addition, the Eclipse plug-in provides a view in IDE which collects all detected comments for management. Demo URL: https://youtu.be/sn4gU2qhGm0 Java library download: https://git.io/vNdnY Eclipse plug-in download: https://goo.gl/ZzjBzp",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool 1518413263118 Zhongxin Liu Zhejiang University liu_zx@zju.edu.cn Qiao Huang Zhejiang University tkdsheep@zju.edu.cn Xin Xia Monash University xin.xia@monash.edu Emad Shihab Concordia University eshihab@encs.concordia.ca David Lo Singapore Management University davidlo@smu.edu.sg Shanping Li Zhejiang University shan@zju.edu.cn Self-admitted technical debt SATD detection Eclipse plug-in In software projects, technical debt metaphor is used to describe the situation where developers and managers have to accept compromises in long-term software quality to achieve short-term goals. There are many types of technical debt, and self-admitted technical debt (SATD) was proposed recently to consider debt that is introduced intentionally (e.g., through temporary fix) and admitted by developers themselves. Previous work has shown that SATD can be successfully detected using source code comments. However, most current state-of-the-art approaches identify SATD comments through pattern matching, which achieve high precision but very low recall. That means they may miss many SATD comments and are not practical enough. In this paper, we propose SATD Detector, a tool that is able to (i) automatically detect SATD comments using text mining and (ii) highlight, list and manage detected comments in an integrated development environment (IDE). This tool consists of a Java library and an Eclipse plug-in. The Java library is the back-end, which provides command-line interfaces and Java APIs to re-train the text mining model using users' data and automatically detect SATD comments using either the build-in model or a user-specified model. The Eclipse plug-in, which is the front-end, first leverages our pre-trained composite classifier to detect SATD comments, and then highlights and marks these detected comments in the source code editor of Eclipse. In addition, the Eclipse plug-in provides a view in IDE which collects all detected comments for management. Demo URL: https://youtu.be/sn4gU2qhGm0 Java library download: https://git.io/vNdnY Eclipse plug-in download: https://goo.gl/ZzjBzp",
              "pageNumber": 9,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Test Automation and Failure Diagnosis",
          "lineItems": [
            {
              "id": "4CdxI1tkXUx5h2BHsFXahC",
              "type": "authorPaper",
              "text": "Aletheia: A Failure Diagnosis Toolchain",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RuHKRW0D4nCqMWOQR7oTQ/5l0kvbcWGGmPFfiQv1YvL6.pdf",
              "extraLocations": [],
              "authorNames": "Mojdeh Golagha (Technical University of Munich), Abu Mohammed Raisuddin (Technical University of Munich), Lennart Mittag (Technical University of Munich), Dominik Hellhake (Technical University of Munich), Alexander Pretschner (Technical University of Munich)",
              "abstract": "Testing and debugging are time-consuming, tedious and costly. As many automated test generation tools are being applied in practice nowadays, there is a growing need for automated failure diagnosis. We introduce Aletheia, a failure diagnosis toolchain, which aims to help developers and testers reduce failure analysis time. The key ideas include: data generation to provide the relevant data for further analysis, failure clustering to group failing tests based on the hypothesized faults, and fault localization to pinpoint suspicious elements of the code. We evaluated Aletheia in a large-scale industrial case study as well as two open-source projects. Aletheia is released as an open-source tool on Github, and a demo video can be found at: https://youtu.be/BP9D68DO2ZI",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Aletheia: A Failure Diagnosis Toolchain 1518429627350 Mojdeh Golagha Technical University of Munich mojdeh.golagha@tum.de Abu Mohammed Raisuddin Technical University of Munich am.raisuddin@tum.de Lennart Mittag Technical University of Munich lennart.mittag@tum.de Dominik Hellhake Technical University of Munich dominik.hellhake@tum.de Alexander Pretschner Technical University of Munich alexander.pretschner@tum.de Hit spectra Failure clustering Fault localization Parallel debugging Testing and debugging are time-consuming, tedious and costly. As many automated test generation tools are being applied in practice nowadays, there is a growing need for automated failure diagnosis. We introduce Aletheia, a failure diagnosis toolchain, which aims to help developers and testers reduce failure analysis time. The key ideas include: data generation to provide the relevant data for further analysis, failure clustering to group failing tests based on the hypothesized faults, and fault localization to pinpoint suspicious elements of the code. We evaluated Aletheia in a large-scale industrial case study as well as two open-source projects. Aletheia is released as an open-source tool on Github, and a demo video can be found at: https://youtu.be/BP9D68DO2ZI",
              "pageNumber": 13,
              "isPageNumberRoman": false
            },
            {
              "id": "6Y7tiBsAUuyzkKBXAUcHhl",
              "type": "authorPaper",
              "text": "When the Testing Gets Tough, the Tough Get ElasTest",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf",
              "extraLocations": [],
              "authorNames": "Antonia Bertolino (CNR-ISTI), Antonello Calabró (CNR-ISTI), Guglielmo De Angelis (CNR-IASI), Micael Gallego (Universidad Rey Juan Carlos), Boni García (Universidad Rey Juan Carlos), Francisco Gortázar (Universidad Rey Juan Carlos)",
              "abstract": "We present ElasTest, an open-source generic and extensible platform supporting end-to-end testing of large complex cloud systems, including web, mobile, network and WebRTC applications. ElasTest is developed following a fully transparent and open agile process around which a community of developers, contributors and users is collected. We demonstrate ElasTest in action by testing the FullTeachingest application: the video is available from http://elastest.io/videos/icse2018-demo.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 When the Testing Gets Tough, the Tough Get ElasTest 1518170257569 Antonia Bertolino CNR-ISTI antonia.bertolino@isti.cnr.it Antonello Calabró CNR-ISTI antonello.calabro@isti.cnr.it Guglielmo De Angelis CNR-IASI guglielmo.deangelis@iasi.cnr.it Micael Gallego Universidad Rey Juan Carlos micael.gallego@urjc.es Boni García Universidad Rey Juan Carlos boni.garcia@urjc.es Francisco Gortázar Universidad Rey Juan Carlos francisco.gortazar@urjc.es Cloud Testing End-to-end testing Open-source test platform TaaS Test automation We present ElasTest, an open-source generic and extensible platform supporting end-to-end testing of large complex cloud systems, including web, mobile, network and WebRTC applications. ElasTest is developed following a fully transparent and open agile process around which a community of developers, contributors and users is collected. We demonstrate ElasTest in action by testing the FullTeachingest application: the video is available from http://elastest.io/videos/icse2018-demo.",
              "pageNumber": 17,
              "isPageNumberRoman": false
            },
            {
              "id": "2KZJMWq5HDGf9Y0wxgtNGL",
              "type": "authorPaper",
              "text": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf",
              "extraLocations": [],
              "authorNames": "Pietro Braione (University of Milano-Bicocca), Giovanni Denaro (University of Milano-Bicocca), Andrea Mattavelli (Imperial College London), Mauro Pezzè (University of Milano-Bicocca and Università della Svizzera italiana (USI))",
              "abstract": "Random and search-based test generators yield realistic test cases based on program APIs, but often miss structural test objectives that depend on non-trivial data structure instances; Whereas symbolic execution can precisely characterise those dependencies but does not compute method sequences to instantiate them. We present SUSHI, a high-coverage test case generator for programs with complex structured inputs. SUSHI leverages symbolic execution to generate path conditions that precisely describe the relationship between program paths and input data structures, and converts the path conditions into the fitness functions of search-based test generation problems. A solution for the search problem is a legal method sequence that instantiates the structured inputs to exercise the program paths identified by the path condition. Our experiments indicate that SUSHI can distinctively complement current automatic test generation tools.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 SUSHI: A Test Generator for Programs with Complex Structured Inputs 1518553040028 Pietro Braione University of Milano-Bicocca braione@disco.unimib.it Giovanni Denaro University of Milano-Bicocca denaro@disco.unimib.it Andrea Mattavelli Imperial College London amattave@imperial.ac.uk Mauro Pezzè University of Milano-Bicocca and Università della Svizzera italiana (USI) mauro.pezze@usi.ch Automatic test case generation Symbolic execution Search based software engineering Random and search-based test generators yield realistic test cases based on program APIs, but often miss structural test objectives that depend on non-trivial data structure instances; Whereas symbolic execution can precisely characterise those dependencies but does not compute method sequences to instantiate them. We present SUSHI, a high-coverage test case generator for programs with complex structured inputs. SUSHI leverages symbolic execution to generate path conditions that precisely describe the relationship between program paths and input data structures, and converts the path conditions into the fitness functions of search-based test generation problems. A solution for the search problem is a legal method sequence that instantiates the structured inputs to exercise the program paths identified by the path condition. Our experiments indicate that SUSHI can distinctively complement current automatic test generation tools.",
              "pageNumber": 21,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Mutation Testing",
          "lineItems": [
            {
              "id": "61PZFiaghfjBxQN8CeoO4H",
              "type": "authorPaper",
              "text": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf",
              "extraLocations": [],
              "authorNames": "Alex Groce (Northern Arizona University), Josie Holmes (Northern Arizona University), Darko Marinov (University of Illinois at Urbana-Champaign), August Shi (University of Illinois at Urbana-Champaign), Lingming Zhang (The University of Texas at Dallas)",
              "abstract": "Mutation testing is widely used in research (even if not in practice). Mutation testing tools usually target only one programming language and rely on parsing a program to generate mutants, or operate not at the source level but on compiled bytecode. Unfortunately, developing a robust mutation testing tool for a new language in this paradigm is a difficult and time-consuming undertaking. Moreover, bytecode/intermediate language mutants are difficult for programmers to read and understand. This paper presents a simple tool, called universalmutator, based on regular-expression-defined transformations of source code. The primary drawback of such an approach is that our tool can generate invalid mutants that do not compile, and sometimes fails to generate mutants that a parser-based tool would have produced. Additionally, it is incompatible with some approaches to improving the efficiency of mutation testing. However, the regexp-based approach provides multiple compensating advantages. First, our tool is easy to adapt to new languages; e.g., we present here the first mutation tool for Apple's Swift programming language. Second, the method makes handling multi-language programs and systems simple, because the same tool can support every language. Finally, our approach makes it easy for users to add custom, project-specific mutations.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation 1518719564817 Alex Groce Northern Arizona University agroce@gmail.com Josie Holmes Northern Arizona University Josie.Holmes@nau.edu Darko Marinov University of Illinois at Urbana-Champaign marinov@illinois.edu August Shi University of Illinois at Urbana-Champaign awshi2@illinois.edu Lingming Zhang The University of Texas at Dallas lingming.zhang@utdallas.edu mutation testing multi language tools regular expressions Mutation testing is widely used in research (even if not in practice). Mutation testing tools usually target only one programming language and rely on parsing a program to generate mutants, or operate not at the source level but on compiled bytecode. Unfortunately, developing a robust mutation testing tool for a new language in this paradigm is a difficult and time-consuming undertaking. Moreover, bytecode/intermediate language mutants are difficult for programmers to read and understand. This paper presents a simple tool, called universalmutator, based on regular-expression-defined transformations of source code. The primary drawback of such an approach is that our tool can generate invalid mutants that do not compile, and sometimes fails to generate mutants that a parser-based tool would have produced. Additionally, it is incompatible with some approaches to improving the efficiency of mutation testing. However, the regexp-based approach provides multiple compensating advantages. First, our tool is easy to adapt to new languages; e.g., we present here the first mutation tool for Apple's Swift programming language. Second, the method makes handling multi-language programs and systems simple, because the same tool can support every language. Finally, our approach makes it easy for users to add custom, project-specific mutations.",
              "pageNumber": 25,
              "isPageNumberRoman": false
            },
            {
              "id": "26np5vfzuC301fnu2a4VOY",
              "type": "authorPaper",
              "text": "MuAlloy: A Mutation Testing Framework for Alloy",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/59E9M3V6eFFIvIOWOXuyIm/6ju1rp9I2F1kBYPo3sV6sE.pdf",
              "extraLocations": [],
              "authorNames": "Kaiyuan Wang (University of Texas at Austin), Allison Sullivan (University of Texas at Austin), Sarfraz Khurshid (University of Texas at Austin)",
              "abstract": "Creating models of software systems and analyzing the models helps develop more reliable systems. A well-known software modeling tool-set is embodied by the declarative language Alloy and its automatic SAT-based analyzer. Recent work introduced a novel approach to testing Alloy models to validate their correctness in the spirit of traditional software testing: AUnit defined the foundations of testing (unit tests, test execution, and model coverage) for Alloy, and MuAlloy defined mutation testing (mutation operators, mutant generation, and equivalent mutant checking) for Alloy. This tool paper describes our Java implementation of MuAlloy, which is a command-line tool that we released as an open-source project on GitHub. Our experimental results show that MuAlloy is efficient and practical. The demo video for MuAlloy can be found at https://youtu.be/3lvnQKiLcLE.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 MuAlloy: A Mutation Testing Framework for Alloy 1518209382875 Kaiyuan Wang University of Texas at Austin kaiyuanw@utexas.edu Allison Sullivan University of Texas at Austin allisonksullivan@utexas.edu Sarfraz Khurshid University of Texas at Austin khurshid@utexas.edu Alloy Mutation Testing AUnit MuAlloy Creating models of software systems and analyzing the models helps develop more reliable systems. A well-known software modeling tool-set is embodied by the declarative language Alloy and its automatic SAT-based analyzer. Recent work introduced a novel approach to testing Alloy models to validate their correctness in the spirit of traditional software testing: AUnit defined the foundations of testing (unit tests, test execution, and model coverage) for Alloy, and MuAlloy defined mutation testing (mutation operators, mutant generation, and equivalent mutant checking) for Alloy. This tool paper describes our Java implementation of MuAlloy, which is a command-line tool that we released as an open-source project on GitHub. Our experimental results show that MuAlloy is efficient and practical. The demo video for MuAlloy can be found at https://youtu.be/3lvnQKiLcLE.",
              "pageNumber": 29,
              "isPageNumberRoman": false
            },
            {
              "id": "1vJNhGwrB5awMlQSGC5yp0",
              "type": "authorPaper",
              "text": "MDroid+: A Mutation Testing Framework for Android",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf",
              "extraLocations": [],
              "authorNames": "Kevin Moran (College of William & Mary), Michele Tufano (College of William & Mary), Carlos Bernal-Cárdenas (College of William & Mary), Mario Linares-Vásquez (Universidad de los Andes), Gabriele Bavota (Università della Svizzera Italiana), Christopher Vendome (College of William & Mary), Massimiliano Di Penta (University of Sannio), Denys Poshyvanyk (College of William & Mary)",
              "abstract": "Mutation testing has shown great promise in assessing the effectiveness of test suites while exhibiting additional applications to test-case generation, selection, and prioritization. Traditional mutation testing typically utilizes a set of simple language specific source code transformations, called operators, to introduce faults. However, empirical studies have shown that for mutation testing to be most effective, these simple operators must be augmented with operators specific to the domain of the software under test. One challenging software domain for the application of mutation testing is that of mobile apps. While mobile devices and accompanying apps have become a mainstay of modern computing, the frameworks and patterns utilized in their development make testing and verification particularly difficult. As a step toward helping to measure and ensure the effectiveness of mobile testing practices, we introduce MDroid+, an automated framework for mutation testing of Android apps. MDroid+ includes 38 mutation operators from ten empirically derived types of Android faults and has been applied to generate over 8,000 mutants for more than 50 apps.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 MDroid+: A Mutation Testing Framework for Android 1518496934795 Kevin Moran College of William & Mary kpmoran@cs.wm.edu Michele Tufano College of William & Mary mtufano@email.wm.edu Carlos Bernal-Cárdenas College of William & Mary cebernal@cs.wm.edu Mario Linares-Vásquez Universidad de los Andes m.linaresv@uniandes.edu.co Gabriele Bavota Università della Svizzera Italiana gabriele.bavota@usi.ch Christopher Vendome College of William & Mary cgvendome@email.wm.edu Massimiliano Di Penta University of Sannio dipenta@unisannio.it Denys Poshyvanyk College of William & Mary denys@cs.wm.edu Android Mutation MDroid+ Empirical Apps Mutation testing has shown great promise in assessing the effectiveness of test suites while exhibiting additional applications to test-case generation, selection, and prioritization. Traditional mutation testing typically utilizes a set of simple language specific source code transformations, called operators, to introduce faults. However, empirical studies have shown that for mutation testing to be most effective, these simple operators must be augmented with operators specific to the domain of the software under test. One challenging software domain for the application of mutation testing is that of mobile apps. While mobile devices and accompanying apps have become a mainstay of modern computing, the frameworks and patterns utilized in their development make testing and verification particularly difficult. As a step toward helping to measure and ensure the effectiveness of mobile testing practices, we introduce MDroid+, an automated framework for mutation testing of Android apps. MDroid+ includes 38 mutation operators from ten empirically derived types of Android faults and has been applied to generate over 8,000 mutants for more than 50 apps.",
              "pageNumber": 33,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Performance and NFR",
          "lineItems": [
            {
              "id": "58Xnf6jdeY8MSo8JzFhW4W",
              "type": "authorPaper",
              "text": "The Palladio-Bench for Modeling and Simulating Software Architectures",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf",
              "extraLocations": [],
              "authorNames": "Robert Heinrich (Karlsruhe Institute of Technology), Dominik Werle (Karlsruhe Institute of Technology), Heiko Klare (Karlsruhe Institute of Technology), Ralf Reussner (Karlsruhe Institute of Technology), Max Kramer (Karlsruhe Institute of Technology), Steffen Becker (University of Stuttgart), Jens Happe (avenyou GmbH), Heiko Koziolek (ABB Corporate Research), Klaus Krogmann (LogMeIn)",
              "abstract": "Software designers often lack an understanding of the effects of design decisions on quality properties of their software. This results in costly and time-consuming trial-and-error testing, delayed and complicated rollouts of the software. In this tool demonstration paper we present an integrated tool environment – the Palladio-Bench – for modeling and analyzing software architectures. The analysis results provided by Palladio support making design decisions by identifying the best-suited design from a set of given alternatives. The demonstration video for the Palladio-Bench can be found at the URL https://youtu.be/vG7WQPcp-uI.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 The Palladio-Bench for Modeling and Simulating Software Architectures 1517920176566 Robert Heinrich Karlsruhe Institute of Technology heinrich@kit.edu Dominik Werle Karlsruhe Institute of Technology dominik.werle@kit.edu Heiko Klare Karlsruhe Institute of Technology heiko.klare@kit.edu Ralf Reussner Karlsruhe Institute of Technology reussner@kit.edu Max Kramer Karlsruhe Institute of Technology max.kramer@kit.edu Steffen Becker University of Stuttgart steffen.becker@informatik.uni-stuttgart.de Jens Happe avenyou GmbH jens.happe@avenyou.com Heiko Koziolek ABB Corporate Research heiko.koziolek@de.abb.com Klaus Krogmann LogMeIn klaus.krogmann@logmein.com Software Architecture Quality Modeling Simulation Software designers often lack an understanding of the effects of design decisions on quality properties of their software. This results in costly and time-consuming trial-and-error testing, delayed and complicated rollouts of the software. In this tool demonstration paper we present an integrated tool environment – the Palladio-Bench – for modeling and analyzing software architectures. The analysis results provided by Palladio support making design decisions by identifying the best-suited design from a set of given alternatives. The demonstration video for the Palladio-Bench can be found at the URL https://youtu.be/vG7WQPcp-uI.",
              "pageNumber": 37,
              "isPageNumberRoman": false
            },
            {
              "id": "7uVWm3x9LkxjYMnFIFW58g",
              "type": "authorPaper",
              "text": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf",
              "extraLocations": [],
              "authorNames": "Jürgen Cito (University of Zurich), Philipp Leitner (Chalmers University of Gothenburg), Christian Bosshard (ergon Informatik AG), Markus Knecht (University of Zurich), Genc Mazlami (zühlke Engineering), Harald C. Gall (University of Zurich)",
              "abstract": "Performance problems observed in production environments that have their origin in program code are immensely hard to localize and prevent. Data that can help solve such problems is usually found in external dashboards and is thus not integrated into the software development process. We propose an approach that augments source code with runtime traces to tightly integrate runtime performance traces into developer workflows. Our goal is to create operational awareness of performance problems in developers' code and contextualize this information to tasks they are currently working on. We implemented this approach as an Eclipse IDE plugin for Java applications that is available as an open source project on GitHub. A video of PerformanceHat in action is online: https://youtu.be/fTBBiylRhag",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE 1518465768504 Jürgen Cito University of Zurich cito@ifi.uzh.ch Philipp Leitner Chalmers University of Gothenburg philipp.leitner@chalmers.se Christian Bosshard ergon Informatik AG bosshardchr@gmail.com Markus Knecht University of Zurich markus.knecht2@uzh.ch Genc Mazlami zühlke Engineering gmazllami@gmail.com Harald C. Gall University of Zurich gall@ifi.uzh.ch software performance engineering program analysis development workflow Performance problems observed in production environments that have their origin in program code are immensely hard to localize and prevent. Data that can help solve such problems is usually found in external dashboards and is thus not integrated into the software development process. We propose an approach that augments source code with runtime traces to tightly integrate runtime performance traces into developer workflows. Our goal is to create operational awareness of performance problems in developers' code and contextualize this information to tasks they are currently working on. We implemented this approach as an Eclipse IDE plugin for Java applications that is available as an open source project on GitHub. A video of PerformanceHat in action is online: https://youtu.be/fTBBiylRhag",
              "pageNumber": 41,
              "isPageNumberRoman": false
            },
            {
              "id": "vRM5k2xUYkPhObqfezYvV",
              "type": "authorPaper",
              "text": "PROMOpedi: A Web-Content Management-Based Encyclopedia of Software Property Models",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/L9r824WbXdkeD6HOUfjkp/1ic6DVpAntnIwbUz0tL4zI.pdf",
              "extraLocations": [],
              "authorNames": "Séverine Sentilles (Mälardalen University), Federico Ciccozzi (Mälardalen University), Efi Papatheocharous (RISE SICS)",
              "abstract": "The way software properties are defined, described, and measured, is different across different domains. When addressing these properties, several challenges commonly emerge, among which: synonymity, polysemy, paronymy, incomplete and inconsistent specification. In this paper we introduce PROMOpedia, an online encyclopedia, to tackle these challenges. PROMOpedia uses a web-content management system coupled with crowd-sourcing of scientific contents related to properties and their evaluation methods. The core concepts of PROMOpedia are built upon a property models ontology previously proposed by the authors, and is intended to target the needs of both researchers and practitioners. Website: http://www.mrtc.mdh.se/promopedia/",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 PROMOpedi: A Web-Content Management-Based Encyclopedia of Software Property Models 1518343238258 Séverine Sentilles Mälardalen University severine.sentilles@mdh.se Federico Ciccozzi Mälardalen University federico.ciccozzi@mdh.se Efi Papatheocharous RISE SICS efi.papatheocharous@ri.se extra functional properties software quality information system web content management system crowdsourcing The way software properties are defined, described, and measured, is different across different domains. When addressing these properties, several challenges commonly emerge, among which: synonymity, polysemy, paronymy, incomplete and inconsistent specification. In this paper we introduce PROMOpedia, an online encyclopedia, to tackle these challenges. PROMOpedia uses a web-content management system coupled with crowd-sourcing of scientific contents related to properties and their evaluation methods. The core concepts of PROMOpedia are built upon a property models ontology previously proposed by the authors, and is intended to target the needs of both researchers and practitioners. Website: http://www.mrtc.mdh.se/promopedia/",
              "pageNumber": 45,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Evolution",
          "lineItems": [
            {
              "id": "7mB5O4fagDc5xOmZt2pwdN",
              "type": "authorPaper",
              "text": "GuideGen - A Tool for Keeping Requirements and Acceptance Tests Aligned",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/tiBFuIRCFc0O11vg75g6O/5E7xunX7Xo0JsCChdM9dA0.pdf",
              "extraLocations": [],
              "authorNames": "Sofija Hotomski (University of Zurich), Martin Glinz (University of Zurich)",
              "abstract": "When changes in requirements occur, their associated tests must be adapted accordingly in order to maintain the quality of the evolving system. In practice, inconsistencies in requirements and acceptance tests—together with poor communication of changes—lead to software quality problems, unintended costs and project delays. We are developing GuideGen, a tool that helps requirements engineers, testers and other involved parties keep requirements and acceptance tests aligned. When requirements change, GuideGen analyzes the changes, automatically generates guidance on how to adapt the affected acceptance tests, and sends this information to subscribed parties. GuideGen also flags all non-aligned acceptance tests, thus keeping stakeholders aware of mismatches between requirements and acceptance tests. We evaluated GuideGen with data from three companies. For 262non-trivial changes of requirements, the suggestions generated by GuideGen were correct in more than 80 percent of the cases for agile requirements and about 67 percent for traditional ones. Demo video: https://vimeo.com/254865530",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 GuideGen - A Tool for Keeping Requirements and Acceptance Tests Aligned 1518270343861 Sofija Hotomski University of Zurich hotomski@ifi.uzh.ch Martin Glinz University of Zurich glinz@ifi.uzh.ch Software notations and tools Requirements analysis Acceptance testing Software evolution When changes in requirements occur, their associated tests must be adapted accordingly in order to maintain the quality of the evolving system. In practice, inconsistencies in requirements and acceptance tests—together with poor communication of changes—lead to software quality problems, unintended costs and project delays. We are developing GuideGen, a tool that helps requirements engineers, testers and other involved parties keep requirements and acceptance tests aligned. When requirements change, GuideGen analyzes the changes, automatically generates guidance on how to adapt the affected acceptance tests, and sends this information to subscribed parties. GuideGen also flags all non-aligned acceptance tests, thus keeping stakeholders aware of mismatches between requirements and acceptance tests. We evaluated GuideGen with data from three companies. For 262non-trivial changes of requirements, the suggestions generated by GuideGen were correct in more than 80 percent of the cases for agile requirements and about 67 percent for traditional ones. Demo video: https://vimeo.com/254865530",
              "pageNumber": 49,
              "isPageNumberRoman": false
            },
            {
              "id": "6KPz5UJ5tlFIaAAvCme33o",
              "type": "authorPaper",
              "text": "EVA: A Tool for Visualizing Software Architectural Evolution",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/XqdAJt5foJjAS6rm5WZXo/5DWH80u2EkVBTZfxOPvVG3.pdf",
              "extraLocations": [],
              "authorNames": "Daye Nam (University of Southern California), Youn Kyu Lee (University of Southern California), Nenad Medvidovic (University of Southern California)",
              "abstract": "EVA is a tool for visualizing and exploring architectures of evolving, long-lived software systems. EVA enables its users to assess the impact of architectural design decisions and their systems' overall architectural stability. (Demo Video: https://youtu.be/Q3bnIQz13Eo)",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 EVA: A Tool for Visualizing Software Architectural Evolution 1518418806976 Daye Nam University of Southern California dayenam@usc.edu Youn Kyu Lee University of Southern California younkyul@usc.edu Nenad Medvidovic University of Southern California neno@usc.edu Software architecture Software evolution Software visualization EVA is a tool for visualizing and exploring architectures of evolving, long-lived software systems. EVA enables its users to assess the impact of architectural design decisions and their systems' overall architectural stability. (Demo Video: https://youtu.be/Q3bnIQz13Eo)",
              "pageNumber": 53,
              "isPageNumberRoman": false
            },
            {
              "id": "3Oe7gcTOXBF2q72dzUrGE9",
              "type": "authorPaper",
              "text": "CSlicerCloud: A Web-Based Semantic History Slicing Framework",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7Yn83TiytMgtUpghw9e6M/3Htwf6zDJNCLarJZ9SUyf7.pdf",
              "extraLocations": [],
              "authorNames": "Yi Li (University of Toronto), Chenguang Zhu (The University of Texas at Austin), Julia Rubin (The University of British Columbia), Marsha Chechik (University of Toronto)",
              "abstract": "Traditional commit-based sequential organization of software version histories is insufficient for many development tasks which require high-level, semantic understanding of program functionality, such as porting features or cutting new releases. Semantic history slicing is a technique which uses well-organized unit tests as identifiers for corresponding software functionalities and extracts a set of commits that correspond to a specific high-level functionality. In this paper, we present CSlicerCloud, a Web-based semantic history slicing service tailored for Java projects hosted on GitHub. It is accessible through Web browsers and powered in the backend by a collection of history slicing techniques underneath. We evaluated CSlicerCloud on a dataset containing developer-annotated change histories collected from 10 open source software projects. A video demonstration which showcases the main features of CSlicerCloud can be found at https://youtu.be/7kcswA0bQzo.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 CSlicerCloud: A Web-Based Semantic History Slicing Framework 1518400386432 Yi Li University of Toronto liyi@cs.toronto.edu Chenguang Zhu The University of Texas at Austin cgzhu@utexas.edu Julia Rubin The University of British Columbia mjulia@ece.ubc.ca Marsha Chechik University of Toronto chechik@cs.toronto.edu version histories software evolution program semantics Traditional commit-based sequential organization of software version histories is insufficient for many development tasks which require high-level, semantic understanding of program functionality, such as porting features or cutting new releases. Semantic history slicing is a technique which uses well-organized unit tests as identifiers for corresponding software functionalities and extracts a set of commits that correspond to a specific high-level functionality. In this paper, we present CSlicerCloud, a Web-based semantic history slicing service tailored for Java projects hosted on GitHub. It is accessible through Web browsers and powered in the backend by a collection of history slicing techniques underneath. We evaluated CSlicerCloud on a dataset containing developer-annotated change histories collected from 10 open source software projects. A video demonstration which showcases the main features of CSlicerCloud can be found at https://youtu.be/7kcswA0bQzo.",
              "pageNumber": 57,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Testing Vulnerabilities",
          "lineItems": [
            {
              "id": "6Z1CyyUAHf8gyu7LIZlhrz",
              "type": "authorPaper",
              "text": "SAFL: Increasing and Accelerating Testing Coverage with Symbolic Execution and Guided Fuzzing",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2wQFOHJU5QY1aSNGOj5WlU/69TdWrHG4oqQst002X2U7L.pdf",
              "extraLocations": [],
              "authorNames": "Mingzhe Wang (Tsinghua University), Jie Liang (Tsinghua University), Yuanliang Chen (Tsinghua University), Yu Jiang (Tsinghua University), Xun Jiao (University of California San Diego), Han Liu (Tsinghua University), Xi Bin Zhao (National Engineering Research Center for Enterprise informatization), Jiaguang Sun (Tsinghua University)",
              "abstract": "Mutation-based fuzzing is a widely used software testing technique for bug and vulnerability detection, and the testing performance is greatly affected by the quality of initial seeds and the effectiveness of mutation strategy. In this paper, we present SAFL, an efficient fuzzing testing tool augmented with qualified seed generation and efficient coverage-directed mutation. First, symbolic execution is used in a lightweight approach to generate qualified initial seeds. Valuable explore directions are learned from the seeds, thus the later fuzzing process can reach deep paths in program state space earlier and easier. Moreover, we implement a fair and fast coverage-directed mutation algorithm. It helps the fuzzing process to exercise rare and deep paths with higher probability. We implement SAFL based on KLEE and AFL and conduct thoroughly repeated evaluations on real-world program benchmarks against state-of-the-art versions of AFL. After 24 hours, compared to AFL and AFLFast, it discovers 214% and 133% more unique crashes, covers 109% and 63% more paths and achieves 279% and 180% more covered branches. Video link: https://youtu.be/LkiFLNMBhVE",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 SAFL: Increasing and Accelerating Testing Coverage with Symbolic Execution and Guided Fuzzing 1517276369061 Mingzhe Wang Tsinghua University wmzhere@gmail.com Jie Liang Tsinghua University liangjie.mailbox.cn@gmail.com Yuanliang Chen Tsinghua University chenyuan17@mails.tsinghua.edu.cn Yu Jiang Tsinghua University jiangyu198964@126.com Xun Jiao University of California San Diego xunjiao13@ucsd.edu Han Liu Tsinghua University liuhan0518@163.com Xi Bin Zhao National Engineering Research Center for Enterprise informatization zxb@tsinghua.edu.cn Jiaguang Sun Tsinghua University sunjiaguang@126.com Symbolic execution Greybox fuzzing Software testing Mutation-based fuzzing is a widely used software testing technique for bug and vulnerability detection, and the testing performance is greatly affected by the quality of initial seeds and the effectiveness of mutation strategy. In this paper, we present SAFL, an efficient fuzzing testing tool augmented with qualified seed generation and efficient coverage-directed mutation. First, symbolic execution is used in a lightweight approach to generate qualified initial seeds. Valuable explore directions are learned from the seeds, thus the later fuzzing process can reach deep paths in program state space earlier and easier. Moreover, we implement a fair and fast coverage-directed mutation algorithm. It helps the fuzzing process to exercise rare and deep paths with higher probability. We implement SAFL based on KLEE and AFL and conduct thoroughly repeated evaluations on real-world program benchmarks against state-of-the-art versions of AFL. After 24 hours, compared to AFL and AFLFast, it discovers 214% and 133% more unique crashes, covers 109% and 63% more paths and achieves 279% and 180% more covered branches. Video link: https://youtu.be/LkiFLNMBhVE",
              "pageNumber": 61,
              "isPageNumberRoman": false
            },
            {
              "id": "7agOOyZ40dM36gWqXsNdLv",
              "type": "authorPaper",
              "text": "ReGuard: Finding Reentrancy Bugs in Smart Contracts",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dFTki9Ml83quzEQotDNy1/3g3bfAaS3Z85gdgD6MnCrF.pdf",
              "extraLocations": [],
              "authorNames": "Chao Liu (Peking University), Han Liu (Tsinghua University), Zhao Cao (Chieftin Lab), Zhong Chen (Peking University), Bangdao Chen (Chieftin Lab), Bill Roscoe (Chieftin Lab)",
              "abstract": "Smart contracts enabled a new way to perform cryptocurrency transactions over blockchains. While this emerging technique introduces free-of-con?icts and transparency, smart contract itself is vulnerable. As a special form of computer program, smart contract can hardly get rid of bugs. Even worse, an exploitable security bug can lead to catastrophic consequences, e.g., loss of cryptocurrency/money. In this demo paper, we focus on the most common type of security bugs in smart contracts, i.e., reentrancy bug, which caused the famous DAO attack with a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based analyzer to automatically detect reentrancy bugs in Ethereum smart contracts. Specifically, ReGuard performs fuzz testing on smart contracts by iteratively generating random but diverse transactions. Based on the runtime traces, ReGuard further dynamically identifes reentrancy vulnerabilities. In the preliminary evaluation, we have analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7 previously unreported reentrancy bugs. A demo video of ReGuard is at https://youtu.be/XxJ3_-cmUiY.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 ReGuard: Finding Reentrancy Bugs in Smart Contracts 1518342682820 Chao Liu Peking University liuchao_cs@pku.edu.cn Han Liu Tsinghua University liuhan2017@mail.tsinghua.edu.cn Zhao Cao Chieftin Lab caochao_1121@protonmail.com Zhong Chen Peking University chenzhong_1121@protonmail.com Bangdao Chen Chieftin Lab bangdao_1121@protonmail.com Bill Roscoe Chieftin Lab bill_1121@protonmail.com smart contract reentrancy bug dynamic analysis Smart contracts enabled a new way to perform cryptocurrency transactions over blockchains. While this emerging technique introduces free-of-con?icts and transparency, smart contract itself is vulnerable. As a special form of computer program, smart contract can hardly get rid of bugs. Even worse, an exploitable security bug can lead to catastrophic consequences, e.g., loss of cryptocurrency/money. In this demo paper, we focus on the most common type of security bugs in smart contracts, i.e., reentrancy bug, which caused the famous DAO attack with a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based analyzer to automatically detect reentrancy bugs in Ethereum smart contracts. Specifically, ReGuard performs fuzz testing on smart contracts by iteratively generating random but diverse transactions. Based on the runtime traces, ReGuard further dynamically identifes reentrancy vulnerabilities. In the preliminary evaluation, we have analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7 previously unreported reentrancy bugs. A demo video of ReGuard is at https://youtu.be/XxJ3_-cmUiY.",
              "pageNumber": 65,
              "isPageNumberRoman": false
            },
            {
              "id": "1NWUdGnEC2lAEY7wz7PEGD",
              "type": "authorPaper",
              "text": "Weak-Assert: A Weakness-Oriented Assertion Recommendation Toolkit for Program Analysis",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6wHKrC9nn3wmYB20hFTiuW/5Tl0zuxP7CFvCY4qWXe0ge.pdf",
              "extraLocations": [],
              "authorNames": "Cong Wang (Tsinghua University), Yu Jiang (Tsinghua University), Xibin Zhao (Tsinghua University), Xiaoyu Song (Department of Electrical and Computer Engineering), Ming Gu (Tsinghua University), Jiaguang Sun (Tsinghua University)",
              "abstract": "Assertions are helpful in program analysis, such as software testing and verification. The most challenging part of automatically recommending assertions is to design the assertion patterns and to insert assertions in proper locations. In this paper, we develop Weak-Assert, a weakness-oriented assertion recommendation toolkit for program analysis of C code. A weakness-oriented assertion is an assertion which can help to find potential program weaknesses. Weak-Assert uses well-designed patterns to match the abstract syntax trees of source code automatically. It collects significant messages from trees and inserts assertions into proper locations of programs. These assertions can be checked by using program analysis techniques. The experiments are set up on Juliet test suite and several actual projects in Github. Experimental results show that Weak-Assert helps to find 125 program weaknesses in 26 actual projects. These weaknesses are confirmed manually to be triggered by some test cases.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Weak-Assert: A Weakness-Oriented Assertion Recommendation Toolkit for Program Analysis 1517366394122 Cong Wang Tsinghua University wangcong15@mails.tsinghua.edu.cn Yu Jiang Tsinghua University jiangyu198964@126.com Xibin Zhao Tsinghua University zxb@tsinghua.edu.cn Xiaoyu Song Department of Electrical and Computer Engineering songx@pdx.edu Ming Gu Tsinghua University guming@mail.tsinghua.edu.cn Jiaguang Sun Tsinghua University sunjg@tsinghua.edu.cn assertion recommendation program weakness formal program verifcation program testing Assertions are helpful in program analysis, such as software testing and verification. The most challenging part of automatically recommending assertions is to design the assertion patterns and to insert assertions in proper locations. In this paper, we develop Weak-Assert, a weakness-oriented assertion recommendation toolkit for program analysis of C code. A weakness-oriented assertion is an assertion which can help to find potential program weaknesses. Weak-Assert uses well-designed patterns to match the abstract syntax trees of source code automatically. It collects significant messages from trees and inserts assertions into proper locations of programs. These assertions can be checked by using program analysis techniques. The experiments are set up on Juliet test suite and several actual projects in Github. Experimental results show that Weak-Assert helps to find 125 program weaknesses in 26 actual projects. These weaknesses are confirmed manually to be triggered by some test cases.",
              "pageNumber": 69,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "SPLs and OO Repair",
          "lineItems": [
            {
              "id": "5PNOFR0hi3a4PGi0wltGWM",
              "type": "authorPaper",
              "text": "KernelHaven – An Experimentation Workbench for Analyzing Software Product Lines",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1u3wyx5jiA23CCfzXCQ5Pi/34GYtfvoAfVYrBIyxSbmf6.pdf",
              "extraLocations": [],
              "authorNames": "Christian Kröher (University of Hildesheim), Sascha El-Sharkawy (University of Hildesheim), Klaus Schmid (University of Hildesheim)",
              "abstract": "Systematic exploration of hypotheses is a major part of any empirical research. In software engineering, we often produce unique tools for experiments and evaluate them independently on different data sets. In this paper, we present KernelHaven as an experimentation workbench supporting a significant number of experiments in the domain of static product line analysis and verification. It addresses the need for extracting information from a variety of artifacts in this domain by means of an open plug-in infrastructure. Available plug-ins encapsulate existing tools, which can now be combined efficiently to yield new analyses. As an experimentation workbench, it provides configuration-based definitions of experiments, their documentation, and technical services, like parallelization and caching. Hence, researchers can abstract from technical details and focus on the algorithmic core of their research problem. KernelHaven supports different types of analyses, like correctness checks, metrics, etc., in its specific domain. The concepts presented in this paper can also be transferred to support researchers of other software engineering domains. The infrastructure is available under Apache 2.0: https://github.com/KernelHaven. The plug-ins are available under their individual licenses.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 KernelHaven – An Experimentation Workbench for Analyzing Software Product Lines 1518107755476 Christian Kröher University of Hildesheim kroeher@sse.uni-hildesheim.de Sascha El-Sharkawy University of Hildesheim elscha@sse.uni-hildesheim.de Klaus Schmid University of Hildesheim schmid@sse.uni-hildesheim.de Software product line analysis variability extraction static analysis empirical software engineering Systematic exploration of hypotheses is a major part of any empirical research. In software engineering, we often produce unique tools for experiments and evaluate them independently on different data sets. In this paper, we present KernelHaven as an experimentation workbench supporting a significant number of experiments in the domain of static product line analysis and verification. It addresses the need for extracting information from a variety of artifacts in this domain by means of an open plug-in infrastructure. Available plug-ins encapsulate existing tools, which can now be combined efficiently to yield new analyses. As an experimentation workbench, it provides configuration-based definitions of experiments, their documentation, and technical services, like parallelization and caching. Hence, researchers can abstract from technical details and focus on the algorithmic core of their research problem. KernelHaven supports different types of analyses, like correctness checks, metrics, etc., in its specific domain. The concepts presented in this paper can also be transferred to support researchers of other software engineering domains. The infrastructure is available under Apache 2.0: https://github.com/KernelHaven. The plug-ins are available under their individual licenses.",
              "pageNumber": 73,
              "isPageNumberRoman": false
            },
            {
              "id": "7rdVqde9230Q03EZuXKMYZ",
              "type": "authorPaper",
              "text": "Elixir: An Automated Repair Tool for Java Programs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1uVaDsZ3LRs5lLyw2BLVOQ/2PKRfkKFJZy3RSZOpjabc2.pdf",
              "extraLocations": [],
              "authorNames": "Ripon Saha (Fujitsu Laboratories of America), Hiroaki Yoshida (Fujitsu Laboratories of America), Mukul Prasad (Fujitsu Laboratories of America), Susumu Tokumoto (Fujitsu Laboratories Ltd.), Kuniharu Takayama (Fujitsu Laboratories Ltd.), Isao Nanba (Fujitsu Laboratories Ltd.)",
              "abstract": "Object-oriented (OO) languages, by design, make heavy use of method invocations (MI). Unsurprisingly, a large fraction of OO-program bug patches also involves method invocations. However, current program repair techniques incorporate MIs in very limited ways, ostensibly to avoid searching the huge repair space that method invocations afford. To address this challenge, in previous work, we proposed a generate-and-validate repair technique which can effectively synthesize patches from a repair space rich in method invocation expressions, by using a machine-learned model to rank the space of concrete repairs. In this paper, we describe the tool Elixir that instantiates this technique for the repair of Java programs. We describe the architecture, user-interface, and salient features of Elixir, and specific use-cases it can be applied in. We also report on our efforts towards practical deployment of Elixir within our organization, including the initial results of a trial of Elixir on a project of interest to potential customers. A video demonstrating Elixir is available at: https://elixir-tool.github.io/demo-video.html",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Elixir: An Automated Repair Tool for Java Programs 1518461083177 Ripon Saha Fujitsu Laboratories of America rsaha@us.fujitsu.com Hiroaki Yoshida Fujitsu Laboratories of America hyoshida@us.fujitsu.com Mukul Prasad Fujitsu Laboratories of America mukul@us.fujitsu.com Susumu Tokumoto Fujitsu Laboratories Ltd. tokumoto.susumu@jp.fujitsu.com Kuniharu Takayama Fujitsu Laboratories Ltd. kuniharu@jp.fujitsu.com Isao Nanba Fujitsu Laboratories Ltd. namba@jp.fujitsu.com Automatic Program Repair Machine Learning OOP Object-oriented (OO) languages, by design, make heavy use of method invocations (MI). Unsurprisingly, a large fraction of OO-program bug patches also involves method invocations. However, current program repair techniques incorporate MIs in very limited ways, ostensibly to avoid searching the huge repair space that method invocations afford. To address this challenge, in previous work, we proposed a generate-and-validate repair technique which can effectively synthesize patches from a repair space rich in method invocation expressions, by using a machine-learned model to rank the space of concrete repairs. In this paper, we describe the tool Elixir that instantiates this technique for the repair of Java programs. We describe the architecture, user-interface, and salient features of Elixir, and specific use-cases it can be applied in. We also report on our efforts towards practical deployment of Elixir within our organization, including the initial results of a trial of Elixir on a project of interest to potential customers. A video demonstrating Elixir is available at: https://elixir-tool.github.io/demo-video.html",
              "pageNumber": 77,
              "isPageNumberRoman": false
            },
            {
              "id": "3RF18qqUWIzaeIHzH4qZ3A",
              "type": "authorPaper",
              "text": "Multi-view Editing of Software Product Lines with PEoPL",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf",
              "extraLocations": [],
              "authorNames": "Mukelabai Mukelabai (Chalmers and University of Gothenburg), Benjamin Behringer (htw saar), Moritz Fey (htw saar), Jochen Palz (htw saar), Jacob Krüger (Harz University and University of Magdeburg), Thorsten Berger (Chalmers and University of Gothenburg Sweden)",
              "abstract": "A software product line is a portfolio of software variants in an application domain. It relies on a platform integrating common and variable features of the variants using variability mechanisms— typically classified into annotative and compositional mechanisms. Annotative mechanisms (e.g., using the C preprocessor) are easy to apply, but annotations clutter source code and feature code is often scattered across the platform, which hinders program comprehension and increases maintenance effort. Compositional mechanisms (e.g., using feature modules) support program comprehension and maintainability by modularizing feature code, but are difficult to adopt. Most importantly, engineers need to choose one mechanism and then stick to it for the whole life cycle of the platform. The PEoPL (Projectional Editing of Product Lines) approach combines the advantages of both kinds of mechanisms. In this paper, we demonstrate the PEoPL IDE, which supports the approach by providing various kinds of editable views, each of which represents the same software product line using annotative or compositional variability mechanisms, or subsets of concrete variants. Software engineers can seamlessly switch these views, or use multiple views side-by-side, based on the current engineering task. A demo video of PEoPL is available at Youtube: https://youtu.be/wByUxSPLoSY",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Multi-view Editing of Software Product Lines with PEoPL 1518519498134 Mukelabai Mukelabai Chalmers and University of Gothenburg mukelabai.mukelabai@cse.gu.se Benjamin Behringer htw saar benjamin.behringer@htwsaar.de Moritz Fey htw saar moritz.fey@htwsaar.de Jochen Palz htw saar jochen.palz@htwsaar.de Jacob Krüger Harz University and University of Magdeburg jkrueger@ovgu.de Thorsten Berger Chalmers and University of Gothenburg Sweden thorsten.berger@cse.gu.se Projectional Editing Product Lines Annotative Modular A software product line is a portfolio of software variants in an application domain. It relies on a platform integrating common and variable features of the variants using variability mechanisms— typically classified into annotative and compositional mechanisms. Annotative mechanisms (e.g., using the C preprocessor) are easy to apply, but annotations clutter source code and feature code is often scattered across the platform, which hinders program comprehension and increases maintenance effort. Compositional mechanisms (e.g., using feature modules) support program comprehension and maintainability by modularizing feature code, but are difficult to adopt. Most importantly, engineers need to choose one mechanism and then stick to it for the whole life cycle of the platform. The PEoPL (Projectional Editing of Product Lines) approach combines the advantages of both kinds of mechanisms. In this paper, we demonstrate the PEoPL IDE, which supports the approach by providing various kinds of editable views, each of which represents the same software product line using annotative or compositional variability mechanisms, or subsets of concrete variants. Software engineers can seamlessly switch these views, or use multiple views side-by-side, based on the current engineering task. A demo video of PEoPL is available at Youtube: https://youtu.be/wByUxSPLoSY",
              "pageNumber": 81,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Static Analysis",
          "lineItems": [
            {
              "id": "6FAD0CwL9OyXwjTCWPEI1f",
              "type": "authorPaper",
              "text": "AnATLyzer: An Advanced IDE for ATL Model Transformations",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6HUyRSJNffENk0hIDslir4/7ztsIy99oUIxCRJRG6B57S.pdf",
              "extraLocations": [],
              "authorNames": "Jesús Sánchez Cuadrado (Universidad de Murcia), Esther Guerra (Universidad Autónoma de Madrid), Juan de Lara (Universidad Autónoma de Madrid)",
              "abstract": "Model transformations (MTs) are key in model-driven engineering as they automate model manipulation. Their early verification is essential because a bug in a MT may affect many projects using it. Still, there is a lack of analysis tools applicable to non-toy transformations developed with practical MT languages. To alleviate this problem, this paper presents AnATLyzer: a static analysis tool for ATL MTs. The tool is able to detect a wide range of non-trivial problems in ATL transformations by using constraint solving to improve the analysis precision. It provides a live environment integrated into Eclipse which allows checking and fixing problems as the transformation is written. The environment is highly configurable and provides facilities like quick fixes, visualizations, navigation shortcuts and problem explanations. We have evaluated the tool over third-party MTs, obtaining good results. The tool website is http://anatlyzer.github.io, and a video showcasing its features is at https://youtu.be/bFpbZht7bqY",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 AnATLyzer: An Advanced IDE for ATL Model Transformations 1518251567366 Jesús Sánchez Cuadrado Universidad de Murcia jesusc@um.es Esther Guerra Universidad Autónoma de Madrid esther.guerra@uam.es Juan de Lara Universidad Autónoma de Madrid juan.delara@uam.es Model Driven Engineering Model transformation Static analysis Verification ATL Model transformations (MTs) are key in model-driven engineering as they automate model manipulation. Their early verification is essential because a bug in a MT may affect many projects using it. Still, there is a lack of analysis tools applicable to non-toy transformations developed with practical MT languages. To alleviate this problem, this paper presents AnATLyzer: a static analysis tool for ATL MTs. The tool is able to detect a wide range of non-trivial problems in ATL transformations by using constraint solving to improve the analysis precision. It provides a live environment integrated into Eclipse which allows checking and fixing problems as the transformation is written. The environment is highly configurable and provides facilities like quick fixes, visualizations, navigation shortcuts and problem explanations. We have evaluated the tool over third-party MTs, obtaining good results. The tool website is http://anatlyzer.github.io, and a video showcasing its features is at https://youtu.be/bFpbZht7bqY",
              "pageNumber": 85,
              "isPageNumberRoman": false
            },
            {
              "id": "551GzZdI1cd2e6dWIBoVqG",
              "type": "authorPaper",
              "text": "VisuFlow: A Debugging Environment for Static Analyses",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf",
              "extraLocations": [],
              "authorNames": "Lisa Nguyen Quang Do (Fraunhofer IEM), Stefan Krüger (Paderborn University), Patrick Hill (Paderborn University), Karim Ali (University of Alberta), Eric Bodden (Paderborn University & Fraunhofer IEM)",
              "abstract": "Code developers in industry frequently use static analysis tools to detect and fix software defects in their code. But what about defects in the static analyses themselves? While debugging application code is a difficult, time-consuming task, debugging a static analysis is even harder. We have surveyed 115 static analysis writers to determine what makes static analysis difficult to debug, and to identify which debugging features would be desirable for static analysis. Based on this information, we have created VisuFlow, a debugging environment for static data-flow analysis. VisuFlow is built as an Eclipse plugin, and supports analyses written on top of the program analysis framework Soot. The different components in VisuFlow provide analysis writers with visualizations of the internal computations of the analysis, and actionable debugging features to support debugging static analyses. A video demo of Visuflow is available online: https://www.youtube.com/watch?v=BkEfBDwiuH4",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 VisuFlow: A Debugging Environment for Static Analyses 1517994780279 Lisa Nguyen Quang Do Fraunhofer IEM lisa.nguyen@iem.fraunhofer.de Stefan Krüger Paderborn University stefan.krueger@upb.de Patrick Hill Paderborn University pahill@campus.uni-paderborn.de Karim Ali University of Alberta karim.ali@ualberta.ca Eric Bodden Paderborn University & Fraunhofer IEM eric.bodden@upb.de Debugging Static analysis IDE Survey User study Empirical Software Engineering Code developers in industry frequently use static analysis tools to detect and fix software defects in their code. But what about defects in the static analyses themselves? While debugging application code is a difficult, time-consuming task, debugging a static analysis is even harder. We have surveyed 115 static analysis writers to determine what makes static analysis difficult to debug, and to identify which debugging features would be desirable for static analysis. Based on this information, we have created VisuFlow, a debugging environment for static data-flow analysis. VisuFlow is built as an Eclipse plugin, and supports analyses written on top of the program analysis framework Soot. The different components in VisuFlow provide analysis writers with visualizations of the internal computations of the analysis, and actionable debugging features to support debugging static analyses. A video demo of Visuflow is available online: https://www.youtube.com/watch?v=BkEfBDwiuH4",
              "pageNumber": 89,
              "isPageNumberRoman": false
            },
            {
              "id": "6ae9nQPMjmYjKKBH2ZQLyX",
              "type": "authorPaper",
              "text": "SQLInspect: A Static Analyzer to Inspect Database Usage in Java Applications",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3bn80m7mgpwTXF5v44mUTQ/1JsowseYkCwbOQpokqj3Ip.pdf",
              "extraLocations": [],
              "authorNames": "Csaba Nagy (University of Namur), Anthony Cleve (University of Namur)",
              "abstract": "We present SQLInspect, a tool intended to assist developers who deal with SQL code embedded in Java applications. It is integrated into Eclipse as a plug-in that is able to extract SQL queries from Java code through static string analysis. It parses the extracted queries and performs various analyses on them. As a result, one can readily explore the source code which accesses a given part of the database, or which is responsible for the construction of a given SQL query. SQL-related metrics and common coding mistakes are also used to spot inefficiently or defectively performing SQL statements and to identify poorly designed classes, like those that construct many queries via complex control-flow paths. SQLInspect is a novel tool that relies on recent query extraction approaches. It currently supports Java applications working with JDBC and SQL code written for MySQL or Apache Impala. Check out the live demo of SQLInspect at http://perso.unamur.be/~cnagy/sqlinspect.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 SQLInspect: A Static Analyzer to Inspect Database Usage in Java Applications 1518437588009 Csaba Nagy University of Namur csaba.nagy@unamur.be Anthony Cleve University of Namur anthony.cleve@unamur.be MySQL Apache Impala Embedded SQL Static Analysis Metrics Bad Smells Concept Location Java JDBC Eclipse We present SQLInspect, a tool intended to assist developers who deal with SQL code embedded in Java applications. It is integrated into Eclipse as a plug-in that is able to extract SQL queries from Java code through static string analysis. It parses the extracted queries and performs various analyses on them. As a result, one can readily explore the source code which accesses a given part of the database, or which is responsible for the construction of a given SQL query. SQL-related metrics and common coding mistakes are also used to spot inefficiently or defectively performing SQL statements and to identify poorly designed classes, like those that construct many queries via complex control-flow paths. SQLInspect is a novel tool that relies on recent query extraction approaches. It currently supports Java applications working with JDBC and SQL code written for MySQL or Apache Impala. Check out the live demo of SQLInspect at http://perso.unamur.be/~cnagy/sqlinspect.",
              "pageNumber": 93,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Model-Driven Development",
          "lineItems": [
            {
              "id": "4uk9p5AQgypJ70U9C5F75U",
              "type": "authorPaper",
              "text": "MDebugger: A Model-Level Debugger for UML-RT",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5DzlPjxYvM5N8HVBZIru6H/2y8g0siwmm4J7RXAYS1pNA.pdf",
              "extraLocations": [],
              "authorNames": "Mojtaba Bagherzadeh (Queen's University), Nicolas Hili (Queen's University), David Seekatz (Queen's University), Juergen Dingel (Queen's University)",
              "abstract": "Ideally, debuggers for Model-Driven Development (MDD) tools would allow users to 'stay at the model-level' and would not require them to refer to the generated source code or figure out how the code generator works. Existing approaches to model-level debugging do not satisfy this requirement and are unnecessarily complex and platform-specific due to their dependency on program debuggers. We introduced a novel approach to model-level debugging that formulates debugging services at model-level and implements them using model transformation. This approach is implemented in MDebugger, a platform-independent model-level debugger using Papyrus-RT, an MDD tool for the modeling language UML-RT. https://youtu.be/L0JDn8eczwQ",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 MDebugger: A Model-Level Debugger for UML-RT 1518026088580 Mojtaba Bagherzadeh Queen's University mojtaba@cs.queensu.ca Nicolas Hili Queen's University hili@cs.queensu.ca David Seekatz Queen's University seekatz@cs.queensu.ca Juergen Dingel Queen's University dingel@cs.queensu.ca Model-based Debugging Model-driven Development UML RT Real-time and Embedded systems MDD MDE Ideally, debuggers for Model-Driven Development (MDD) tools would allow users to 'stay at the model-level' and would not require them to refer to the generated source code or figure out how the code generator works. Existing approaches to model-level debugging do not satisfy this requirement and are unnecessarily complex and platform-specific due to their dependency on program debuggers. We introduced a novel approach to model-level debugging that formulates debugging services at model-level and implements them using model transformation. This approach is implemented in MDebugger, a platform-independent model-level debugger using Papyrus-RT, an MDD tool for the modeling language UML-RT. https://youtu.be/L0JDn8eczwQ",
              "pageNumber": 97,
              "isPageNumberRoman": false
            },
            {
              "id": "2Zhjr1eTMyr9Jok0W80rVY",
              "type": "authorPaper",
              "text": "CyPhEF: A Model-Driven Engineering Framework for Self-Adaptive Cyber-Physical Systems",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1gNLLFWWKWZtApQjwZyuuj/2HAORC6UYaMnwzI2dA35YZ.pdf",
              "extraLocations": [],
              "authorNames": "Mirko D'Angelo (Linnaeus University), Annalisa Napolitano (IMT School for Advanced Studies), Mauro Caporuscio (Linnaeus University)",
              "abstract": "Self-adaptation is nowadays recognized as an effective approach to deal with the uncertainty inherent to cyber-physical systems, which are composed of dynamic and deeply intertwined physical and software components interacting with each other. Engineering a self-adaptive cyber-physical system is challenging, as concerns about both the physical and the control system should be jointly considered. To this end, we present CyPhEF, a Model-Driven Engineering framework supporting the development and validation of self-adaptive cyber-physical systems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 CyPhEF: A Model-Driven Engineering Framework for Self-Adaptive Cyber-Physical Systems 1518186399702 Mirko D'Angelo Linnaeus University mirko.dangelo@lnu.se Annalisa Napolitano IMT School for Advanced Studies annalisa.napolitano@imtlucca.it Mauro Caporuscio Linnaeus University mauro.caporuscio@lnu.se Cyber Physical Systems Self Adaptive Systems Decentralized Control MAPE K loop Framework Self-adaptation is nowadays recognized as an effective approach to deal with the uncertainty inherent to cyber-physical systems, which are composed of dynamic and deeply intertwined physical and software components interacting with each other. Engineering a self-adaptive cyber-physical system is challenging, as concerns about both the physical and the control system should be jointly considered. To this end, we present CyPhEF, a Model-Driven Engineering framework supporting the development and validation of self-adaptive cyber-physical systems.",
              "pageNumber": 101,
              "isPageNumberRoman": false
            },
            {
              "id": "7aijmYFBGJeuDuKhAhLKa5",
              "type": "authorPaper",
              "text": "ReVision: A Tool for History-Based Model Repair Recommendations",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3OBcOwPcuVek9zxGKch3pF/2buxI8VlbB6qYkDaPC7Ly2.pdf",
              "extraLocations": [],
              "authorNames": "Manuel Ohrndorf (University of Siegen), Christopher Pietsch (University of Siegen), Udo Kelter (University of Siegen), Timo Kehrer (Humboldt-University of Berlin)",
              "abstract": "Models in Model-Driven Engineering are heavily edited in all stages of software development and can become temporarily inconsistent. In general, there are many alternatives to fix an inconsistency, the actual choice is left to the discretion of the developer. Model repair tools should support developers by proposing a short list of repair alternatives. Such recommendations will be only accepted in practice if the generated proposals are plausible and understandable. Current approaches, which mostly focus on fully automatic, non-interactive model repairs, fail in meeting these requirements. This paper proposes a new approach to generate repair proposals for inconsistencies that were introduced by incomplete editing processes which can be located in the version history of a model. Such an incomplete editing process is extended to a full execution of a consistency-preserving edit operation. We demonstrate our repair tool \\toolname using a simplified multi-view UML model of a video on demand system, a screencast is provided at http://pi.informatik.uni-siegen.de/projects/SiLift/icse2018/.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 ReVision: A Tool for History-Based Model Repair Recommendations 1518435749688 Manuel Ohrndorf University of Siegen mohrndorf@informatik.uni-siegen.de Christopher Pietsch University of Siegen cpietsch@informatik.uni-siegen.de Udo Kelter University of Siegen kelter@informatik.uni-siegen.de Timo Kehrer Humboldt-University of Berlin timo.kehrer@informatik.hu-berlin.de model repair consistency recommendations history analysis Models in Model-Driven Engineering are heavily edited in all stages of software development and can become temporarily inconsistent. In general, there are many alternatives to fix an inconsistency, the actual choice is left to the discretion of the developer. Model repair tools should support developers by proposing a short list of repair alternatives. Such recommendations will be only accepted in practice if the generated proposals are plausible and understandable. Current approaches, which mostly focus on fully automatic, non-interactive model repairs, fail in meeting these requirements. This paper proposes a new approach to generate repair proposals for inconsistencies that were introduced by incomplete editing processes which can be located in the version history of a model. Such an incomplete editing process is extended to a full execution of a consistency-preserving edit operation. We demonstrate our repair tool \\toolname using a simplified multi-view UML model of a video on demand system, a screencast is provided at http://pi.informatik.uni-siegen.de/projects/SiLift/icse2018/.",
              "pageNumber": 105,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Verification",
          "lineItems": [
            {
              "id": "4OQMA3SsJz4jsLgQxGWrlb",
              "type": "authorPaper",
              "text": "COMB: Computing Relevant Program Behaviors",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf",
              "extraLocations": [],
              "authorNames": "Benjamin Holland (Iowa State University), Payas Awadhutkar (Iowa State University), Suresh Kotharti (Iowa State University), Ahmed Tamrawi (EnSoft Corp), Jon Mathews (EnSoft Corp)",
              "abstract": "The paper presents COMB, a tool to improve accuracy and efficiency of software engineering tasks that hinge on computing all relevant program behaviors. Computing all behaviors and selecting the relevant ones is computationally intractable. COMB uses Projected Control Graph (PCG) abstraction to derive the relevant behaviors directly and efficiently. The PCG is important as the number of behaviors relevant to a task is often significantly smaller than the totality of behaviors. COMB provides extensive capabilities for program comprehension, analysis, and verification. We present a basic case study and a Linux verification study to demonstrate various capabilities of COMB and the addressed challenges. COMB is designed to support multiple programming languages. We demonstrate it for C and Java.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 COMB: Computing Relevant Program Behaviors 1517992451553 Benjamin Holland Iowa State University bholland@iastate.edu Payas Awadhutkar Iowa State University payas@iastate.edu Suresh Kotharti Iowa State University kothari@iastate.edu Ahmed Tamrawi EnSoft Corp ahmedtamrawi@ensoftcorp.com Jon Mathews EnSoft Corp jmathews@ensoftcorp.com Program Behaviors Software Analysis Software Verification The paper presents COMB, a tool to improve accuracy and efficiency of software engineering tasks that hinge on computing all relevant program behaviors. Computing all behaviors and selecting the relevant ones is computationally intractable. COMB uses Projected Control Graph (PCG) abstraction to derive the relevant behaviors directly and efficiently. The PCG is important as the number of behaviors relevant to a task is often significantly smaller than the totality of behaviors. COMB provides extensive capabilities for program comprehension, analysis, and verification. We present a basic case study and a Linux verification study to demonstrate various capabilities of COMB and the addressed challenges. COMB is designed to support multiple programming languages. We demonstrate it for C and Java.",
              "pageNumber": 109,
              "isPageNumberRoman": false
            },
            {
              "id": "2Nd5G185wScNSvK1iVh9UI",
              "type": "authorPaper",
              "text": "The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2oUedkh05E6LoFEamVXTkw/20ZzJFufxJ3lFczmyQR7IW.pdf",
              "extraLocations": [],
              "authorNames": "Vince Molnár (Fault Tolerant Systems Research Group), Bence Graics (Fault Tolerant Systems Research Group), András Vörös (Fault Tolerant Systems Research Group), István Majzik (Fault Tolerant Systems Research Group), Dániel Varró (Fault Tolerant Systems Research Group)",
              "abstract": "The Gamma Statechart Composition Framework is an integrated tool to support the design, verification and validation as well as code generation for component-based reactive systems. The behavior of each component is captured by a statechart, while assembling the system from components is driven by a domain-specific composition language. Gamma automatically synthesizes executable Java code extending the output of existing statechart-based code generators with composition related parts, and it supports formal verification by mapping composite statecharts to a back-end model checker. Execution traces obtained as witnesses during verification are back-annotated as test cases to replay an error trace or to validate external code generators.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems 1518426288136 Vince Molnár Fault Tolerant Systems Research Group molnarv@mit.bme.hu Bence Graics Fault Tolerant Systems Research Group grbeni@gmail.com András Vörös Fault Tolerant Systems Research Group vori@mit.bme.hu István Majzik Fault Tolerant Systems Research Group majzik@mit.bme.hu Dániel Varró Fault Tolerant Systems Research Group varro@mit.bme.hu statecharts composition formal verification code generation The Gamma Statechart Composition Framework is an integrated tool to support the design, verification and validation as well as code generation for component-based reactive systems. The behavior of each component is captured by a statechart, while assembling the system from components is driven by a domain-specific composition language. Gamma automatically synthesizes executable Java code extending the output of existing statechart-based code generators with composition related parts, and it supports formal verification by mapping composite statecharts to a back-end model checker. Execution traces obtained as witnesses during verification are back-annotated as test cases to replay an error trace or to validate external code generators.",
              "pageNumber": 113,
              "isPageNumberRoman": false
            },
            {
              "id": "m4re1vJgZimWfqSP7mZx5",
              "type": "authorPaper",
              "text": "A Regression Proof Selection Tool For Coq",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4d3wTvZAzM1UeluRGK5ggk/73ZV4s78VDohful3g6T0eF.pdf",
              "extraLocations": [],
              "authorNames": "Ahmet Celik (The University of Texas at Austin), Karl Palmskog (University of Illinois at Urbana-Champaign), Milos Gligoric (The University of Texas at Austin)",
              "abstract": "Large-scale software verification projects increasingly rely on proof assistants, such as Coq, to construct formal proofs of program correctness. However, such proofs must be checked after every change to a project to ensure expected program behavior. This process of regression proving can require substantial machine time, which is detrimental to productivity and trust in evolving projects. We present iCoq, the first regression proof selection tool. iCoq tracks fine-grained dependencies between Coq definitions, propositions, and proofs, and only checks those proofs affected by changes between two revisions. iCoq is suitable for workflows involving version control and continuous integration services, e.g., Travis CI. We applied iCoq to track dependencies across many revisions in several large Coq projects and measured the time savings compared to proof checking from scratch and when using Coq's timestampbased toolchain for incremental checking. Our results show that proof checking with iCoq is up to 10 times faster than the former and up to 3 times faster than the latter. The demo video for iCoq can be found at: https://www.youtube.com/watch?v=egFnHkH5pXI.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 A Regression Proof Selection Tool For Coq 1518497786134 Ahmet Celik The University of Texas at Austin ahmetcelik@utexas.edu Karl Palmskog University of Illinois at Urbana-Champaign palmskog@illinois.edu Milos Gligoric The University of Texas at Austin gligoric@utexas.edu Proof assistants regression proof selection proof engineering Coq Large-scale software verification projects increasingly rely on proof assistants, such as Coq, to construct formal proofs of program correctness. However, such proofs must be checked after every change to a project to ensure expected program behavior. This process of regression proving can require substantial machine time, which is detrimental to productivity and trust in evolving projects. We present iCoq, the first regression proof selection tool. iCoq tracks fine-grained dependencies between Coq definitions, propositions, and proofs, and only checks those proofs affected by changes between two revisions. iCoq is suitable for workflows involving version control and continuous integration services, e.g., Travis CI. We applied iCoq to track dependencies across many revisions in several large Coq projects and measured the time savings compared to proof checking from scratch and when using Coq's timestampbased toolchain for incremental checking. Our results show that proof checking with iCoq is up to 10 times faster than the former and up to 3 times faster than the latter. The demo video for iCoq can be found at: https://www.youtube.com/watch?v=egFnHkH5pXI.",
              "pageNumber": 117,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Posters",
          "lineItems": [
            {
              "id": "QGxFZs85Bi5hragEWQ8VW",
              "type": "authorPaper",
              "text": "Poster: Industrie 4.0 Virtual Automation Bus",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf",
              "extraLocations": [],
              "authorNames": "Thomas Kuhn (Fraunhofer Institute IESE), Pablo Oliveira Antonino de Assis (Fraunhofer Institute IESE), Markus Damm (Fraunhofer Institute IESE), Andreas Morgenstern (Fraunhofer Institute IESE), Dirk Schulz (ABB Corporate Research Center Germany), Constantin Ziesche (Robert Bosch GmbH), Thorsten Müller (SMS group GmbH)",
              "abstract": "A main goal of the fourth industrial revolution is changeability of production processes, which is the ability to react efficiently to unplanned production changes. Existing automation system architectures limit this changeability. PLC programs used for automation include low-level behavior of actuators, strategies, management functions without information hiding. This yields unmaintainable, and therefore hard to change systems. In this paper, we document our Virtual Automation Bus that enables changeable production.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Industrie 4.0 Virtual Automation Bus 1520842945874 Thomas Kuhn Fraunhofer Institute IESE thomas.kuhn@iese.fraunhofer.de Pablo Oliveira Antonino de Assis Fraunhofer Institute IESE pablo.antonino@iese.fraunhofer.de Markus Damm Fraunhofer Institute IESE markus.damm@iese.fraunhofer.de Andreas Morgenstern Fraunhofer Institute IESE andreas.morgenstern@iese.fraunhofer.de Dirk Schulz ABB Corporate Research Center Germany dirk.schulz@de.abb.com Constantin Ziesche Robert Bosch GmbH constantin.ziesche@de.bosch.com Thorsten Müller SMS group GmbH thorsten.mueller2@sms-group.com Industrie 4.0 Industrial IOT Software Platform Production Changeability A main goal of the fourth industrial revolution is changeability of production processes, which is the ability to react efficiently to unplanned production changes. Existing automation system architectures limit this changeability. PLC programs used for automation include low-level behavior of actuators, strategies, management functions without information hiding. This yields unmaintainable, and therefore hard to change systems. In this paper, we document our Virtual Automation Bus that enables changeable production.",
              "pageNumber": 121,
              "isPageNumberRoman": false
            },
            {
              "id": "5pgT03vsdyKtMJvkQZVI54",
              "type": "authorPaper",
              "text": "Poster: An Empirical Study of the Product Owner Role in Scrum",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf",
              "extraLocations": [],
              "authorNames": "Julian Bass (University of Salford), Sarah Beecham (Lero - the Irish Software Engineering Research Centre), Mohammad Abdur Razzak (Lero-the Irish Software Research Centre), Clodagh Nic Canna (Ocuco Ltd), John Noll (University of East London)",
              "abstract": "The Product Owner (PO) is critical for translating business needs into a software implementation by gathering and prioritizing requirements, and assessing whether features have met the definition of \"done.\" There is a paucity of detail about how POs achieve this daunting task in practice with potential negative consequences for project success. In this research we employed a mixed-method approach comprising two case studies in which we interviewed and observed 55 practitioners across 9 large multi-national companies and an SME. Using a cross-case analysis we identified twelve distinct Product Owner activities. From our empirical findings we created a Product Owner role taxonomy and found eight generic activities common to all teams, projects and companies regardless of project size.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: An Empirical Study of the Product Owner Role in Scrum 1520881681593 Julian Bass University of Salford J.Bass@salford.ac.uk Sarah Beecham Lero - the Irish Software Engineering Research Centre sarah.beecham@lero.ie Mohammad Abdur Razzak Lero-the Irish Software Research Centre razzak@live.se Clodagh Nic Canna Ocuco Ltd Clodagh.NicCanna@ocuco.com John Noll University of East London j.noll@uel.ac.uk Agile software development Scrum inter team coordination product owner role SME Global Software Development The Product Owner (PO) is critical for translating business needs into a software implementation by gathering and prioritizing requirements, and assessing whether features have met the definition of \"done.\" There is a paucity of detail about how POs achieve this daunting task in practice with potential negative consequences for project success. In this research we employed a mixed-method approach comprising two case studies in which we interviewed and observed 55 practitioners across 9 large multi-national companies and an SME. Using a cross-case analysis we identified twelve distinct Product Owner activities. From our empirical findings we created a Product Owner role taxonomy and found eight generic activities common to all teams, projects and companies regardless of project size.",
              "pageNumber": 123,
              "isPageNumberRoman": false
            },
            {
              "id": "5kGlaiI9aMKz0t1BkiWFW2",
              "type": "authorPaper",
              "text": "Poster: Reengineering Legacy Systems for Supporting SOA: A Case Study on the Brazilian's Secretary of State for Taxation",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6ognbNidqaqq0BBZW0gaoA/7t0eGLrdUTUA7WH1OAYAfE.pdf",
              "extraLocations": [],
              "authorNames": "Yan de Lima Justino (Federal University of Rio Grande do Norte), Carlos Eduardo da Silva (Federal University of Rio Grande do Norte)",
              "abstract": "The migration of legacy systems to a service-oriented architecture (SOA) allows to deal with the demand for interoperability and the need to provide a robust high-available service interface. However, such migration presents a considerable risk, as it often involves the use of different techniques on systems with elevated technical debt and high maintenance costs. For this purpose, a process is instantiated to provide an appropriate set of techniques that will minimize risks and at the same time ensure quality improvement of the systems throughout the migration process. In this sense, this work reports on a case study of the application of a process for the reengineering of legacy systems to support the implementation of SOA project. This study has been applied to the evolution of legacy systems of the Secretariat of State for Taxation of Rio Grande do Norte (SET/RN), Brazil, providing significant results regarding the achievement of important quality goals.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Reengineering Legacy Systems for Supporting SOA: A Case Study on the Brazilian's Secretary of State for Taxation 1520489267829 Yan de Lima Justino Federal University of Rio Grande do Norte yan.ufrn@ufrn.edu.br Carlos Eduardo da Silva Federal University of Rio Grande do Norte kaduardo@imd.ufrn.br SOA Reengineering DevOps The migration of legacy systems to a service-oriented architecture (SOA) allows to deal with the demand for interoperability and the need to provide a robust high-available service interface. However, such migration presents a considerable risk, as it often involves the use of different techniques on systems with elevated technical debt and high maintenance costs. For this purpose, a process is instantiated to provide an appropriate set of techniques that will minimize risks and at the same time ensure quality improvement of the systems throughout the migration process. In this sense, this work reports on a case study of the application of a process for the reengineering of legacy systems to support the implementation of SOA project. This study has been applied to the evolution of legacy systems of the Secretariat of State for Taxation of Rio Grande do Norte (SET/RN), Brazil, providing significant results regarding the achievement of important quality goals.",
              "pageNumber": 125,
              "isPageNumberRoman": false
            },
            {
              "id": "6vKZU7I5MEIkysXdLViSQ0",
              "type": "authorPaper",
              "text": "Poster: Results from Multi-faceted Software Reliability Assessment Studies",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7DoBigqLYo5qCiOodZKTcz/6q4ZddNK9hg9IsUoTQjVpQ.pdf",
              "extraLocations": [],
              "authorNames": "Yaping Luo (Altran Netherlands B.V.), Egbert Touw (Altran Netherlands B.V.)",
              "abstract": "Software quality aspects and in particular software reliability is hard to measure. Current tools or techniques are not sufficient to support us to get insights in the software reliability risk in our customer's products. In this poster, we present a multi-faceted software reliability approach. Besides an industrial case study is also described with four assessment studies. The results of the case study have been well accepted by our customer and by the supplier of this customer. Moreover, our approach can be applied in the automotive domain as it is and even be improved by exchanging some of the process assessment components by the parts from automotive reference models, such as A-SPICE.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Results from Multi-faceted Software Reliability Assessment Studies 1521219401687 Yaping Luo Altran Netherlands B.V. yaping.luo@altran.com Egbert Touw Altran Netherlands B.V. egbert.touw@altran.com Software Reliability TMMi ISO25010 CMMi Quality Improvement Software quality aspects and in particular software reliability is hard to measure. Current tools or techniques are not sufficient to support us to get insights in the software reliability risk in our customer's products. In this poster, we present a multi-faceted software reliability approach. Besides an industrial case study is also described with four assessment studies. The results of the case study have been well accepted by our customer and by the supplier of this customer. Moreover, our approach can be applied in the automotive domain as it is and even be improved by exchanging some of the process assessment components by the parts from automotive reference models, such as A-SPICE.",
              "pageNumber": 127,
              "isPageNumberRoman": false
            },
            {
              "id": "3wXm2p1ctW6SPmxdGUAcrC",
              "type": "authorPaper",
              "text": "Poster: An Initial Characterization of Bug-Injecting Development Sessions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7nrXDes1AE17dN1F7CYJII/3tpIHuPtxoFOTTsXewXvBN.pdf",
              "extraLocations": [],
              "authorNames": "Irina Diana Coman (The Most Serene Republic), Alberto Sillitti (Innopolis University), Giancarlo Succi (Innopolis University)",
              "abstract": "Even experienced developers rigorously testing their code and using state of the art tools and practices, inject every now and then bugs into the code. There is a huge amount of literature about the characterization of such bugs including the effectiveness of the reports and the fixes, the time required to fix them, etc. Existing works have already identified several factors considered to influence directly the bug injection. However, there is no support for the claims made so far using data coming from industrial, buginjecting development sessions. This paper aims at filling this gap by analyzing industrial bug-injecting development sessions from several points of view. It investigates 49 bug-injecting development sessions evaluating and discussing three alleged, developers-centered main causes of bug injection: expertise, knowledge of code, and distraction. Additionally, the paper provides insights into the complete lifetime of bugs from injection to the fix and discusses implications for bug prediction.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: An Initial Characterization of Bug-Injecting Development Sessions 1521210895350 Irina Diana Coman The Most Serene Republic irina.coman@gmail.com Alberto Sillitti Innopolis University a.sillitti@innopolis.ru Giancarlo Succi Innopolis University g.succi@innopolis.ru Bugs empirical software engineering Even experienced developers rigorously testing their code and using state of the art tools and practices, inject every now and then bugs into the code. There is a huge amount of literature about the characterization of such bugs including the effectiveness of the reports and the fixes, the time required to fix them, etc. Existing works have already identified several factors considered to influence directly the bug injection. However, there is no support for the claims made so far using data coming from industrial, buginjecting development sessions. This paper aims at filling this gap by analyzing industrial bug-injecting development sessions from several points of view. It investigates 49 bug-injecting development sessions evaluating and discussing three alleged, developers-centered main causes of bug injection: expertise, knowledge of code, and distraction. Additionally, the paper provides insights into the complete lifetime of bugs from injection to the fix and discusses implications for bug prediction.",
              "pageNumber": 129,
              "isPageNumberRoman": false
            },
            {
              "id": "3pTEhxWgDQ57c5SwFWx838",
              "type": "authorPaper",
              "text": "Poster: Challenges with Automotive Test Case Specifications",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/22HRkItZGtp9E0KerKRG6U/55RByn2pvzw3VEvvRElf7v.pdf",
              "extraLocations": [],
              "authorNames": "Juhnke Katharina (Daimler AG), Tichy Matthias (Ulm University), Frank Houdek (Daimler AG)",
              "abstract": "In the automotive domain standards like ISO 26262 require a structured test process. Test cases are usually derived from requirements and documented in test case specifications. They provide a necessary basis for test implementation and execution. Therefore, test case specifications are a fundamental part of the automotive test process. The aim of this work is to gain insights into the creation and processing of test case specifications from a practitioner's point of view. In order to identify challenges concerning automotive test case specifications, we conducted an explorative case study based on 17 semi-structured interviews at a German OEM and three automotive suppliers. The interviews were transcribed and analyzed qualitatively to identify the challenges. We summarized the challenge to a taxonomy consisting of nine main categories: (1) availability and (2) content-related problems with input artifacts, (3) knowledge-related problems, (4) test case related problems, (5) the test case specification content-related problems, (6) process-related problems, (7) communication-related problems, (8) quality-related problems, and (9) tool-related problems. In general, we noticed that the interviewees were aware of challenges in terms of test case specifications in the automotive domain. Nevertheless, some of the current solutions are not efficient and require a lot of manual work.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Challenges with Automotive Test Case Specifications 1520489877914 Juhnke Katharina Daimler AG katharina.juhnke@daimler.com Tichy Matthias Ulm University matthias.tichy@uni-ulm.de Frank Houdek Daimler AG frank.houdek@daimler.com Automotive testing test case specification challenges In the automotive domain standards like ISO 26262 require a structured test process. Test cases are usually derived from requirements and documented in test case specifications. They provide a necessary basis for test implementation and execution. Therefore, test case specifications are a fundamental part of the automotive test process. The aim of this work is to gain insights into the creation and processing of test case specifications from a practitioner's point of view. In order to identify challenges concerning automotive test case specifications, we conducted an explorative case study based on 17 semi-structured interviews at a German OEM and three automotive suppliers. The interviews were transcribed and analyzed qualitatively to identify the challenges. We summarized the challenge to a taxonomy consisting of nine main categories: (1) availability and (2) content-related problems with input artifacts, (3) knowledge-related problems, (4) test case related problems, (5) the test case specification content-related problems, (6) process-related problems, (7) communication-related problems, (8) quality-related problems, and (9) tool-related problems. In general, we noticed that the interviewees were aware of challenges in terms of test case specifications in the automotive domain. Nevertheless, some of the current solutions are not efficient and require a lot of manual work.",
              "pageNumber": 131,
              "isPageNumberRoman": false
            },
            {
              "id": "12bu5VqGVAvj6pzPqqKCdh",
              "type": "authorPaper",
              "text": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf",
              "extraLocations": [],
              "authorNames": "Pavneet Singh Kochhar (Singapore Management University), Stanislaw Swierc (Microsoft), Trevor Carnahan (Microsoft), Hitesh Sajnani (Microsoft), Meiyappan Nagappan (University of Waterloo)",
              "abstract": "Work item tracking systems such as Visual Studio Team Services, JIRA, and GitHub issue tracker are widely used by software engineers. They help in managing different kinds of deliverables (e.g. features, user stories, bugs), plan sprints, distribute tasks across the team and prioritize the work. While these tools provide reporting capabilities there has been little research into the role these reports play in the overall software development process. In this study, we conduct an empirical investigation on the usage of Analytics Service - a reporting service provided by Visual Studio Team Services (VSTS) to build dashboards and reports out of their work item tracking data. In particular, we want to understand why and how users interact with Analytics Service and what are the outcomes and business decisions taken by stakeholders from reports built using Analytics Service. We perform semi-structured interviews and survey with users of Analytics Service to understand usage and challenges. Our report on qualitative and quantitative analysis can help organizations and engineers building similar tools or services.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study 1521524922011 Pavneet Singh Kochhar Singapore Management University kochharps.2012@smu.edu.sg Stanislaw Swierc Microsoft stansw@microsoft.com Trevor Carnahan Microsoft trevorc@microsoft.com Hitesh Sajnani Microsoft hitsaj@microsoft.com Meiyappan Nagappan University of Waterloo mei.nagappan@uwaterloo.ca case study work item tracking analysis Work item tracking systems such as Visual Studio Team Services, JIRA, and GitHub issue tracker are widely used by software engineers. They help in managing different kinds of deliverables (e.g. features, user stories, bugs), plan sprints, distribute tasks across the team and prioritize the work. While these tools provide reporting capabilities there has been little research into the role these reports play in the overall software development process. In this study, we conduct an empirical investigation on the usage of Analytics Service - a reporting service provided by Visual Studio Team Services (VSTS) to build dashboards and reports out of their work item tracking data. In particular, we want to understand why and how users interact with Analytics Service and what are the outcomes and business decisions taken by stakeholders from reports built using Analytics Service. We perform semi-structured interviews and survey with users of Analytics Service to understand usage and challenges. Our report on qualitative and quantitative analysis can help organizations and engineers building similar tools or services.",
              "pageNumber": 133,
              "isPageNumberRoman": false
            },
            {
              "id": "4BLllXWNEi5pG5pRkcEM4N",
              "type": "authorPaper",
              "text": "Poster: When Students Meet Developers: Are Barcamps a Format for Interactive Software Engineering Education?",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7pmHRPui8ftbVkNWGHxFcd/4K7iypcNJzmAqWICM06eac.pdf",
              "extraLocations": [],
              "authorNames": "Bianca Bergande (Neu-Ulm University of Applied Sciences), Philipp Brune (Neu-Ulm University of Applied Sciences)",
              "abstract": "While barcamps have been adopted as a learning format for IT professionals for some years, only a few examples for their adaptation as a setting in the higher software engineering education domain have been published so far. Therefore, in this paper a teaching experiment of undergraduate students attending a developer barcamp is described and evaluated. While its results are promising in general, the impact of the intrinsic motivation and previous skills of the participants appears to be crucial for the success of the format among students, in particular for non-computer science majors.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: When Students Meet Developers: Are Barcamps a Format for Interactive Software Engineering Education? 1520937779570 Bianca Bergande Neu-Ulm University of Applied Sciences Bianca.Bergande@hs-neu-ulm.de Philipp Brune Neu-Ulm University of Applied Sciences Philipp.Brune@hs-neu-ulm.de Barcamps Software Engineering Education Non-Computer Science Majors Students' Motivation While barcamps have been adopted as a learning format for IT professionals for some years, only a few examples for their adaptation as a setting in the higher software engineering education domain have been published so far. Therefore, in this paper a teaching experiment of undergraduate students attending a developer barcamp is described and evaluated. While its results are promising in general, the impact of the intrinsic motivation and previous skills of the participants appears to be crucial for the success of the format among students, in particular for non-computer science majors.",
              "pageNumber": 135,
              "isPageNumberRoman": false
            },
            {
              "id": "7g91Xq1kbbjNJCvG6iyHBj",
              "type": "authorPaper",
              "text": "Poster: A Methodology to Teaching Statistical Process Control for Software Engineers",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5Fxhj66zTRNy8m928UTJtO/trNe4al0qmo7aqHS6SsSt.pdf",
              "extraLocations": [],
              "authorNames": "Julio Furtado (Federal University of Pará - Brazil), Sandro Oliveira (Federal University of Pará - Brazil)",
              "abstract": "The Statistical Process Control (SPC) importance for the software industry has grown in recent years, mainly due to the use of quality models. In this context, this work aims to propose a teaching methodology for SPC where the learning process is student centered. The methodology is composed of reading experience reports, PBL, practical cases discussion, use of games, practical projects, and reflections on the learned.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Methodology to Teaching Statistical Process Control for Software Engineers 1520613957321 Julio Furtado Federal University of Pará - Brazil furtado@unifap.br Sandro Oliveira Federal University of Pará - Brazil srbo@ufpa.br statistical process control software engineering education teaching methodology computer course The Statistical Process Control (SPC) importance for the software industry has grown in recent years, mainly due to the use of quality models. In this context, this work aims to propose a teaching methodology for SPC where the learning process is student centered. The methodology is composed of reading experience reports, PBL, practical cases discussion, use of games, practical projects, and reflections on the learned.",
              "pageNumber": 137,
              "isPageNumberRoman": false
            },
            {
              "id": "6r1zGsixeEi359QKeQlA7K",
              "type": "authorPaper",
              "text": "Poster: A Matrix for Analyzing Projects in Software Engineering Courses",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4taJKQS2iQrYX5FylSDq4Y/1yXNyF4Ikm9Om5ZLve3Qqw.pdf",
              "extraLocations": [],
              "authorNames": "Jakeline Marcos-Abed (Tecnológico de Monterrey.)",
              "abstract": "The careful selection of a project for Software Engineering courses is important from the point of view of the student, the teacher and the project user or client -if available. But, how do you determine whether to develop a complex fictional case, or a simple real-world project with a considerable amount of learning about the software lifecycle? How do you determine whether or not to develop a social project aimed at the community? In order to analyze project characteristics a framework was elaborated, based in a matrix with attributes found in different academic projects carried out over 10 years, and weighted according to certain criteria. It is expected that the result of this analysis will help professors choose the most appropriate software project to develop in class, depending on the characteristics of each project.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Matrix for Analyzing Projects in Software Engineering Courses 1521171180445 Jakeline Marcos-Abed Tecnológico de Monterrey. jakeline@itesm.mx Software projects software lifecycle software engineering education The careful selection of a project for Software Engineering courses is important from the point of view of the student, the teacher and the project user or client -if available. But, how do you determine whether to develop a complex fictional case, or a simple real-world project with a considerable amount of learning about the software lifecycle? How do you determine whether or not to develop a social project aimed at the community? In order to analyze project characteristics a framework was elaborated, based in a matrix with attributes found in different academic projects carried out over 10 years, and weighted according to certain criteria. It is expected that the result of this analysis will help professors choose the most appropriate software project to develop in class, depending on the characteristics of each project.",
              "pageNumber": 139,
              "isPageNumberRoman": false
            },
            {
              "id": "6yGWfb1sVA8Xu5Ip4l48Qu",
              "type": "authorPaper",
              "text": "Poster: Continuous Inspection in the Classroom: Improving Students' Programming Quality with Social Coding Methods",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6UKNljf5nlt1ncD2ve9GH6/3WwTc5xDdJ3iD9BZuxAakg.pdf",
              "extraLocations": [],
              "authorNames": "Yao Lu (National University of Defense Technology), Xinjun Mao (National University of Defense Technology), Tao Wang (National University of Defense Technology), Gang Yin (National University of Defense Technology), Zude Li (Central South University), Huaimin Wang (National University of Defense Technology)",
              "abstract": "Rich research has shown that both the teaching and learning of high-quality programming are challenging and deficient in most colleges' education systems. Recently, the continuous inspection paradigm has been widely used by developers on social coding sites (e.g., GitHub) as an important method to ensure the internal quality of massive code contributions. In this study, we designed a specific continuous inspection process for students' collaborative projects and conducted a controlled experiment with 48 students from the same course during two school years to evaluate how the process affects their programming quality. Our results show that continuous inspection can significantly reduce the density of code quality issues introduced in the code.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Continuous Inspection in the Classroom: Improving Students' Programming Quality with Social Coding Methods 1520648393815 Yao Lu National University of Defense Technology luyao08@nudt.edu.cn Xinjun Mao National University of Defense Technology xjmao@nudt.edu.cn Tao Wang National University of Defense Technology taowang2005@nudt.edu.cn Gang Yin National University of Defense Technology gangyin@nudt.edu.cn Zude Li Central South University zli@csu.edu.cn Huaimin Wang National University of Defense Technology hmwang@nudt.edu.cn Continuous inspection programming quality SonarQube Rich research has shown that both the teaching and learning of high-quality programming are challenging and deficient in most colleges' education systems. Recently, the continuous inspection paradigm has been widely used by developers on social coding sites (e.g., GitHub) as an important method to ensure the internal quality of massive code contributions. In this study, we designed a specific continuous inspection process for students' collaborative projects and conducted a controlled experiment with 48 students from the same course during two school years to evaluate how the process affects their programming quality. Our results show that continuous inspection can significantly reduce the density of code quality issues introduced in the code.",
              "pageNumber": 141,
              "isPageNumberRoman": false
            },
            {
              "id": "ejOpYJJxpVfrbmJBHKm9X",
              "type": "authorPaper",
              "text": "Poster: Startup Software Development Education: A Systematic Mapping Study",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7s17xrOXocOz9TrWmIIgiY/62N7hNPnPuRUIjG4IN62FM.pdf",
              "extraLocations": [],
              "authorNames": "Rafael Chanin (PUCRS), Afonso Sales (PUCRS), Leandro Pompermaier (PUCRS), Rafael Prikladnicki (PUCRS)",
              "abstract": "This study aims to characterize the state-of-the-art of the software startup education by analyzing and identifying best practices, opportunities and gaps on this field. To do so, we conducted a systematic mapping study in order to analyze and evaluate studies on software startup education. As a result, we found 31 primary studies in this process. These studies were classified into for categories: real projects, multidiscipline, environment and teaching. We concluded that research on software startup education is still scarce. Furthermore, there are several gaps and opportunities to be explore in future works. One of them is the difficulty in providing a real world experience in a educational setting. Successful cases reported combine three major components: real world projects, the right environment and a multidisciplinary context.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Startup Software Development Education: A Systematic Mapping Study 1521033402113 Rafael Chanin PUCRS rafael.chanin@pucrs.br Afonso Sales PUCRS afonso.sales@pucrs.br Leandro Pompermaier PUCRS leandro.pompermaier@pucrs.br Rafael Prikladnicki PUCRS rafaelp@pucrs.br Startup Education Startup Software Development Education Software Engineering Education Entrepreneurship Education This study aims to characterize the state-of-the-art of the software startup education by analyzing and identifying best practices, opportunities and gaps on this field. To do so, we conducted a systematic mapping study in order to analyze and evaluate studies on software startup education. As a result, we found 31 primary studies in this process. These studies were classified into for categories: real projects, multidiscipline, environment and teaching. We concluded that research on software startup education is still scarce. Furthermore, there are several gaps and opportunities to be explore in future works. One of them is the difficulty in providing a real world experience in a educational setting. Successful cases reported combine three major components: real world projects, the right environment and a multidisciplinary context.",
              "pageNumber": 143,
              "isPageNumberRoman": false
            },
            {
              "id": "01on63JfOZlbNRZ3rTEu3",
              "type": "authorPaper",
              "text": "Poster: Analyzing the Transactive Memory in Teaching Software Engineering",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2mjQ6u3z5DtWVh8ZGkVecX/2RvFkXZzQGF6RmgO4z2AIM.pdf",
              "extraLocations": [],
              "authorNames": "Styliani Kleanthous (University of Cyprus), Georgia Kapitsaki (University of Cyprus)",
              "abstract": "Software Engineering education requires offering to students practical experience via collaboration with the industry and working in teams. At the same time, students require different skills and knowledge at different levels of their studies, i.e. undergraduate versus postgraduate. In this context, Transactive Memory, referring to the shared store of knowledge, affects the dynamics in groups influencing the teaching outcome. In this paper, we present the process that we have employed in University of Cyprus, for teaching Software Engineering courses to bachelor and master students. We describe the process of team building, the different roles, and how the group dynamics can affect Transactive Memory.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Analyzing the Transactive Memory in Teaching Software Engineering 1520610177312 Styliani Kleanthous University of Cyprus stellak@cs.ucy.ac.cy Georgia Kapitsaki University of Cyprus gkapi@cs.ucy.ac.cy Software Engineering education transactive memory system project manager Software Engineering education requires offering to students practical experience via collaboration with the industry and working in teams. At the same time, students require different skills and knowledge at different levels of their studies, i.e. undergraduate versus postgraduate. In this context, Transactive Memory, referring to the shared store of knowledge, affects the dynamics in groups influencing the teaching outcome. In this paper, we present the process that we have employed in University of Cyprus, for teaching Software Engineering courses to bachelor and master students. We describe the process of team building, the different roles, and how the group dynamics can affect Transactive Memory.",
              "pageNumber": 145,
              "isPageNumberRoman": false
            },
            {
              "id": "2AHyaDAWjiAQU4feRQZV1x",
              "type": "authorPaper",
              "text": "Poster: Improving Formation of Student Teams: A Clustering Approach",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6OdCnFISWjwpH1KZizzaXP/2kocifGfEnvPAE8UATEbgY.pdf",
              "extraLocations": [],
              "authorNames": "Shoaib Akbar (University of North Carolina Charlotte), Edward Gehringer (North Carolina State University), Zhewei Hu (North Carolina State University)",
              "abstract": "Today's courses in engineering and other fields frequently involve projects done by teams of students. An important aspect of these team assignments is the formation of the teams. In some courses, teams select different topics to work on. Ideally, team formation would be included with topic selection, so teams could be formed from students interested in the same topics. Intuitive criteria for a team formation algorithm are that students should be assigned to (1) a topic which they have interest and (2) a team of students with similar interests in their topic. We propose an approach to meeting these criteria by mining student preferences for topics with a clustering approach and then matching them in groups to topics that suit their shared interests. Our implementation is based on hierarchical k-means clustering and a weighting formula that favors increasing overall student satisfaction and adding members until the maximum allowable team size is reached.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Improving Formation of Student Teams: A Clustering Approach 1520964136258 Shoaib Akbar University of North Carolina Charlotte sakbar1@uncc.edu Edward Gehringer North Carolina State University efg@ncsu.edu Zhewei Hu North Carolina State University zhu6@ncsu.edu student team formation bidding clustering peer assessment system MOOCs Today's courses in engineering and other fields frequently involve projects done by teams of students. An important aspect of these team assignments is the formation of the teams. In some courses, teams select different topics to work on. Ideally, team formation would be included with topic selection, so teams could be formed from students interested in the same topics. Intuitive criteria for a team formation algorithm are that students should be assigned to (1) a topic which they have interest and (2) a team of students with similar interests in their topic. We propose an approach to meeting these criteria by mining student preferences for topics with a clustering approach and then matching them in groups to topics that suit their shared interests. Our implementation is based on hierarchical k-means clustering and a weighting formula that favors increasing overall student satisfaction and adding members until the maximum allowable team size is reached.",
              "pageNumber": 147,
              "isPageNumberRoman": false
            },
            {
              "id": "5TL0DH3LaW72rLfhJfUyUj",
              "type": "authorPaper",
              "text": "Poster: Are Our Students Engaged in Their Studies? Professional Engagement vs. Study Engagement",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5xtA0uJd6thgqgqjjCW6bY/ywTO3ZzLDFUoUS3EoFZcD.pdf",
              "extraLocations": [],
              "authorNames": "Arnon Sturm (Ben Gurion University of the Negev), Timothy C. Lethbridge (University of Ottawa)",
              "abstract": "Engagement has been shown to contribute to students' success. We used an NSSE-like survey and interviews to examine engagement of students registered in software engineering and information system engineering at Ben Gurion University of the Negev (BGU). The survey showed BGU students had gener-ally lower engagement in comparison to US students except for in collaborative learning. BGU students lean towards perceiving their studies as a means for professional success rather than for traditional academic success. We attribute the differ-ences between the students and their US counterparts to dif-ferences in culture and the age of digital media that allows for multiple ways of learning beyond the university.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Are Our Students Engaged in Their Studies? Professional Engagement vs. Study Engagement 1520528480096 Arnon Sturm Ben Gurion University of the Negev sturm@bgu.ac.il Timothy C. Lethbridge University of Ottawa tcl@eecs.uottawa.ca Student Engagement Student Motivation NSSE Survey Engagement has been shown to contribute to students' success. We used an NSSE-like survey and interviews to examine engagement of students registered in software engineering and information system engineering at Ben Gurion University of the Negev (BGU). The survey showed BGU students had gener-ally lower engagement in comparison to US students except for in collaborative learning. BGU students lean towards perceiving their studies as a means for professional success rather than for traditional academic success. We attribute the differ-ences between the students and their US counterparts to dif-ferences in culture and the age of digital media that allows for multiple ways of learning beyond the university.",
              "pageNumber": 149,
              "isPageNumberRoman": false
            },
            {
              "id": "5juZ5W3goDnSSFOzs6PAZZ",
              "type": "authorPaper",
              "text": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf",
              "extraLocations": [],
              "authorNames": "Harumi Watanabe (Tokai University), Mikiko Sato (Tokai University), Masafumi Miwa (Tokushima University), Makoto Imamura (Tokai University), Shintaro Hosoai (Change Vision), Nobuhiko Ogura (Tokyo City University), Hiroyuki Nakamura (Kyushu University), Kenji Hisazumi (Kyushu University)",
              "abstract": "This article introduces a multidisciplinary skill assessment for learning embedded software development. In the industry, software engineers and mechanical engineers have to communicate with each other, and hence, these engineers need to have multidisciplinary skills. For learning such skills, we need to give an occasion to work with different field students. To this end, we have been organizing a robot contest with embedded software development education. One of the goals of the contest is to inculcate multidisciplinary skills. However, we have not clarified the contribution. Thus, we construct a multidisciplinary skill assessment map based on the experiences gained through these contests. The map consists of (1) integration skill, (2) performing skill, and (3) cross-understanding skill.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest 1521348720912 Harumi Watanabe Tokai University harumi@wing.ncc.u-tokai.ac.jp Mikiko Sato Tokai University mikiko.sato@tokai.ac.jp Masafumi Miwa Tokushima University miw@tokushima-u.ac.jp Makoto Imamura Tokai University imamura@tsc.u-tokai.ac.jp Shintaro Hosoai Change Vision shintaro.hosoai@change-vision.com Nobuhiko Ogura Tokyo City University ogura@tcu.ac.jp Hiroyuki Nakamura Kyushu University nakamura@qito.kyushu-u.ac.jp Kenji Hisazumi Kyushu University nel@slrc.kyushu-u.ac.jp embedded system development education software engineering robotics project-based learning This article introduces a multidisciplinary skill assessment for learning embedded software development. In the industry, software engineers and mechanical engineers have to communicate with each other, and hence, these engineers need to have multidisciplinary skills. For learning such skills, we need to give an occasion to work with different field students. To this end, we have been organizing a robot contest with embedded software development education. One of the goals of the contest is to inculcate multidisciplinary skills. However, we have not clarified the contribution. Thus, we construct a multidisciplinary skill assessment map based on the experiences gained through these contests. The map consists of (1) integration skill, (2) performing skill, and (3) cross-understanding skill.",
              "pageNumber": 151,
              "isPageNumberRoman": false
            },
            {
              "id": "2G1q2pMD8nTHDfUWbKoSnZ",
              "type": "authorPaper",
              "text": "Poster: PBL Planner Toolkit: A Canvas-Based Tool for Planning PBL in Software Engineering Education",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/15IAOS4OM0MqkTTIVni2qx/6QEzzL7DSYKJYAOVdmf40C.pdf",
              "extraLocations": [],
              "authorNames": "Gustavo Alexandre (CESAR School), Simone Santos (CIn-UFPE)",
              "abstract": "The PBL (Problem-Based Learning) methodology provides many benefits to those who use it in teaching. In this light, it is important to plan well when using this methodology, efficient to the purposes established by an educator, in a way to avoid those vital aspects to educational planning in the PBL approach that are neglected or forgotten. However, there is a lack of specific tools to help educators in the task of planning their teaching, specifically geared to the PBL approach. As an alternative to this problem, this paper proposes a tool consisting of a Canvas PBL and a set of cards intended to guide the planning of teaching in the PBL approach.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: PBL Planner Toolkit: A Canvas-Based Tool for Planning PBL in Software Engineering Education 1520519155865 Gustavo Alexandre CESAR School gugahenrique@gmail.com Simone Santos CIn-UFPE scs@cin.ufpe.br Educational Planning Problem-Based Learning Canvas Computing The PBL (Problem-Based Learning) methodology provides many benefits to those who use it in teaching. In this light, it is important to plan well when using this methodology, efficient to the purposes established by an educator, in a way to avoid those vital aspects to educational planning in the PBL approach that are neglected or forgotten. However, there is a lack of specific tools to help educators in the task of planning their teaching, specifically geared to the PBL approach. As an alternative to this problem, this paper proposes a tool consisting of a Canvas PBL and a set of cards intended to guide the planning of teaching in the PBL approach.",
              "pageNumber": 153,
              "isPageNumberRoman": false
            },
            {
              "id": "6X4M2HhWFBG6CMdaDjO9rn",
              "type": "authorPaper",
              "text": "Poster: Challenge-Based Learning: A Brazilian Case Study",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2l16giaw0MUbxQDUNSTBMV/7CI3uC4gCOKGJlcFqMtVdb.pdf",
              "extraLocations": [],
              "authorNames": "Alan Santos (PUCRS), Afonso Sales (PUCRS), Paulo Fernandes (PUCRS), Josiane Kroll (University of Manitoba)",
              "abstract": "Mobile application development (MAD) has became, or is considering to be a part of the academic curricula in Computer Science courses. However, training students on mobile application development inherits the challenges of teaching software engineering where the target computer is a device that has a large number of features accessible by software. Furthermore, the most related experience in teaching students reveals di culties in developing software engineering competencies. In this paper we present results from a case study conducted in four universities in Brazil. We have investigated the adoption of Challenge-Based Learning (CBL) framework and agile practices for training students in software engineering applied in mobile application development environments.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Challenge-Based Learning: A Brazilian Case Study 1521029964252 Alan Santos PUCRS alan.santos@pucrs.br Afonso Sales PUCRS afonso.sales@pucrs.br Paulo Fernandes PUCRS paulo.fernandes@pucrs.br Josiane Kroll University of Manitoba josiane.kroll@umanitoba.ca Challenge Based Learning Software Development Mobile Agile Practices Software Engineering Education Mobile application development (MAD) has became, or is considering to be a part of the academic curricula in Computer Science courses. However, training students on mobile application development inherits the challenges of teaching software engineering where the target computer is a device that has a large number of features accessible by software. Furthermore, the most related experience in teaching students reveals di culties in developing software engineering competencies. In this paper we present results from a case study conducted in four universities in Brazil. We have investigated the adoption of Challenge-Based Learning (CBL) framework and agile practices for training students in software engineering applied in mobile application development environments.",
              "pageNumber": 155,
              "isPageNumberRoman": false
            },
            {
              "id": "4rnEaHzrNNZtT9eu5rTvUW",
              "type": "authorPaper",
              "text": "Poster: A Conceptual Model for Cooperative Thinking",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/43kOeXPEu4QHTUCpTW99fs/2Ey35xhO4B5q4gXBlj7ifp.pdf",
              "extraLocations": [],
              "authorNames": "Daniel Russo (DISI), Marcello Missiroli (DISI), Paolo Ciancarini (DISI)",
              "abstract": "Training computer scientists to address wicked problems means to focus respectively on the individual capability to think in a computational-oriented way (i.e., Computational Thinking), and on the social dimension of coding (i.e., Agile Values). In this study we propose the conceptual model of Cooperative Thinking, a new education construct of team-based computational problem solving. Cooperative Thinking is not only the sum of Computational Thinking and Agile Values, rather it is a new overarching competence suitable to deal with complex software engineering problems. We suggest to tackle the Cooperative Thinking construct as an education goal, to train new generations of software developers to Pareto-optimize both their individual and teaming performances.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Conceptual Model for Cooperative Thinking 1521034961644 Daniel Russo DISI daniel.russo@unibo.it Marcello Missiroli DISI marcello.missiroli@unibo.it Paolo Ciancarini DISI paolo.ciancarini@unibo.it Computational Thinking Agile values Cooperative Thinking Training computer scientists to address wicked problems means to focus respectively on the individual capability to think in a computational-oriented way (i.e., Computational Thinking), and on the social dimension of coding (i.e., Agile Values). In this study we propose the conceptual model of Cooperative Thinking, a new education construct of team-based computational problem solving. Cooperative Thinking is not only the sum of Computational Thinking and Agile Values, rather it is a new overarching competence suitable to deal with complex software engineering problems. We suggest to tackle the Cooperative Thinking construct as an education goal, to train new generations of software developers to Pareto-optimize both their individual and teaming performances.",
              "pageNumber": 157,
              "isPageNumberRoman": false
            },
            {
              "id": "24vk3bDmDnvoyLqsOHVCqD",
              "type": "authorPaper",
              "text": "Poster: Situation-Based E-Learning in Software Engineering",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf",
              "extraLocations": [],
              "authorNames": "Wilhelm Koop (University of Duisburg-Essen), Tobias Brückmann (CampusLab GmbH), Marian Benner-Wickner (CampusLab GmbH), Markus Kleinschmidt (CampusLab GmbH), Volker Gruhn (University of Duisburg-Essen)",
              "abstract": "Self empowered learning is a great challenge for professionals in software engineering. Due to everyday work, there is often no time or need for complete courses or textbooks on a broad topic. This challenge leads to multiple approaches like learning objects, micro learning and learning nuggets. Critical part of these approaches is to provide metadata to each resource in order to place the resource in context, enabling the learner to easily retrieve resources and the lecturer to reuse the material. Metadata definitions like LOM or IMS-LD are however defined on a generic level, suitable for education in general, without considering specific domain characteristics. Additionally, much of the available learning material focuses on acquisition of knowledge, rather than the empowerment to perform new tasks in the learners current situation. In this paper we present a preliminary model to describe the software engineering specific context of learning material that can be used to extend existing metadata definitions in learning management systems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Situation-Based E-Learning in Software Engineering 1521481969858 Wilhelm Koop University of Duisburg-Essen wilhelm.koop@uni-due.de Tobias Brückmann CampusLab GmbH brueckmann@campus-lab.de Marian Benner-Wickner CampusLab GmbH marian.benner-wickner@campus-lab.de Markus Kleinschmidt CampusLab GmbH markus.kleinschmidt@campus-lab.de Volker Gruhn University of Duisburg-Essen volker.gruhn@uni-due.de interactive learning environments e learning learning metadata Self empowered learning is a great challenge for professionals in software engineering. Due to everyday work, there is often no time or need for complete courses or textbooks on a broad topic. This challenge leads to multiple approaches like learning objects, micro learning and learning nuggets. Critical part of these approaches is to provide metadata to each resource in order to place the resource in context, enabling the learner to easily retrieve resources and the lecturer to reuse the material. Metadata definitions like LOM or IMS-LD are however defined on a generic level, suitable for education in general, without considering specific domain characteristics. Additionally, much of the available learning material focuses on acquisition of knowledge, rather than the empowerment to perform new tasks in the learners current situation. In this paper we present a preliminary model to describe the software engineering specific context of learning material that can be used to extend existing metadata definitions in learning management systems.",
              "pageNumber": 159,
              "isPageNumberRoman": false
            },
            {
              "id": "6voRHtWY8tOAJJCf1VKv7Z",
              "type": "authorPaper",
              "text": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf",
              "extraLocations": [],
              "authorNames": "Erina Makihara (Nara Institute of Science and Technology), Hiroshi Igaki (Osaka Institute of Technology), Norihiro Yoshida (Nagoya University), Kenji Fujiwara (National Institute of Technology), Naoki Kawashima (Nara Institute of Science and Technology), Hajimu Iida (Nara Institute of Science and Technology)",
              "abstract": "Team exercises for software development project-based learning (SDPBL) adopting an agile development model have become popular for training and education worldwide. In the agile development model, an essential part is the build process. In this study, we investigated students' build errors in agile SDPBL projects by monitoring and collecting logs of the build process from 2013 to 2016. From 2013 to 2015, we categorized the build errors and then discussed the resolutions for each types of build errors. In 2016, the instructors modified the SDPBL project the build error types and corresponding cause and resolution. As the result, in 2016, the number of build errors and the time required to solve the build errors decreased compared to previous years.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects 1521446564618 Erina Makihara Nara Institute of Science and Technology makihara.erina.lx0@is.naist.jp Hiroshi Igaki Osaka Institute of Technology hiroshi.igaki@oit.ac.jp Norihiro Yoshida Nagoya University yoshida@ertl.jp Kenji Fujiwara National Institute of Technology fujiwara@toyota-ct.ac.jp Naoki Kawashima Nara Institute of Science and Technology kawashima.naoki.kd5@is.naist.jp Hajimu Iida Nara Institute of Science and Technology iida@itc.naist.jp Software builds Build errors Software development project based learning Software engineering education Team exercises for software development project-based learning (SDPBL) adopting an agile development model have become popular for training and education worldwide. In the agile development model, an essential part is the build process. In this study, we investigated students' build errors in agile SDPBL projects by monitoring and collecting logs of the build process from 2013 to 2016. From 2013 to 2015, we categorized the build errors and then discussed the resolutions for each types of build errors. In 2016, the instructors modified the SDPBL project the build error types and corresponding cause and resolution. As the result, in 2016, the number of build errors and the time required to solve the build errors decreased compared to previous years.",
              "pageNumber": 161,
              "isPageNumberRoman": false
            },
            {
              "id": "4HnprS7EqkHpwy88Vtpg0h",
              "type": "authorPaper",
              "text": "Poster: Deciding Weak Monitorability for Runtime Verification",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Jgn0A6nOj7QIfUc0036qu/2CRsqRAoRBHJxOF6hJzYqb.pdf",
              "extraLocations": [],
              "authorNames": "Zhe Chen (Nanjing University of Aeronautics and Astronautics), Yifan Wu (Nanjing University of Aeronautics and Astronautics), Ou Wei (Nanjing University of Aeronautics and Astronautics), Bin Sheng (Nanjing University of Aeronautics and Astronautics)",
              "abstract": "An important problem in runtime verification is monitorability. If a property is not monitorable, then it is meaningless to check it at runtime, as no satisfaction or violation will be reported in finite steps. In this paper, we revisit the classic definition of monitorability, and show that it is too restrictive for practical runtime verification. We propose a weaker but more practical definition of monitorability, say weak monitorability, and show how to decide weak monitorability for runtime verification.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Deciding Weak Monitorability for Runtime Verification 1521382637327 Zhe Chen Nanjing University of Aeronautics and Astronautics zhechen@nuaa.edu.cn Yifan Wu Nanjing University of Aeronautics and Astronautics 616040988@qq.com Ou Wei Nanjing University of Aeronautics and Astronautics owei@nuaa.edu.cn Bin Sheng Nanjing University of Aeronautics and Astronautics shengbinhello@nuaa.edu.cn runtime verification dynamic analysis weak monitorability decision procedure An important problem in runtime verification is monitorability. If a property is not monitorable, then it is meaningless to check it at runtime, as no satisfaction or violation will be reported in finite steps. In this paper, we revisit the classic definition of monitorability, and show that it is too restrictive for practical runtime verification. We propose a weaker but more practical definition of monitorability, say weak monitorability, and show how to decide weak monitorability for runtime verification.",
              "pageNumber": 163,
              "isPageNumberRoman": false
            },
            {
              "id": "6XIjhouRHTL2YTpfEOTX8m",
              "type": "authorPaper",
              "text": "Poster: LWE: LDA Refined Word Embeddings for Duplicate Bug Report Detection",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5lV7ZnvLFHqlOrp4Wm0luY/2l08CDTfwQAZGb7v4j5WuX.pdf",
              "extraLocations": [],
              "authorNames": "Amar Budhiraja (Microsoft), Raghu Reddy (IIIT-Hyderabad), Manish Shrivastava (IIIT-Hyderabad)",
              "abstract": "Bug reporting is a major part of software maintenance and due to its inherently asynchronous nature, duplicate bug reporting has become fairly common. Detecting duplicate bug reports is an important task in order to avoid the assignment of a same bug to different developers. Earlier approaches have improved duplicate bug report detection by using the notions of word embeddings, topic models and other machine learning approaches. In this poster, we attempt to combine Latent Dirichlet Allocation (LDA) and word embeddings to leverage the strengths of both approaches for this task. As a first step towards this idea, we present initial analysis and an approach which is able to outperform both word embeddings and LDA for this task. We validate our hypothesis on a real world dataset of Firefox project and show that there is potential in combining both LDA and word embeddings for duplicate bug report detection.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: LWE: LDA Refined Word Embeddings for Duplicate Bug Report Detection 1521441248217 Amar Budhiraja Microsoft ambudhir@microsoft.com Raghu Reddy IIIT-Hyderabad raghu.reddy@iiit.ac.in Manish Shrivastava IIIT-Hyderabad m.shrivastava@iiit.ac.in Machine Learning Word Embeddings Duplicate Bug Report Detection Topic Models LDA Bug reporting is a major part of software maintenance and due to its inherently asynchronous nature, duplicate bug reporting has become fairly common. Detecting duplicate bug reports is an important task in order to avoid the assignment of a same bug to different developers. Earlier approaches have improved duplicate bug report detection by using the notions of word embeddings, topic models and other machine learning approaches. In this poster, we attempt to combine Latent Dirichlet Allocation (LDA) and word embeddings to leverage the strengths of both approaches for this task. As a first step towards this idea, we present initial analysis and an approach which is able to outperform both word embeddings and LDA for this task. We validate our hypothesis on a real world dataset of Firefox project and show that there is potential in combining both LDA and word embeddings for duplicate bug report detection.",
              "pageNumber": 165,
              "isPageNumberRoman": false
            },
            {
              "id": "2GA8fTNvX9ek23PRn14ulP",
              "type": "authorPaper",
              "text": "Poster: Inferring API Elements Relevant to an English Query",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CIUBvlM9QN4wbSsCln6t5/4d6HRtxvMOeaXOEvQrgOlj.pdf",
              "extraLocations": [],
              "authorNames": "Thanh Nguyen (Iowa State University), Tien Nguyen (The University of Texas at Dallas)",
              "abstract": "We develop a context-sensitive machine translation approach that takes as query a given English description of a programming task, and infers the corresponding API elements for the task by learning from large training corpus. To determine those API elements, we consider the context of the words in the textual query and the context of API elements that often go together in the corpus. We formulate the problem as a set-based statistical machine translation. Our empirical evaluation shows a promising result for our technique.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Inferring API Elements Relevant to an English Query 1520919775759 Thanh Nguyen Iowa State University thanhng@iastate.edu Tien Nguyen The University of Texas at Dallas tien.n.nguyen@utdallas.edu Statistical Machine Translation Text to Code Translation API elements We develop a context-sensitive machine translation approach that takes as query a given English description of a programming task, and infers the corresponding API elements for the task by learning from large training corpus. To determine those API elements, we consider the context of the words in the textual query and the context of API elements that often go together in the corpus. We formulate the problem as a set-based statistical machine translation. Our empirical evaluation shows a promising result for our technique.",
              "pageNumber": 167,
              "isPageNumberRoman": false
            },
            {
              "id": "46grMYM5Uv52pqM0NQtU9I",
              "type": "authorPaper",
              "text": "Poster: A Study of Monitoring Crosscutting Concerns Implementation",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1aSXQJAPN6sehPZLHqbnaX/xcz8NsFl7YHoVFgXO5Rpa.pdf",
              "extraLocations": [],
              "authorNames": "Grigoreta-Sofia Cojocar (Babes-Bolyai University), Adriana-Mihaela Guran (Babes-Bolyai University)",
              "abstract": "The maintainability and understandability of a software system are affected by the way the system's concerns are implemented, especially if they are crosscutting concerns. In this paper we present a study of how monitoring crosscutting concerns are implemented in ten object-oriented software systems. The study's results are going to be used towards a new approach for automatic identification of monitoring concerns implementation.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Study of Monitoring Crosscutting Concerns Implementation 1521113638333 Grigoreta-Sofia Cojocar Babes-Bolyai University grigo@cs.ubbcluj.ro Adriana-Mihaela Guran Babes-Bolyai University adriana@cs.ubbcluj.ro monitoring concerns implementation automatic identification The maintainability and understandability of a software system are affected by the way the system's concerns are implemented, especially if they are crosscutting concerns. In this paper we present a study of how monitoring crosscutting concerns are implemented in ten object-oriented software systems. The study's results are going to be used towards a new approach for automatic identification of monitoring concerns implementation.",
              "pageNumber": 169,
              "isPageNumberRoman": false
            },
            {
              "id": "5f4Lzvtrnj91RrLFZx23oT",
              "type": "authorPaper",
              "text": "Poster: Duplicate Finder Toolkit",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf",
              "extraLocations": [],
              "authorNames": "Dmitry Luciv (Saint Petersburg State University and LANIT-TERCOM LLC), Dmitrij Koznov (Saint Petersburg State University), George Chernishev (Saint Petersburg State University), Hamid Abdul Basit (Lahore University of Management Sciences), Konstantin Romanovsky (Saint Petersburg State University), Andrey Terekhov (Saint Petersburg State University)",
              "abstract": "Software documentation is a significant component of modern software systems. Each year it becomes more and more complicated, just as the software itself. One of the aspects that negatively impact documentation quality is the presence of textual duplicates. Textual duplicates encountered in software documentation are inherently imprecise, i.e. in a single document the same information may be presented many times with different levels of detail and in various contexts. Documentation maintenance is an acute problem, and there is a strong demand for automation tools in this domain. In this study we present the Duplicate Finder Toolkit, a tool which assists an expert with duplicate maintenance-related tasks. Our tool can facilitate the maintenance process in a number of ways: 1) detection of both exact and near duplicates 2) duplicate visualization via heat maps 3) duplicate analysis — comparison of several duplicate instances, evaluation of their differences, exploration of duplicate context 4) duplicate manipulation and extraction.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Duplicate Finder Toolkit 1521310447353 Dmitry Luciv Saint Petersburg State University and LANIT-TERCOM LLC d.lutsiv@spbu.ru Dmitrij Koznov Saint Petersburg State University d.koznov@spbu.ru George Chernishev Saint Petersburg State University g.chernyshev@spbu.ru Hamid Abdul Basit Lahore University of Management Sciences hamidb@lums.edu.pk Konstantin Romanovsky Saint Petersburg State University k.romanovsky@spbu.ru Andrey Terekhov Saint Petersburg State University a.terekhov@spbu.ru software documents near duplicates software clone detection meaningful search copy-paste Software documentation is a significant component of modern software systems. Each year it becomes more and more complicated, just as the software itself. One of the aspects that negatively impact documentation quality is the presence of textual duplicates. Textual duplicates encountered in software documentation are inherently imprecise, i.e. in a single document the same information may be presented many times with different levels of detail and in various contexts. Documentation maintenance is an acute problem, and there is a strong demand for automation tools in this domain. In this study we present the Duplicate Finder Toolkit, a tool which assists an expert with duplicate maintenance-related tasks. Our tool can facilitate the maintenance process in a number of ways: 1) detection of both exact and near duplicates 2) duplicate visualization via heat maps 3) duplicate analysis — comparison of several duplicate instances, evaluation of their differences, exploration of duplicate context 4) duplicate manipulation and extraction.",
              "pageNumber": 171,
              "isPageNumberRoman": false
            },
            {
              "id": "36t60u08UeWZiOtXqHHuko",
              "type": "authorPaper",
              "text": "Poster: Toward the Development of Richer Properties for Recommender Systems",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/65d36y1ximdoYo8LpVBti1/2sFLx6z7FWcIg5eKrdfbm4.pdf",
              "extraLocations": [],
              "authorNames": "David Shriver (University of Nebraska-Lincoln)",
              "abstract": "The performance of recommender systems is commonly characterized by metrics such as precision and recall. However, these metrics can only provide a coarse characterization of the system, as they offer limited intuition and insights on potential system anomalies, and may fail to provide a developer with an understanding of the strengths and weaknesses of a recommendation algorithm. In this work, we start to describe a model of recommender systems that defines a space of properties. We begin exploring this space by defining templates that relate to the properties of coverage and diversity, and we demonstrate how instantiated characteristics offer complementary insights to precision and recall.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Toward the Development of Richer Properties for Recommender Systems 1521482930214 David Shriver University of Nebraska-Lincoln davidshriver@outlook.com software testing recommender sytems The performance of recommender systems is commonly characterized by metrics such as precision and recall. However, these metrics can only provide a coarse characterization of the system, as they offer limited intuition and insights on potential system anomalies, and may fail to provide a developer with an understanding of the strengths and weaknesses of a recommendation algorithm. In this work, we start to describe a model of recommender systems that defines a space of properties. We begin exploring this space by defining templates that relate to the properties of coverage and diversity, and we demonstrate how instantiated characteristics offer complementary insights to precision and recall.",
              "pageNumber": 173,
              "isPageNumberRoman": false
            },
            {
              "id": "DvOCs1eXHjM1nHxHZS3Jw",
              "type": "authorPaper",
              "text": "Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6aRyn8avZSYSSHnfRPc9Q4/15RozMp8Mi2r6JDsctFnqA.pdf",
              "extraLocations": [],
              "authorNames": "Kunal Banerjee (Intel Labs), Ramanuj Chouksey (IIT Guwahati), Chandan Karfa (IIT Guwahati), Pankaj Kumar Kalita (IIT Guwahati)",
              "abstract": "A pair of inverse operations is defined as two operations that when performed on a number or variable always results in the original number or variable. Novice programmers may introduce such inverse operations; automated parallelizing tools also employ such operations to undo the effects of some speculatively executed operation. Therefore, detection of inverse operations is helpful in both compiler optimization (redundant code elimination) as well as verification of parallelizing frameworks. In this work, we extend the definition of inverse operations to include a set of operations instead of only two and present a method for detecting inverse operations symbolically which would otherwise need complete unrolling of loops. Some interesting intricacies of detecting inverse operations are also discussed.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling 1520489534239 Kunal Banerjee Intel Labs kunal.banerjee@intel.com Ramanuj Chouksey IIT Guwahati r.chouksey@iitg.ernet.in Chandan Karfa IIT Guwahati ckarfa@iitg.ernet.in Pankaj Kumar Kalita IIT Guwahati pankajkalita@iitg.ernet.in inverse operation compiler optimization Integer Set Library A pair of inverse operations is defined as two operations that when performed on a number or variable always results in the original number or variable. Novice programmers may introduce such inverse operations; automated parallelizing tools also employ such operations to undo the effects of some speculatively executed operation. Therefore, detection of inverse operations is helpful in both compiler optimization (redundant code elimination) as well as verification of parallelizing frameworks. In this work, we extend the definition of inverse operations to include a set of operations instead of only two and present a method for detecting inverse operations symbolically which would otherwise need complete unrolling of loops. Some interesting intricacies of detecting inverse operations are also discussed.",
              "pageNumber": 175,
              "isPageNumberRoman": false
            },
            {
              "id": "jNv8AbxkjigNlKJvoOubE",
              "type": "authorPaper",
              "text": "Poster: Efficiently Finding Minimal Failing Input in MapReduce Programs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5BTJs1t7NpwCEatzcHw2gJ/2mc635qKuBjXNwI4Hkwm8d.pdf",
              "extraLocations": [],
              "authorNames": "Muhammad Sohaib Ayub (Lahore University of Management Sciences), Junaid Haroon Siddiqui (Lahore University of Management Sciences)",
              "abstract": "Debugging of distributed computing model programs like MapReduce is a difficult task. That's why prior studies only focus on finding and fixing bugs in early stages of program development. Delta debugging tries to find minimal failing input in sequential programs by dividing inputs into subsets and testing these subsets one-by-one. But no prior work tries to find minimal failing input in distributed programs like MapReduce. In this paper, we present MapRedDD, a framework to efficiently find minimal failing input in MapReduce programs. MapRedDD employs failing input selection technique, focused on identifying the failing input subset in the single run of MapReduce program with multiple input subsets instead of testing each subset separately. This helps to reduce the number of executions of MapReduce program for each input subset and overcome the overhead of job submission, job scheduling and final outcome retrieval. Our work can efficiently find the minimal failing input in the number of executions equal to the number of inputs to MapReduce program N as opposed to the number of executions of MapReduce program equal to the number of input subsets 2^N -1 in worst case for binary search invariant algorithm to find minimal failing input.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Efficiently Finding Minimal Failing Input in MapReduce Programs 1520590598736 Muhammad Sohaib Ayub Lahore University of Management Sciences 15030039@lums.edu.pk Junaid Haroon Siddiqui Lahore University of Management Sciences junaid.siddiqui@lums.edu.pk Software Verification Delta Debugging MapReduce Minimal Failing Input Debugging of distributed computing model programs like MapReduce is a difficult task. That's why prior studies only focus on finding and fixing bugs in early stages of program development. Delta debugging tries to find minimal failing input in sequential programs by dividing inputs into subsets and testing these subsets one-by-one. But no prior work tries to find minimal failing input in distributed programs like MapReduce. In this paper, we present MapRedDD, a framework to efficiently find minimal failing input in MapReduce programs. MapRedDD employs failing input selection technique, focused on identifying the failing input subset in the single run of MapReduce program with multiple input subsets instead of testing each subset separately. This helps to reduce the number of executions of MapReduce program for each input subset and overcome the overhead of job submission, job scheduling and final outcome retrieval. Our work can efficiently find the minimal failing input in the number of executions equal to the number of inputs to MapReduce program N as opposed to the number of executions of MapReduce program equal to the number of input subsets 2^N -1 in worst case for binary search invariant algorithm to find minimal failing input.",
              "pageNumber": 177,
              "isPageNumberRoman": false
            },
            {
              "id": "35Ze5lnfL9WHQdNUOSfbMw",
              "type": "authorPaper",
              "text": "Poster: Forks Insight: Providing an Overview of GitHub Forks",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46AuTosEz8iCsma4CNsxzU/6odbstLJrrnGif0gY2Ryfu.pdf",
              "extraLocations": [],
              "authorNames": "Luyao Ren (Peking University), Shurui Zhou (Carnegie Mellon University), Christian Kästner (Carnegie Mellon University)",
              "abstract": "Fork-based development allows developers to start development from existing software repository by copying the code files. However, when the number of forks grows, contributions are not always visible to others, unless an explicit merge-back attempt is made. To solve this problem, we implemented Forks Insight (www.forks-insight.com) to help developers get an overview of forks on GitHub. The current release version focuses on simple analytics for the high level overview which is lightweight, scalable and practical. It has a user-friendly interactive web interface with features like searching and tagging.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Forks Insight: Providing an Overview of GitHub Forks 1521109728710 Luyao Ren Peking University fancycoder0@gmail.com Shurui Zhou Carnegie Mellon University shuruiz@cs.cmu.edu Christian Kästner Carnegie Mellon University kaestner@cs.cmu.edu Fork-based development Open-source Overview of forks GitHub Fork-based development allows developers to start development from existing software repository by copying the code files. However, when the number of forks grows, contributions are not always visible to others, unless an explicit merge-back attempt is made. To solve this problem, we implemented Forks Insight (www.forks-insight.com) to help developers get an overview of forks on GitHub. The current release version focuses on simple analytics for the high level overview which is lightweight, scalable and practical. It has a user-friendly interactive web interface with features like searching and tagging.",
              "pageNumber": 179,
              "isPageNumberRoman": false
            },
            {
              "id": "3BVMnIkfbfKO41bOiJLvMC",
              "type": "authorPaper",
              "text": "Poster: Use of Trace Link Types in Issue Tracking Systems",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3LodwIy3T6TyziM519l2zg/6ZxSLctP0rebQAl9A0LZAZ.pdf",
              "extraLocations": [],
              "authorNames": "Mihaela Todorova Tomova (Technische Universität Ilmenau), Michael Rath (Technische Universität Ilmenau), Patrick Mäder (Technische Universität Ilmenau)",
              "abstract": "Issue tracking systems (ITS) are widely used to describe and manage activities in software systems. Within the ITS, software developers create issues and establish typed links among these artifacts. A variety of different link types exists, e. g. that one issue clones another. The rational about choosing a specific link type is not always obvious. In this paper, we study link type selection and focus on the relationship of textual properties of connected issues to picked link type. We performed a study on seven open-source systems and quantified the usage of typed links. Further, we report preliminary results indicating, that depending on link type, a link mostly captures textual similarity of issues and thus may provide only limited additional information.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Use of Trace Link Types in Issue Tracking Systems 1521202246025 Mihaela Todorova Tomova Technische Universität Ilmenau mihaela-todorova.tomova@tu-ilmenau.de Michael Rath Technische Universität Ilmenau michael.rath@tu-ilmenau.de Patrick Mäder Technische Universität Ilmenau patrick.maeder@tu-ilmenau.de Traceability Trace Link Evaluation Trace Link Semantics Issue tracking systems (ITS) are widely used to describe and manage activities in software systems. Within the ITS, software developers create issues and establish typed links among these artifacts. A variety of different link types exists, e. g. that one issue clones another. The rational about choosing a specific link type is not always obvious. In this paper, we study link type selection and focus on the relationship of textual properties of connected issues to picked link type. We performed a study on seven open-source systems and quantified the usage of typed links. Further, we report preliminary results indicating, that depending on link type, a link mostly captures textual similarity of issues and thus may provide only limited additional information.",
              "pageNumber": 181,
              "isPageNumberRoman": false
            },
            {
              "id": "4tDEYIvbm5wYfp18MN23Fx",
              "type": "authorPaper",
              "text": "Poster: A Topic Analysis of the R Programming Language",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf",
              "extraLocations": [],
              "authorNames": "Abigail Atchison (Chapman University), Haley Anderson (Chapman University), Christina Berardi (Chapman University), Natalie Best (Chapman University), Cristiano Firmani (Chapman University), Rene German (Chapman University), Erik Linstead (Chapman University)",
              "abstract": "We leverage Latent Dirichlet Allocation to analyze R source code from 10,051 R packages in order to better understand the topic space of scientific computing. Our method is able to identify several generic programming concepts and, more importantly, identify concepts that are highly specific to scientific and high performance computing applications.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Topic Analysis of the R Programming Language 1521433216329 Abigail Atchison Chapman University atchi102@mail.chapman.edu Haley Anderson Chapman University ander427@mail.chapman.edu Christina Berardi Chapman University berar105@mail.chapman.edu Natalie Best Chapman University best120@mail.chapman.edu Cristiano Firmani Chapman University firma103@mail.chapman.edu Rene German Chapman University german@chapman.edu Erik Linstead Chapman University linstead@chapman.edu R topic modeling machine learning We leverage Latent Dirichlet Allocation to analyze R source code from 10,051 R packages in order to better understand the topic space of scientific computing. Our method is able to identify several generic programming concepts and, more importantly, identify concepts that are highly specific to scientific and high performance computing applications.",
              "pageNumber": 183,
              "isPageNumberRoman": false
            },
            {
              "id": "wGRACol4li3h5FGJ0qdDA",
              "type": "authorPaper",
              "text": "Poster: Architecture Reconstruction and Evaluation of Blockchain Open Source Platform",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7owgOp2OxfZOt1X2gaHw4F/3vdTLCMmVDAMW0YWJP11fk.pdf",
              "extraLocations": [],
              "authorNames": "Jungho Kim (Korea Advanced Institute of Science and Technology), Sungwon Kang (Korea Advanced Institute of Science and Technology), Hwi Ahn (Korea Advanced Institute of Science and Technology), Changsup Keum (Electronics and Telecommunications Research Institute), Chan-Gun Lee (Chung-Ang University)",
              "abstract": "Recently, public interest in the blockchain technology has surged and various applications based on the technology have emerged. However, there has been little study on architectural evaluations of popular block chain platforms that can help the developers choose an appropriate architecture matching their needs. In this paper, we reconstruct and evaluate the architecture of Hyperledger and Ethereum, which are representative open source platforms for blockchain. The evaluation results indicate that Hyperledger is strong in modifiability and performance whereas Ethereum is better in security.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Architecture Reconstruction and Evaluation of Blockchain Open Source Platform 1520990978633 Jungho Kim Korea Advanced Institute of Science and Technology swarchi@gmail.com Sungwon Kang Korea Advanced Institute of Science and Technology sungwon.kang@kaist.ac.kr Hwi Ahn Korea Advanced Institute of Science and Technology ahnhwi@kaist.ac.kr Changsup Keum Electronics and Telecommunications Research Institute cskeum@etri.re.kr Chan-Gun Lee Chung-Ang University cglee@cau.ac.kr Blockchain Architecture reconstruction Architecture evaluation Recently, public interest in the blockchain technology has surged and various applications based on the technology have emerged. However, there has been little study on architectural evaluations of popular block chain platforms that can help the developers choose an appropriate architecture matching their needs. In this paper, we reconstruct and evaluate the architecture of Hyperledger and Ethereum, which are representative open source platforms for blockchain. The evaluation results indicate that Hyperledger is strong in modifiability and performance whereas Ethereum is better in security.",
              "pageNumber": 185,
              "isPageNumberRoman": false
            },
            {
              "id": "5NthPFmyEEgLm3OhwTAzWl",
              "type": "authorPaper",
              "text": "Poster Agile Requirement Traceability Matrix",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3yzEh2WxTzA13GGeKsP7aB/1WEquoO9JMTTJeJVxqVgZv.pdf",
              "extraLocations": [],
              "authorNames": "Serin Jeong (Gyeongsang National University), Heetae Cho (Gyeongsang National University), Seonah Lee (Gyeongsang National University)",
              "abstract": "Over the past 20 years, agile development methodology has been commonly adopted by developers. One reason is that it flexibly responds to changes. In contrast, a typical requirement traceability matrix is inflexible in incorporating changes. In this paper, we propose Agile Requirement Traceability Matrix (ARTM). ARTM manages traceability mappings between two artifacts and automatically generates the entire requirement traceability matrix in spreadsheet. The case study, we also conducted, shows that ARTM flexibly incorporates changes in the spirit of agile development.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster Agile Requirement Traceability Matrix 1521004916051 Serin Jeong Gyeongsang National University rin0608@gnu.ac.kr Heetae Cho Gyeongsang National University cht3205@gnu.ac.kr Seonah Lee Gyeongsang National University saleese@gmail.com Agile Requirement Traceability Matrix RTM Over the past 20 years, agile development methodology has been commonly adopted by developers. One reason is that it flexibly responds to changes. In contrast, a typical requirement traceability matrix is inflexible in incorporating changes. In this paper, we propose Agile Requirement Traceability Matrix (ARTM). ARTM manages traceability mappings between two artifacts and automatically generates the entire requirement traceability matrix in spreadsheet. The case study, we also conducted, shows that ARTM flexibly incorporates changes in the spirit of agile development.",
              "pageNumber": 187,
              "isPageNumberRoman": false
            },
            {
              "id": "2X3ERQiCF0uYIU9mZzudKz",
              "type": "authorPaper",
              "text": "Poster: Beyond Spatial and Temporal Memory Safety",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3dtqvxVBduarjvcMne41Mf/69OUrFqRO6wKT2S0zCaUok.pdf",
              "extraLocations": [],
              "authorNames": "Zhe Chen (Nanjing University of Aeronautics and Astronautics), Chuanqi Tao (Nanjing University of Aeronautics and Astronautics), Zhiyi Zhang (Nanjing University of Aeronautics and Astronautics), Zhibin Yang (Nanjing University of Aeronautics and Astronautics)",
              "abstract": "The unsafe features of C often lead to memory errors that can result in vulnerabilities. Dynamic analysis tools are widely used to detect such errors at runtime and enforce memory safety. It is widely believed that memory safety exactly consists of spatial and temporal safety, thus all existing analysis tools aim at detecting spatial or temporal errors. In this paper, we introduce another class of memory safety, namely segment safety, which has been neglected in previous work. Indeed, state-of-the-art analysis tools cannot detect segment errors. Thus we propose and implement a new approach to detect segment errors at runtime.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Beyond Spatial and Temporal Memory Safety 1521377192130 Zhe Chen Nanjing University of Aeronautics and Astronautics zhechen@nuaa.edu.cn Chuanqi Tao Nanjing University of Aeronautics and Astronautics taochuanqi@nuaa.edu.cn Zhiyi Zhang Nanjing University of Aeronautics and Astronautics zyzhang10@nuaa.edu.cn Zhibin Yang Nanjing University of Aeronautics and Astronautics yangzhibin168@163.com memory safety spatial safety temporal safety dynamic analysis C programs segment errors The unsafe features of C often lead to memory errors that can result in vulnerabilities. Dynamic analysis tools are widely used to detect such errors at runtime and enforce memory safety. It is widely believed that memory safety exactly consists of spatial and temporal safety, thus all existing analysis tools aim at detecting spatial or temporal errors. In this paper, we introduce another class of memory safety, namely segment safety, which has been neglected in previous work. Indeed, state-of-the-art analysis tools cannot detect segment errors. Thus we propose and implement a new approach to detect segment errors at runtime.",
              "pageNumber": 189,
              "isPageNumberRoman": false
            },
            {
              "id": "1jSEm8TerBg1xekvTgIDAz",
              "type": "authorPaper",
              "text": "Poster: A Novel Shared Memory Framework for Distributed Deep Learning in High-Performance Computing Architecture",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4GBiV7oWzIbIvJix13pn3z/7quQVnDh9et2QZuKi3KF8X.pdf",
              "extraLocations": [],
              "authorNames": "Shinyoung Ahn (KAIST & ETRI), Joongheon Kim (Chung-Ang Univ.), Sungwon Kang (KAIST)",
              "abstract": "This paper proposes a novel virtual shared memory framework, Soft Memory Box (SMB), which directly shares the memory of remote nodes among distributed processes to improve communication performance/speed via deep learning parameter sharing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Novel Shared Memory Framework for Distributed Deep Learning in High-Performance Computing Architecture 1520906905868 Shinyoung Ahn KAIST & ETRI syahn@etri.re.kr Joongheon Kim Chung-Ang Univ. joongheon@cau.ac.kr Sungwon Kang KAIST sungwon.kang@kaist.ac.kr Distributed deep learning remote shared memory parameter sharing HPC This paper proposes a novel virtual shared memory framework, Soft Memory Box (SMB), which directly shares the memory of remote nodes among distributed processes to improve communication performance/speed via deep learning parameter sharing.",
              "pageNumber": 191,
              "isPageNumberRoman": false
            },
            {
              "id": "6mPJryKX4tuQBZvyOPZR3E",
              "type": "authorPaper",
              "text": "Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46PCpEiqqzcfuFKFQ071QK/704dXR6jLVH4adAgbPP2i8.pdf",
              "extraLocations": [],
              "authorNames": "Amar Budhiraja (Microsoft), Kartik Dutta (IIIT-Hyderabad), Raghu Reddy (IIIT-Hyderabad), Manish Shrivastava (IIIT-Hyderabad)",
              "abstract": "Bug report filing is a major part of software maintenance. Due to the asynchronous nature of the bug filing process, duplicate bug reports are filed. Detecting duplicate bug reports is an important aspect of software maintenance since the same bug should not be assigned to different developers. In this poster, we present Deep Word Embedding Network for computing similarity between two bug reports for the task of duplicate bug report detection. We propose to learn a two step model to calculate similarity between two bug reports by means of word embeddings and a deep neural network. We run experiments on two large datasets of Mozilla Project and Open Office Project and compare the proposed approach with baselines and related approaches. Through this initial work, we show that a combination of word embeddings and deep neural networks can be used to improve duplicate bug report detection.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories 1521447974130 Amar Budhiraja Microsoft ambudhir@microsoft.com Kartik Dutta IIIT-Hyderabad kartik.dutta@research.iiit.ac.in Raghu Reddy IIIT-Hyderabad raghu.reddy@iiit.ac.in Manish Shrivastava IIIT-Hyderabad m.shrivastava@iiit.ac.in Machine Learning Word Embeddings Deep Learning Duplicate Bug Report Detection Bug report filing is a major part of software maintenance. Due to the asynchronous nature of the bug filing process, duplicate bug reports are filed. Detecting duplicate bug reports is an important aspect of software maintenance since the same bug should not be assigned to different developers. In this poster, we present Deep Word Embedding Network for computing similarity between two bug reports for the task of duplicate bug report detection. We propose to learn a two step model to calculate similarity between two bug reports by means of word embeddings and a deep neural network. We run experiments on two large datasets of Mozilla Project and Open Office Project and compare the proposed approach with baselines and related approaches. Through this initial work, we show that a combination of word embeddings and deep neural networks can be used to improve duplicate bug report detection.",
              "pageNumber": 193,
              "isPageNumberRoman": false
            },
            {
              "id": "2inWqNXQjZleLLpL7RkFbU",
              "type": "authorPaper",
              "text": "Poster: Live Path Control Flow Integrity",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/66rLvMbNUR2ntPLR7czmnx/5iReip9NsLrMgb7VJztdM8.pdf",
              "extraLocations": [],
              "authorNames": "Mohamad Barbar (University of Technology Sydney), Yulei Sui (University of Technology Sydney), Hongyu Zhang (University of Newcastle), Shiping Chen (CSIRO/Data61), Jingling Xue (University of New South Wales)",
              "abstract": "Per-Input Control Flow Integrity (PICFI) represents a recent advance in dynamic CFI techniques. PICFI starts with the empty CFG of a program and lazily adds edges to the CFG during execution according to concrete inputs. However, this CFG grows monotonically, i.e., invalid edges are never removed when corresponding control flow transfers (via indirect calls) become illegal (i.e., will never be executed again). This paper presents LPCFI, Live Path Control Flow Integrity, to more precisely enforce forward edge CFI using a dynamically computed CFG by both adding and removing edges for all indirect control flow transfers from function pointer calls, thereby raising the bar against control flow hijacking attacks.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Live Path Control Flow Integrity 1521080054016 Mohamad Barbar University of Technology Sydney mbarbar@runbox.com Yulei Sui University of Technology Sydney yulei.sui@uts.edu.au Hongyu Zhang University of Newcastle Hongyu.zhang@newcastle.edu.au Shiping Chen CSIRO/Data61 Shiping.Chen@data61.csiro.au Jingling Xue University of New South Wales jingling@cse.unsw.edu.au Control Flow Integrity Live Path Hijacking Attacks Per-Input Control Flow Integrity (PICFI) represents a recent advance in dynamic CFI techniques. PICFI starts with the empty CFG of a program and lazily adds edges to the CFG during execution according to concrete inputs. However, this CFG grows monotonically, i.e., invalid edges are never removed when corresponding control flow transfers (via indirect calls) become illegal (i.e., will never be executed again). This paper presents LPCFI, Live Path Control Flow Integrity, to more precisely enforce forward edge CFI using a dynamically computed CFG by both adding and removing edges for all indirect control flow transfers from function pointer calls, thereby raising the bar against control flow hijacking attacks.",
              "pageNumber": 195,
              "isPageNumberRoman": false
            },
            {
              "id": "7BGoOj2FIiQXBD2lYEnLOK",
              "type": "authorPaper",
              "text": "Poster: Using Repository Data for Driving Software Architecture",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7KkMEL4TPzWlaTUD5Aj0Hd/V0s75jWXuVVK6ky99u5wi.pdf",
              "extraLocations": [],
              "authorNames": "Tobias Olsson (Linnaeus University), Morgan Ericsson (Linnaeus University), Anna Wingkvist (Linnaeus University)",
              "abstract": "We are in the pursuit of establishing a method for continuous data driven software architecture.We describe the problem with current methods for measuring the impact of refactoring long lived systems at the architectural level and architecture compliance checking. We summarize our studies of code churn, productivity and an automatic tool for compliance checking. We conclude that architecture violations seem to play an important role, but current methods are infeasible for industry practice. Finally we propose to use repository data mining to improve current methods for architecture compliance checking.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Using Repository Data for Driving Software Architecture 1521447092999 Tobias Olsson Linnaeus University tobias.olsson@lnu.se Morgan Ericsson Linnaeus University morgan.ericsson@lnu.se Anna Wingkvist Linnaeus University anna.wingkvist@lnu.se Open source system technical debt conformance checking repository data mining We are in the pursuit of establishing a method for continuous data driven software architecture.We describe the problem with current methods for measuring the impact of refactoring long lived systems at the architectural level and architecture compliance checking. We summarize our studies of code churn, productivity and an automatic tool for compliance checking. We conclude that architecture violations seem to play an important role, but current methods are infeasible for industry practice. Finally we propose to use repository data mining to improve current methods for architecture compliance checking.",
              "pageNumber": 197,
              "isPageNumberRoman": false
            },
            {
              "id": "2itgCQRYxk5KLP6TTpSaL1",
              "type": "authorPaper",
              "text": "Poster: Analysis of Requirements Quality Evolution",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Oka6DtRrIRdQoPXKe3Y2t/1Sod1yVld1RpM3H1H2IQs3.pdf",
              "extraLocations": [],
              "authorNames": "Eugenio Parra (Universidad Carlos III de Madrid), Jose Luis de la Vara (Universidad Carlos III de Madrid), Luis Alonso (The REUSE Company)",
              "abstract": "A fundamental aspect in the requirements engineering process is to know the quality of a specification, including how the quality evolves over time. This paper introduces an industrial approach for analysis of requirements quality evolution. The approach has been implemented in the System Quality Analyzer tool, exploits quality metrics for requirements correctness, consistency, and completeness, and is based on the storage of quality information in snapshots that are combined and displayed in charts. This can help practitioners to assess the progress and status of a requirements engineering process and to make decisions.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Analysis of Requirements Quality Evolution 1520871749796 Eugenio Parra Universidad Carlos III de Madrid eparra@kr.inf.uc3m.es Jose Luis de la Vara Universidad Carlos III de Madrid jvara@inf.uc3m.es Luis Alonso The REUSE Company luis.alonso@reusecompany.com Requirements quality Quality analysis Quality evolution A fundamental aspect in the requirements engineering process is to know the quality of a specification, including how the quality evolves over time. This paper introduces an industrial approach for analysis of requirements quality evolution. The approach has been implemented in the System Quality Analyzer tool, exploits quality metrics for requirements correctness, consistency, and completeness, and is based on the storage of quality information in snapshots that are combined and displayed in charts. This can help practitioners to assess the progress and status of a requirements engineering process and to make decisions.",
              "pageNumber": 199,
              "isPageNumberRoman": false
            },
            {
              "id": "34znT9msZTjYYPLb4cQXEp",
              "type": "authorPaper",
              "text": "Poster: Using Consensus to Automatically Infer Post-conditions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NFYtBAksKon0AZDQ3kNzF/7glFe6P53311LKbIKeoEJy.pdf",
              "extraLocations": [],
              "authorNames": "Jingyi Su (Bowling Green State University), Mohd Arafat (Bowling Green State University), Robert Dyer (Bowling Green State University)",
              "abstract": "Formal behavioral specifications help ensure the correctness of programs. Writing such specifications by hand however is time-consuming and requires substantial expertise. Previous studies have shown how to use a notion of consensus to automatically infer preconditions for APIs by using a large set of projects. In this work, we propose a similar idea of consensus to automatically infer post-conditions for popular APIs. We propose two new algorithms for mining potential post-conditions from API client code. The first algorithm looks for guarded post-conditions that test the value returned from the API and throws an exception. The second algorithm looks for values flowing from the API to another API with already known preconditions, which recommends them as post-conditions of the first API.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Using Consensus to Automatically Infer Post-conditions 1521157060150 Jingyi Su Bowling Green State University jsu@bgsu.edu Mohd Arafat Bowling Green State University marafat@bgsu.edu Robert Dyer Bowling Green State University rdyer@bgsu.edu specification inference consensus post-condition Formal behavioral specifications help ensure the correctness of programs. Writing such specifications by hand however is time-consuming and requires substantial expertise. Previous studies have shown how to use a notion of consensus to automatically infer preconditions for APIs by using a large set of projects. In this work, we propose a similar idea of consensus to automatically infer post-conditions for popular APIs. We propose two new algorithms for mining potential post-conditions from API client code. The first algorithm looks for guarded post-conditions that test the value returned from the API and throws an exception. The second algorithm looks for values flowing from the API to another API with already known preconditions, which recommends them as post-conditions of the first API.",
              "pageNumber": 202,
              "isPageNumberRoman": false
            },
            {
              "id": "2zJ1PnlgeH9mZKCnqrcsr",
              "type": "authorPaper",
              "text": "Poster: Pairika—A Failure Diagnosis Benchmark for C++ Programs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/f1ubgK4ymojHoMrnw03rC/3VlpXQf3WB9xHCuvaGO8zz.pdf",
              "extraLocations": [],
              "authorNames": "Md. Rezaur Rahman (Technical University of Munich), Mojdeh Golagha (Technical University of Munich), Alexander Pretschner (Technical University of Munich)",
              "abstract": "Empirical studies in software testing require realistic benchmarks which are able to mimic industry-like environments. For evaluating automated failure diagnosis techniques, one needs real reproducible bugs with at least one associated failing test. Extracting such bugs is challenging and time-consuming. This paper presents Pairika, a failure diagnosis benchmark for C++ programs. Pairika contains 40 bugs extracted from 7 modules of OpenCV project with more than 490 KLoC and 11129 tests. Each bug is accompanied by at least one failing test. We publish Pairika to facilitate and stimulate further research on automated failure diagnosis techniques. Pairika is available at: https://github.com/tum-i22/Pairika",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Pairika—A Failure Diagnosis Benchmark for C++ Programs 1521455780514 Md. Rezaur Rahman Technical University of Munich reza.rahman@tum.de Mojdeh Golagha Technical University of Munich mojdeh.golagha@tum.de Alexander Pretschner Technical University of Munich alexander.pretschner@tum.de Real Bugs Failure clustering Fault localization C++ Benchmark Empirical studies in software testing require realistic benchmarks which are able to mimic industry-like environments. For evaluating automated failure diagnosis techniques, one needs real reproducible bugs with at least one associated failing test. Extracting such bugs is challenging and time-consuming. This paper presents Pairika, a failure diagnosis benchmark for C++ programs. Pairika contains 40 bugs extracted from 7 modules of OpenCV project with more than 490 KLoC and 11129 tests. Each bug is accompanied by at least one failing test. We publish Pairika to facilitate and stimulate further research on automated failure diagnosis techniques. Pairika is available at: https://github.com/tum-i22/Pairika",
              "pageNumber": 204,
              "isPageNumberRoman": false
            },
            {
              "id": "27rMtkKFoRiajViTBdgK96",
              "type": "authorPaper",
              "text": "Poster: Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7MLLCasUAOaMfVBTbfYztV/3klSThcA5OaZugEDIiq481.pdf",
              "extraLocations": [],
              "authorNames": "Yiming Tang (City University of New York), Raffi Khatchadourian (City University of New York), Mehdi Bagherzadeh (Oakland University), Syed Ahmed (Oakland University)",
              "abstract": "The Java 8 Stream API sets forth a promising new programming model that incorporates functional-like, MapReduce-style features into a mainstream programming language. However, using streams correctly and efficiently may involve subtle considerations. In this poster, we present our ongoing work and preliminary results towards an automated refactoring approach that assists developers in writing optimal stream code. The approach, based on ordering and typestate analysis, determines when it is safe and advantageous to convert streams to parallel and optimize parallel streams.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams 1521511285354 Yiming Tang City University of New York ytang3@gradcenter.cuny.edu Raffi Khatchadourian City University of New York raffi.khatchadourian@hunter.cuny.edu Mehdi Bagherzadeh Oakland University mbagherzadeh@oakland.edu Syed Ahmed Oakland University sfahmed@oakland.edu refactoring parallelization typestate analysis Java 8 streams The Java 8 Stream API sets forth a promising new programming model that incorporates functional-like, MapReduce-style features into a mainstream programming language. However, using streams correctly and efficiently may involve subtle considerations. In this poster, we present our ongoing work and preliminary results towards an automated refactoring approach that assists developers in writing optimal stream code. The approach, based on ordering and typestate analysis, determines when it is safe and advantageous to convert streams to parallel and optimize parallel streams.",
              "pageNumber": 206,
              "isPageNumberRoman": false
            },
            {
              "id": "4NgNwxjVcWwYbnuqkkKsaq",
              "type": "authorPaper",
              "text": "Poster: Testing Web-Based Applications with the Voice Controlled Accessibility and Testing Tool (VCAT)",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1BWbKsMWVwdQ2PAjZoUJdu/2luGF9KgPFXAdbicSaC4sa.pdf",
              "extraLocations": [],
              "authorNames": "Nagendra Prasad Kasaghatta Ramachandra (University of Texas at Arlington), Christoph Csallner (University of Texas at Arlington)",
              "abstract": "Many web applications and software engineering tools such as test generators are not accessible for users who do not use traditional input devices such as mouse and keyboard. To address this shortcoming of current applications, this work leverages recent speech recognition advances to create a browser plugin that interprets voice inputs as web browser commands and as steps in a corresponding test case. In an initial experiment, the resulting Voice Controlled Accessibility and Testing tool (VCAT) prototype for Chrome and Selenium yielded a lower overall runtime than a traditional test creation approach.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Testing Web-Based Applications with the Voice Controlled Accessibility and Testing Tool (VCAT) 1521213603110 Nagendra Prasad Kasaghatta Ramachandra University of Texas at Arlington nagendra.ramachandra@mavs.uta.edu Christoph Csallner University of Texas at Arlington csallner@uta.edu Accessible software engineering tool voice control Selenium Many web applications and software engineering tools such as test generators are not accessible for users who do not use traditional input devices such as mouse and keyboard. To address this shortcoming of current applications, this work leverages recent speech recognition advances to create a browser plugin that interprets voice inputs as web browser commands and as steps in a corresponding test case. In an initial experiment, the resulting Voice Controlled Accessibility and Testing tool (VCAT) prototype for Chrome and Selenium yielded a lower overall runtime than a traditional test creation approach.",
              "pageNumber": 208,
              "isPageNumberRoman": false
            },
            {
              "id": "1bf6z2rHG5dAP4XNX31LK0",
              "type": "authorPaper",
              "text": "Poster: Leveraging Product Relationships to Generate Candidate Bugs for Duplicate Bug Prediction",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3skdQaTH5MfrXjt8sLFamC/01NHC0xsEdaGiQjXDjWADh.pdf",
              "extraLocations": [],
              "authorNames": "Emily Su (Oracle Corporation), Sameer Joshi (Oracle Corporation)",
              "abstract": "Adaptive Bug Search (ABS) is a service developed by Oracle that uses machine learning to find potential duplicate bugs for a given input bug. ABS leverages the product and component relationships of existing duplicate bug pairs to limit the set of candidate bugs in which it searches for potential duplicates. In this paper, we discuss various approaches for selecting and refining the set of candidate bugs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Leveraging Product Relationships to Generate Candidate Bugs for Duplicate Bug Prediction 1521240233445 Emily Su Oracle Corporation emily.su@oracle.com Sameer Joshi Oracle Corporation sameer.joshi@oracle.com Duplicate Bug Prediction Human Factors Machine Learning Adaptive Bug Search (ABS) is a service developed by Oracle that uses machine learning to find potential duplicate bugs for a given input bug. ABS leverages the product and component relationships of existing duplicate bug pairs to limit the set of candidate bugs in which it searches for potential duplicates. In this paper, we discuss various approaches for selecting and refining the set of candidate bugs.",
              "pageNumber": 210,
              "isPageNumberRoman": false
            },
            {
              "id": "syvsIeMjAT5MWYr08VEu1",
              "type": "authorPaper",
              "text": "Poster: Protecting Remote Controlling Apps of Smart-Home-Oriented IOT Devices",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7wSpD2mtPyz82leCYulmFK/9ndFVMlu3Sf5saqySGQN5.pdf",
              "extraLocations": [],
              "authorNames": "Eric Ruiz (University of Texas at San Antonio), Richard Avelar (University of Texas at San Antonio), Xiaoyin Wang (University of Texas at San Antonio)",
              "abstract": "Smart home systems rely on cloud servers and multiple IOT (Internet Of Things) devices such as smart thermometers, video monitors, and smart appliances to realize convenient remote home control and monitoring. As smart home systems get more and more popular recently, the security protection of smart home systems has become an important problem. Among the components of a smart home system, the remote controlling mobile app is often the most vulnerable part as it is directly exposed to the public network. In this paper, we propose a novel tool, HomeGuard, to detect potential vulnerabilities in remote controlling apps of smart home system. Specifically, HomeGuard first identifies information flows related to sensitive control and data messages, and then checks where such information flows to and whether they are properly encrypted.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Protecting Remote Controlling Apps of Smart-Home-Oriented IOT Devices 1521842029755 Eric Ruiz University of Texas at San Antonio Eric.Ruiz@utsa.edu Richard Avelar University of Texas at San Antonio Richard.Avelar@utsa.edu Xiaoyin Wang University of Texas at San Antonio xiaoyin.wang@utsa.edu IOT Smart Home Network Analysis Smart home systems rely on cloud servers and multiple IOT (Internet Of Things) devices such as smart thermometers, video monitors, and smart appliances to realize convenient remote home control and monitoring. As smart home systems get more and more popular recently, the security protection of smart home systems has become an important problem. Among the components of a smart home system, the remote controlling mobile app is often the most vulnerable part as it is directly exposed to the public network. In this paper, we propose a novel tool, HomeGuard, to detect potential vulnerabilities in remote controlling apps of smart home system. Specifically, HomeGuard first identifies information flows related to sensitive control and data messages, and then checks where such information flows to and whether they are properly encrypted.",
              "pageNumber": 212,
              "isPageNumberRoman": false
            },
            {
              "id": "1fo3sJMnI1lRob99N4VsE9",
              "type": "authorPaper",
              "text": "Poster: MC/DC Coverage-Oriented Compiler Optimization for Symbolic Execution",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19wMK3y6rrPtypHvRfdvIL/7kv13UfiLfkXF2w30TVg5y.pdf",
              "extraLocations": [],
              "authorNames": "Yijun Liu (National University of Defense Technology Changsha), Zhenbang Chen (National University of Defense Technology Changsha), Wei Dong (National University of Defense Technology Changsha), Chendong Feng (National University of Defense Technology Changsha)",
              "abstract": "Complier optimizations influence the effectiveness and efficiency of symbolic execution. In this extended abstract, we report our recent results of recommending compiler optimizations for symbolic execution w.r.t. MC/DC coverage. We carried out extensive experiments to study the influence of compiler optimizations on MC/DC coverage. Then, an SVM-based optimization recommendation method is designed and implementation. The preliminary experimental results are promising.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: MC/DC Coverage-Oriented Compiler Optimization for Symbolic Execution 1521019292637 Yijun Liu National University of Defense Technology Changsha yjunjunliu@163.com Zhenbang Chen National University of Defense Technology Changsha zbchen@nudt.du.cn Wei Dong National University of Defense Technology Changsha wdong@nudt.edu.cn Chendong Feng National University of Defense Technology Changsha 820654416@qq.com Symbolic Execution Compiler Optimization Recommendation Complier optimizations influence the effectiveness and efficiency of symbolic execution. In this extended abstract, we report our recent results of recommending compiler optimizations for symbolic execution w.r.t. MC/DC coverage. We carried out extensive experiments to study the influence of compiler optimizations on MC/DC coverage. Then, an SVM-based optimization recommendation method is designed and implementation. The preliminary experimental results are promising.",
              "pageNumber": 214,
              "isPageNumberRoman": false
            },
            {
              "id": "5gnOlKgaht8W1aUIbppmsA",
              "type": "authorPaper",
              "text": "Poster: Introducing Quality Models Based on Joint Probabilities",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IJWpRoZ08GOMTcP32lLK7/5HUHC5NmVCLkRPPdOrslsu.pdf",
              "extraLocations": [],
              "authorNames": "Maria Ulan (Linnaeus University), Welf Löwe (Linnaeus University), Morgan Ericsson (Linnaeus University), Anna Wingkvist (Linnaeus University)",
              "abstract": "Multi-dimensional goals can be formalized in so-called quality models. Often, each dimension is assessed with a set of metrics that are not comparable; they come with different units, scale types, and distributions of values. Aggregating the metrics to a single quality score in an ad-hoc manner cannot be expected to provide a reliable basis for decision making. Therefore, aggregation needs to be mathematically well-defined and interpretable. We present such a way of defining quality models based on joint probabilities. We exemplify our approach using a quality model with 30 standard metrics assessing technical documentation quality and study ca. 20,000 real-world files. We study the effect of several tests on the independence and results show that metrics are, in general, not independent. Finally, we exemplify our suggested definition of quality models in this domain.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Introducing Quality Models Based on Joint Probabilities 1521472423537 Maria Ulan Linnaeus University maria.ulan@lnu.se Welf Löwe Linnaeus University welf.lowe@lnu.se Morgan Ericsson Linnaeus University morgan.ericsson@lnu.se Anna Wingkvist Linnaeus University anna.wingkvist@lnu.se Quality assessment Software metrics Bayesian networks Multi-dimensional goals can be formalized in so-called quality models. Often, each dimension is assessed with a set of metrics that are not comparable; they come with different units, scale types, and distributions of values. Aggregating the metrics to a single quality score in an ad-hoc manner cannot be expected to provide a reliable basis for decision making. Therefore, aggregation needs to be mathematically well-defined and interpretable. We present such a way of defining quality models based on joint probabilities. We exemplify our approach using a quality model with 30 standard metrics assessing technical documentation quality and study ca. 20,000 real-world files. We study the effect of several tests on the independence and results show that metrics are, in general, not independent. Finally, we exemplify our suggested definition of quality models in this domain.",
              "pageNumber": 216,
              "isPageNumberRoman": false
            },
            {
              "id": "1nVeJRaYXPN60W7EIcmDcw",
              "type": "authorPaper",
              "text": "Poster: Program Repair that Learns from Mistakes",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5WYshgXWWlCoNftsjI3HqS/3gQhUCRnqq5G6N5jKJapeL.pdf",
              "extraLocations": [],
              "authorNames": "Bat-Chen Rothenberg (Technion - Israel Institute of Technology), Orna Grumberg (Technion - Israel Institute of Technology)",
              "abstract": "Automated program repair is a very active research field, with promising results so far. Several program repair techniques follow a Generate-and-Validate work-scheme: programs are iteratively sampled from within a predefined repair search space, and then checked for correctness to see if they constitute a repair. In this poster, we propose an enhanced work-scheme, called Generate-Validate-AnalyzeErr, in which whenever a program is found to be incorrect, the error trace that is the evidence of the bug is further analyzed to obtain a search hint. This hint improves the sampling process of programs in the future. The effectiveness of this work-scheme is illustrated in a novel technique for program repair, where search hints are generated in a process we call error generalization. The goal of error generalization is to remove from the search space all programs that exhibit the same erroneous behavior. The aim of this poster is to present our vision of the future of program repair, and trigger research in directions that have not been explored so far. We believe that many existing techniques can benefit from our new work-scheme, by focusing attention on what can be learned from failed repair attempts. We hope this poster inspires others and gives rise to further work on this subject.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Program Repair that Learns from Mistakes 1521499909150 Bat-Chen Rothenberg Technion - Israel Institute of Technology batg@cs.technion.ac.il Orna Grumberg Technion - Israel Institute of Technology orna@cs.technion.ac.il Program repair Error generalization Error explanation Automated program repair is a very active research field, with promising results so far. Several program repair techniques follow a Generate-and-Validate work-scheme: programs are iteratively sampled from within a predefined repair search space, and then checked for correctness to see if they constitute a repair. In this poster, we propose an enhanced work-scheme, called Generate-Validate-AnalyzeErr, in which whenever a program is found to be incorrect, the error trace that is the evidence of the bug is further analyzed to obtain a search hint. This hint improves the sampling process of programs in the future. The effectiveness of this work-scheme is illustrated in a novel technique for program repair, where search hints are generated in a process we call error generalization. The goal of error generalization is to remove from the search space all programs that exhibit the same erroneous behavior. The aim of this poster is to present our vision of the future of program repair, and trigger research in directions that have not been explored so far. We believe that many existing techniques can benefit from our new work-scheme, by focusing attention on what can be learned from failed repair attempts. We hope this poster inspires others and gives rise to further work on this subject.",
              "pageNumber": 218,
              "isPageNumberRoman": false
            },
            {
              "id": "15g3vXdpA7n3Jdmvj7yurE",
              "type": "authorPaper",
              "text": "Poster: A Changeset-Based Approach to Assess Source Code Density and Developer Efficacy",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Tm0IqbemtTOBG0FpCKG2m/4AcH1Q8EG4SjleFQ38joZ0.pdf",
              "extraLocations": [],
              "authorNames": "Sebastian Hönel (Linnaeus University), Morgan Ericsson (Linnaeus University), Welf Löwe (Linnaeus University), Anna Wingkvist (Linnaeus University)",
              "abstract": "The productivity of a (team of) developer(s) can be expressed as a ratio between effort and delivered functionality. Several different estimation models have been proposed. These are based on statistical analysis of real development projects; their accuracy depends on the number and the precision of data points. We propose a data-driven method to automate the generation of precise data points. Functionality is proportional to the code size and Lines of Code (LoC) is a fundamental metric of code size. However, code size and LoC are not well defined as they could include or exclude lines that do not affect the delivered functionality. We present a new approach to measure the density of code in software repositories. We demonstrate how the accuracy of development time spent in relation to delivered code can be improved when basing it on net-instead of the gross-size measurements. We validated our tool by studying ca. 1,650 open-source software projects.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Changeset-Based Approach to Assess Source Code Density and Developer Efficacy 1521455970885 Sebastian Hönel Linnaeus University sebastian.honel@lnu.se Morgan Ericsson Linnaeus University morgan.ericsson@lnu.se Welf Löwe Linnaeus University welf.lowe@lnu.se Anna Wingkvist Linnaeus University anna.wingkvist@lnu.se Software Repositories Clone Detection Source code density Effort estimation The productivity of a (team of) developer(s) can be expressed as a ratio between effort and delivered functionality. Several different estimation models have been proposed. These are based on statistical analysis of real development projects; their accuracy depends on the number and the precision of data points. We propose a data-driven method to automate the generation of precise data points. Functionality is proportional to the code size and Lines of Code (LoC) is a fundamental metric of code size. However, code size and LoC are not well defined as they could include or exclude lines that do not affect the delivered functionality. We present a new approach to measure the density of code in software repositories. We demonstrate how the accuracy of development time spent in relation to delivered code can be improved when basing it on net-instead of the gross-size measurements. We validated our tool by studying ca. 1,650 open-source software projects.",
              "pageNumber": 220,
              "isPageNumberRoman": false
            },
            {
              "id": "PCxaESytvkJINk3ffkiU0",
              "type": "authorPaper",
              "text": "Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FOzcRg0BG6NRLGft0111q/ZDCSeD2qsGxWw2YH3ZSLP.pdf",
              "extraLocations": [],
              "authorNames": "Nelly Condori-Fernandez (Universidade da Coruña), Alejandro Catala Bolos (University of Twente), Patricia Lago (Vrije Universiteit Amsterdam)",
              "abstract": "Behavior Change Software systems (BCSSs) have shown promising outcomes in terms of promoting healthy behaviors. However, a negative User Experience (UX) can be induced by BCSS if designers do not have clear understanding of the requirements that factually help in changing the user behavior that achieves a sustainability goal. In order to get insights into how to discover such sustainability requirements, we propose a discovery approach, whose emphasis is placed on negative UX assessed through attitudes and behaviors expressed by users due to the lack of fulfillment of actual user needs. The approach is tested on existing software systems designed for preventing or reducing Repetitive Strain Injury as a particular category of BCSS. Twelve requirements that contribute to social sustainability were discovered.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience 1520789149780 Nelly Condori-Fernandez Universidade da Coruña n.condori.fernandez@udc.es Alejandro Catala Bolos University of Twente a.catala@utwente.nl Patricia Lago Vrije Universiteit Amsterdam p.lago@vu.nl Requirements discovery UX assessment user needs Social sustainability requirements. Behavior Change Software systems (BCSSs) have shown promising outcomes in terms of promoting healthy behaviors. However, a negative User Experience (UX) can be induced by BCSS if designers do not have clear understanding of the requirements that factually help in changing the user behavior that achieves a sustainability goal. In order to get insights into how to discover such sustainability requirements, we propose a discovery approach, whose emphasis is placed on negative UX assessed through attitudes and behaviors expressed by users due to the lack of fulfillment of actual user needs. The approach is tested on existing software systems designed for preventing or reducing Repetitive Strain Injury as a particular category of BCSS. Twelve requirements that contribute to social sustainability were discovered.",
              "pageNumber": 222,
              "isPageNumberRoman": false
            },
            {
              "id": "52jHL3cbzziEpoWoNEdMSN",
              "type": "authorPaper",
              "text": "Poster: Understanding Newcomers Success in Open Source Community",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1vEY6gn8gZNvwOStgfHegX/13c4ewsBH6lkcmQnTnT4HD.pdf",
              "extraLocations": [],
              "authorNames": "Shahab Bayati (The University of Auckland)",
              "abstract": "Newcomers and volunteers contributions play an effective role the open source software (OSS) success. This role is confirmed through a rigor set of studies in software engineering discipline. As Open source projects are developed based on social and technical efforts, then it is very important for newcomers to empower their socio-technical skills. This paper focuses on newcomers' success in open source community by analyzing newcomers' reputation on their initial activities in a social coding environment such as GitHub. By applying mining software repositories (MSR) techniques on GitHub data we found the main projects' attributes where successful newcomers contributed to them. These attributes can help other newcomers to select the right project for their initial activities.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Understanding Newcomers Success in Open Source Community 1521418361124 Shahab Bayati The University of Auckland shbayati@yahoo.com Newcomers Open Source Reputation Analysis Social Coding Newcomers and volunteers contributions play an effective role the open source software (OSS) success. This role is confirmed through a rigor set of studies in software engineering discipline. As Open source projects are developed based on social and technical efforts, then it is very important for newcomers to empower their socio-technical skills. This paper focuses on newcomers' success in open source community by analyzing newcomers' reputation on their initial activities in a social coding environment such as GitHub. By applying mining software repositories (MSR) techniques on GitHub data we found the main projects' attributes where successful newcomers contributed to them. These attributes can help other newcomers to select the right project for their initial activities.",
              "pageNumber": 224,
              "isPageNumberRoman": false
            },
            {
              "id": "2w63YsndaVbEW9tiCA4nXW",
              "type": "authorPaper",
              "text": "Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jO5jPbQCODqSGRusrILtr/6qj2A2RoOEd4Jqd6hegqcw.pdf",
              "extraLocations": [],
              "authorNames": "Janet Wyngaard (University of Notre Dame), Samuel Rund (University of Notre Dame), Gregory Madey (University of Notre Dame), Michael Vierhauser (University of Notre Dame), Jane Cleland-Huang (University of Notre Dame)",
              "abstract": "Small Unmanned Aircraft Systems (sUAS) are an emerging application area for many industries including surveillance, agriculture monitoring, and vector-borne disease control. With drastically lower costs and increasing performance and autonomy, future application evolution will more than likely include the use of sUAS swarms. Several largely successful experiments in recent years, using off the shelf sUAS, have been conducted to address the long standing challenge of controlling and monitoring vector-borne diseases. In this paper we build on lessons learned from these prior efforts, and discuss ways in which swarms of sUAS could be deployed to place and monitor Autocidal Gravid Ovitraps for reducing the mosquito population.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control 1521491623912 Janet Wyngaard University of Notre Dame jwyngaar@nd.edu Samuel Rund University of Notre Dame srund@nd.edu Gregory Madey University of Notre Dame gmadey@nd.edu Michael Vierhauser University of Notre Dame mvierhau@nd.edu Jane Cleland-Huang University of Notre Dame JaneClelandHuang@nd.edu Mosquitoes sUAS AOG RPAS UAV Small Unmanned Aircraft Systems (sUAS) are an emerging application area for many industries including surveillance, agriculture monitoring, and vector-borne disease control. With drastically lower costs and increasing performance and autonomy, future application evolution will more than likely include the use of sUAS swarms. Several largely successful experiments in recent years, using off the shelf sUAS, have been conducted to address the long standing challenge of controlling and monitoring vector-borne diseases. In this paper we build on lessons learned from these prior efforts, and discuss ways in which swarms of sUAS could be deployed to place and monitor Autocidal Gravid Ovitraps for reducing the mosquito population.",
              "pageNumber": 226,
              "isPageNumberRoman": false
            },
            {
              "id": "4zUWchVCFdfWGHieoqFd3z",
              "type": "authorPaper",
              "text": "Poster: Ethics-Aware Software Engineering",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6W8FQPiYViBDN0kL9GhuFL/42ectUCk4oiAxSpzYKdsHh.pdf",
              "extraLocations": [],
              "authorNames": "Fatma Basak Aydemir (Utrecht University), Fabiano Dalpiaz (Utrecht University)",
              "abstract": "Human interaction and behavior are at the core of most software engineering (SE) activities. Furthermore, software is created to fulfill human stakeholders' needs and wishes, and the resulting software is ultimately utilized (directly or indirectly) by human users. Today's software is highly intertwined with our lives, and it possesses an increasing ability to act and influence us. Besides the obvious example of self-driving cars and their potential harmfulness, more mundane software such as social networks may introduce bias, break privacy preferences, lead to digital addiction, etc. Additionally, the SE process itself is highly affected by ethical issues, such as diversity and business ethics. This paper introduces ethics-aware SE, a version of SE in which the ethical values of the stakeholders (including developers and users) are captured, analyzed, and reflected in software specifications and in the SE processes",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Ethics-Aware Software Engineering 1521540642822 Fatma Basak Aydemir Utrecht University f.b.aydemir@uu.nl Fabiano Dalpiaz Utrecht University f.dalpiaz@uu.nl ethics ethical software engineering ethical design ethics compliance requirements engineering Human interaction and behavior are at the core of most software engineering (SE) activities. Furthermore, software is created to fulfill human stakeholders' needs and wishes, and the resulting software is ultimately utilized (directly or indirectly) by human users. Today's software is highly intertwined with our lives, and it possesses an increasing ability to act and influence us. Besides the obvious example of self-driving cars and their potential harmfulness, more mundane software such as social networks may introduce bias, break privacy preferences, lead to digital addiction, etc. Additionally, the SE process itself is highly affected by ethical issues, such as diversity and business ethics. This paper introduces ethics-aware SE, a version of SE in which the ethical values of the stakeholders (including developers and users) are captured, analyzed, and reflected in software specifications and in the SE processes",
              "pageNumber": 228,
              "isPageNumberRoman": false
            },
            {
              "id": "6PVpFguX5fV4jjD8jGR4vz",
              "type": "authorPaper",
              "text": "Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/X0glNBWe9bFHLqk18sHr8/3C06tjBbRFMPTLiNNoEii.pdf",
              "extraLocations": [],
              "authorNames": "Haitao Zhang (Lanzhou University), Guoqiang Li (Shanghai Jiao Tong University), Xiaohong Li (Tianjin University), Zhuo Cheng (Jiangxi Normal University), Jinyun Xue (Jiangxi Normal University), Shaoying Liu (Hosei University)",
              "abstract": "OSEK/VDX is a specification for vehicle-mounted systems and has been widely adopted by automotive companies to develop a distributed application system. However, the ever increasing complexity of the distributed application system has created a challenge for ensuring the reliability in exhaustive way. Model checking has been proposed as a promising technique to exhaustively verify OSEK/VDX distributed application systems such as timing properties, but faces a poor scalability for practicality. In this paper, we address this problem by proposing an efficient approach to simplify the finite state model derived from an OSEK/VDX distributed application system into a level where model checking can be easily applied. We evaluate our approach with a series of experiments based on the model checker UPPAAL. The experimental results show that our approach is not only capable of efficiently simplifying the models of the OSEK/VDX distributed application systems, but also of making model checker UPPAAL competent in dealing with the OSEK/VDX distributed application systems with industrial complexity.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property 1520594402052 Haitao Zhang Lanzhou University htzhang@lzu.edu.cn Guoqiang Li Shanghai Jiao Tong University li.g@sjtu.edu.cn Xiaohong Li Tianjin University xiaohongli@tju.edu.cn Zhuo Cheng Jiangxi Normal University Zhuo_Cheng@126.com Jinyun Xue Jiangxi Normal University jinyun@vip.sina.com Shaoying Liu Hosei University sliu@hosei.ac.jp model checking OSEK/VDX Automobile Distributed Application OSEK/VDX is a specification for vehicle-mounted systems and has been widely adopted by automotive companies to develop a distributed application system. However, the ever increasing complexity of the distributed application system has created a challenge for ensuring the reliability in exhaustive way. Model checking has been proposed as a promising technique to exhaustively verify OSEK/VDX distributed application systems such as timing properties, but faces a poor scalability for practicality. In this paper, we address this problem by proposing an efficient approach to simplify the finite state model derived from an OSEK/VDX distributed application system into a level where model checking can be easily applied. We evaluate our approach with a series of experiments based on the model checker UPPAAL. The experimental results show that our approach is not only capable of efficiently simplifying the models of the OSEK/VDX distributed application systems, but also of making model checker UPPAAL competent in dealing with the OSEK/VDX distributed application systems with industrial complexity.",
              "pageNumber": 230,
              "isPageNumberRoman": false
            },
            {
              "id": "76wfAD1QSnU6DtGDMJ4pre",
              "type": "authorPaper",
              "text": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf",
              "extraLocations": [],
              "authorNames": "Lucrecia Llerena (Dpto. de Ingeniería Informática), Nancy Rodriguez (Dpto. de Ingeniería Informática), Pablo Gomez-Abajo (Dpto. de Ingeniería Informática), John W. Castro (Dpto. de Ingeniería Informática y Cs. de la Computación), Silvia T. Acuña (Dpto. de Ingeniería Informática)",
              "abstract": "The growth in the number of non-developer open source software (OSS) application users and the escalating use of these applications have both created a need for and interest in developing usable OSS. OSS communities are unclear about which techniques to use in each activity of the development process. The aim of our research is to adopt the visual brainstorming usability technique in the HistoryCal OSS project and determine the feasibility of adapting the technique for application. To do this, we participated as volunteers in the HistoryCal project. We used the case study research method to investigate technique application and community participation. We identified adverse conditions that were an obstacle to technique application and modified the technique to make it applicable. We can conclude from our experience that these changes were helpful for applying the technique, although it was not easy to recruit OSS users to participate in usability technique application.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process 1520522477165 Lucrecia Llerena Dpto. de Ingeniería Informática lllerena@uteq.edu.ec Nancy Rodriguez Dpto. de Ingeniería Informática nrodriguez@uteq.edu.ec Pablo Gomez-Abajo Dpto. de Ingeniería Informática pablo.gomeza@uam.cl John W. Castro Dpto. de Ingeniería Informática y Cs. de la Computación john.castro@uda.cl Silvia T. Acuña Dpto. de Ingeniería Informática silvia.acunna@uam.es Open Source Software Usability Techniques Requirements Engineering Develop Product Concept Visual Brainstorming The growth in the number of non-developer open source software (OSS) application users and the escalating use of these applications have both created a need for and interest in developing usable OSS. OSS communities are unclear about which techniques to use in each activity of the development process. The aim of our research is to adopt the visual brainstorming usability technique in the HistoryCal OSS project and determine the feasibility of adapting the technique for application. To do this, we participated as volunteers in the HistoryCal project. We used the case study research method to investigate technique application and community participation. We identified adverse conditions that were an obstacle to technique application and modified the technique to make it applicable. We can conclude from our experience that these changes were helpful for applying the technique, although it was not easy to recruit OSS users to participate in usability technique application.",
              "pageNumber": 232,
              "isPageNumberRoman": false
            },
            {
              "id": "7H92vpQr1KLmMt39Fw6UIz",
              "type": "authorPaper",
              "text": "Poster: A General Framework to Detect Behavioral Design Patterns",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CjHMRsDPvdBv98cJPU652/4D0D7LcRdgrFg9kjvsA6lG.pdf",
              "extraLocations": [],
              "authorNames": "Cong Liu (Eindhoven University of Technology), Boudewijn van Dongen (Eindhoven University of Technology), Nour Assy (Eindhoven University of Technology), Wil M.P van der Aalst (RWTH Aachen University)",
              "abstract": "This paper presents a general framework to detect behavioral design patterns by combining source code and execution data. The framework has been instantiated for the observer, state and strategy patterns to demonstrate its applicability. By experimental evaluation, we show that our combined approach can guarantee a higher precision and recall than purely static approaches. In addition, our approach can discover all missing roles and return complete pattern instances that cannot be supported by existing approaches.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A General Framework to Detect Behavioral Design Patterns 1521585038510 Cong Liu Eindhoven University of Technology c.liu.3@tue.nl Boudewijn van Dongen Eindhoven University of Technology b.f.v.dongen@tue.nl Nour Assy Eindhoven University of Technology n.assy@tue.nl Wil M.P van der Aalst RWTH Aachen University wvdaalst@pads.rwth-aachen.de General Framework Behavioral Design Pattern Discovery and Detection Pattern Instance Invocation This paper presents a general framework to detect behavioral design patterns by combining source code and execution data. The framework has been instantiated for the observer, state and strategy patterns to demonstrate its applicability. By experimental evaluation, we show that our combined approach can guarantee a higher precision and recall than purely static approaches. In addition, our approach can discover all missing roles and return complete pattern instances that cannot be supported by existing approaches.",
              "pageNumber": 234,
              "isPageNumberRoman": false
            },
            {
              "id": "1fU22Z9Z1hauoyMCGkk6Io",
              "type": "authorPaper",
              "text": "Poster: Subsuming Mutation Operators",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/12EuynTWt9AtmaEN1SAUSE/3T1yWN6lEd57lNObJ4B2uT.pdf",
              "extraLocations": [],
              "authorNames": "Huan Lin (State Key Laboratory of Networking and Switching Technology), Yawen Wang (State Key Laboratory of Networking and Switching Technology), Yunzhan Gong (State Key Laboratory of Networking and Switching Technology)",
              "abstract": "Though minimal mutations were widely studied in recent years, the operators that produce these mutants remain largely unknown. This poster develops a coverage-based approach to identify them by defining Subsuming Mutation Operators (SMOs), the operators that cover all subsuming ones with minimal number of mutants. We then performed an empirical study on 61,000 mutants of 14 programs to determine SMOs among Proteum operators and investigate their properties. The results show only 17 of 82 operators are SMOs and they are not equally significant. For example, OLRN produces only 0.5% of subsuming mutants while VDTR accounts for almost 20%. A set of operators that are efficient at producing subsuming mutants are identified in our study and presented in this paper.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Subsuming Mutation Operators 1520472826751 Huan Lin State Key Laboratory of Networking and Switching Technology linhuan@bupt.edu.cn Yawen Wang State Key Laboratory of Networking and Switching Technology wangyawen@bupt.edu.cn Yunzhan Gong State Key Laboratory of Networking and Switching Technology gongyz@bupt.edu.cn Minimal mutation Subsuming mutation operators Coverage Though minimal mutations were widely studied in recent years, the operators that produce these mutants remain largely unknown. This poster develops a coverage-based approach to identify them by defining Subsuming Mutation Operators (SMOs), the operators that cover all subsuming ones with minimal number of mutants. We then performed an empirical study on 61,000 mutants of 14 programs to determine SMOs among Proteum operators and investigate their properties. The results show only 17 of 82 operators are SMOs and they are not equally significant. For example, OLRN produces only 0.5% of subsuming mutants while VDTR accounts for almost 20%. A set of operators that are efficient at producing subsuming mutants are identified in our study and presented in this paper.",
              "pageNumber": 236,
              "isPageNumberRoman": false
            },
            {
              "id": "2i3q3SQn2LZeqxJhrWQjgN",
              "type": "authorPaper",
              "text": "Poster: Detecting Missing Checks for Identifying Insufficient Attack Protections",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68lea68Xffx9ofe7BySvM/206boRxPqYpHOPA2UsxYIq.pdf",
              "extraLocations": [],
              "authorNames": "Lingyun Situ (Nanjing University), Liang Zou (Nanyang Technological University), Linzhang Wang (Nanjing University), Yang Liu (Nanyang Technological University), Bing Mao (Nanjing University), Xuandong Li (Nanjing University)",
              "abstract": "Missing check for untrusted input used in security-sensitive operations is one of the major causes of various serious vulnerabilities. Thus, efficiently detecting missing checks for realistic software is essential for identify insufficient attack protections. We propose a systematic static approach to detect missing checks in C/C++ programs. An automated and cross-platform tool named Vanguard was implemented on top of Clang/LLVM 3.6.0. And experimental results have shown its effectiveness and efficiency.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Detecting Missing Checks for Identifying Insufficient Attack Protections 1520539910299 Lingyun Situ Nanjing University situlingyun@gmail.com Liang Zou Nanyang Technological University liang.d.zou@gmail.com Linzhang Wang Nanjing University lzwang@nju.edu.cn Yang Liu Nanyang Technological University yangliu@ntu.edu.sg Bing Mao Nanjing University maobing@nju.edu.cn Xuandong Li Nanjing University lxd@nju.edu.cn Missing Check Static Analysis Vulnerability Defense Missing check for untrusted input used in security-sensitive operations is one of the major causes of various serious vulnerabilities. Thus, efficiently detecting missing checks for realistic software is essential for identify insufficient attack protections. We propose a systematic static approach to detect missing checks in C/C++ programs. An automated and cross-platform tool named Vanguard was implemented on top of Clang/LLVM 3.6.0. And experimental results have shown its effectiveness and efficiency.",
              "pageNumber": 238,
              "isPageNumberRoman": false
            },
            {
              "id": "6b9OPUZR70VVRKnodlsAxW",
              "type": "authorPaper",
              "text": "Poster: How Do Community Smells Influence Code Smells?",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf",
              "extraLocations": [],
              "authorNames": "Fabio Palomba (University of Zurich), Damian A. Tamburri (Eindhoven University of Technology), Alexander Serebrenik (Eindhoven University of Technology), Andy Zaidman (Delft University of Technology), Francesca Arcelli Fontana (University of Milano-Bicocca), Rocco Oliveto (University of Molise)",
              "abstract": "Code smells reflect sub-optimal patterns of code that often lead to critical software flaws or failure. In the same way, community smells reflect sub-optimal organisational and socio-technical patterns in the organisational structure of the software community. To understand the relation between the community smells and code smells we start by surveying 162 developers of nine open-source systems. Then we look deeper into this connection by conducting an empirical study of 117 releases from these systems. Our results indicate that community-related factors are intuitively perceived by most developers as causes of the persistence of code smells. Inspired by this observation we design a community-aware prediction model for code smells and show that it outperforms a model that does not consider community factors.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: How Do Community Smells Influence Code Smells? 1521268312646 Fabio Palomba University of Zurich palomba@ifi.uzh.ch Damian A. Tamburri Eindhoven University of Technology d.a.tamburri@tue.nl Alexander Serebrenik Eindhoven University of Technology a.serebrenik@tue.nl Andy Zaidman Delft University of Technology a.e.zaidman@tudelft.nl Francesca Arcelli Fontana University of Milano-Bicocca francesca.arcelli@unimib.it Rocco Oliveto University of Molise rocco.oliveto@unimol.it Code Smells Organisational Structure Community Smells Code smells reflect sub-optimal patterns of code that often lead to critical software flaws or failure. In the same way, community smells reflect sub-optimal organisational and socio-technical patterns in the organisational structure of the software community. To understand the relation between the community smells and code smells we start by surveying 162 developers of nine open-source systems. Then we look deeper into this connection by conducting an empirical study of 117 releases from these systems. Our results indicate that community-related factors are intuitively perceived by most developers as causes of the persistence of code smells. Inspired by this observation we design a community-aware prediction model for code smells and show that it outperforms a model that does not consider community factors.",
              "pageNumber": 240,
              "isPageNumberRoman": false
            },
            {
              "id": "4pJjmDmdMq023BxTl1q41p",
              "type": "authorPaper",
              "text": "Poster: Communication in Open-Source Projects–End of the E-mail Era?",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1j4w2owFLsJWGemRCe3RPJ/4ohDY2rD3K4zRwV3ou34JL.pdf",
              "extraLocations": [],
              "authorNames": "Verena Käfer (University of Stuttgart), Daniel Graziotin (University of Stuttgart), Ivan Bogicevic (University of Stuttgart), Stefan Wagner (University of Stuttgart), Jasmin Ramadani (University of Stuttgart)",
              "abstract": "Communication is essential in software engineering. Especially in distributed open-source teams, communication needs to be supported by channels including mailing lists, forums, issue trackers, and chat systems. Yet, we do not have a clear understanding of which communication channels stakeholders in open-source projects use. In this study, we fill the knowledge gap by investigating a statistically representative sample of 400 GitHub projects. We discover the used communication channels by regular expressions on project data. We show that (1) half of the GitHub projects use observable communication channels; (2) GitHub Issues, e-mail addresses, and the modern chat system Gitter are the most common channels; (3) mailing lists are only in place five and have a lower market share than all modern chat systems combined.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Communication in Open-Source Projects–End of the E-mail Era? 1520498655189 Verena Käfer University of Stuttgart verena.kaefer@informatik.uni-stuttgart.de Daniel Graziotin University of Stuttgart daniel.graziotin@informaik.uni-stuttgart.de Ivan Bogicevic University of Stuttgart ivan.bogicevic@informatik.uni-stuttgart.de Stefan Wagner University of Stuttgart stefan.wagner@informatik.uni-stuttgart.de Jasmin Ramadani University of Stuttgart jasmin.ramadani@informatik.uni-stuttgart.de communication open-source mining software repositories Communication is essential in software engineering. Especially in distributed open-source teams, communication needs to be supported by channels including mailing lists, forums, issue trackers, and chat systems. Yet, we do not have a clear understanding of which communication channels stakeholders in open-source projects use. In this study, we fill the knowledge gap by investigating a statistically representative sample of 400 GitHub projects. We discover the used communication channels by regular expressions on project data. We show that (1) half of the GitHub projects use observable communication channels; (2) GitHub Issues, e-mail addresses, and the modern chat system Gitter are the most common channels; (3) mailing lists are only in place five and have a lower market share than all modern chat systems combined.",
              "pageNumber": 242,
              "isPageNumberRoman": false
            },
            {
              "id": "38pC2o2XCLA9ZxyZ6AZRMl",
              "type": "authorPaper",
              "text": "Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ADZq6g5I1eGULqO75ycZf/647J63rx8sUzey01F0TAFE.pdf",
              "extraLocations": [],
              "authorNames": "Morakot Choetkiertikul (University of Wollongong), Hoa Khanh Dam (University of Wollongong), Truyen Tran (Deakin University), Trang Pham (Deakin University), Aditya Ghose (University of Wollongong)",
              "abstract": "Assigning an issue to the correct component(s) is challenging, especially for large-scale projects which have are up to hundreds of components. We propose a prediction model which learns from historical issues reports and recommends the most relevant components for new issues. Our model uses the deep learning Long Short-Term Memory to automatically learns semantic features representing an issue report, and combines them with the traditional textual similarity features. An extensive evaluation on 142,025 issues from 11 large projects shows our approach outperforms alternative techniques with an average 60% improvement in predictive performance.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval 1520481475810 Morakot Choetkiertikul University of Wollongong morakotch@gmail.com Hoa Khanh Dam University of Wollongong hoa@uow.edu.au Truyen Tran Deakin University truyen.tran@deakin.edu.au Trang Pham Deakin University phtra@deakin.edu.au Aditya Ghose University of Wollongong aditya@uow.edu.au Recommendation system Software component Mining software repositories Assigning an issue to the correct component(s) is challenging, especially for large-scale projects which have are up to hundreds of components. We propose a prediction model which learns from historical issues reports and recommends the most relevant components for new issues. Our model uses the deep learning Long Short-Term Memory to automatically learns semantic features representing an issue report, and combines them with the traditional textual similarity features. An extensive evaluation on 142,025 issues from 11 large projects shows our approach outperforms alternative techniques with an average 60% improvement in predictive performance.",
              "pageNumber": 244,
              "isPageNumberRoman": false
            },
            {
              "id": "77Rr8YlRkytdoJInhPvFcN",
              "type": "authorPaper",
              "text": "Poster: An Experimental Analysis of Fault Detection Capabilities of Covering Array Constructors",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1LPlzWg0tHBZcuzmWldSvI/1WM1Gk3gKbTdWVYozOBdR6.pdf",
              "extraLocations": [],
              "authorNames": "Rubing Huang (Jiangsu University), Yunan Zhou (Jiangsu University), Tsong Yueh Chen (Swinburne University of Technology), Dave Towey (University of Nottingham Ningbo China), Jinfu Chen (Jiangsu University)",
              "abstract": "Combinatorial Interaction Testing (CIT) aims at constructing an effective test suite, such as a Covering Array (CA), that can detect faults that are caused by the interaction of parameters. In this paper, we report on some empirical studies conducted to examine the fault detection capabilities of five popular CA constructors: ACTS, Jenny, PICT, CASA, and TCA. The experimental results indicate that Jenny has the best performance, because it achieves better fault detection than the other four constructors in many cases. Our results also indicate that CAs generated using ACTS, PICT, or CASA should be prioritized before testing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: An Experimental Analysis of Fault Detection Capabilities of Covering Array Constructors 1520496462377 Rubing Huang Jiangsu University rbhuang@ujs.edu.cn Yunan Zhou Jiangsu University zhouyn@ujs.edu.cn Tsong Yueh Chen Swinburne University of Technology tychen@swin.edu.au Dave Towey University of Nottingham Ningbo China dave.towey@nottingham.edu.cn Jinfu Chen Jiangsu University jinfuchen@ujs.edu.cn Combinatorial Interaction Testing Covering Array Constructor Empirical Study Software Testing Combinatorial Interaction Testing (CIT) aims at constructing an effective test suite, such as a Covering Array (CA), that can detect faults that are caused by the interaction of parameters. In this paper, we report on some empirical studies conducted to examine the fault detection capabilities of five popular CA constructors: ACTS, Jenny, PICT, CASA, and TCA. The experimental results indicate that Jenny has the best performance, because it achieves better fault detection than the other four constructors in many cases. Our results also indicate that CAs generated using ACTS, PICT, or CASA should be prioritized before testing.",
              "pageNumber": 246,
              "isPageNumberRoman": false
            },
            {
              "id": "62l0RWyhmwQCdu164ZDnwu",
              "type": "authorPaper",
              "text": "Poster: Are Information Retrieval-Based Bug Localization Techniques Trustworthy?",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FEPaJ8VlER0FgFEO0g7E9/6BkafrT9xYPneW0yxpUaYI.pdf",
              "extraLocations": [],
              "authorNames": "Misoo Kim (Sungkyunkwan University), Eunseok Lee (Sungkyunkwan University)",
              "abstract": "Information retrieval-based bug localization techniques are evaluated using datasets with an oracle. However, datasets can contain non-buggy files, which affect the reliability of these techniques. To investigate the impact of non-buggy files, we show that a test file can be regarded as a buggy file. Then, we determined if this file caused inaccuracies that would eventually affect the trustworthiness of previous techniques. We further analyzed the impact of test files on IR-based bug localization through three research questions. Our results show that the test files significantly impact the performance of the techniques. Furthermore, MAP increased by a maximum of 21%, and MRR decreased by a maximum of 13%.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Are Information Retrieval-Based Bug Localization Techniques Trustworthy? 1521698445880 Misoo Kim Sungkyunkwan University misoo12@skku.edu Eunseok Lee Sungkyunkwan University leees@skku.edu Empirical Study Test File Bug Report Information Retrieval-based Bug Localization Trustworthness Information retrieval-based bug localization techniques are evaluated using datasets with an oracle. However, datasets can contain non-buggy files, which affect the reliability of these techniques. To investigate the impact of non-buggy files, we show that a test file can be regarded as a buggy file. Then, we determined if this file caused inaccuracies that would eventually affect the trustworthiness of previous techniques. We further analyzed the impact of test files on IR-based bug localization through three research questions. Our results show that the test files significantly impact the performance of the techniques. Furthermore, MAP increased by a maximum of 21%, and MRR decreased by a maximum of 13%.",
              "pageNumber": 248,
              "isPageNumberRoman": false
            },
            {
              "id": "4UkZ7JcaHClvFuasO9oJFr",
              "type": "authorPaper",
              "text": "Poster: Accelerating Counterexample Detection in Software Model Checking",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5UUmbqNY2wGzfapYL40Nox/26lJ0QQJIyzqjiZeJ8O16V.pdf",
              "extraLocations": [],
              "authorNames": "Cong Tian (Xidian University), Zhao Duan (Xidian University), Zhenhua Duan (Xidian University)",
              "abstract": "",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Accelerating Counterexample Detection in Software Model Checking Cong Tian Xidian University undefined Zhao Duan Xidian University undefined Zhenhua Duan Xidian University undefined",
              "pageNumber": 250,
              "isPageNumberRoman": false
            },
            {
              "id": "2JClTUYAJTw9YlvMFYtk8g",
              "type": "authorPaper",
              "text": "Poster: A Novel Variable-centric Fault Localization Technique",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1lBIthnFpQH61GQVNJyHdj/3ze3yC49yx3JeWx3QFXzVr.pdf",
              "extraLocations": [],
              "authorNames": "Jeongho Kim (Sungkyunkwan University), Jindae Kim (HKUST), Eunseok Lee (Sungkyunkwan University)",
              "abstract": "Fault localization is one of the most important debugging tasks. Therefore, many techniques have already been developed to improve the efficiency. Among them, the spectrum-based fault localization technique is the most popular, and it has been the subject of 35% of total fault localization-related studies. SFL techniques leverage coverage spectra and localize a fault based on the coverage difference between passed and failed test cases. However, it is difficult to localize faults effectively when coverage differences are not clear. Therefore, we propose a novel variable-centric fault localization technique to improve performance of existing techniques. Proposed technique extracts suspicious variables and uses them to generate a suspicious ranked list. In an evaluation with 120 C faults, the proposed technique outperforms SFL techniques with the same similarity coefficient. The average exam scores of proposed techniques are reduced by 55% compared to SFL techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Novel Variable-centric Fault Localization Technique 1521080923106 Jeongho Kim Sungkyunkwan University jeonghodot@skku.edu Jindae Kim HKUST jdkim@cse.ust.hk Eunseok Lee Sungkyunkwan University leees@skku.edu Software debugging Software testing Spectrum-based fault localization Suspicious variable Variable-centric Fault localization is one of the most important debugging tasks. Therefore, many techniques have already been developed to improve the efficiency. Among them, the spectrum-based fault localization technique is the most popular, and it has been the subject of 35% of total fault localization-related studies. SFL techniques leverage coverage spectra and localize a fault based on the coverage difference between passed and failed test cases. However, it is difficult to localize faults effectively when coverage differences are not clear. Therefore, we propose a novel variable-centric fault localization technique to improve performance of existing techniques. Proposed technique extracts suspicious variables and uses them to generate a suspicious ranked list. In an evaluation with 120 C faults, the proposed technique outperforms SFL techniques with the same similarity coefficient. The average exam scores of proposed techniques are reduced by 55% compared to SFL techniques.",
              "pageNumber": 252,
              "isPageNumberRoman": false
            },
            {
              "id": "2DfgyK8HKOS1EADo3oGwGM",
              "type": "authorPaper",
              "text": "Poster: Android Inter-Component Communication Analysis with Intent Revision",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RR4p3lwomIvgSeCNoWo5u/7q9qgHlyY8QpN3vYDt5l6C.pdf",
              "extraLocations": [],
              "authorNames": "Cong Tian (Xidian University), Congli Xia (Xidian University), Zhenhua Duan (Xidian University)",
              "abstract": "The success of Android OS can partially be attributed to the communication model, named Inter-Component Communication (ICC) model, which promotes the development of loosely-coupled applications. Unfortunately, ICC models which provide a mechanism for data exchanging between components is possibly exploited by malicious applications to threaten privacy of users. Thus, to detect privacy leaks in Android malware, ICC analysis will play a fundamental role which directly affects the accuracy in tracking leaks. However, in the existing ICC analysis approaches, reuse and revision of Intents across-component are not taken into account such that lots of potential leaks will escape from being tracked. This paper is devoted to ICC analysis on reused and revised Intents. First, ICC values are analyzed by taking reused and revised Intents into account. With this basis, target components of Intents are computed and ICC Graphs (ICCG) of Android apps are built. Further, on ICCGs, ICC flows, following which ICC leaks across-component can be tracked, are produced. The proposed approach has been implemented in a tool called ICCA. To evaluate it, experiments are carried out on two datasets: GooglePlay and Malgenome. The former one consists of 1000 applications randomly downloaded from Google Play store and the latter one includes 1260 malware samples. Experimental results show that the proposed ICC analyzing approach is effective in practice.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Android Inter-Component Communication Analysis with Intent Revision 1521373959698 Cong Tian Xidian University ctian@mail.xidian.edu.cn Congli Xia Xidian University clxia_xd@163.com Zhenhua Duan Xidian University zhhduan@mail.xidian.edu.cn Inter component communication privacy leaks Android taint flow analysis malware The success of Android OS can partially be attributed to the communication model, named Inter-Component Communication (ICC) model, which promotes the development of loosely-coupled applications. Unfortunately, ICC models which provide a mechanism for data exchanging between components is possibly exploited by malicious applications to threaten privacy of users. Thus, to detect privacy leaks in Android malware, ICC analysis will play a fundamental role which directly affects the accuracy in tracking leaks. However, in the existing ICC analysis approaches, reuse and revision of Intents across-component are not taken into account such that lots of potential leaks will escape from being tracked. This paper is devoted to ICC analysis on reused and revised Intents. First, ICC values are analyzed by taking reused and revised Intents into account. With this basis, target components of Intents are computed and ICC Graphs (ICCG) of Android apps are built. Further, on ICCGs, ICC flows, following which ICC leaks across-component can be tracked, are produced. The proposed approach has been implemented in a tool called ICCA. To evaluate it, experiments are carried out on two datasets: GooglePlay and Malgenome. The former one consists of 1000 applications randomly downloaded from Google Play store and the latter one includes 1260 malware samples. Experimental results show that the proposed ICC analyzing approach is effective in practice.",
              "pageNumber": 254,
              "isPageNumberRoman": false
            },
            {
              "id": "34FZWg1DfJ5xKLeB4NyI8M",
              "type": "authorPaper",
              "text": "Poster: Exploration of Academic and Industrial Evidence about Architectural Tactics and Patterns in Microservices",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/TLOslOwt6ZiwpMbu04hsL/BNRxGvN7me9B2jeqY2cNm.pdf",
              "extraLocations": [],
              "authorNames": "Felipe Osses (Universidad Tecnica Federico Santa Maria), Gastón Márquez (Universidad Tecnica Federico Santa Maria), Hernán Astudillo (Universidad Tecnica Federico Santa Maria)",
              "abstract": "Microservices are quickly becoming an outstanding architectural choice in the service-oriented software industry. This approach proposes to develop each application as a collection of small services, each running on its process and inter-communicating with lightweight mechanisms. Currently, there is still no clear perspective of emerging recurrent solutions (architectural patterns) or design decisions (architectural tactics) in microservices both in industry and academia. This article describes a systematic review of the academic and industrial literature on architectural patterns and tactics proposed for microservices. The study reported: 44 architectural patterns of microservices in academia and 80 in the industry; architectural tactics related to microservices dependent on other disciplines; and it was also found that most of architectural patterns and tactics are associated to five quality attributes: scalability, flexibility, testability, performance, and elasticity. Added to that results, it was noticed that most microservices in the academic area are reported in evidence related to DevOps and IoT, but the industry is not interested in associating disciplines. Finally, a new proposal of microservices pattern taxonomy is suggested.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Exploration of Academic and Industrial Evidence about Architectural Tactics and Patterns in Microservices 1520805839804 Felipe Osses Universidad Tecnica Federico Santa Maria felipe.osses@sansano.usm.cl Gastón Márquez Universidad Tecnica Federico Santa Maria gaston.marquez@sansano.usm.cl Hernán Astudillo Universidad Tecnica Federico Santa Maria hernan@inf.utfsm.cl Architectural patterns architectural tactics microservices taxonomy systematic literature review academy industry Microservices are quickly becoming an outstanding architectural choice in the service-oriented software industry. This approach proposes to develop each application as a collection of small services, each running on its process and inter-communicating with lightweight mechanisms. Currently, there is still no clear perspective of emerging recurrent solutions (architectural patterns) or design decisions (architectural tactics) in microservices both in industry and academia. This article describes a systematic review of the academic and industrial literature on architectural patterns and tactics proposed for microservices. The study reported: 44 architectural patterns of microservices in academia and 80 in the industry; architectural tactics related to microservices dependent on other disciplines; and it was also found that most of architectural patterns and tactics are associated to five quality attributes: scalability, flexibility, testability, performance, and elasticity. Added to that results, it was noticed that most microservices in the academic area are reported in evidence related to DevOps and IoT, but the industry is not interested in associating disciplines. Finally, a new proposal of microservices pattern taxonomy is suggested.",
              "pageNumber": 256,
              "isPageNumberRoman": false
            },
            {
              "id": "1lbDaVZ1CwFcRKD9yBcltY",
              "type": "authorPaper",
              "text": "Poster: Automatically Solving NP-Complete Problems on a Quantum Computer",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Cjz29SFL9KIkUGCi9NXdB/4KuMecZrQh8gLcNjWrZf9w.pdf",
              "extraLocations": [],
              "authorNames": "Shaohan Hu (IBM Research), Peng Liu (IBM Research), Chun-Fu (Richard) Chen (IBM Research), Marco Pistoia (IBM Research)",
              "abstract": "In recent years, tremendous efforts from both the industrial and the academic research communities have been put into bringing forth quantum computing technologies. With the potential proliferation of universal quantum computers on the horizon, quantum computing, however, is still severely grounded by numerous grave barriers, which lead to its low accessibility and practicality. For example, the vastly different underlying computing models, combined with the steep background knowledge requirements, makes it extremely difficult, if possible at all, for most software engineering researchers and practitioners to even begin to design or implement quantum algorithms or softwares in practice. To overcome this problem, we, in this paper, propose a design that largely circumvents said accessibility and practicality barriers, by providing an end-to-end quantum computing framework for solving NP-complete problems via reduction. We fully implemented a toolkit under our design framework. With this toolkit, software engineering researchers and practitioners would be able to enjoy the speedup and scalability benefits of universal quantum computers without necessarily having to have prior knowledge on quantum computing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Automatically Solving NP-Complete Problems on a Quantum Computer 1520610639679 Shaohan Hu IBM Research shaohan.hu@ibm.com Peng Liu IBM Research liup@us.ibm.com Chun-Fu (Richard) Chen IBM Research chenrich@us.ibm.com Marco Pistoia IBM Research pistoia@us.ibm.com Universal quantum computing Grover's algorithm NP-Complete Reduction Satisfiability In recent years, tremendous efforts from both the industrial and the academic research communities have been put into bringing forth quantum computing technologies. With the potential proliferation of universal quantum computers on the horizon, quantum computing, however, is still severely grounded by numerous grave barriers, which lead to its low accessibility and practicality. For example, the vastly different underlying computing models, combined with the steep background knowledge requirements, makes it extremely difficult, if possible at all, for most software engineering researchers and practitioners to even begin to design or implement quantum algorithms or softwares in practice. To overcome this problem, we, in this paper, propose a design that largely circumvents said accessibility and practicality barriers, by providing an end-to-end quantum computing framework for solving NP-complete problems via reduction. We fully implemented a toolkit under our design framework. With this toolkit, software engineering researchers and practitioners would be able to enjoy the speedup and scalability benefits of universal quantum computers without necessarily having to have prior knowledge on quantum computing.",
              "pageNumber": 258,
              "isPageNumberRoman": false
            },
            {
              "id": "TOLSw9H8fuKbl1mCwsqYf",
              "type": "authorPaper",
              "text": "Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3KOAs6b5Ao6dTf4nrU5Z2R/4wShlhH4Ml9nJbkkAnMNpN.pdf",
              "extraLocations": [],
              "authorNames": "Yuan Huang (Sun Yat-sen University), Nan Jia (Hebei GEO University), Qiang Zhou (Sun Yat-sen University), Xiangping Chen (Sun Yat-sen University), Xiong Yingfei (Peking University), Xiaonan Luo (Sun Yat-sen University)",
              "abstract": "Code commenting is a common programming practice of practical importance to help developers review and comprehend source code. However, there is a lack of thorough specifications to help developers make their commenting decisions in current practice. To reduce the effort of making commenting decisions, we propose a novel method, CommentSuggester, to guide developers regarding appropriate commenting locations in the source code. We extract context information of source code and employ machine learning techniques to identify possible commenting locations in the source code. The encouraging experimental results demonstrated the feasibility and effectiveness of our commenting suggestion method.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code 1521077224348 Yuan Huang Sun Yat-sen University huangyjn@gmail.com Nan Jia Hebei GEO University jiasysu@gmail.com Qiang Zhou Sun Yat-sen University zhouq865@gmail.com Xiangping Chen Sun Yat-sen University chenxp8@mail.sysu.edu.cn Xiong Yingfei Peking University xiongyf@pku.edu.cn Xiaonan Luo Sun Yat-sen University lnslxn@mail.sysu.edu.cn Code Comment Code Context Information Comment Location Commenting Decision Code commenting is a common programming practice of practical importance to help developers review and comprehend source code. However, there is a lack of thorough specifications to help developers make their commenting decisions in current practice. To reduce the effort of making commenting decisions, we propose a novel method, CommentSuggester, to guide developers regarding appropriate commenting locations in the source code. We extract context information of source code and employ machine learning techniques to identify possible commenting locations in the source code. The encouraging experimental results demonstrated the feasibility and effectiveness of our commenting suggestion method.",
              "pageNumber": 260,
              "isPageNumberRoman": false
            },
            {
              "id": "VTZkJGJXk6sljw3n4MEij",
              "type": "authorPaper",
              "text": "Poster: Making Well-Informed Software Design Decisions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2hjOTnt4IhzP5kLZgw9GKS/4G3hXm7aB71RGA86WZqsVh.pdf",
              "extraLocations": [],
              "authorNames": "Arman Shahbazian (University of Southern California), Youn Kyu Lee (University of Southern California), Yuriy Brun (University of Massachusetts Amherst), Nenad Medvidovic (University of Southern California)",
              "abstract": "Design decisions software architects make directly impact system quality. Real-world systems involve a large number of such decisions, and each decision is typically influenced by others and involves trade-offs in system properties. This paper poses the problem of making complex, interacting design decision relatively early in the project's lifecycle and outlines a search-based and simulation-based approach for helping architects make these decisions and understand their effects.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Making Well-Informed Software Design Decisions 1520879188207 Arman Shahbazian University of Southern California armansha@usc.edu Youn Kyu Lee University of Southern California younkyul@usc.edu Yuriy Brun University of Massachusetts Amherst brun@cs.umass.edu Nenad Medvidovic University of Southern California neno@usc.edu Model-driven engineering Software architecture Design decisions software architects make directly impact system quality. Real-world systems involve a large number of such decisions, and each decision is typically influenced by others and involves trade-offs in system properties. This paper poses the problem of making complex, interacting design decision relatively early in the project's lifecycle and outlines a search-based and simulation-based approach for helping architects make these decisions and understand their effects.",
              "pageNumber": 262,
              "isPageNumberRoman": false
            },
            {
              "id": "3gmicK6cGAA05Ffz7ZHJRW",
              "type": "authorPaper",
              "text": "Poster: Runtime Verification of Memory Safety via Source Transformation",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Wbn7Rsr2KgwIg0ZjVZVST/4QprgKUvAMwZswtLxX0jf2.pdf",
              "extraLocations": [],
              "authorNames": "Zhe Chen (Nanjing University of Aeronautics and Astronautics), Junqi Yan (Nanjing University of Aeronautics and Astronautics), Wenming Li (Nanjing University of Aeronautics and Astronautics), Ju Qian (Nanjing University of Aeronautics and Astronautics), Zhiqiu Huang (Nanjing University of Aeronautics and Astronautics)",
              "abstract": "The unsafe features of C often lead to memory errors that can result in vulnerabilities. Many runtime verification tools are widely used to detect memory errors. However, existing tools lack DO-178C compliance, show limited performance, and demonstrate poor accessibility, e.g., lacking platform-independence. In this paper, we propose to implement dynamic analysis tools using source-to-source transformation, which operates on the original source code to insert code fragments written in ANSI C, and generates source files similar to the original files in structure. We show that source transformation can effectively avoid the mentioned drawbacks of existing tools, but it also faces many new challenges in implementation.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Runtime Verification of Memory Safety via Source Transformation 1521085730749 Zhe Chen Nanjing University of Aeronautics and Astronautics zhechen@nuaa.edu.cn Junqi Yan Nanjing University of Aeronautics and Astronautics yanjq1993@163.com Wenming Li Nanjing University of Aeronautics and Astronautics hunanlwm@sina.cn Ju Qian Nanjing University of Aeronautics and Astronautics jqian@nuaa.edu.cn Zhiqiu Huang Nanjing University of Aeronautics and Astronautics zqhuang@nuaa.edu.cn runtime verification dynamic analysis memory safety C programs source-to-source transformation The unsafe features of C often lead to memory errors that can result in vulnerabilities. Many runtime verification tools are widely used to detect memory errors. However, existing tools lack DO-178C compliance, show limited performance, and demonstrate poor accessibility, e.g., lacking platform-independence. In this paper, we propose to implement dynamic analysis tools using source-to-source transformation, which operates on the original source code to insert code fragments written in ANSI C, and generates source files similar to the original files in structure. We show that source transformation can effectively avoid the mentioned drawbacks of existing tools, but it also faces many new challenges in implementation.",
              "pageNumber": 264,
              "isPageNumberRoman": false
            },
            {
              "id": "3koc6vaBBkdRZ14lIV60Pw",
              "type": "authorPaper",
              "text": "Poster: Synthesizing Relation-Aware Entity Transformation by Examples",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jhHsbkhRZs3nE4hHEzkaf/1kHwgntPO8MQi7UlkHcfEU.pdf",
              "extraLocations": [],
              "authorNames": "Jiarong Wu (Nanjing University), Yanyan Jiang (Nanjing University), Chang Xu (Nanjing University), Shing-Chi Cheung (Hong Kong University of Science and Technology), Xiaoxing Ma (Nanjing University), Jian Lu (Nanjing University)",
              "abstract": "Recently, programming by examples (PBE) technique achieves a great success in processing and transforming data entities, yet existing approaches generally fall short on the tasks concerning entity relations. This paper presents ENTER, a domain-agnostic language for relation-aware entity transformation synthesis. It leverages the combination of two basic relations, the equivalence relation and the total order relation, to succinctly express complex entity relations. ENTER can be instantiated with domain-speci?c elements to solve a wide range of entity transformation tasks.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Synthesizing Relation-Aware Entity Transformation by Examples 1521350846309 Jiarong Wu Nanjing University sissel126@gmail.com Yanyan Jiang Nanjing University jyy@nju.edu.cn Chang Xu Nanjing University changxu@nju.edu.cn Shing-Chi Cheung Hong Kong University of Science and Technology scc@cse.ust.hk Xiaoxing Ma Nanjing University xxm@nju.edu.cn Jian Lu Nanjing University lj@nju.edu.cn Program Synthesis Programming by Examples Data Transformation Recently, programming by examples (PBE) technique achieves a great success in processing and transforming data entities, yet existing approaches generally fall short on the tasks concerning entity relations. This paper presents ENTER, a domain-agnostic language for relation-aware entity transformation synthesis. It leverages the combination of two basic relations, the equivalence relation and the total order relation, to succinctly express complex entity relations. ENTER can be instantiated with domain-speci?c elements to solve a wide range of entity transformation tasks.",
              "pageNumber": 266,
              "isPageNumberRoman": false
            },
            {
              "id": "5CABG7x2sW8u4uwEe61yFV",
              "type": "authorPaper",
              "text": "Poster: Testing Heap-Based Programs with Java StarFinder",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4rzKWBKexbqBTVf4cYq0W1/FEIdNYhXk5CVNrycd5Sf3.pdf",
              "extraLocations": [],
              "authorNames": "Long H. Pham (Singapore University of Technology and Design), Quang Loc Le (Teesside University), Quoc-Sang Phan (Fujitsu Labs. of America), Jun Sun (Singapore University of Technology and Design), Shengchao Qin (Teesside University)",
              "abstract": "We present Java StarFinder (JSF), a tool for automated test case generation and error detection for Java programs having inputs in the form of complex heap-manipulating data structures. The core of JSF is a symbolic execution engine that uses separation logic with existential quantifiers and inductively-defined predicates to precisely represent the (unbounded) symbolic heap. The feasibility of a heap con figuration is checked by a satisfiability solver for separation logic. At the end of each feasible path, a concrete model of the symbolic heap (returned by the solver) is used to generate a test case, e.g., a linked list or an AVL tree, that exercises that path. We show the effectiveness of JSF by applying it on non-trivial heap-manipulating programs and evaluated it against JBSE, a state-of-the-art symbolic execution engine for heap-based programs. Experimental results show that our tool significantly reduces the number of invalid test inputs and improves the test coverage.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Testing Heap-Based Programs with Java StarFinder 1521249268557 Long H. Pham Singapore University of Technology and Design honglong_pham@mymail.sutd.edu.sg Quang Loc Le Teesside University lequangloc@gmail.com Quoc-Sang Phan Fujitsu Labs. of America phanquocsang@gmail.com Jun Sun Singapore University of Technology and Design sunjun@sutd.edu.sg Shengchao Qin Teesside University s.qin@tees.ac.uk symbolic execution separation logic test input generation We present Java StarFinder (JSF), a tool for automated test case generation and error detection for Java programs having inputs in the form of complex heap-manipulating data structures. The core of JSF is a symbolic execution engine that uses separation logic with existential quantifiers and inductively-defined predicates to precisely represent the (unbounded) symbolic heap. The feasibility of a heap con figuration is checked by a satisfiability solver for separation logic. At the end of each feasible path, a concrete model of the symbolic heap (returned by the solver) is used to generate a test case, e.g., a linked list or an AVL tree, that exercises that path. We show the effectiveness of JSF by applying it on non-trivial heap-manipulating programs and evaluated it against JBSE, a state-of-the-art symbolic execution engine for heap-based programs. Experimental results show that our tool significantly reduces the number of invalid test inputs and improves the test coverage.",
              "pageNumber": 268,
              "isPageNumberRoman": false
            },
            {
              "id": "yU5V9D2TyPKekSr6zfSSH",
              "type": "authorPaper",
              "text": "Poster: Automatically Answering API-Related Questions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf",
              "extraLocations": [],
              "authorNames": "Di Wu (State Key Laboratory of Software Engineering), Xiao-Yuan Jing (State Key Laboratory of Software Engineering), Haowen Chen (State Key Laboratory of Software Engineering), Xiaoke Zhu (State Key Laboratory of Software Engineering), Hongyu Zhang (School of Electrical Engineering and Computing), Mei Zuo (State Key Laboratory of Software Engineering), Lu Zi (State Key Laboratory of Software Engineering), Chen Zhu (State Key Laboratory of Software Engineering)",
              "abstract": "Automatically recommending API-related tutorial fragments or Q&A pairs from Stack Overflow (SO) is very helpful for developers, especially when they need to use unfamiliar APIs to complete programming tasks. However, in practice developers are more likely to express the API-related questions using natural language when they do not know the exact name of an unfamiliar API. In this paper, we propose an approach, called SOTU, to automatically find answers for API-related natural language questions (NLQs) from tutorials and SO. We first identify relevant API-related tutorial fragments and extract API-related Q&A pairs from SO. We then construct an API-Answer corpus by combining these two sources of information. For an API-related NLQ given by the developer, we parse it into several potential APIs and then retrieve potential answers from the API-Answer corpus. Finally, we return a list of potential results ranked by their relevancy. Experiments on API-Answer corpus demonstrate the effectiveness of SOTU.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Automatically Answering API-Related Questions 1521372159197 Di Wu State Key Laboratory of Software Engineering wudidi@whu.edu.cn Xiao-Yuan Jing State Key Laboratory of Software Engineering jingxy_2000@126.com Haowen Chen State Key Laboratory of Software Engineering hwc_zzu@126.com Xiaoke Zhu State Key Laboratory of Software Engineering henuzxk@163.com Hongyu Zhang School of Electrical Engineering and Computing hongyu.zhang@newcastle.edu.au Mei Zuo State Key Laboratory of Software Engineering zmmz@whu.edu.cn Lu Zi State Key Laboratory of Software Engineering ziilluisnotme@gmail.com Chen Zhu State Key Laboratory of Software Engineering qq550215814@outlook.com Application Programming Interface Natural Language Question Tutorials Stack Overflow Automatically recommending API-related tutorial fragments or Q&A pairs from Stack Overflow (SO) is very helpful for developers, especially when they need to use unfamiliar APIs to complete programming tasks. However, in practice developers are more likely to express the API-related questions using natural language when they do not know the exact name of an unfamiliar API. In this paper, we propose an approach, called SOTU, to automatically find answers for API-related natural language questions (NLQs) from tutorials and SO. We first identify relevant API-related tutorial fragments and extract API-related Q&A pairs from SO. We then construct an API-Answer corpus by combining these two sources of information. For an API-related NLQ given by the developer, we parse it into several potential APIs and then retrieve potential answers from the API-Answer corpus. Finally, we return a list of potential results ranked by their relevancy. Experiments on API-Answer corpus demonstrate the effectiveness of SOTU.",
              "pageNumber": 270,
              "isPageNumberRoman": false
            },
            {
              "id": "58zKNqWqu9N71faoDnhADZ",
              "type": "authorPaper",
              "text": "Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty?",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dipIizZzbMXAiCO02tWVF/2xPcZJ8mMITxw7ZU4W3dQ7.pdf",
              "extraLocations": [],
              "authorNames": "Naoyasu Ubayashi (Kyushu University), Hokuto Muraoka (Kyushu University), Daiki Muramoto (Kyushu University), Yasutaka Kamei (Kyushu University), Ryosuke Sato (Kyushu University)",
              "abstract": "Recently, many developers begin to notice that uncertainty is a crucial problem in software development. Unfortunately, no one knows how often uncertainty appears or what kinds of uncertainty exist in actual projects, because there are no empirical studies on uncertainty. To deal with this problem, we conduct a large-scale empirical study analyzing commit messages and revision histories of 1,444 OSS projects selected from the GitHub repositories.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty? 1520770893747 Naoyasu Ubayashi Kyushu University ubayashi@posl.ait.kyushu-u.ac.jp Hokuto Muraoka Kyushu University muraoka@posl.ait.kyushu-u.ac.jp Daiki Muramoto Kyushu University muramoto@posl.ait.kyushu-u.ac.jp Yasutaka Kamei Kyushu University kamei@posl.ait.kyushu-u.ac.jp Ryosuke Sato Kyushu University sato@posl.ait.kyushu-u.ac.jp Uncertainty Empirical Study OSS Commit Message Analysis Recently, many developers begin to notice that uncertainty is a crucial problem in software development. Unfortunately, no one knows how often uncertainty appears or what kinds of uncertainty exist in actual projects, because there are no empirical studies on uncertainty. To deal with this problem, we conduct a large-scale empirical study analyzing commit messages and revision histories of 1,444 OSS projects selected from the GitHub repositories.",
              "pageNumber": 272,
              "isPageNumberRoman": false
            },
            {
              "id": "2rlydpaVe21rHVqTn766Fn",
              "type": "authorPaper",
              "text": "Poster: Systematic Top-Down Design of Cyber-Physical Models with Integrated Validation and Formal Verification",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/38tlW5CES2zQGPC5Lddm4E/1Pf8cuH3eGelk0cq747NRO.pdf",
              "extraLocations": [],
              "authorNames": "Christoph Luckeneder (TU Wien), Hermann Kaindl (TU Wien)",
              "abstract": "The complexity of designing and verifying large-scale systems requires abstract models. Consistently and systematically deriving a more concrete model from an abstract model with regard to verification of its behavior against certain properties is an open problem. We propose a new workflow for systematic top-down design of models for a Cyber-physical System (CPS). It builds on a theory of systematic abstraction and refinement techniques in the context of verification through model checking. In addition, this workflow includes validation in the sense that a refined model is checked for its fit with reality. Our proposed workflow is new with respect to its systematic determination of model changes on different levels of abstraction based on the V&amp;V results and the formal property over-approximation of an abstract model (as compared to the corresponding concrete model).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Systematic Top-Down Design of Cyber-Physical Models with Integrated Validation and Formal Verification 1521124622995 Christoph Luckeneder TU Wien christoph.luckeneder@tuwien.ac.at Hermann Kaindl TU Wien hermann.kaindl@tuwien.ac.at Top-down design behavioral models CEGAR The complexity of designing and verifying large-scale systems requires abstract models. Consistently and systematically deriving a more concrete model from an abstract model with regard to verification of its behavior against certain properties is an open problem. We propose a new workflow for systematic top-down design of models for a Cyber-physical System (CPS). It builds on a theory of systematic abstraction and refinement techniques in the context of verification through model checking. In addition, this workflow includes validation in the sense that a refined model is checked for its fit with reality. Our proposed workflow is new with respect to its systematic determination of model changes on different levels of abstraction based on the V&amp;V results and the formal property over-approximation of an abstract model (as compared to the corresponding concrete model).",
              "pageNumber": 274,
              "isPageNumberRoman": false
            },
            {
              "id": "3j3mZwtIAzUjQasM4wuHMn",
              "type": "authorPaper",
              "text": "Poster: On Vulnerability Evolution in Android Apps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nULBBNKVN3vRo4TxBqzfB/2apYrCqhmwvonAhfSbGWJv.pdf",
              "extraLocations": [],
              "authorNames": "Jun Gao (University of Luxembourg), Li Li (Monash University), Pingfan Kong (University of Luxembourg), Tegawendé F. Bissyandé (University of Luxembourg), Jacques Klein (University of Luxembourg)",
              "abstract": "In this work, we reconstruct a set of Android app lineages which each of them represents a sequence of app versions that are historically released for the same app. Then, based on these lineages, we empirically investigate the evolution of app vulnerabilities, which are revealed by well-known vulnerability scanners, and subsequently summarise various interesting findings that constitute a tangible knowledge to the community.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: On Vulnerability Evolution in Android Apps 1520868279782 Jun Gao University of Luxembourg jun.gao@uni.lu Li Li Monash University li.li@monash.edu Pingfan Kong University of Luxembourg pingfan.kong@uni.lu Tegawendé F. Bissyandé University of Luxembourg tegawende.bissyande@uni.lu Jacques Klein University of Luxembourg jacques.klein@uni.lu Android Vulnerability App Evolution In this work, we reconstruct a set of Android app lineages which each of them represents a sequence of app versions that are historically released for the same app. Then, based on these lineages, we empirically investigate the evolution of app vulnerabilities, which are revealed by well-known vulnerability scanners, and subsequently summarise various interesting findings that constitute a tangible knowledge to the community.",
              "pageNumber": 276,
              "isPageNumberRoman": false
            },
            {
              "id": "1TMFFHxijiqLAnIm2mVcxy",
              "type": "authorPaper",
              "text": "Poster: UMLx: A UML Diagram Analytic Tool for Software Management Decisions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4J6eUemJdAkVFMc1trnmXS/01fxxunGDjXR3fUdQxcuQB.pdf",
              "extraLocations": [],
              "authorNames": "Kan Qi (University of Southern California), Barry Boehm (University of Southern California)",
              "abstract": "A UML diagram analytic tool called UMLx is proposed, which automatically extracts information from UML diagrams to facilitate decision making in risk management, planning, resource allocation, and system design, based on a set of proposed metrics.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: UMLx: A UML Diagram Analytic Tool for Software Management Decisions 1521163260893 Kan Qi University of Southern California kqi@usc.edu Barry Boehm University of Southern California boehm@usc.edu Software sizing effort estimation UML analysis unified modeling language (UML) project management architecture quality evaluation object-oriented modeling use case driven development A UML diagram analytic tool called UMLx is proposed, which automatically extracts information from UML diagrams to facilitate decision making in risk management, planning, resource allocation, and system design, based on a set of proposed metrics.",
              "pageNumber": 278,
              "isPageNumberRoman": false
            },
            {
              "id": "SBZa4QF3pWxb9avAEHRgY",
              "type": "authorPaper",
              "text": "Poster: Unit Tests and Component Tests do Make a Difference on Fault Localisation Effectiveness",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1RTqhUi6UtbGqyJRHY9JdB/5ZovXpS8VqZDPU3QMSkzrb.pdf",
              "extraLocations": [],
              "authorNames": "Gulsher Laghari (Universiteit Antwerpen), Serge Demeyer (Universiteit Antwerpen)",
              "abstract": "Agile testers distinguish between unit tests and component tests as a way to automate the bulk of the developer tests. Research on fault localisation largely ignores this distinction, evaluating the effectiveness of these techniques irrespective of whether the fault is exposed by unit tests—where the search space to locate the fault is constrained to the unit under test— or by component tests— where the search space expands to all objects involved in the test. Based on a comparison of sixteen spectrum based fault localisation techniques, we show that there is indeed a big difference in performance when facing unit tests and component tests. Consequently, researchers should distinguish between easy and difficult to locate faults when evaluating new fault localisation techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Unit Tests and Component Tests do Make a Difference on Fault Localisation Effectiveness Gulsher Laghari Universiteit Antwerpen gulsher.laghari@uantwerpen.be Serge Demeyer Universiteit Antwerpen serge.demeyer@uantwerpen.be Spectrum based fault localisation Component tests Unit tests Agile testers distinguish between unit tests and component tests as a way to automate the bulk of the developer tests. Research on fault localisation largely ignores this distinction, evaluating the effectiveness of these techniques irrespective of whether the fault is exposed by unit tests—where the search space to locate the fault is constrained to the unit under test— or by component tests— where the search space expands to all objects involved in the test. Based on a comparison of sixteen spectrum based fault localisation techniques, we show that there is indeed a big difference in performance when facing unit tests and component tests. Consequently, researchers should distinguish between easy and difficult to locate faults when evaluating new fault localisation techniques.",
              "pageNumber": 280,
              "isPageNumberRoman": false
            },
            {
              "id": "3DPFt0xaQhccdv1pIbJthG",
              "type": "authorPaper",
              "text": "Poster: Recommending Exception Handling Patterns with ExAssist",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16FlGsREidqMynDpFiYKFV/4Wi4EHT113dBDrGRhyGTgj.pdf",
              "extraLocations": [],
              "authorNames": "Tam Nguyen (Auburn University), Phong Vu (Auburn University), Hung Pham (University of Waterloo), Tung Nguyen (Auburn University)",
              "abstract": "Exception handling is an advanced programming technique to prevent run-time errors or crashes for modern software systems. However, inexperienced programmers might fail to write proper exception handling code in their programs. In this paper, we introduce ExAssist, a code recommendation tool for exception handling. ExAssist can predict what types of exception could occur in a given piece of code and recommend proper exception handling code for such an exception. Preliminary evaluation of ExAssist suggests that it provides highly accurate recommendations.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Recommending Exception Handling Patterns with ExAssist 1521518080808 Tam Nguyen Auburn University tam@auburn.edu Phong Vu Auburn University lenniel@auburn.edu Hung Pham University of Waterloo hv.pham.2704@gmail.com Tung Nguyen Auburn University tung@auburn.edu Exception Handling Recommendation Tool Bug Detection Exception handling is an advanced programming technique to prevent run-time errors or crashes for modern software systems. However, inexperienced programmers might fail to write proper exception handling code in their programs. In this paper, we introduce ExAssist, a code recommendation tool for exception handling. ExAssist can predict what types of exception could occur in a given piece of code and recommend proper exception handling code for such an exception. Preliminary evaluation of ExAssist suggests that it provides highly accurate recommendations.",
              "pageNumber": 282,
              "isPageNumberRoman": false
            },
            {
              "id": "5ilNEiGou5nyfGTSG0irHL",
              "type": "authorPaper",
              "text": "Poster: ALPACA-Advanced Linguistic Pattern and Concept Analysis Framework for Software Engineering Corpora",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3aiLuwdP6akPBEGDrggWiZ/6ZElMdHQPHtE9H09hFTb2O.pdf",
              "extraLocations": [],
              "authorNames": "Phong Vu (Auburn University), Tam Nguyen (Auburn University), Hung Pham (University of Waterloo), Tung Nguyen (Auburn University)",
              "abstract": "Software engineering corpora often contain domain-specific concepts and linguistic patterns. Popular text analysis tools are not specially designed to analyze such concepts and patterns. In this paper, we introduce ALPACA, a novel, customizable text analysis framework. The main purpose of ALPACA is to analyze topics and their trends in a text corpus. It allows users to define a topic with a few initial domain-specific keywords and expand it into a much larger set. Every single keyword can be expanded into long clauses to describe topics more precisely. ALPACA extracts those clauses by matching text with linguistic patterns, which are long sequences mixing both specific words and part-of-speech tags frequently appeared in the corpus. ALPACA can detect these patterns directly from pre-processed text We present one example demonstrates the use of ALPACA for text corpora of security reports.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: ALPACA-Advanced Linguistic Pattern and Concept Analysis Framework for Software Engineering Corpora 1521527546818 Phong Vu Auburn University lenniel@auburn.com Tam Nguyen Auburn University tam@auburn.edu Hung Pham University of Waterloo hv.pham.2704@gmail.com Tung Nguyen Auburn University tung@auburn.edu natural language processing linguistic pattern trend Software engineering corpora often contain domain-specific concepts and linguistic patterns. Popular text analysis tools are not specially designed to analyze such concepts and patterns. In this paper, we introduce ALPACA, a novel, customizable text analysis framework. The main purpose of ALPACA is to analyze topics and their trends in a text corpus. It allows users to define a topic with a few initial domain-specific keywords and expand it into a much larger set. Every single keyword can be expanded into long clauses to describe topics more precisely. ALPACA extracts those clauses by matching text with linguistic patterns, which are long sequences mixing both specific words and part-of-speech tags frequently appeared in the corpus. ALPACA can detect these patterns directly from pre-processed text We present one example demonstrates the use of ALPACA for text corpora of security reports.",
              "pageNumber": 284,
              "isPageNumberRoman": false
            },
            {
              "id": "fgl7r3nCfQonT5exaJR6U",
              "type": "authorPaper",
              "text": "Poster: Combining STPA and BDD for Safety Analysis and Verification in Agile Development",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1XIsPKkwVZJO7pFEOdJQ1f/7HWY5r2C5Dq79jXhcZUpKM.pdf",
              "extraLocations": [],
              "authorNames": "Yang Wang (University of Stuttgart), Stefan Wagner (University of Stuttgart)",
              "abstract": "Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Combining STPA and BDD for Safety Analysis and Verification in Agile Development 1520859670957 Yang Wang University of Stuttgart yang.wang@informatik.uni-stuttgart.de Stefan Wagner University of Stuttgart stefan.wagner@informatik.uni-stuttgart.de Agile Development Safety Verification Safety-Critical Systems Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment.",
              "pageNumber": 286,
              "isPageNumberRoman": false
            },
            {
              "id": "pmRk6OXqZsKuOG9ZO9aPs",
              "type": "authorPaper",
              "text": "Poster: Machine Learning Based Code Smell Detection Through WekaNose",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2gDaQr1ksB8ODkMYxzryZz/5wYT53VZ6GfJZXciRk1zCw.pdf",
              "extraLocations": [],
              "authorNames": "Umberto Azadi (Università degli Studi di Milano Bicocca), Francesca Arcelli Fontana (Università degli Studi di Milano Bicocca), Marco Zanoni (Università degli Studi di Milano Bicocca)",
              "abstract": "Code smells can be subjectively interpreted, the results provided by detectors are usually different, the agreement in the results is scarce, and a benchmark for the comparison of these results is not yet available. The main approaches used to detect code smells are based on the computation of a set of metrics. However code smell detectors often use different metrics and/or different thresholds, according to their detection rules. As result of this inconsistency the number of detected smells can increase or decrease accordingly, and this makes hard to understand when, for a specific software, a certain characteristic identifies a code smell or not. In this work, we introduce WekaNose, a tool that allows to perform an experiment to study code smell detection through machine learning techniques. The experiment's purpose is to select rules, and/or obtain trained algorithms, that can classify an instance (method or class) as affected or not by a code smell. These rules have the main advantage of being extracted through an example-based approach, rather then a heuristic-based one.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Machine Learning Based Code Smell Detection Through WekaNose 1521218919952 Umberto Azadi Università degli Studi di Milano Bicocca u.azadi@campus.unimib.it Francesca Arcelli Fontana Università degli Studi di Milano Bicocca arcelli@disco.unimib.it Marco Zanoni Università degli Studi di Milano Bicocca marco.zanoni@disco.unimib.it Code smell detection tool Machine Learning techniques Learning by examples Community based detection Code smells can be subjectively interpreted, the results provided by detectors are usually different, the agreement in the results is scarce, and a benchmark for the comparison of these results is not yet available. The main approaches used to detect code smells are based on the computation of a set of metrics. However code smell detectors often use different metrics and/or different thresholds, according to their detection rules. As result of this inconsistency the number of detected smells can increase or decrease accordingly, and this makes hard to understand when, for a specific software, a certain characteristic identifies a code smell or not. In this work, we introduce WekaNose, a tool that allows to perform an experiment to study code smell detection through machine learning techniques. The experiment's purpose is to select rules, and/or obtain trained algorithms, that can classify an instance (method or class) as affected or not by a code smell. These rules have the main advantage of being extracted through an example-based approach, rather then a heuristic-based one.",
              "pageNumber": 288,
              "isPageNumberRoman": false
            },
            {
              "id": "3q3zpJ0eSUSGo10rAkKWt6",
              "type": "authorPaper",
              "text": "Poster: Knowledge-Enriched Security and Privacy Threat Modeling",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/37uFOoLUPhndyysBym8s6u/7szAL5XTsN6DNANI1CKW1D.pdf",
              "extraLocations": [],
              "authorNames": "Laurens Sion (KU Leuven), Koen Yskout (KU Leuven), Dimitri Van Landuyt (KU Leuven), Wouter Joosen (KU Leuven)",
              "abstract": "Creating secure and privacy-protecting systems entails the simultaneous coordination of development activities along three different yet mutually influencing dimensions: translating (security and privacy) goals to design choices, analyzing the design for threats, and performing a risk analysis of these threats in light of the goals. These activities are often executed in isolation, and such a disconnect impedes the prioritization of elicited threats, assessment which threats are sufficiently mitigated, and decision-making in terms of which risks can be accepted. In the proposed TMaRA approach, we facilitate the simultaneous consideration of these dimensions by integrating support for threat modeling, risk analysis, and design decisions. Key risk assessment inputs are systematically modeled and threat modeling efforts are fed back into the risk management process. This enables prioritizing threats based on their estimated risk, thereby providing decision support in the mitigation, acceptance, or transferral of risk for the system under design.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Knowledge-Enriched Security and Privacy Threat Modeling 1520943679204 Laurens Sion KU Leuven laurens.sion@cs.kuleuven.be Koen Yskout KU Leuven koen.yskout@cs.kuleuven.be Dimitri Van Landuyt KU Leuven dimitri.vanlanduyt@cs.kuleuven.be Wouter Joosen KU Leuven wouter.joosen@cs.kuleuven.be Security design threat modeling model enrichment Creating secure and privacy-protecting systems entails the simultaneous coordination of development activities along three different yet mutually influencing dimensions: translating (security and privacy) goals to design choices, analyzing the design for threats, and performing a risk analysis of these threats in light of the goals. These activities are often executed in isolation, and such a disconnect impedes the prioritization of elicited threats, assessment which threats are sufficiently mitigated, and decision-making in terms of which risks can be accepted. In the proposed TMaRA approach, we facilitate the simultaneous consideration of these dimensions by integrating support for threat modeling, risk analysis, and design decisions. Key risk assessment inputs are systematically modeled and threat modeling efforts are fed back into the risk management process. This enables prioritizing threats based on their estimated risk, thereby providing decision support in the mitigation, acceptance, or transferral of risk for the system under design.",
              "pageNumber": 290,
              "isPageNumberRoman": false
            },
            {
              "id": "6TBFSukYtxdOOQdwYfg0BI",
              "type": "authorPaper",
              "text": "Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1AkIwFloW3mkZDApKaVABX/7lyga27SMIeaITaprTqTOu.pdf",
              "extraLocations": [],
              "authorNames": "Simon Schwichtenberg (Paderborn University), Ivan Jovanovikj (Paderborn University), Christian Gerth (Hochschule Osnabrück), Gregor Engels (Paderborn University)",
              "abstract": "Today, model-driven approaches are a cornerstone in modern software development. The Eclipse Modeling Framework (EMF) is highly adopted in practice and generates Java code from platform-independent models with embedded Object Constraint Language (OCL) expressions. However, applications that target multiple platforms like Android, iOS, Windows, web browsers usually need to be implemented in different programming languages. Feature-complete Ecore and OCL runtime APIs are not available for all these platforms, such that their functionality has to be re-implemented. In this paper, we present CrossEcore: A multi-platform enabled modeling framework that generates C#, Swift, TypeScript, and JavaScript code from Ecore models with embedded OCL. An OCL compiler translates OCL expressions into expressions of the target language. The Ecore and OCL API can be consistently used across platforms, which facilitates application portability. CrossEcore is also extendible and can be easily adopted for new programming languages.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms 1521462948568 Simon Schwichtenberg Paderborn University simon.schwichtenberg@upb.de Ivan Jovanovikj Paderborn University ivan.jovanovikj@upb.de Christian Gerth Hochschule Osnabrück c.gerth@hs-osnabrueck.de Gregor Engels Paderborn University engels@upb.de modeling framework multi platform code generation OCL compiler Today, model-driven approaches are a cornerstone in modern software development. The Eclipse Modeling Framework (EMF) is highly adopted in practice and generates Java code from platform-independent models with embedded Object Constraint Language (OCL) expressions. However, applications that target multiple platforms like Android, iOS, Windows, web browsers usually need to be implemented in different programming languages. Feature-complete Ecore and OCL runtime APIs are not available for all these platforms, such that their functionality has to be re-implemented. In this paper, we present CrossEcore: A multi-platform enabled modeling framework that generates C#, Swift, TypeScript, and JavaScript code from Ecore models with embedded OCL. An OCL compiler translates OCL expressions into expressions of the target language. The Ecore and OCL API can be consistently used across platforms, which facilitates application portability. CrossEcore is also extendible and can be easily adopted for new programming languages.",
              "pageNumber": 292,
              "isPageNumberRoman": false
            },
            {
              "id": "2FInEAjlJOeT9v4wTBr6Qp",
              "type": "authorPaper",
              "text": "Poster: Semantically Enhanced Tag Recommendation for Software CQAs via Deep Learning",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7F1H2tgvwjlUwCU4NrnV3R/HRx9bqSyEdwNU1LCisZbN.pdf",
              "extraLocations": [],
              "authorNames": "Jian Zhang (Beihang University), Hailong Sun (Beihang University), Yanfei Tian (Beihang University), Xudong Liu (Beihang University)",
              "abstract": "Most software CQAs (e.g. Stack Overflow) mainly rely on users to assign tags for posted questions. This leads to many redundant, inconsistent and inaccurate tags that are detrimental to the communities. Therefore tag quality becomes a critical challenge to deal with. In this work, we propose STR, a deep learning based approach that automatically recommends tags through learning the semantics of both tags and questions in such software CQAs. First, word embedding is employed to convert text information to high-dimension vectors for better representing questions and tags. Second, a Multi-tasking-like Convolutional Neural Network, the core modules of STR, is designed to capture short and long semantics. Third, the learned semantic vectors are fed into a gradient descent based algorithm for classification. Finally, we evaluate STR on three datasets collected from popular software CQAs, and experimental results show that STR outperforms state-of-the-art approaches in terms of Precision@k, Recall@k and F1-Measure@k.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Semantically Enhanced Tag Recommendation for Software CQAs via Deep Learning 1521105471896 Jian Zhang Beihang University zjian@buaa.edu.cn Hailong Sun Beihang University sunhl@buaa.edu.cn Yanfei Tian Beihang University tianyf@buaa.edu.cn Xudong Liu Beihang University liuxd@buaa.edu.cn Tag recommendation deep learning semantic representation convolutional neural network software CQAs Stack Overflow Most software CQAs (e.g. Stack Overflow) mainly rely on users to assign tags for posted questions. This leads to many redundant, inconsistent and inaccurate tags that are detrimental to the communities. Therefore tag quality becomes a critical challenge to deal with. In this work, we propose STR, a deep learning based approach that automatically recommends tags through learning the semantics of both tags and questions in such software CQAs. First, word embedding is employed to convert text information to high-dimension vectors for better representing questions and tags. Second, a Multi-tasking-like Convolutional Neural Network, the core modules of STR, is designed to capture short and long semantics. Third, the learned semantic vectors are fed into a gradient descent based algorithm for classification. Finally, we evaluate STR on three datasets collected from popular software CQAs, and experimental results show that STR outperforms state-of-the-art approaches in terms of Precision@k, Recall@k and F1-Measure@k.",
              "pageNumber": 294,
              "isPageNumberRoman": false
            },
            {
              "id": "Uk5NABJbxYEB7ffXCrjO4",
              "type": "authorPaper",
              "text": "Poster: QoS-Aware Service Composition Using Blockchain-Based Smart Contracts",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/52LmPy7QbAM0aNeB9uYJC2/53SEGmGiNbgYAVNqtV672d.pdf",
              "extraLocations": [],
              "authorNames": "Puwei Wang (University of China), Xiaohe Liu (University of China), Jinchuan Chen (University of China), Ying Zhan (Guizhou University of Finance and Economics), Zhi Jin (Peking University)",
              "abstract": "Smart contracts that run on blockchains can ensure the transactions are automatically, reliably performed as agreed upon between the participants without a trusted third party. In this work, we propose a smart-contract based algorithm for constructing service-based systems through the composition of existing services.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: QoS-Aware Service Composition Using Blockchain-Based Smart Contracts 1521451622806 Puwei Wang University of China wangpw@139.com Xiaohe Liu University of China preminem@ruc.edu.cn Jinchuan Chen University of China jcchen@ruc.edu.cn Ying Zhan Guizhou University of Finance and Economics zhanycathy@163.com Zhi Jin Peking University zhijin@pku.edu.cn Service Composition Blockchain Smart Contract Smart contracts that run on blockchains can ensure the transactions are automatically, reliably performed as agreed upon between the participants without a trusted third party. In this work, we propose a smart-contract based algorithm for constructing service-based systems through the composition of existing services.",
              "pageNumber": 296,
              "isPageNumberRoman": false
            },
            {
              "id": "3IhOLeTRKaznExaTGMbFmW",
              "type": "authorPaper",
              "text": "Poster: An Automated and Instant Discovery of Concrete Repairs for Model Inconsistencies",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ZXDV27yXUaGfVABEbPh4W/6hS0Qqz6BFxUscbdXS9ZJC.pdf",
              "extraLocations": [],
              "authorNames": "Roland Kretschmer (Johannes Kepler Universität Linz), Djamel Eddine Khelladi (Johannes Kepler University Linz), Alexander Egyed (Johannes Kepler University Linz)",
              "abstract": "Developers change software models continuously but often fail in keeping them consistent. Inconsistencies caused by such changes need to be repaired eventually. While we found that usually few model elements need to be repaired for any given inconsistency, there are many possible repair values for any given model element. To make matters worse, model elements need to be repaired in combination. The result is a large and exponentially growing repair space. In this paper we present an approach towards grouping alike repair values if they have the same effect to provide example-like feedback for developers. A preliminary evaluation shows that our approach can more scalably explore the repair space.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: An Automated and Instant Discovery of Concrete Repairs for Model Inconsistencies 1521472444768 Roland Kretschmer Johannes Kepler Universität Linz roland.kretschmer@jku.at Djamel Eddine Khelladi Johannes Kepler University Linz djamel_eddine.khelladi@jku.at Alexander Egyed Johannes Kepler University Linz alexander.egyed@jku.at concrete repair abstract repair model inconsistencies model repair concrete values Developers change software models continuously but often fail in keeping them consistent. Inconsistencies caused by such changes need to be repaired eventually. While we found that usually few model elements need to be repaired for any given inconsistency, there are many possible repair values for any given model element. To make matters worse, model elements need to be repaired in combination. The result is a large and exponentially growing repair space. In this paper we present an approach towards grouping alike repair values if they have the same effect to provide example-like feedback for developers. A preliminary evaluation shows that our approach can more scalably explore the repair space.",
              "pageNumber": 298,
              "isPageNumberRoman": false
            },
            {
              "id": "2wSecnGboF8pq1Fk6yiQZe",
              "type": "authorPaper",
              "text": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf",
              "extraLocations": [],
              "authorNames": "Ivonne von Nostitz-Wallwitz (University of Magdeburg & METOP GmbH), Jacob Krüger (University of Magdeburg & Harz University), Janet Siegmund (University of Passau), Thomas Leich (Harz University & METOP GmbH)",
              "abstract": "The number of scientific publications is continuously increasing, with most publications describing research that is also interesting for industrial software engineers. Program comprehension in particular is an essential and time consuming task in industry, but new approaches are rarely adopted.We conducted a survey with 89 participants from research and industry to investigate this problem. Our results indicate that researchers have to integrate other ways to communicate their work and make evaluations more practical.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension 1520501317287 Ivonne von Nostitz-Wallwitz University of Magdeburg & METOP GmbH ischroet@ovgu.de Jacob Krüger University of Magdeburg & Harz University jkrueger@ovgu.de Janet Siegmund University of Passau siegmunj@fim.uni-passau.de Thomas Leich Harz University & METOP GmbH tleich@hs-harz.de Program comprehension survey knowledge transfer The number of scientific publications is continuously increasing, with most publications describing research that is also interesting for industrial software engineers. Program comprehension in particular is an essential and time consuming task in industry, but new approaches are rarely adopted.We conducted a survey with 89 participants from research and industry to investigate this problem. Our results indicate that researchers have to integrate other ways to communicate their work and make evaluations more practical.",
              "pageNumber": 300,
              "isPageNumberRoman": false
            },
            {
              "id": "1mhL8BwaGFVHYtz7gdwSXf",
              "type": "authorPaper",
              "text": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf",
              "extraLocations": [],
              "authorNames": "Seongmin Lee (KAIST), David Binkley (Loyola University Maryland), Nicolas Gold (University College London), Syed Islam (University of East London), Jens Krinke (University College London), Shin Yoo (KAIST)",
              "abstract": "Observation-Based Slicing (ORBS) is a recently introduced program slicing technique based on direct observation of program semantics. Previous ORBS implementations slice a program by iteratively deleting adjacent lines of code. This paper introduces two new deletion operators based on lexical similarity. Furthermore, it presents a generalization of ORBS that can exploit multiple deletion operators: Multi-operator Observation-Based Slicing (MOBS). An empirical evaluation of MOBS using three real world Java projects finds that the use of lexical information, improves the efficiency of ORBS: MOBS can delete up to 87% of lines while taking only about 33% of the execution time with respect to the original ORBS.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence 1520996131339 Seongmin Lee KAIST bohrok@kaist.ac.kr David Binkley Loyola University Maryland binkley@cs.loyola.edu Nicolas Gold University College London n.gold@ucl.ac.uk Syed Islam University of East London syed.islam@uel.ac.uk Jens Krinke University College London j.krinke@ucl.ac.uk Shin Yoo KAIST shin.yoo@kaist.ac.kr Program Slicing Dependence Analysis Program Analysis Observation-Based Slicing (ORBS) is a recently introduced program slicing technique based on direct observation of program semantics. Previous ORBS implementations slice a program by iteratively deleting adjacent lines of code. This paper introduces two new deletion operators based on lexical similarity. Furthermore, it presents a generalization of ORBS that can exploit multiple deletion operators: Multi-operator Observation-Based Slicing (MOBS). An empirical evaluation of MOBS using three real world Java projects finds that the use of lexical information, improves the efficiency of ORBS: MOBS can delete up to 87% of lines while taking only about 33% of the execution time with respect to the original ORBS.",
              "pageNumber": 302,
              "isPageNumberRoman": false
            },
            {
              "id": "2BAn3jw2dyiYjLTcizVDw",
              "type": "authorPaper",
              "text": "Poster: On Extracting Relevant and Complex Variability Information from Software Descriptions with Pattern Structures",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5qpsBHLVvt6ITKmG4P5Aes/6VeSDOFMGM7oBcQsDZmBjQ.pdf",
              "extraLocations": [],
              "authorNames": "Jessie Carbonnel (LIRMM), Marianne Huchard (LIRMM), Clémentine Nebut (LIRMM)",
              "abstract": "The migration from existing software variants to a software product line is an arduous task that necessitates to synthesise a variability model based on already developed softwares. Nowadays, the increasing complexity of software product lines compels practitioners to design more complex variability models that represent other information than binary features, e.g., multi-valued attributes. Assisting the extraction of complex variability models from variant descriptions is a key task to help the migration towards complex software product lines. In this paper, we address the problem of extracting complex variability information from software descriptions, as a part of the process of complex variability model synthesis. We propose an approach based on Pattern Structures to extract variability information, in the form of logical relationships involving both binary features and multi-valued attributes.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: On Extracting Relevant and Complex Variability Information from Software Descriptions with Pattern Structures 1520513632926 Jessie Carbonnel LIRMM jcarbonnel@lirmm.fr Marianne Huchard LIRMM huchard@lirmm.fr Clémentine Nebut LIRMM nebut@lirmm.fr Software Product Line Reverse Engineering Variability Extraction The migration from existing software variants to a software product line is an arduous task that necessitates to synthesise a variability model based on already developed softwares. Nowadays, the increasing complexity of software product lines compels practitioners to design more complex variability models that represent other information than binary features, e.g., multi-valued attributes. Assisting the extraction of complex variability models from variant descriptions is a key task to help the migration towards complex software product lines. In this paper, we address the problem of extracting complex variability information from software descriptions, as a part of the process of complex variability model synthesis. We propose an approach based on Pattern Structures to extract variability information, in the form of logical relationships involving both binary features and multi-valued attributes.",
              "pageNumber": 304,
              "isPageNumberRoman": false
            },
            {
              "id": "708OwaRV4p9melmyAlmcgP",
              "type": "authorPaper",
              "text": "Poster: CUTER: ClUstering-based TEst Suite Reduction",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1O6c7LMrpvYO3yKdZ6nu8K/3xiITKaOxnIRfZeDY8Cg9l.pdf",
              "extraLocations": [],
              "authorNames": "Carmen Coviello (University of Basilicata), Simone Romano (University of Basilicata), Giuseppe Scanniello (University of Basilicata)",
              "abstract": "Test Suite Reduction (TSR) approaches speed up regression testing by removing redundant test cases. TSR approaches can be classified as adequate or inadequate. Adequate approaches reduce test suites so that they completely preserve the test requirements (e.g., statement coverage) of the original test suites. Inadequate approaches produce reduced test suites that only partially preserve the test requirements. We propose a tool prototype for inadequate TSR and named it CUTER (ClUstering-based TEst suite Reduction). CUTER implements a clustering-based approach and a number of instances of its underlying process. We implemented CUTER as an Eclipse plug-in and applied it on 19 versions of four Java programs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: CUTER: ClUstering-based TEst Suite Reduction 1521278214311 Carmen Coviello University of Basilicata carmen.coviello@unibas.it Simone Romano University of Basilicata simone.romano@unibas.it Giuseppe Scanniello University of Basilicata giuseppe.scanniello@unibas.it Regression Testing Test Suite Reduction Clustering Test Suite Reduction (TSR) approaches speed up regression testing by removing redundant test cases. TSR approaches can be classified as adequate or inadequate. Adequate approaches reduce test suites so that they completely preserve the test requirements (e.g., statement coverage) of the original test suites. Inadequate approaches produce reduced test suites that only partially preserve the test requirements. We propose a tool prototype for inadequate TSR and named it CUTER (ClUstering-based TEst suite Reduction). CUTER implements a clustering-based approach and a number of instances of its underlying process. We implemented CUTER as an Eclipse plug-in and applied it on 19 versions of four Java programs.",
              "pageNumber": 306,
              "isPageNumberRoman": false
            },
            {
              "id": "4WITuoACiHEtVxtpDBveAx",
              "type": "authorPaper",
              "text": "Poster: The Effect of Noise on Requirements Comprehension",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf",
              "extraLocations": [],
              "authorNames": "Simone Romano (University of Basilicata), Giuseppe Scanniello (University of Basilicata), Davide Fucci (University of Hamburg), Natalia Juristo (Universidad Politécnica de Madrid), Burak Turhan (Brunel University London)",
              "abstract": "We conducted a controlled experiment with 55 final-year undergraduate students in Computer Science. We asked them to comprehend functional requirements exposing them or not to noise. We did not observe any effect of noise on requirements comprehension.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: The Effect of Noise on Requirements Comprehension 1521222417859 Simone Romano University of Basilicata simone.romano@unibas.it Giuseppe Scanniello University of Basilicata giuseppe.scanniello@unibas.it Davide Fucci University of Hamburg fucci@informatik.uni-hamburg.de Natalia Juristo Universidad Politécnica de Madrid natalia@fi.upm.es Burak Turhan Brunel University London burak.turhan@brunel.ac.uk Comprehension noise experiment functional requirement We conducted a controlled experiment with 55 final-year undergraduate students in Computer Science. We asked them to comprehend functional requirements exposing them or not to noise. We did not observe any effect of noise on requirements comprehension.",
              "pageNumber": 308,
              "isPageNumberRoman": false
            },
            {
              "id": "6blbzJCEhS4nImmSZO9MB8",
              "type": "authorPaper",
              "text": "Poster: Incremental UML for Agile Development with PREXEL",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/67nL4n4nFlAVswPrj0c9Rp/4pVEMTRsBYCVepnOlHjnER.pdf",
              "extraLocations": [],
              "authorNames": "Eric Braude (Boston University), Jason Van Schooneveld (Boston University)",
              "abstract": "UML creates useful visualizations but they become monolithic, complex, and expensive to maintain. In agile development, documentation is secondary, which discourages the use of UML even further. We introduce an in-code, just-in-time, maintainable approach to UML, supported by a tool called PREXEL. PREXEL minimizes interruptions in coding by allowing concise in-line specifications which automatically synthesize in-code graphical ASCII class models, class and method skeletons, and class relationships.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Incremental UML for Agile Development with PREXEL 1521474530022 Eric Braude Boston University ebraude@bu.edu Jason Van Schooneveld Boston University jasonvan@bu.edu embedded UML agile UML incremental UML inline UML agile modelling UML creates useful visualizations but they become monolithic, complex, and expensive to maintain. In agile development, documentation is secondary, which discourages the use of UML even further. We introduce an in-code, just-in-time, maintainable approach to UML, supported by a tool called PREXEL. PREXEL minimizes interruptions in coding by allowing concise in-line specifications which automatically synthesize in-code graphical ASCII class models, class and method skeletons, and class relationships.",
              "pageNumber": 310,
              "isPageNumberRoman": false
            },
            {
              "id": "7c7W1qHfLg57ARH8a6nWOf",
              "type": "authorPaper",
              "text": "Poster: An Algorithm and Tool to Infer Practical Postconditions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5VIJZqURpbuELiOLsoX5gB/34qnQCM0ECnQSCfKKWDUUj.pdf",
              "extraLocations": [],
              "authorNames": "John L. Singleton (University of Central Florida), Gary T. Leavens (University of Central Florida), Hridesh Rajan (Iowa State University), David Cok (GrammaTech)",
              "abstract": "Manually writing pre- and postconditions to document the behavior of a large library is a time-consuming task; what is needed is a way to automatically infer them. Conventional wisdom is that, if one has preconditions, then one can use the strongest postcondition predicate transformer (SP) to infer postconditions. However, we have performed a study using 2,300 methods in 7 popular Java libraries, and found that SP yields postconditions that are exponentially large, which makes them difficult to use, either by humans or by tools. We solve this problem using a novel algorithm and tool for inferring method postconditions, using the SP, and transmuting the inferred postconditions to make them more concise. We applied our technique to infer postconditions for over 2,300 methods in seven popular Java libraries. Our technique was able to infer specifications for 75.7% of these methods. Each of these inferred postconditions was verified using an Extended Static Checker. We also found that 84.6% of resulting specifications were less than 1/4 page (20 lines) in length. Our algorithm was able to reduce the length of SMT proofs needed for verifying implementations by 76.7% and reduced prover execution time by 26.7%.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: An Algorithm and Tool to Infer Practical Postconditions 1521397561908 John L. Singleton University of Central Florida jls@cs.ucf.edu Gary T. Leavens University of Central Florida leavens@cs.ucf.edu Hridesh Rajan Iowa State University hridesh@iastate.edu David Cok GrammaTech dcok@grammatech.com Specification inference JML predicate transformers Manually writing pre- and postconditions to document the behavior of a large library is a time-consuming task; what is needed is a way to automatically infer them. Conventional wisdom is that, if one has preconditions, then one can use the strongest postcondition predicate transformer (SP) to infer postconditions. However, we have performed a study using 2,300 methods in 7 popular Java libraries, and found that SP yields postconditions that are exponentially large, which makes them difficult to use, either by humans or by tools. We solve this problem using a novel algorithm and tool for inferring method postconditions, using the SP, and transmuting the inferred postconditions to make them more concise. We applied our technique to infer postconditions for over 2,300 methods in seven popular Java libraries. Our technique was able to infer specifications for 75.7% of these methods. Each of these inferred postconditions was verified using an Extended Static Checker. We also found that 84.6% of resulting specifications were less than 1/4 page (20 lines) in length. Our algorithm was able to reduce the length of SMT proofs needed for verifying implementations by 76.7% and reduced prover execution time by 26.7%.",
              "pageNumber": 313,
              "isPageNumberRoman": false
            },
            {
              "id": "4uFSEmv3TfyXbZkN6QgqEq",
              "type": "authorPaper",
              "text": "Poster: Designing Bug Detection Rules for Fewer False Alarms",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1UPJvjP8ppzant4gtBI7mS/6oFZLatXk1lynNL1b8OV0u.pdf",
              "extraLocations": [],
              "authorNames": "Jaechang Nam (Handong Global University), Song Wang (University of Waterloo), Yuan Xi (University of Waterloo), Lin Tan (University of Waterloo)",
              "abstract": "One of the challenging issues of the existing static analysis tools is the high false alarm rate. To address the false alarm issue, we design bug detection rules by learning from a large number of real bugs from open-source projects from GitHub. Specifically, we build a framework that learns and refines bug detection rules for fewer false positives. Based on the framework, we implemented ten patterns, six of which are new ones to existing tools. To evaluate the framework, we implemented a static analysis tool, FeeFin, based on the framework with the ten bug detection rules and applied the tool for 1,800 open-source projects in GitHub. The 57 detected bugs by FeeFin has been confirmed by developers as true positives and 44 bugs out of the detected bugs were actually fixed.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Designing Bug Detection Rules for Fewer False Alarms 1521515622655 Jaechang Nam Handong Global University jcnam@handong.edu Song Wang University of Waterloo song.wang@uwaterloo.ca Yuan Xi University of Waterloo y25xi@uwaterloo.ca Lin Tan University of Waterloo lintan@uwaterloo.ca Static bug finder bug detection rules bug patterns One of the challenging issues of the existing static analysis tools is the high false alarm rate. To address the false alarm issue, we design bug detection rules by learning from a large number of real bugs from open-source projects from GitHub. Specifically, we build a framework that learns and refines bug detection rules for fewer false positives. Based on the framework, we implemented ten patterns, six of which are new ones to existing tools. To evaluate the framework, we implemented a static analysis tool, FeeFin, based on the framework with the ten bug detection rules and applied the tool for 1,800 open-source projects in GitHub. The 57 detected bugs by FeeFin has been confirmed by developers as true positives and 44 bugs out of the detected bugs were actually fixed.",
              "pageNumber": 315,
              "isPageNumberRoman": false
            },
            {
              "id": "51UFX9RJCO7jasSu2OPF0n",
              "type": "authorPaper",
              "text": "Poster: Automated User Reviews Analyser",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2XVu8NOmDn7F85PC7nf6wG/5FUBTaBu8fe7Ng64ZOwFED.pdf",
              "extraLocations": [],
              "authorNames": "Adelina Ciurumelea (University of Zurich), Sebastiano Panichella (University of Zurich), Harald C. Gall (University of Zurich)",
              "abstract": "We present a novel tool, AUREA, that automatically classifies mobile app reviews, filters and facilitates their analysis using fine grained mobile specific topics. We aim to help developers analyse the direct and valuable feedback that users provide through their reviews, in order to better plan maintenance and evolution activities for their apps. Reviews are often difficult to analyse because of their unstructured textual nature and their frequency, moreover only a third of them are informative. We believe that by using our tool, developers can reduce the amount of time required to analyse and understand the issues users encounter and plan appropriate change tasks.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Automated User Reviews Analyser 1521087580786 Adelina Ciurumelea University of Zurich ciurumelea@ifi.uzh.ch Sebastiano Panichella University of Zurich panichella@ifi.uzh.ch Harald C. Gall University of Zurich harald.gall@uzh.ch Mobile Applications User Reviews Text Classification We present a novel tool, AUREA, that automatically classifies mobile app reviews, filters and facilitates their analysis using fine grained mobile specific topics. We aim to help developers analyse the direct and valuable feedback that users provide through their reviews, in order to better plan maintenance and evolution activities for their apps. Reviews are often difficult to analyse because of their unstructured textual nature and their frequency, moreover only a third of them are informative. We believe that by using our tool, developers can reduce the amount of time required to analyse and understand the issues users encounter and plan appropriate change tasks.",
              "pageNumber": 317,
              "isPageNumberRoman": false
            },
            {
              "id": "4JHRERxFTogbtIBpnFGzhP",
              "type": "authorPaper",
              "text": "Poster: A Recommender System for Developer Onboarding",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6v6lwqxrCTDmoe8tmGqzBa/27FhEqUbQa1fXoWqFqHZHl.pdf",
              "extraLocations": [],
              "authorNames": "Chao Liu (Chongqing University), Dan Yang (Chongqing University), Xiaohong Zhang (Chongqing University), Haibo Hu (Chongqing University), Jed Barson (University of Virginia), Baishakhi Ray (University of Virginia)",
              "abstract": "Successfully onboarding open source projects in GitHub is difficult for developers, because it is time-consuming for them to search an expected project by a few query words from numerous repositories, and developers suffer from various social and technical barriers in joined projects. Frequently failed onboarding postpones developers' development schedule, and the evolutionary progress of open source projects. To mitigate developers' costly efforts for onboarding, we propose a ranking model NNLRank (Neural Network for List-wise Ranking) to recommend projects that developers are likely to contribute many commits. Based on 9 measured project features, NNLRank learns a ranking function (represented by a neural network, optimized by a list-wise ranking loss function) to score a list of candidate projects, where top-n scored candidates are recommended to a target developer. We evaluate NNLRank by 2044 succeeded onboarding decisions from GitHub developers, comparing with a related model LP (Link Prediction), and 3 other typical ranking models. Results show that NNLRank can provide developers with effective recommendation, substantially outperforming baselines.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Recommender System for Developer Onboarding 1521524638711 Chao Liu Chongqing University liu.chao@cqu.edu.cn Dan Yang Chongqing University dyang@cqu.edu.cn Xiaohong Zhang Chongqing University xhongz@cqu.edu.cn Haibo Hu Chongqing University hbhu@cqu.edu.cn Jed Barson University of Virginia jb3bt@virginia.edu Baishakhi Ray University of Virginia rayb@virginia.edu Developer Onboarding Recommender System Learning to Rank Successfully onboarding open source projects in GitHub is difficult for developers, because it is time-consuming for them to search an expected project by a few query words from numerous repositories, and developers suffer from various social and technical barriers in joined projects. Frequently failed onboarding postpones developers' development schedule, and the evolutionary progress of open source projects. To mitigate developers' costly efforts for onboarding, we propose a ranking model NNLRank (Neural Network for List-wise Ranking) to recommend projects that developers are likely to contribute many commits. Based on 9 measured project features, NNLRank learns a ranking function (represented by a neural network, optimized by a list-wise ranking loss function) to score a list of candidate projects, where top-n scored candidates are recommended to a target developer. We evaluate NNLRank by 2044 succeeded onboarding decisions from GitHub developers, comparing with a related model LP (Link Prediction), and 3 other typical ranking models. Results show that NNLRank can provide developers with effective recommendation, substantially outperforming baselines.",
              "pageNumber": 319,
              "isPageNumberRoman": false
            },
            {
              "id": "5cNJMSDnOcEJRXalPK6x16",
              "type": "authorPaper",
              "text": "Poster: Obfuscating Program Control Flow with Intel SGX",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46LvkSkPnBARdnA4scnxeh/1dPQyq74EXz5tkMycRh9Ve.pdf",
              "extraLocations": [],
              "authorNames": "Yongzhi Wang (Xidian University), Yulong Shen (Xidian University), Ke Cheng (Xidian University), Yibo Yang (Xidian University), Cuicui Su (Xidian University), Anter Faree (Xidian University)",
              "abstract": "Control flow obfuscation is a direct approach in protecting the confidentiality of program logic. However, existing works in this direction either failed to offer high confidentiality guarantees or incurred high performance overheads. In this paper, we propose CFHider, a high security and high performance control flow obfuscation technique. By leveraging program transformation and Intel Software Guard Extension (SGX) technology, CFHider hides control flow information to an opaque yet trusted execution environment, i.e., the SGX enclave. Our evaluation showed that, CFHider extensively raises the bar for reverse-engineering attacks targeting on the control flow confidentiality, and incurs a moderate performance overhead.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Obfuscating Program Control Flow with Intel SGX 1520563594512 Yongzhi Wang Xidian University yzwang@xidian.edu.cn Yulong Shen Xidian University ylshen@mail.xidian.edu.cn Ke Cheng Xidian University kechengstu@gmail.com Yibo Yang Xidian University bobyangpopo@gmail.com Cuicui Su Xidian University ccsu.hannah@gmail.com Anter Faree Xidian University dafir.net@gmail.com Control flow confidentiality SGX Cloud computing Control flow obfuscation is a direct approach in protecting the confidentiality of program logic. However, existing works in this direction either failed to offer high confidentiality guarantees or incurred high performance overheads. In this paper, we propose CFHider, a high security and high performance control flow obfuscation technique. By leveraging program transformation and Intel Software Guard Extension (SGX) technology, CFHider hides control flow information to an opaque yet trusted execution environment, i.e., the SGX enclave. Our evaluation showed that, CFHider extensively raises the bar for reverse-engineering attacks targeting on the control flow confidentiality, and incurs a moderate performance overhead.",
              "pageNumber": 321,
              "isPageNumberRoman": false
            },
            {
              "id": "4TMy4XMx1AlnhESZQiqsFj",
              "type": "authorPaper",
              "text": "Poster: Benchmarking Microservice Systems for Software Engineering Research",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4MPJujC2aLJ54VMGaEtm76/1tKujoNDTv8GyqnEt9T70J.pdf",
              "extraLocations": [],
              "authorNames": "Xiang Zhou (Fudan University), Xin Peng (Fudan University), Tao Xie (University of Illinois at Urbana-Champaign), Jun Sun (Singapore University of Technology and Design), Chenjie Xu (Fudan University), Chao Ji (Fudan University), Wenyun Zhao (Fudan University)",
              "abstract": "Despite the prevalence and importance of microservices in industry, there exists limited research on microservices, partly due to lacking a benchmark system that reflects the characteristics of industrial microservice systems. To fill this gap, we conduct a review of literature and open source systems to identify the gap between existing benchmark systems and industrial microservice systems. Based on the results of the gap analysis, we then develop and release a medium-size benchmark system of microservice architecture.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Benchmarking Microservice Systems for Software Engineering Research 1521772285404 Xiang Zhou Fudan University 15110240026@fudan.edu.cn Xin Peng Fudan University pengxin@fudan.edu.cn Tao Xie University of Illinois at Urbana-Champaign taoxie@illinois.edu Jun Sun Singapore University of Technology and Design sunjun@sutd.edu.sg Chenjie Xu Fudan University 15212010021@fudan.edu.cn Chao Ji Fudan University 17212010013@fudan.edu.cn Wenyun Zhao Fudan University wyzhao@fudan.edu.cn Microservice benchmark tracing visualization debugging failure diagnosis Despite the prevalence and importance of microservices in industry, there exists limited research on microservices, partly due to lacking a benchmark system that reflects the characteristics of industrial microservice systems. To fill this gap, we conduct a review of literature and open source systems to identify the gap between existing benchmark systems and industrial microservice systems. Based on the results of the gap analysis, we then develop and release a medium-size benchmark system of microservice architecture.",
              "pageNumber": 323,
              "isPageNumberRoman": false
            },
            {
              "id": "TpVXc4e5BZ2KKMG5D2glh",
              "type": "authorPaper",
              "text": "Poster: Bridging Effort-Aware Prediction and Strong Classification - A Just-in-Time Software Defect Prediction Study",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W55obxh9gzemjqfGcWAPj/3f132O9xPg1LX5ixGPIYgu.pdf",
              "extraLocations": [],
              "authorNames": "Yuchen Guo (Xi'an Jiaotong University), Martin Shepperd (Brunel University London), Ning Li (Northwestern Polytechnical University)",
              "abstract": "Context: Most research into software defect prediction ignores the differing amount of effort entailed in searching for defects between software components. The result is sub-optimal solutions in terms of allocating testing resources. Recently effort-aware (EA) defect prediction has sought to redress this deficiency. However, there is a gap between previous classification research and EA prediction. Objective: We seek to transfer strong defect classification capability to efficient effort-aware software defect prediction. Method: We study the relationship between classification performance and the cost-effectiveness curve experimentally (using six open-source software data sets). Results: We observe extremely skewed distributions of change size which contributes to the lack of relationship between classification performance and the ability to find efficient test orderings for defect detection. Trimming allows all effort-aware approaches bridging high classification capability to efficient effort-aware performance. Conclusion: Effort distributions dominate effort-aware models. Trimming is a practical method to handle this problem.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Bridging Effort-Aware Prediction and Strong Classification - A Just-in-Time Software Defect Prediction Study 1520992526574 Yuchen Guo Xi'an Jiaotong University wispcat@stu.xjtu.edu.cn Martin Shepperd Brunel University London Martin.Shepperd@brunel.ac.uk Ning Li Northwestern Polytechnical University lining@nwpu.edu.cn Software defect prediction effort-aware just-in-time Context: Most research into software defect prediction ignores the differing amount of effort entailed in searching for defects between software components. The result is sub-optimal solutions in terms of allocating testing resources. Recently effort-aware (EA) defect prediction has sought to redress this deficiency. However, there is a gap between previous classification research and EA prediction. Objective: We seek to transfer strong defect classification capability to efficient effort-aware software defect prediction. Method: We study the relationship between classification performance and the cost-effectiveness curve experimentally (using six open-source software data sets). Results: We observe extremely skewed distributions of change size which contributes to the lack of relationship between classification performance and the ability to find efficient test orderings for defect detection. Trimming allows all effort-aware approaches bridging high classification capability to efficient effort-aware performance. Conclusion: Effort distributions dominate effort-aware models. Trimming is a practical method to handle this problem.",
              "pageNumber": 325,
              "isPageNumberRoman": false
            },
            {
              "id": "31hRklGNMkxBiSpEyIV66O",
              "type": "authorPaper",
              "text": "Poster: Model-Based Adaptation to Extreme Physical Environments: A Case Study on Mixed-Criticality Industrial Ethernet",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7GtVpgolsvwHY6LHPyhM13/4H225Nz2cYgCYnKtZIi1er.pdf",
              "extraLocations": [],
              "authorNames": "Zonghui Li (Tsinghua University), Hai Wan (Tsinghua University), Yangdong Deng (Tsinghua University), Qinghan Yu (Tsinghua University), Tianchi Li (Tsinghua University), Wei Kang (Tsinghua University), Ming Gu (Tsinghua University)",
              "abstract": "Industry-strength embedded systems have to meet rigorous application-specific requirements for operating environments. Such requirements are becoming increasingly challenging due to the growing system complexity. Existing works typically focus on reliability driven design optimizations to improve the system robustness. Our work addresses the problem from another perspective by adaptively adjusting its service capability according to a model reflecting the interaction between the embedded system and the environments. This paper proposes a service capability model to capture the criticality of various services. A model-based adaption mechanism is designed to automatically identify the maximum allowed service capability under the current physical environment. A case study was performed on Industrial Ethernet switches to validate its effectiveness on adaptation to high and low temperatures. Experimental results demonstrate the potential of our approach to improve system reliability under extreme physical environments.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Model-Based Adaptation to Extreme Physical Environments: A Case Study on Mixed-Criticality Industrial Ethernet 1520466791679 Zonghui Li Tsinghua University zonghui.lee@gmail.com Hai Wan Tsinghua University wanhai@tsinghua.edu.cn Yangdong Deng Tsinghua University dengyd@tsinghua.edu.cn Qinghan Yu Tsinghua University yuqinghan10@gmail.com Tianchi Li Tsinghua University snowonionlee@gmail.com Wei Kang Tsinghua University weik15@mails.tsinghua.com Ming Gu Tsinghua University guming@tsinghua.edu.cn service capability self adaptation extreme physical environment Industrial Ethernet switch Industry-strength embedded systems have to meet rigorous application-specific requirements for operating environments. Such requirements are becoming increasingly challenging due to the growing system complexity. Existing works typically focus on reliability driven design optimizations to improve the system robustness. Our work addresses the problem from another perspective by adaptively adjusting its service capability according to a model reflecting the interaction between the embedded system and the environments. This paper proposes a service capability model to capture the criticality of various services. A model-based adaption mechanism is designed to automatically identify the maximum allowed service capability under the current physical environment. A case study was performed on Industrial Ethernet switches to validate its effectiveness on adaptation to high and low temperatures. Experimental results demonstrate the potential of our approach to improve system reliability under extreme physical environments.",
              "pageNumber": 327,
              "isPageNumberRoman": false
            },
            {
              "id": "2TLYHw0J6B2dYHYyUkWRHp",
              "type": "authorPaper",
              "text": "Poster: Efficient and Deterministic Replay for Web-Enabled Android Apps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/36kMCRGJIHLtaSXi0e2KSp/44hgs6obxhBufX2ufcNbQX.pdf",
              "extraLocations": [],
              "authorNames": "Fangge Yan (Shanghai Jiao Tong University), Mingyuan Xia (McGill University), Zhengwei Qi (Shanghai Jiao Tong University), Xue Liu (McGill University)",
              "abstract": "Mobile apps are adopting web techniques for improved development agility. In this paper, we propose TimelyRep to help mobile developers debug and test their web-enabled Android apps. TimelyRep provides efficient deterministic record-and-replay as a software library, running on unmodified Android. Also, as touchscreen becomes the major interaction method for mobile devices, web-enabled apps can receive many events in short periods. TimelyRep embodies a mechanism to control replay delays and achieve smooth replay. TimelyRep also supports cross-device replay where the event trace captured on one device can be replayed on another. We evaluate TimelyRep with real-world web applications. The results show that TimelyRep is useful for reproducing program bugs and has higher timing precision than previous tools.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Efficient and Deterministic Replay for Web-Enabled Android Apps 1520938970731 Fangge Yan Shanghai Jiao Tong University thunder_s@sjtu.edu.cn Mingyuan Xia McGill University mingyuan.xia@mail.mcgill.ca Zhengwei Qi Shanghai Jiao Tong University qizhwei@sjtu.edu.cn Xue Liu McGill University xueliu@cs.mcgill.ca Android deterministic replay mobile web app software testing Mobile apps are adopting web techniques for improved development agility. In this paper, we propose TimelyRep to help mobile developers debug and test their web-enabled Android apps. TimelyRep provides efficient deterministic record-and-replay as a software library, running on unmodified Android. Also, as touchscreen becomes the major interaction method for mobile devices, web-enabled apps can receive many events in short periods. TimelyRep embodies a mechanism to control replay delays and achieve smooth replay. TimelyRep also supports cross-device replay where the event trace captured on one device can be replayed on another. We evaluate TimelyRep with real-world web applications. The results show that TimelyRep is useful for reproducing program bugs and has higher timing precision than previous tools.",
              "pageNumber": 329,
              "isPageNumberRoman": false
            },
            {
              "id": "5Wh8fEV11krupApuT8vdQV",
              "type": "authorPaper",
              "text": "Poster: A Parallel Framework for Ab Initio Transcript-Clustering",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ydiO2nKbcfgXXArBnH518/5DI4ZJ2mNLjGkRxnTn0ET1.pdf",
              "extraLocations": [],
              "authorNames": "Dhananjai Rao (Miami University)",
              "abstract": "Clustering is used to partition genomic data into disjoint subsets to streamline further processing. Since inputs can contain billions of nucleotides, performance is paramount. Consequently, clustering software is typically developed as a tightly coupled monolithic system which hinders software reusability, extensibility and introduction of new algorithms as well as data structures. Having experienced similar issues in our own clustering software, we have developed a flexible and extensible parallel framework called PEACE. The objective of the framework is to ease design, implementation, and use of various clustering methods without compromising performance. This paper presents the PEACE framework, its software architecture, parallel infrastructure, and distributed data structures along with a case study of developing a clustering algorithm. Case studies of developing filters, heuristics, and comparison algorithms are also discussed to illustrate modularity and extensibility of PEACE which enables software reuse in unique ways that may not have been foreseen when individual components were developed.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Parallel Framework for Ab Initio Transcript-Clustering 1521056833959 Dhananjai Rao Miami University raodm@miamioh.edu Clustering Expressed Sequence Tag (EST) Object-Oriented Design Patterns distributed caches Minimum Spanning Tree (MST) MPI parallel framework Clustering is used to partition genomic data into disjoint subsets to streamline further processing. Since inputs can contain billions of nucleotides, performance is paramount. Consequently, clustering software is typically developed as a tightly coupled monolithic system which hinders software reusability, extensibility and introduction of new algorithms as well as data structures. Having experienced similar issues in our own clustering software, we have developed a flexible and extensible parallel framework called PEACE. The objective of the framework is to ease design, implementation, and use of various clustering methods without compromising performance. This paper presents the PEACE framework, its software architecture, parallel infrastructure, and distributed data structures along with a case study of developing a clustering algorithm. Case studies of developing filters, heuristics, and comparison algorithms are also discussed to illustrate modularity and extensibility of PEACE which enables software reuse in unique ways that may not have been foreseen when individual components were developed.",
              "pageNumber": 331,
              "isPageNumberRoman": false
            },
            {
              "id": "5l7b2CmTFoxCuwCRj95eOw",
              "type": "authorPaper",
              "text": "Poster: Sources of Satisfaction in Agile Software Development",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf",
              "extraLocations": [],
              "authorNames": "Robert Biddle (Carleton University), Andreas Meier (Zurich University of Applied Sciences), Martin Kropp (University of Applied Sciences Northwestern Switzerland), Craig Anslow (Victoria University of Wellington)",
              "abstract": "In this paper we address the topic of satisfaction by analysis of the results of a national survey of software development in Switzerland. We found that satisfaction is reported more by those using Agile development than with plan-driven processes. We explored how satisfaction relates to other elements in the development process, including the use of various practices, and the influences on business, team and software issues. We found that certain practices and influences have high correlations to satisfaction, and that collaborative processes are closely related to satisfaction, especially when combined with technical practices. Our intention in this analysis is principally descriptive, but we think the results are important to understand the challenges for everyone involved in Agile development, and can help in the transformation to Agile.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Sources of Satisfaction in Agile Software Development 1521302268021 Robert Biddle Carleton University robert.biddle@carleton.ca Andreas Meier Zurich University of Applied Sciences meea@fhnw.ch Martin Kropp University of Applied Sciences Northwestern Switzerland martin.kropp@fhnw.ch Craig Anslow Victoria University of Wellington craig@ecs.vuw.ac.nz Agile Software Development Satisfaction In this paper we address the topic of satisfaction by analysis of the results of a national survey of software development in Switzerland. We found that satisfaction is reported more by those using Agile development than with plan-driven processes. We explored how satisfaction relates to other elements in the development process, including the use of various practices, and the influences on business, team and software issues. We found that certain practices and influences have high correlations to satisfaction, and that collaborative processes are closely related to satisfaction, especially when combined with technical practices. Our intention in this analysis is principally descriptive, but we think the results are important to understand the challenges for everyone involved in Agile development, and can help in the transformation to Agile.",
              "pageNumber": 333,
              "isPageNumberRoman": false
            },
            {
              "id": "1okymgwbeD5w96TREnYeKB",
              "type": "authorPaper",
              "text": "Poster: Which Similarity Metric to Use for Software Documents?: A Study on Information Retrieval Based Software Engineering Tasks",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19HqZ3UFdpX1zhMVPO1vf9/2fhtsvR6I1thghxrAC6nB0.pdf",
              "extraLocations": [],
              "authorNames": "Md Masudur Rahman (University of Virginia), Saikat Chakraborty (University of Virginia), Baishakhi Ray (University of Virginia)",
              "abstract": "Information Retrieval (IR) plays a key role in diverse Software Engineering (SE) tasks. Similarity metric is the core component of any IR techniques whose performance differs for various document types. Different SE tasks operate on different types of documents like bug reports, software descriptions, source code, etc., that often contain non-standard domain-specific vocabulary. Thus, it is important to understand which similarity metrics are suitable for different SE documents. We analyze the performance of different similarity metrics on various SE documents including a diverse combination of textual (e.g., description, readme), code (e.g., source code, API, import package), and a mixture of text and code (e.g., bug reports) artifacts. We observe that, in general, the context-aware IR models achieve better performance on textual artifacts. In contrast, simple keyword-based bag-of-words models perform better in code artifacts.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Which Similarity Metric to Use for Software Documents?: A Study on Information Retrieval Based Software Engineering Tasks 1521488130418 Md Masudur Rahman University of Virginia masud@virginia.edu Saikat Chakraborty University of Virginia saikat.chakraborty@virginia.edu Baishakhi Ray University of Virginia rayb@virginia.edu Similarity Metric Information Retrieval Software Documents Information Retrieval (IR) plays a key role in diverse Software Engineering (SE) tasks. Similarity metric is the core component of any IR techniques whose performance differs for various document types. Different SE tasks operate on different types of documents like bug reports, software descriptions, source code, etc., that often contain non-standard domain-specific vocabulary. Thus, it is important to understand which similarity metrics are suitable for different SE documents. We analyze the performance of different similarity metrics on various SE documents including a diverse combination of textual (e.g., description, readme), code (e.g., source code, API, import package), and a mixture of text and code (e.g., bug reports) artifacts. We observe that, in general, the context-aware IR models achieve better performance on textual artifacts. In contrast, simple keyword-based bag-of-words models perform better in code artifacts.",
              "pageNumber": 335,
              "isPageNumberRoman": false
            },
            {
              "id": "1uzdjCni94cGUZBCWZVEGB",
              "type": "authorPaper",
              "text": "Poster: A Taxonomy of how Method Stereotypes Change",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf",
              "extraLocations": [],
              "authorNames": "Michael John Decker (Bowling Green State University), Christian D. Newman (Rochester Institute of Technology), Natalia Dragan (Kent State University), Michael L. Collard (The University of Akron), Jonathan I. Maletic (Kent State University), Nicholas A. Kraft (ABB Corporate Research)",
              "abstract": "The role of a well-designed method should not change frequently or significantly over its lifetime. As such, changes to the role of a method can be an indicator of design improvement or degradation. To measure this, we use method stereotypes. Method stereotypes provide a high-level description of a method's behavior and role; giving insight into how a method interacts with its environment and carries out tasks. When a method's stereotype changes, so has its role. This work presents a taxonomy of how method stereotypes change and why the categories of changes are significant.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Taxonomy of how Method Stereotypes Change 1520546195776 Michael John Decker Bowling Green State University mdecke@bgsu.edu Christian D. Newman Rochester Institute of Technology cnewman@se.rit.edu Natalia Dragan Kent State University ndragan@kent.edu Michael L. Collard The University of Akron collard@uakron.edu Jonathan I. Maletic Kent State University jmaletic@kent.edu Nicholas A. Kraft ABB Corporate Research nicholas.a.kraft@us.abb.com software evolution method stereotypes software change The role of a well-designed method should not change frequently or significantly over its lifetime. As such, changes to the role of a method can be an indicator of design improvement or degradation. To measure this, we use method stereotypes. Method stereotypes provide a high-level description of a method's behavior and role; giving insight into how a method interacts with its environment and carries out tasks. When a method's stereotype changes, so has its role. This work presents a taxonomy of how method stereotypes change and why the categories of changes are significant.",
              "pageNumber": 337,
              "isPageNumberRoman": false
            },
            {
              "id": "4cLW8YmajAUVCbdXLjsg5d",
              "type": "authorPaper",
              "text": "Poster: Automated Program Repair with Canonical Constraints",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5HuJ0DRe1lVP5flrt0olas/cYoM2zEz7jQb9DOHiHPMV.pdf",
              "extraLocations": [],
              "authorNames": "Andrew Hill (North Carolina State University), Corina Pasareanu (Carnegie Mellon University CyLab and NASA Ames), Kathryn Stolee (North Carolina State University)",
              "abstract": "Automated program repair (APR) seeks to improve the speed and decrease the cost of repairing software bugs. Existing APR approaches use unit tests or constraint solving to find and validate program patches.We propose Canonical Search And Repair (CSAR), a program repair technique based on semantic search which uses a canonical form of the path conditions to characterize buggy and patch code and allows for easy storage and retrieval of software patches, without the need for expensive constraint solving. CSAR uses string metrics over the canonical forms to cheaply measure semantic distance between patches and buggy code and uses a classifier to identify situations in which test suite executions are unnecessary–and to provide a finer-grained means of differentiating between potential patches. We evaluate CSAR on the IntroClass benchmark, and show that CSAR finds more correct patches (96% increase) than previous semantic search approaches, and more correct patches (34% increase) than other previous state-of-the-art in program repair.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Automated Program Repair with Canonical Constraints 1520597234630 Andrew Hill North Carolina State University ahill6@ncsu.edu Corina Pasareanu Carnegie Mellon University CyLab and NASA Ames Corina.S.P?s?reanu@nasa.gov Kathryn Stolee North Carolina State University ktstolee@ncsu.edu Symbolic Execution SPF Program Repair Semantic Repair Automated program repair (APR) seeks to improve the speed and decrease the cost of repairing software bugs. Existing APR approaches use unit tests or constraint solving to find and validate program patches.We propose Canonical Search And Repair (CSAR), a program repair technique based on semantic search which uses a canonical form of the path conditions to characterize buggy and patch code and allows for easy storage and retrieval of software patches, without the need for expensive constraint solving. CSAR uses string metrics over the canonical forms to cheaply measure semantic distance between patches and buggy code and uses a classifier to identify situations in which test suite executions are unnecessary–and to provide a finer-grained means of differentiating between potential patches. We evaluate CSAR on the IntroClass benchmark, and show that CSAR finds more correct patches (96% increase) than previous semantic search approaches, and more correct patches (34% increase) than other previous state-of-the-art in program repair.",
              "pageNumber": 339,
              "isPageNumberRoman": false
            },
            {
              "id": "rdGLPTkXSJGHeJ9zTRedf",
              "type": "authorPaper",
              "text": "Poster: Toward Measuring Software Coupling via Weighted Dynamic Metrics",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41fj03MKzInGka8tUKZp0i/5yOrS7srH4d0FvNS6liBJc.pdf",
              "extraLocations": [],
              "authorNames": "Henning Schnoor (Kiel University), Wilhelm Hasselbring (Kiel University)",
              "abstract": "Coupling metrics are an established way to measure internal software quality with respect to modularity. Dynamic metrics have been used to improve the accuracy of static metrics for object-oriented software. We introduce a dynamic metric NOI that takes into account the number of interactions (method calls) during the run of a system. We used the data collected from an experiment to compute our NOI metric and compared the results to a static coupling analysis. We observed an unexpected level of correlation and significant differences between class- and package-level analyses.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Toward Measuring Software Coupling via Weighted Dynamic Metrics 1520496355857 Henning Schnoor Kiel University henning.schnoor@email.uni-kiel.de Wilhelm Hasselbring Kiel University hasselbring@email.uni-kiel.de software metrics dynamic analysis software maintenance Coupling metrics are an established way to measure internal software quality with respect to modularity. Dynamic metrics have been used to improve the accuracy of static metrics for object-oriented software. We introduce a dynamic metric NOI that takes into account the number of interactions (method calls) during the run of a system. We used the data collected from an experiment to compute our NOI metric and compared the results to a static coupling analysis. We observed an unexpected level of correlation and significant differences between class- and package-level analyses.",
              "pageNumber": 342,
              "isPageNumberRoman": false
            },
            {
              "id": "6RJvNFUAEUBGslcVFCDKge",
              "type": "authorPaper",
              "text": "Poster: There is no Random Sampling in Software Engineering Research",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5msns8eXuL9pIbElcgfmgG/6uDGJK7nkoo5B3rnrF4pIV.pdf",
              "extraLocations": [],
              "authorNames": "Bilal Amir (Sur University College), Paul Ralph (University of Auckland)",
              "abstract": "Representative sampling is considered crucial for predominately quantitative, positivist research. Researchers typically argue that a sample is representative when items are selected randomly from a population. However, random sampling is rare in empirical software engineering research because there are no credible sampling frames (population lists) for the units of analysis software engineering researchers study (e.g. software projects, code libraries, developers, projects). This means that most software engineering research does not support statistical generalization, but rejecting any particular study for lack of random sampling is capricious.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: There is no Random Sampling in Software Engineering Research 1521479606089 Bilal Amir Sur University College bilal@suc.edu.om Paul Ralph University of Auckland paul@paulralph.name Research methodology sampling random sampling purposive sampling Representative sampling is considered crucial for predominately quantitative, positivist research. Researchers typically argue that a sample is representative when items are selected randomly from a population. However, random sampling is rare in empirical software engineering research because there are no credible sampling frames (population lists) for the units of analysis software engineering researchers study (e.g. software projects, code libraries, developers, projects). This means that most software engineering research does not support statistical generalization, but rejecting any particular study for lack of random sampling is capricious.",
              "pageNumber": 344,
              "isPageNumberRoman": false
            },
            {
              "id": "1F5kJ8IW99g77WQTQrvGti",
              "type": "authorPaper",
              "text": "Poster: Efficient Iterative Deepening for Bounded Exhaustive Generation of Complex Structures",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2JMd1LQkrxt0JBD11w0lFv/4rzjrCWAMhM1MRAmRp3Kg5.pdf",
              "extraLocations": [],
              "authorNames": "Affan Rauf (Lahore University of Management Sciences), Muhammad Nawaz (Lahore University of Management Sciences), Junaid Haroon Siddiqui (Lahore University of Management Sciences)",
              "abstract": "The time required to generate valid structurally complex inputs grows exponentially with the input size. It makes it hard to predict, for a given structure, the most feasible input size that is completely explorable within a time budget. Iterative deepening generates inputs of size n before those of size n+1 and eliminates guesswork to find such size. We build on Korat algorithm for structural test generation and present iKorat – an incremental algorithm for efficient iterative deepening. It avoids redundant work as opposed to naïve Korat-based iterative deepening by using information from smaller sizes, which is kept in a highly compact format.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Efficient Iterative Deepening for Bounded Exhaustive Generation of Complex Structures 1521056561071 Affan Rauf Lahore University of Management Sciences 14030022@lums.edu.pk Muhammad Nawaz Lahore University of Management Sciences 15030025@lums.edu.pk Junaid Haroon Siddiqui Lahore University of Management Sciences junaid.siddiqui@lums.edu.pk automated test generation bounded exhaustive testing complex structures incremental test generation korat iterative deepening The time required to generate valid structurally complex inputs grows exponentially with the input size. It makes it hard to predict, for a given structure, the most feasible input size that is completely explorable within a time budget. Iterative deepening generates inputs of size n before those of size n+1 and eliminates guesswork to find such size. We build on Korat algorithm for structural test generation and present iKorat – an incremental algorithm for efficient iterative deepening. It avoids redundant work as opposed to naïve Korat-based iterative deepening by using information from smaller sizes, which is kept in a highly compact format.",
              "pageNumber": 346,
              "isPageNumberRoman": false
            },
            {
              "id": "12puWpM8sgLg7E46mr93H7",
              "type": "authorPaper",
              "text": "Poster: Improving Bug Localization with Report Quality Dynamics and Query Reformulation",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6516xYi2OFGIWdgvSF1o2T/6iqQP048s885PkY69eoJYq.pdf",
              "extraLocations": [],
              "authorNames": "Mohammad Masudur Rahman (University of Saskatchewan), Chanchal Roy (University of Saskatchewan)",
              "abstract": "Recent findings from a user study suggest that IR-based bug localization techniques do not perform well if the bug report lacks rich structured information such as relevant program entity names. On the contrary, excessive structured information such as stack traces in the bug report might always not be helpful for the automated bug localization. In this paper, we conduct a large empirical study using 5,500 bug reports from eight subject systems and replicating three existing studies from the literature. Our findings (1) empirically demonstrate how quality dynamics of bug reports affect the performances of IR-based bug localization, and (2) suggest potential ways (e.g., query reformulations) to overcome such limitations.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Improving Bug Localization with Report Quality Dynamics and Query Reformulation 1521516884024 Mohammad Masudur Rahman University of Saskatchewan masud.rahman@usask.ca Chanchal Roy University of Saskatchewan chanchal.roy@usask.ca Debugging automation bug localization information retrieval query reformulation report quality dynamics Recent findings from a user study suggest that IR-based bug localization techniques do not perform well if the bug report lacks rich structured information such as relevant program entity names. On the contrary, excessive structured information such as stack traces in the bug report might always not be helpful for the automated bug localization. In this paper, we conduct a large empirical study using 5,500 bug reports from eight subject systems and replicating three existing studies from the literature. Our findings (1) empirically demonstrate how quality dynamics of bug reports affect the performances of IR-based bug localization, and (2) suggest potential ways (e.g., query reformulations) to overcome such limitations.",
              "pageNumber": 348,
              "isPageNumberRoman": false
            },
            {
              "id": "5VdWwlLMlXCGQMY714M6JA",
              "type": "authorPaper",
              "text": "Poster: Towards Sustainable Android Malware Detection",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1CeL0JHsoDlL5AfeYBFXYN/1bjvVxMwUcxmyMegViCmAq.pdf",
              "extraLocations": [],
              "authorNames": "Haipeng Cai (Washington State University), John Jenkins (Washington State University)",
              "abstract": "Approaches to Android malware detection built on supervised learning are commonly subject to frequent retraining, or the trained classifier may fail to detect newly emerged or emerging kinds of malware. This work targets a sustainable Android malware detector that, once trained on a dataset, can continue to effectively detect new malware without retraining. To that end, we investigate how the behaviors of benign and malicious apps evolve over time, and identify the most consistently discriminating behavioral traits of benign apps from malware. Our preliminary results reveal a promising prospect of this approach. On a benchmark set across seven years, our approach achieved highly competitive detection accuracy that sustained up to five years, outperforming the state of the art which sustained up to two years.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Towards Sustainable Android Malware Detection 1521265144667 Haipeng Cai Washington State University hcai@eecs.wsu.edu John Jenkins Washington State University john.jenkins@wsu.edu Android Malware Detection Sustainability Approaches to Android malware detection built on supervised learning are commonly subject to frequent retraining, or the trained classifier may fail to detect newly emerged or emerging kinds of malware. This work targets a sustainable Android malware detector that, once trained on a dataset, can continue to effectively detect new malware without retraining. To that end, we investigate how the behaviors of benign and malicious apps evolve over time, and identify the most consistently discriminating behavioral traits of benign apps from malware. Our preliminary results reveal a promising prospect of this approach. On a benchmark set across seven years, our approach achieved highly competitive detection accuracy that sustained up to five years, outperforming the state of the art which sustained up to two years.",
              "pageNumber": 350,
              "isPageNumberRoman": false
            },
            {
              "id": "1eAkYHgHeKegtgwqKQnZfH",
              "type": "authorPaper",
              "text": "Poster: Fast, Scalable and User-Guided Clone Detection",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tlEXpx1a2fBZq5UdWixg5/5nSIZOFNviBk5nb6x9vIle.pdf",
              "extraLocations": [],
              "authorNames": "Jeffrey Svajlenko (University of Saskatchewan), Chanchal K. Roy (University of Saskatchewan)",
              "abstract": "Despite the great number of clone detection approaches proposed in the literature, few have the scalability and speed to analyze large inter-project source datasets, where clone detection has many potential applications. Furthermore, because of the many uses of clone detection, an approach is needed that can adapt to the needs of the user to detect any kind of clone. We propose a clone detection approach designed for user-guided clone detection by exploiting the power of source transformation in a plugin based source processing pipeline. Clones are detected using a simple Jaccard-based clone similarity metric, and users customize the representation of their source code as sets of terms to target particular types or kinds of clones. Fast and scalable clone detection is achieved with indexing, sub-block filtering and input partitioning.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Fast, Scalable and User-Guided Clone Detection 1521510552407 Jeffrey Svajlenko University of Saskatchewan jeff.svajlenko@gmail.com Chanchal K. Roy University of Saskatchewan chanchal.roy@usask.ca Clone Detection User Guided Fast Scalable Large-Scale Despite the great number of clone detection approaches proposed in the literature, few have the scalability and speed to analyze large inter-project source datasets, where clone detection has many potential applications. Furthermore, because of the many uses of clone detection, an approach is needed that can adapt to the needs of the user to detect any kind of clone. We propose a clone detection approach designed for user-guided clone detection by exploiting the power of source transformation in a plugin based source processing pipeline. Clones are detected using a simple Jaccard-based clone similarity metric, and users customize the representation of their source code as sets of terms to target particular types or kinds of clones. Fast and scalable clone detection is achieved with indexing, sub-block filtering and input partitioning.",
              "pageNumber": 352,
              "isPageNumberRoman": false
            },
            {
              "id": "7joJQBNwVFi4eUJM4JwCkP",
              "type": "authorPaper",
              "text": "Poster: Searching for High-Performing Software Configurations with Metaheuristic Algorithms",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5mMXju4wwLk0g8GAptV8Au/7lw0QtTNg1xCcFEjGunpFy.pdf",
              "extraLocations": [],
              "authorNames": "Chong Tang (University of Virginia), Kevin Sullivan (University of Virginia), Baishakhi Ray (University of Virginia)",
              "abstract": "Modern systems often have complex configuration spaces. Research has shown that people often just use default settings. This practice leaves significant performance potential unrealized. In this work, we propose an approach that uses metaheuristic search algorithms to explore the configuration space of Hadoop for high-performing configurations. We present results of a set of experiments to show that our approach can find configurations that perform significantly better than defaults. We tested two metaheuristic search algorithms—coordinate descent and genetic algorithms—for three common MapReduce programs—Wordcount, Sort, and Terasort—for a total of six experiments. Our results suggest that metaheuristic search can find configurations cost-effectively that perform significantly better than baseline default configurations.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Searching for High-Performing Software Configurations with Metaheuristic Algorithms 1521513336563 Chong Tang University of Virginia ct4ew@virginia.edu Kevin Sullivan University of Virginia sullivan@virginia.edu Baishakhi Ray University of Virginia rayb@virginia.edu configuration metaheuristic optimization Modern systems often have complex configuration spaces. Research has shown that people often just use default settings. This practice leaves significant performance potential unrealized. In this work, we propose an approach that uses metaheuristic search algorithms to explore the configuration space of Hadoop for high-performing configurations. We present results of a set of experiments to show that our approach can find configurations that perform significantly better than defaults. We tested two metaheuristic search algorithms—coordinate descent and genetic algorithms—for three common MapReduce programs—Wordcount, Sort, and Terasort—for a total of six experiments. Our results suggest that metaheuristic search can find configurations cost-effectively that perform significantly better than baseline default configurations.",
              "pageNumber": 354,
              "isPageNumberRoman": false
            },
            {
              "id": "2iUdNR3YKKhzDegYcsUOFE",
              "type": "authorPaper",
              "text": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf",
              "extraLocations": [],
              "authorNames": "Edwin Dauber (Drexel University), Aylin Caliskan (Princeton University), Richard Harang (Sophos), Rachel Greenstadt (Drexel University)",
              "abstract": "Program authorship attribution has implications for the privacy of programmers who wish to contribute code anonymously. While previous work has shown that complete files that are individually authored can be attributed, these efforts have focused on ideal data sets such as the Google Code Jam data. We explore the problem of attribution \"in the wild\" examining source code obtained from open source version control systems, and investigate if and how such contributions can be attributed to their authors, either individually or on a per-account basis. In this work we show that accounts belonging to open source contributors containing short, incomplete, and typically uncompilable fragments can be effectively attributed.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments 1521430673187 Edwin Dauber Drexel University egd34@drexel.edu Aylin Caliskan Princeton University aylinc@princeton.edu Richard Harang Sophos rich.harang@sophos.com Rachel Greenstadt Drexel University rachel.a.greenstadt@drexel.edu Source code authorship attribution stylometry machine learning Program authorship attribution has implications for the privacy of programmers who wish to contribute code anonymously. While previous work has shown that complete files that are individually authored can be attributed, these efforts have focused on ideal data sets such as the Google Code Jam data. We explore the problem of attribution \"in the wild\" examining source code obtained from open source version control systems, and investigate if and how such contributions can be attributed to their authors, either individually or on a per-account basis. In this work we show that accounts belonging to open source contributors containing short, incomplete, and typically uncompilable fragments can be effectively attributed.",
              "pageNumber": 356,
              "isPageNumberRoman": false
            },
            {
              "id": "xRWMSNudqBnNHbvgIahzU",
              "type": "authorPaper",
              "text": "Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nkFZGabFmQT9XjbZsafGM/6RhqzwQooNR2K4lpXABN0Z.pdf",
              "extraLocations": [],
              "authorNames": "Xiao Wang (Stevens Institute of Technology), Lu Xiao (Stevens Institute of Technology), Ye Yang (Stevens Institute of Technology), Xinyi Xu (Beijing University of Posts and Telecommunications), Yu Jiang (Tsinghua University)",
              "abstract": "Socio-Technical Congruence (STC) indicates that social interactions among developers should be congruent with technical dependencies among their tasks. Prior research discovered that the lack of the \"should-happen\" communication will lead to integration errors and productivity decrease. However, the opposite scenario, excessive communication not matched by any technical dependencies, has been largely neglected. This paper terms such scenario as Transgressive Incongruence (TraIn). To automatically pin-point source files involved in TraIn, this paper defines a new form of coupling between files, called communication coupling. It measures the communication traffic among developers working on two files. Evaluation on 6 Apache open source projects reveals: 1) the communication coupling between files with structural dependencies is 3 to 10 times higher than that between files independent from each other; and 2) source files involved in TraIn are usually very bug-prone. This implies that TraIn may have negative impact on the quality of software systems, and thus should merit due attention.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence 1520970050566 Xiao Wang Stevens Institute of Technology xwang97@stevens.edu Lu Xiao Stevens Institute of Technology lxiao6@stevens.edu Ye Yang Stevens Institute of Technology yyang4@stevens.edu Xinyi Xu Beijing University of Posts and Telecommunications xuesu@bupt.edu.cn Yu Jiang Tsinghua University jy1989@mail.tsinghua.edu.cn Social-Technical Congruence Communication Coupling Design Structure Matrix Socio-Technical Congruence (STC) indicates that social interactions among developers should be congruent with technical dependencies among their tasks. Prior research discovered that the lack of the \"should-happen\" communication will lead to integration errors and productivity decrease. However, the opposite scenario, excessive communication not matched by any technical dependencies, has been largely neglected. This paper terms such scenario as Transgressive Incongruence (TraIn). To automatically pin-point source files involved in TraIn, this paper defines a new form of coupling between files, called communication coupling. It measures the communication traffic among developers working on two files. Evaluation on 6 Apache open source projects reveals: 1) the communication coupling between files with structural dependencies is 3 to 10 times higher than that between files independent from each other; and 2) source files involved in TraIn are usually very bug-prone. This implies that TraIn may have negative impact on the quality of software systems, and thus should merit due attention.",
              "pageNumber": 358,
              "isPageNumberRoman": false
            },
            {
              "id": "4ftw6rYOAk9zJ4YICzOblM",
              "type": "authorPaper",
              "text": "Poster: Efficient Blockchain-Based Software Systems via Hierarchical Bucket Tree",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kqs7SQRatS1ve2ystqzZc/1G7CJAIYcAjDhZBKietcio.pdf",
              "extraLocations": [],
              "authorNames": "Weili Chen (Sun Yat-sen University), Zibin Zheng (Sun Yat-sen University), Mingjie Ma (Sun Yat-sen University), Pinjia He (The Chinese University of Hong Kong), Peilin Zheng (Sun Yat-sen University), Yuren Zhou (Sun Yat-sen University)",
              "abstract": "As a promising technology, blockchain overcomes many shortages in traditional areas. However, the low efficiency prevents it from being widely used in practice. Through analyzing the transaction history in blockchain, we found that the account usage frequency is highly heterogeneous. Based on this observation, we propose a new account structure to improve the efficiency. The preliminary experiments show that the proposed structure has obvious advantages in efficiency compared with other account structures.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Efficient Blockchain-Based Software Systems via Hierarchical Bucket Tree 1520508829127 Weili Chen Sun Yat-sen University chenwli9@mail2.sysu.edu.cn Zibin Zheng Sun Yat-sen University zhzibin@mail.sysu.edu.cn Mingjie Ma Sun Yat-sen University mamj3@mail2.sysu.edu.cn Pinjia He The Chinese University of Hong Kong pjhe@cse.cuhk.edu.hk Peilin Zheng Sun Yat-sen University zhengpl3@mail2.sysu.edu.cn Yuren Zhou Sun Yat-sen University zhouyuren@mail.sysu.edu.cn Blockchain account structure usage behavior As a promising technology, blockchain overcomes many shortages in traditional areas. However, the low efficiency prevents it from being widely used in practice. Through analyzing the transaction history in blockchain, we found that the account usage frequency is highly heterogeneous. Based on this observation, we propose a new account structure to improve the efficiency. The preliminary experiments show that the proposed structure has obvious advantages in efficiency compared with other account structures.",
              "pageNumber": 360,
              "isPageNumberRoman": false
            },
            {
              "id": "7leGzdRDsCfm2h1TAk3jna",
              "type": "authorPaper",
              "text": "Poster: Group Preference Based API Recommendation via Heterogeneous Information Network",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IC5E4GtEfoXUYedszQWOU/dzEEtMPWqCEdK6XcvtGnj.pdf",
              "extraLocations": [],
              "authorNames": "Fenfang Xie (Sun Yat-sen University), Liang Chen (Sun Yat-sen University), Dongding Lin (Sun Yat-sen University), Chuan Chen (Sun Yat-sen University), Zibin Zheng (Sun Yat-sen University), Xiaola Lin (Sun Yat-sen University)",
              "abstract": "Heterogeneous information networks (HINs) are logical networks which involve multiple types of objects and multiple types of links denoting different relations. Previous API recommendation studies mainly focus on homogeneous networks or few kinds of relations rather than exploiting the rich heterogeneous information. In this paper, we propose a mashup group preference based API recommendation method for mashup creation. Based on the historical invocation experience, different semantic meanings behind meta paths, hybrid similarity measurement and the rich interactions among mashups, we build the API recommendation model and employ the model to make personalized API recommendation for different mashup developers. Extensive experimental results validate the effectiveness of our proposed approach in terms of different kinds of evaluation metrics.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Group Preference Based API Recommendation via Heterogeneous Information Network 1520511589911 Fenfang Xie Sun Yat-sen University xieff5@mail2.sysu.edu.cn Liang Chen Sun Yat-sen University chenliang6@mail.sysu.edu.cn Dongding Lin Sun Yat-sen University lindd5@mail2.sysu.edu.cn Chuan Chen Sun Yat-sen University chenchuan@mail.sysu.edu.cn Zibin Zheng Sun Yat-sen University zhzibin@mail.sysu.edu.cn Xiaola Lin Sun Yat-sen University linxl@mail.sysu.edu.cn Heterogeneous information network meta path API recommendation group preference Heterogeneous information networks (HINs) are logical networks which involve multiple types of objects and multiple types of links denoting different relations. Previous API recommendation studies mainly focus on homogeneous networks or few kinds of relations rather than exploiting the rich heterogeneous information. In this paper, we propose a mashup group preference based API recommendation method for mashup creation. Based on the historical invocation experience, different semantic meanings behind meta paths, hybrid similarity measurement and the rich interactions among mashups, we build the API recommendation model and employ the model to make personalized API recommendation for different mashup developers. Extensive experimental results validate the effectiveness of our proposed approach in terms of different kinds of evaluation metrics.",
              "pageNumber": 362,
              "isPageNumberRoman": false
            },
            {
              "id": "4rO2QGQ8i7Da7DKCUirOKh",
              "type": "authorPaper",
              "text": "Poster: LibraryGuru: API Recommendation for Android Developers",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nswA2eQYvB2VMATIABT5R/5WNNsPhJ5Pl6hxbqipDB1f.pdf",
              "extraLocations": [],
              "authorNames": "Weizhao Yuan (Shanghai Jiao Tong University), Hoang Huu Nguyen (Singapore Management University), Lingxiao Jiang (Singapore Management University), Yuting Chen (Shanghai Jiao Tong University)",
              "abstract": "Developing modern mobile applications often require the uses of many libraries specific for the mobile platform, which can be overwhelmingly too many for application developers to find what are needed for a functionality and where and how to use them properly. This paper presents a tool, named LibraryGuru, to recommend suitable Android APIs for given functionality descriptions. It not only recommends functional APIs that can be invoked for implementing the functionality, but also recommends event callback APIs that are inherent in the Android framework and need to be overridden in the application. LibraryGuru internally builds correlation databases among various functionality descriptions and Android APIs. These correlations are extracted from Android development tutorials and SDK documents with domain-specific code parsing and natural language processing techniques adapted for functional APIs and event callback APIs separately, and are matched against functionality queries to recommend relevant APIs for developers. LibraryGuru is publicly accessible at http://libraryguru.info, and a demo video is available at https://youtu.be/f7MtjliUM-4.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: LibraryGuru: API Recommendation for Android Developers 1521161896627 Weizhao Yuan Shanghai Jiao Tong University weizhaoy@163.com Hoang Huu Nguyen Singapore Management University hhnguyen@smu.edu.sg Lingxiao Jiang Singapore Management University lxjiang@smu.edu.sg Yuting Chen Shanghai Jiao Tong University chenyt@cs.sjtu.edu.cn Android programming event callbacks code search API recommendation information retrieval Developing modern mobile applications often require the uses of many libraries specific for the mobile platform, which can be overwhelmingly too many for application developers to find what are needed for a functionality and where and how to use them properly. This paper presents a tool, named LibraryGuru, to recommend suitable Android APIs for given functionality descriptions. It not only recommends functional APIs that can be invoked for implementing the functionality, but also recommends event callback APIs that are inherent in the Android framework and need to be overridden in the application. LibraryGuru internally builds correlation databases among various functionality descriptions and Android APIs. These correlations are extracted from Android development tutorials and SDK documents with domain-specific code parsing and natural language processing techniques adapted for functional APIs and event callback APIs separately, and are matched against functionality queries to recommend relevant APIs for developers. LibraryGuru is publicly accessible at http://libraryguru.info, and a demo video is available at https://youtu.be/f7MtjliUM-4.",
              "pageNumber": 364,
              "isPageNumberRoman": false
            },
            {
              "id": "1XtRqWTc4eXYffvbXzt8lF",
              "type": "authorPaper",
              "text": "Poster: ACONA: Active Online Model Adaptation for Predicting Continuous Integration Build Failures",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1NinLYBC32PXucXAwTyz3B/1PJW3gI4n2cBOJYdcrENjL.pdf",
              "extraLocations": [],
              "authorNames": "Ansong Ni (Nanjing University), Ming Li (Nanjing University)",
              "abstract": "Continuous Integration (CI) reduces risk in software development, but a CI build usually brings huge time and resource consumption. Machine learning methods have been employed to cut the expenses of CI and provide instant feedback by predicting CI results. Nevertheless, effective learning requires massive training data which is not available for a new project. Moreover, due to the diversified characteristics of different projects, reusing models built on other projects leads to poor performance. To address this problem, we propose a novel active online model adaptation approach ACONA, which dynamically adapts a pool of classifiers trained on various projects to a new project using only a small fraction of new data it actively selects. With empirical study on Travis CI, we show that ACONA achieves an improvement of F-Measure by 40.0% while reducing Accumulated Error by 63.2% and the adapted model outperforms existing approaches.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: ACONA: Active Online Model Adaptation for Predicting Continuous Integration Build Failures 1521368827213 Ansong Ni Nanjing University niansong1996@gmail.com Ming Li Nanjing University lim@lamda.nju.edu.cn continuous integration build failure prediction online learning model reuse active learning Continuous Integration (CI) reduces risk in software development, but a CI build usually brings huge time and resource consumption. Machine learning methods have been employed to cut the expenses of CI and provide instant feedback by predicting CI results. Nevertheless, effective learning requires massive training data which is not available for a new project. Moreover, due to the diversified characteristics of different projects, reusing models built on other projects leads to poor performance. To address this problem, we propose a novel active online model adaptation approach ACONA, which dynamically adapts a pool of classifiers trained on various projects to a new project using only a small fraction of new data it actively selects. With empirical study on Travis CI, we show that ACONA achieves an improvement of F-Measure by 40.0% while reducing Accumulated Error by 63.2% and the adapted model outperforms existing approaches.",
              "pageNumber": 366,
              "isPageNumberRoman": false
            },
            {
              "id": "14TFZ5HCMJ35VbrBClfwhl",
              "type": "authorPaper",
              "text": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf",
              "extraLocations": [],
              "authorNames": "Manzoor Ahmad (LIUPPA), Christophe Gnaho (LACL), Jean-Michel Bruel (IRIT), Régine Laleau (LACL)",
              "abstract": "The objective of this poster paper is to investigate on how to deal with environmental uncertainty in goal based requirements engineering. To do so, we explore the introduction of RELAX concepts into SysMLKaos. RELAX is a Requirements Engineering language for Dynamically Adaptive Systems while SysMLKaos is a Goal based Requirements Engineering approach. We use an extract of a Landing Gear System case study to illustrate the proposed approach.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering 1521439563900 Manzoor Ahmad LIUPPA manzoor.ahmad@univ-pau.fr Christophe Gnaho LACL christophe.gnaho@parisdescartes.fr Jean-Michel Bruel IRIT bruel@irit.fr Régine Laleau LACL laleau@lacl.fr Dynamically adaptive systems goal-oriented requirements modeling The objective of this poster paper is to investigate on how to deal with environmental uncertainty in goal based requirements engineering. To do so, we explore the introduction of RELAX concepts into SysMLKaos. RELAX is a Requirements Engineering language for Dynamically Adaptive Systems while SysMLKaos is a Goal based Requirements Engineering approach. We use an extract of a Landing Gear System case study to illustrate the proposed approach.",
              "pageNumber": 368,
              "isPageNumberRoman": false
            },
            {
              "id": "6LDIMNWgw3rOY8dOmZ6RUI",
              "type": "authorPaper",
              "text": "Poster: Efficient GUI Test Generation by Learning from Tests of Other Apps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Zfi6QHPNFSKTZ6ErDMQO9/6tabCma7zW4FFjzRbx7Jv3.pdf",
              "extraLocations": [],
              "authorNames": "Andreas Rau (Saarland University), Jenny Hotzkow (Saarland University), Andreas Zeller (Saarland University)",
              "abstract": "Generating GUI tests for complex Web applications is hard. There is lots of functionality to explore: The eBay home page, for instance, sports more than 2,000 individual GUI elements that a crawler has to trigger in order to discover the core functionality. We show how to leverage tests of other applications to guide test generation for a new application: Given a test for payments on Amazon, for instance, we can guide test generation on eBay towards payment functionality, exploiting the semantic similarity between UI elements across both applications. Evaluated on three domains, our approach allows to discover \"deep\" functionality in a few steps, which otherwise would require thousands to millions of crawling interactions.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Efficient GUI Test Generation by Learning from Tests of Other Apps 1520501544161 Andreas Rau Saarland University andreas.rau@cispa.saarland Jenny Hotzkow Saarland University jenny.hotzkow@cispa.saarland Andreas Zeller Saarland University andreas.zeller@cispa.saarland Natural Language Processing Testing Model Analysis Generating GUI tests for complex Web applications is hard. There is lots of functionality to explore: The eBay home page, for instance, sports more than 2,000 individual GUI elements that a crawler has to trigger in order to discover the core functionality. We show how to leverage tests of other applications to guide test generation for a new application: Given a test for payments on Amazon, for instance, we can guide test generation on eBay towards payment functionality, exploiting the semantic similarity between UI elements across both applications. Evaluated on three domains, our approach allows to discover \"deep\" functionality in a few steps, which otherwise would require thousands to millions of crawling interactions.",
              "pageNumber": 370,
              "isPageNumberRoman": false
            },
            {
              "id": "4l707phaLuOrWygY01R9LL",
              "type": "authorPaper",
              "text": "Poster: A Qualitative Reasoning Approach to Spectrum-Based Fault Localization",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2h6LH9L5MS3wsT4Q4V1wAI/6erzsSt4H2Rd37rbKcp06x.pdf",
              "extraLocations": [],
              "authorNames": "Alexandre Perez (University of Porto), Rui Abreu (IST)",
              "abstract": "As spectrum-based fault localization (SFL) reasons about coverage rather than source code, it allows for a lightweight, language agnostic way of pinpointing faults in software. However, SFL misses certain faults, such as errors of omission, and may fail to provide enough contextual information about its diagnoses. We propose Q-SFL, that leverages the concept of qualitative reasoning to augment the information made available to SFL techniques, by qualitatively partitioning the values of data units from the system, and treating each qualitative state as a new SFL component to be used when diagnosing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Qualitative Reasoning Approach to Spectrum-Based Fault Localization 1521450193748 Alexandre Perez University of Porto alexandre.perez@fe.up.pt Rui Abreu IST rui@computer.org Spectrum-based Fault Localization Qualitative Reasoning As spectrum-based fault localization (SFL) reasons about coverage rather than source code, it allows for a lightweight, language agnostic way of pinpointing faults in software. However, SFL misses certain faults, such as errors of omission, and may fail to provide enough contextual information about its diagnoses. We propose Q-SFL, that leverages the concept of qualitative reasoning to augment the information made available to SFL techniques, by qualitatively partitioning the values of data units from the system, and treating each qualitative state as a new SFL component to be used when diagnosing.",
              "pageNumber": 372,
              "isPageNumberRoman": false
            },
            {
              "id": "2gjs3DpKgrn466Sju3Ev4r",
              "type": "authorPaper",
              "text": "Poster: Evaluating Project Compliance During EA Planning: A Model-Based Semi Automatic Method for Enterprise Architecture Planning",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jAph7dsbdQ5TEnLRwf3nC/5WW6OHv3kMU1cPYEtplONF.pdf",
              "extraLocations": [],
              "authorNames": "Melanie Langermeier (University of Augsburg), Bernhard Bauer (University of Augsburg)",
              "abstract": "New business and technology demands as well as Merger & Acquisitions force organizations to adapt their business models and IT infrastructure in order to stay competitive. Ensuring the compliance of new projects with the current goals and principles is an essential task. The discipline of Enterprise Architecture Planning provides methods for the structured development of the business and IT of an organization. The established models of the current and target architecture are used to provide the respective information for decision making at a sufficient aggregation level. We propose a model-based and tool-supported method for EA planning and in specific for the evaluation of project compliance. We utilize gap and impact analysis to ensure change consistency as well as view generation and metric calculation for evaluation purposes. The analyses are executed within a generic analysis architecture execution environment (A2E), that supports the customization of the analyses as well as different EA meta models. The method and the proposed analyses are evaluated within a case study from a medium-sized software product company.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Evaluating Project Compliance During EA Planning: A Model-Based Semi Automatic Method for Enterprise Architecture Planning 1520954493023 Melanie Langermeier University of Augsburg langermeier@informatik.uni-augsburg.de Bernhard Bauer University of Augsburg bauer@informatik.uni-augsburg.de architecture analysis architecture evaluation enterprise architecture architecture planning New business and technology demands as well as Merger & Acquisitions force organizations to adapt their business models and IT infrastructure in order to stay competitive. Ensuring the compliance of new projects with the current goals and principles is an essential task. The discipline of Enterprise Architecture Planning provides methods for the structured development of the business and IT of an organization. The established models of the current and target architecture are used to provide the respective information for decision making at a sufficient aggregation level. We propose a model-based and tool-supported method for EA planning and in specific for the evaluation of project compliance. We utilize gap and impact analysis to ensure change consistency as well as view generation and metric calculation for evaluation purposes. The analyses are executed within a generic analysis architecture execution environment (A2E), that supports the customization of the analyses as well as different EA meta models. The method and the proposed analyses are evaluated within a case study from a medium-sized software product company.",
              "pageNumber": 374,
              "isPageNumberRoman": false
            },
            {
              "id": "76p2EKGmUfiXA8I0uXirpf",
              "type": "authorPaper",
              "text": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf",
              "extraLocations": [],
              "authorNames": "Ayesha Afzal (Lahore University of Management Sciences), Ahmad Akhtar (Lahore University of Management Sciences), Nabila Ishfaq (Lahore University of Management Sciences), Basit Shafiq (Lahore University of Management Sciences), Shafay Shamail (Lahore University of Management Sciences), Abeer Elahraf (Rutgers University), Jaideep Vaidya (Rutgers University), Nabil Adam (Rutgers University)",
              "abstract": "Business Process (BP) development is a challenging task for small and medium organizations who do not have sufficient resources for design, coding, and management of their BPs. Cloud infrastructure and service-oriented middleware can be leveraged for rapid development and deployment of BPs of such organizations. BP development in the cloud-based environment can be done collaboratively by exploiting the knowledge of existing BPs of related organizations. In this paper, we present ASSEMBLE, a tool for collaborative BP development in the cloud. ASSEMBLE implements our service mapping approach that utilizes the attribute, structural and semantics information of service operations of existing BPs in a given domain to help a user organization to compose its BP. Given a collection of related BPs and available service operations of a user organization, ASSEMBLE computes a mapping between service operations of the user organization and BP operations of other organizations. The tool also generates the executable BP code in standard BPEL language for deployment on a process execution engine on the user organization's site or on the cloud.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: ASSEMBLE: A Collaborative Business Process Development Tool 1520590555747 Ayesha Afzal Lahore University of Management Sciences 13030032@lums.edu.pk Ahmad Akhtar Lahore University of Management Sciences 16030059@lums.edu.pk Nabila Ishfaq Lahore University of Management Sciences 15030037@lums.edu.pk Basit Shafiq Lahore University of Management Sciences basit@lums.edu.pk Shafay Shamail Lahore University of Management Sciences sshamail@lums.edu.pk Abeer Elahraf Rutgers University aelahraf@rutgers.edu Jaideep Vaidya Rutgers University jsvaidya@rutgers.edu Nabil Adam Rutgers University adam@rutgers.edu Business process development Web services service mapping Business Process (BP) development is a challenging task for small and medium organizations who do not have sufficient resources for design, coding, and management of their BPs. Cloud infrastructure and service-oriented middleware can be leveraged for rapid development and deployment of BPs of such organizations. BP development in the cloud-based environment can be done collaboratively by exploiting the knowledge of existing BPs of related organizations. In this paper, we present ASSEMBLE, a tool for collaborative BP development in the cloud. ASSEMBLE implements our service mapping approach that utilizes the attribute, structural and semantics information of service operations of existing BPs in a given domain to help a user organization to compose its BP. Given a collection of related BPs and available service operations of a user organization, ASSEMBLE computes a mapping between service operations of the user organization and BP operations of other organizations. The tool also generates the executable BP code in standard BPEL language for deployment on a process execution engine on the user organization's site or on the cloud.",
              "pageNumber": 376,
              "isPageNumberRoman": false
            },
            {
              "id": "73G7qBzVSdcrshQBwXKeo1",
              "type": "authorPaper",
              "text": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf",
              "extraLocations": [],
              "authorNames": "Jing Zhao (Dalian University of Technology), Gaorong Ning (The Fourth Academy of CASIC), Hualin Lu (Harbin Engineering University), Yanbin Wang (Harbin institute of Technology), Cai Yan (Institute of Software), Jian Zhang (Institute of Software)",
              "abstract": "Combinatorial testing (CT) is very efficient to test parameterized systems. Kuhn et al. investigated the interaction faults of some real programs, and found that the faulty combinations are caused by the combination of no more than 6 parameters. Three or fewer parameters triggered a total of almost 90% of the failures in the application[3]. However, for high-quality software, simply testing all 3-way combinations is not sufficient [5], which may increase the risk of residual errors that lead to system failures and security weakness[4]. In addition, the number of test cases at 100% coverage for high-way is huge, which is beyond the farthest test overhead restrictions. Covering array is typically used as the test suite in CT, which should convey much information for the fault detection. We firstly proposed a weighted combinatorial coverage (CC), focusing on the fault detection capability of each test case instead of 100% percent t-way CC. Secondly, we give the test case selection algorithm FWA (fixed weight algorithm) using weighted CC metric. For generating each test case, our method first randomly generates several candidates, and selects the one that has the highest fault detection possibility with the different sampling pool size. Thirdly, we give the theorems for our algorithm and definitions for the weighted CC. Finally, we compared the selected sample sized and the fault-detection capabilities of FWA as well as t-wise algorithms by using the four benchmarks with configuration options interaction faults, and we found FWA is able to detect higher number of faults with the less selected sample size, specifically, FWA is able to detect high-wise interaction faults with the less selected sample size compared with the 4-wise as well as 5-wise algorithms.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Weight-Based Approach to Combinatorial Test Generation 1521050450155 Jing Zhao Dalian University of Technology zhaoj9988@dlut.edu.cn Gaorong Ning The Fourth Academy of CASIC ninggaorong@buaa.edu.cn Hualin Lu Harbin Engineering University n.betula.lu@gmail.com Yanbin Wang Harbin institute of Technology wangyb@hit.edu.cn Cai Yan Institute of Software y-cai.mail@gmail.com Jian Zhang Institute of Software zj@ios.ac.cn combinatorial testing weighted combinatorial coverage fault detection rate test case selection Combinatorial testing (CT) is very efficient to test parameterized systems. Kuhn et al. investigated the interaction faults of some real programs, and found that the faulty combinations are caused by the combination of no more than 6 parameters. Three or fewer parameters triggered a total of almost 90% of the failures in the application[3]. However, for high-quality software, simply testing all 3-way combinations is not sufficient [5], which may increase the risk of residual errors that lead to system failures and security weakness[4]. In addition, the number of test cases at 100% coverage for high-way is huge, which is beyond the farthest test overhead restrictions. Covering array is typically used as the test suite in CT, which should convey much information for the fault detection. We firstly proposed a weighted combinatorial coverage (CC), focusing on the fault detection capability of each test case instead of 100% percent t-way CC. Secondly, we give the test case selection algorithm FWA (fixed weight algorithm) using weighted CC metric. For generating each test case, our method first randomly generates several candidates, and selects the one that has the highest fault detection possibility with the different sampling pool size. Thirdly, we give the theorems for our algorithm and definitions for the weighted CC. Finally, we compared the selected sample sized and the fault-detection capabilities of FWA as well as t-wise algorithms by using the four benchmarks with configuration options interaction faults, and we found FWA is able to detect higher number of faults with the less selected sample size, specifically, FWA is able to detect high-wise interaction faults with the less selected sample size compared with the 4-wise as well as 5-wise algorithms.",
              "pageNumber": 378,
              "isPageNumberRoman": false
            },
            {
              "id": "3VMuO3QaKnParU6nlTMYlW",
              "type": "authorPaper",
              "text": "Poster: Automated Test Migration for Mobile Apps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tal5Beeg8SDPTo3co0jm4/27yyURsFhJ5y7Rm3wTmCip.pdf",
              "extraLocations": [],
              "authorNames": "Farnaz Behrang (Georgia Institute of Technology), Alessandro Orso (Georgia Institute of Technology)",
              "abstract": "The use of mobile apps is increasingly widespread, and much effort is put into testing these apps to make sure they behave as intended. To reduce this effort, and thus the cost of mobile app testing, we propose AppTestMigrator, a technique that allows for migrating test cases between apps with similar features. The intuition behind AppTestMigrator is that many apps share similarities in their functionality, and these similarities often result in conceptually similar user interfaces (through which that functionality is accessed). Typical examples of this situation are apps in the same category, apps developed based on the same specification, and different versions of the same app. In all these cases, the burden of writing test cases can be reduced by migrating test cases written for an app to another, similar app. Given a test case for an app (source app) and a second app (target app), AppTestMigrator attempts to automatically transform the sequence of events in the test for the source app to events that can be consumed by the target app. We implemented AppTestMigrator for Android mobile apps and evaluated our approach on four randomly selected shopping list apps from the Google Play Store. Our initial results are promising and motivate further research in this direction.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Automated Test Migration for Mobile Apps 1521915408354 Farnaz Behrang Georgia Institute of Technology behrang@gatech.edu Alessandro Orso Georgia Institute of Technology orso@cc.gatech.edu GUI tests Test migration Mobile apps The use of mobile apps is increasingly widespread, and much effort is put into testing these apps to make sure they behave as intended. To reduce this effort, and thus the cost of mobile app testing, we propose AppTestMigrator, a technique that allows for migrating test cases between apps with similar features. The intuition behind AppTestMigrator is that many apps share similarities in their functionality, and these similarities often result in conceptually similar user interfaces (through which that functionality is accessed). Typical examples of this situation are apps in the same category, apps developed based on the same specification, and different versions of the same app. In all these cases, the burden of writing test cases can be reduced by migrating test cases written for an app to another, similar app. Given a test case for an app (source app) and a second app (target app), AppTestMigrator attempts to automatically transform the sequence of events in the test for the source app to events that can be consumed by the target app. We implemented AppTestMigrator for Android mobile apps and evaluated our approach on four randomly selected shopping list apps from the Google Play Store. Our initial results are promising and motivate further research in this direction.",
              "pageNumber": 384,
              "isPageNumberRoman": false
            },
            {
              "id": "k7u4tsO9iLddOMuZsiqMW",
              "type": "authorPaper",
              "text": "Poster: USE: Unified and Split Execution for Exposing Divergences between Versions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6LPcye0HvDGcTC8pmjMow0/53CrwfyS24ctiDhG2v3XKZ.pdf",
              "extraLocations": [],
              "authorNames": "Hongliang Liang (Beijing University of Posts and Telecommunications), Wenying Hu (Beijing University of Posts and Telecommunications), Yini Zhang (Beijing University of Posts and Telecommunications), Lin Jiang (Beijing University of Posts and Telecommunications), Wuwei Shen (Western Michigan University)",
              "abstract": "Software maintenance is an important activity during a software development lifecycle in that detecting and fixing software faults are not only costly but also error-prone. How to select an appropriate set of test cases which can effectively show the difference between an old and new version of a software system becomes a challenging research topic. In this paper, we consider both control divergence and data divergence to explore the difference between two versions of code. To do so, we present a novel framework called Use, which executes the common code only once but has separate execution traces for the different code in a single dynamic symbolic execution instance, to generate test cases efficiently. Furthermore, we propose to apply Use to expose control and data divergences introduced by a patch and classifying patches. We evaluate Use on two case studies: SIR benchmark and CoREBench. The initial experimental results show that our methods can efficiently and effectively generate test cases demonstrating the divergence between two versions of code, and be helpful for inferring the bug source.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: USE: Unified and Split Execution for Exposing Divergences between Versions 1520486459805 Hongliang Liang Beijing University of Posts and Telecommunications hliang@bupt.edu.cn Wenying Hu Beijing University of Posts and Telecommunications wendia@bupt.edu.cn Yini Zhang Beijing University of Posts and Telecommunications zhangyini2012@bupt.edu.cn Lin Jiang Beijing University of Posts and Telecommunications jianglin@butpt.edu.cn Wuwei Shen Western Michigan University wshen@wmich.edu Divergences Test Cases Generation Dynamic Symbolic Execution Regression Testing Patches Classification Software maintenance is an important activity during a software development lifecycle in that detecting and fixing software faults are not only costly but also error-prone. How to select an appropriate set of test cases which can effectively show the difference between an old and new version of a software system becomes a challenging research topic. In this paper, we consider both control divergence and data divergence to explore the difference between two versions of code. To do so, we present a novel framework called Use, which executes the common code only once but has separate execution traces for the different code in a single dynamic symbolic execution instance, to generate test cases efficiently. Furthermore, we propose to apply Use to expose control and data divergences introduced by a patch and classifying patches. We evaluate Use on two case studies: SIR benchmark and CoREBench. The initial experimental results show that our methods can efficiently and effectively generate test cases demonstrating the divergence between two versions of code, and be helpful for inferring the bug source.",
              "pageNumber": 386,
              "isPageNumberRoman": false
            },
            {
              "id": "6Igsx4hby0i9CzKyszxCTB",
              "type": "authorPaper",
              "text": "Poster: Learning to Mine Parallel Natural Language/Source Code Corpora from Stack Overflow",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1iZMJRxsjJaTnjtXZEm8ji/3B4yjZqOJryCSNTmEBfRma.pdf",
              "extraLocations": [],
              "authorNames": "Pengcheng Yin (Carnegie Mellon University), Bowen Deng (Carnegie Mellon University), Edgar Chen (Carnegie Mellon University), Bogdan Vasilescu (Carnegie Mellon University), Graham Neubig (Carnegie Mellon University)",
              "abstract": "For tasks like code synthesis from natural language, code retrieval, and code summarization, data-driven models have shown great promise. However, creating these models requires parallel data between natural language (NL) and code with fine-grained alignments. Stack Overflow (SO) is a promising source to create such a data set but existing heuristic methods are limited both in their coverage and the correctness of the NL-code pairs obtained. In this paper, we propose a method to mine high-quality aligned data from SO by training a classifier using two sets of features: hand-crafted features considering the structure of the extracted snippets, and correspondence features obtained by training a neural network model to capture the correlation between NL and code. Experiments using Python and Java as test beds show that the proposed method greatly expands coverage and accuracy over existing mining methods, even when using only a small number of labeled examples.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Learning to Mine Parallel Natural Language/Source Code Corpora from Stack Overflow 1521504012444 Pengcheng Yin Carnegie Mellon University pcyin@cs.cmu.edu Bowen Deng Carnegie Mellon University bdeng1@cs.cmu.edu Edgar Chen Carnegie Mellon University edgarc@cs.cmu.edu Bogdan Vasilescu Carnegie Mellon University bogdanv@cs.cmu.edu Graham Neubig Carnegie Mellon University gneubig@cs.cmu.edu Code Mining Stack Overflow Neural Networks Bimodal Modeling For tasks like code synthesis from natural language, code retrieval, and code summarization, data-driven models have shown great promise. However, creating these models requires parallel data between natural language (NL) and code with fine-grained alignments. Stack Overflow (SO) is a promising source to create such a data set but existing heuristic methods are limited both in their coverage and the correctness of the NL-code pairs obtained. In this paper, we propose a method to mine high-quality aligned data from SO by training a classifier using two sets of features: hand-crafted features considering the structure of the extracted snippets, and correspondence features obtained by training a neural network model to capture the correlation between NL and code. Experiments using Python and Java as test beds show that the proposed method greatly expands coverage and accuracy over existing mining methods, even when using only a small number of labeled examples.",
              "pageNumber": 388,
              "isPageNumberRoman": false
            },
            {
              "id": "6Xwcg5gNYvyTZj7Ht1sQEJ",
              "type": "authorPaper",
              "text": "Poster: Identification of Methods with Low Fault Risk",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JGgODCZWzCpd0zz1oZSYU/2SjNf69oXbXjcLDFxghEKS.pdf",
              "extraLocations": [],
              "authorNames": "Rainer Niedermayr (University of Stuttgart), Tobias Röhm (CQSE GmbH), Stefan Wagner (University of Stuttgart)",
              "abstract": "Test resources are usually limited and therefore it is often not possible to completely test an application before a release. Therefore, testers need to focus their activities on the relevant code regions. In this paper, we introduce an inverse defect prediction approach to identify methods that contain hardly any faults. We applied our approach to six Java open-source projects and show that on average 31.6% of the methods of a project have a low fault risk; they contain in total, on average, only 5.8% of all faults. Furthermore, the results suggest that, unlike defect prediction, our approach can also be applied in cross-project prediction scenarios. Therefore, inverse defect prediction can help prioritize untested code areas and guide testers to increase the fault detection probability.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Identification of Methods with Low Fault Risk 1520495824900 Rainer Niedermayr University of Stuttgart niedermayr@cqse.eu Tobias Röhm CQSE GmbH roehm@cqse.eu Stefan Wagner University of Stuttgart stefan.wagner@informatik.uni-stuttgart.de testing inverse defect prediction fault risk low fault risk methods defect prediction Test resources are usually limited and therefore it is often not possible to completely test an application before a release. Therefore, testers need to focus their activities on the relevant code regions. In this paper, we introduce an inverse defect prediction approach to identify methods that contain hardly any faults. We applied our approach to six Java open-source projects and show that on average 31.6% of the methods of a project have a low fault risk; they contain in total, on average, only 5.8% of all faults. Furthermore, the results suggest that, unlike defect prediction, our approach can also be applied in cross-project prediction scenarios. Therefore, inverse defect prediction can help prioritize untested code areas and guide testers to increase the fault detection probability.",
              "pageNumber": 390,
              "isPageNumberRoman": false
            },
            {
              "id": "7CaL7AGYrSaEMUkCOuZO3g",
              "type": "authorPaper",
              "text": "Poster: A Declarative Approach for Updating Distributed Microservices",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NuEmP8ZsSnvKNvNyTrrlD/1nPmlCZWlN2oGC90OpEUxG.pdf",
              "extraLocations": [],
              "authorNames": "Fabienne Boyer (UGA / LIG), Xavier Etchevers (Orange Labs), Noel de Palma (UGA / LIG), Xinxiu Tao (Orange Labs)",
              "abstract": "Microservice architectures are considered with much promises to achieve DevOps in IT organizations—mainly because they split applications into services that can be updated independently the ones from each other. But the challenge does not stop there: updating microservices still require DevOps teams to specify complex pipelines of commands to execute. In this paper, we propose a framework that strongly simplifies such updates: DevOps teams just specify the desired target architecture for their microservice application, instead of specifying how to reach it. In addition, updates managed with our framework can conform to various SLA requirements and resist to failures.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Declarative Approach for Updating Distributed Microservices 1521190640605 Fabienne Boyer UGA / LIG fabienne.boyer@imag.fr Xavier Etchevers Orange Labs xavier.etchevers@orange.com Noel de Palma UGA / LIG noel.depalma@imag.fr Xinxiu Tao Orange Labs isabelle.tao@orange.com Microservice Continuous Delivery Dynamic Update Architecture based Management DevOps Microservice architectures are considered with much promises to achieve DevOps in IT organizations—mainly because they split applications into services that can be updated independently the ones from each other. But the challenge does not stop there: updating microservices still require DevOps teams to specify complex pipelines of commands to execute. In this paper, we propose a framework that strongly simplifies such updates: DevOps teams just specify the desired target architecture for their microservice application, instead of specifying how to reach it. In addition, updates managed with our framework can conform to various SLA requirements and resist to failures.",
              "pageNumber": 392,
              "isPageNumberRoman": false
            },
            {
              "id": "7nKvaqeBH8RUOZUkIPiRwF",
              "type": "authorPaper",
              "text": "Poster: Static Detection of API Call Vulnerabilities in iOS Executables",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/gSu6tRobTq6btbsdFEqcb/SnOv2Ft9uBvbOCkoaGtXE.pdf",
              "extraLocations": [],
              "authorNames": "Chun-Han Lin (National Chengchi University), Fang Yu (National Chengchi University), Jie-Hong Roland Jiang (National Taiwan University), Tevfik Bultan (University of California)",
              "abstract": "We propose a static analysis technique for iOS executables for checking API call vulnerabilities that can cause 1) app behaviors tobe altered by malicious external inputs, and 2) sensitive user data to be illegally accessed by apps with stealthy private API calls that use string obfuscation. We identify sensitive functions that dynamically load classes/frameworks, and, for each parameter that corresponds to a dynamically loaded class/framework, we construct a dependency graph that shows the set of values that flow to that parameter. A sensitive function that has its class name or framework path parameter depending on externalinputs is considered to contain a vulnerability. We further conduct string analysis on these dependency graphs to determine all potential string values that these parameters can take, which identifies the set of dynamically loaded classes/frameworks. Taking the intersection of these values with patterns that characterize Apple's API policies (such as restricted use of private/sensitive APIs), we are able to detect potential policy violations and vulnerabilities.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Static Detection of API Call Vulnerabilities in iOS Executables 1521471600021 Chun-Han Lin National Chengchi University john.lin0420@gmail.com Fang Yu National Chengchi University yuf@nccu.edu.tw Jie-Hong Roland Jiang National Taiwan University jhjiang@ntu.edu.tw Tevfik Bultan University of California bultan@cs.ucsb.edu String Analysis API Call Vulnerability iOS Mobile Application We propose a static analysis technique for iOS executables for checking API call vulnerabilities that can cause 1) app behaviors tobe altered by malicious external inputs, and 2) sensitive user data to be illegally accessed by apps with stealthy private API calls that use string obfuscation. We identify sensitive functions that dynamically load classes/frameworks, and, for each parameter that corresponds to a dynamically loaded class/framework, we construct a dependency graph that shows the set of values that flow to that parameter. A sensitive function that has its class name or framework path parameter depending on externalinputs is considered to contain a vulnerability. We further conduct string analysis on these dependency graphs to determine all potential string values that these parameters can take, which identifies the set of dynamically loaded classes/frameworks. Taking the intersection of these values with patterns that characterize Apple's API policies (such as restricted use of private/sensitive APIs), we are able to detect potential policy violations and vulnerabilities.",
              "pageNumber": 394,
              "isPageNumberRoman": false
            },
            {
              "id": "6pCUaMM0dtHnylyBXvMzyW",
              "type": "authorPaper",
              "text": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf",
              "extraLocations": [],
              "authorNames": "Harald Störrle (QAware GmbH), Nick Baltsen (Devoteam A/S), Henrik Christoffersen (A-2 A/S), Anja M. Maier (Technical University of Denmark)",
              "abstract": "Background: Conceptual diagrams are widely used. Previous research suggested layout quality, diagram size, and expertise level are relevant impact factors on understanding, while diagram type is not. Surprisingly little is known about how diagrams are read. Objective: Eventually, we want to understand the cognitive processes of diagram and model understanding. In this paper, we study the behavior of modelers while reading UML diagrams in terms of reading strategies and how they affect diagram understanding. Method: We conduct an eye tracking study with 28 participants, reusing diagrams and items from previous experiments. We record several objective and subjective performance indicators as well as eye movement and pupil dilation. Results: We discover behavioral regularities and aggregate them into reading strategies which vary with expertise level and diagram type, but not with layout quality. Conclusions: Modelers exhibit specific strategies of diagram understanding. Experts employ different strategies than novices, which explains performance differences irrespective of layout quality.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study Harald Störrle QAware GmbH hstorrle@acm.org Nick Baltsen Devoteam A/S nick.baltsen@gmail.com Henrik Christoffersen A-2 A/S hc@hench.dk Anja M. Maier Technical University of Denmark amai@dtu.dk Background: Conceptual diagrams are widely used. Previous research suggested layout quality, diagram size, and expertise level are relevant impact factors on understanding, while diagram type is not. Surprisingly little is known about how diagrams are read. Objective: Eventually, we want to understand the cognitive processes of diagram and model understanding. In this paper, we study the behavior of modelers while reading UML diagrams in terms of reading strategies and how they affect diagram understanding. Method: We conduct an eye tracking study with 28 participants, reusing diagrams and items from previous experiments. We record several objective and subjective performance indicators as well as eye movement and pupil dilation. Results: We discover behavioral regularities and aggregate them into reading strategies which vary with expertise level and diagram type, but not with layout quality. Conclusions: Modelers exhibit specific strategies of diagram understanding. Experts employ different strategies than novices, which explains performance differences irrespective of layout quality.",
              "pageNumber": 396,
              "isPageNumberRoman": false
            },
            {
              "id": "3zYDxl4cNBe5JR2M43i0F6",
              "type": "authorPaper",
              "text": "Poster: Towards a Formal API Assessment",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4EuktLE7DiRjvzvyG7KuGH/1qqZgquooeCI3zSxGd3tTx.pdf",
              "extraLocations": [],
              "authorNames": "Amir Zghidi (CES Lab), Imed Hammouda (Mediterranean Institute of Technology), Brahim Hnich (CES Lab)",
              "abstract": "In this paper we discuss various factors that should be taken into consideration when assessing an API; namely fitness dimensions and their classification into technical or cognitive, priorities of fitness dimensions from a stakeholder's point of view, and importance of stakeholders. We build a formal model to describe the aforementioned assessment factors and provide a way to express an API's profile as well as the profiles of its stakeholders. We discuss how our approach can be used to choose, from a list of candidate APIs, the one that best fits the stakeholders needs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Towards a Formal API Assessment 1521482615069 Amir Zghidi CES Lab zghidi.amir@gmail.com Imed Hammouda Mediterranean Institute of Technology hammouda@chalmers.se Brahim Hnich CES Lab hnich.brahim@gmail.com API assessment Formal model API selection In this paper we discuss various factors that should be taken into consideration when assessing an API; namely fitness dimensions and their classification into technical or cognitive, priorities of fitness dimensions from a stakeholder's point of view, and importance of stakeholders. We build a formal model to describe the aforementioned assessment factors and provide a way to express an API's profile as well as the profiles of its stakeholders. We discuss how our approach can be used to choose, from a list of candidate APIs, the one that best fits the stakeholders needs.",
              "pageNumber": 398,
              "isPageNumberRoman": false
            },
            {
              "id": "7xzwCUOGRwD6mahuvBeGV9",
              "type": "authorPaper",
              "text": "Poster: Measuring the Energy Footprint of Mobile Testing Frameworks",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4HNfKbEgki6GpTrNlMKiXX/4Z92r470jWnT8EFS5QPFcT.pdf",
              "extraLocations": [],
              "authorNames": "Luis Cruz (University of Porto / INESC-ID), Rui Abreu (University of Lisbon / INESC-ID)",
              "abstract": "This paper evaluates eight popular mobile UI automation frameworks. We have discovered that there are automation frameworks that increase energy consumption up to 7500%. While limited in the interactions one can do, Espresso is the most energy efficient framework. Depending on the needs of the tester, Appium, Monkeyrunner, or UIAutomator are good alternatives. We show the importance of using energy efficient frameworks and provide a decision tree to help developers make an educated decision on which framework suits best their testing needs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Measuring the Energy Footprint of Mobile Testing Frameworks 1521485959313 Luis Cruz University of Porto / INESC-ID luiscruz@fe.up.pt Rui Abreu University of Lisbon / INESC-ID rui@computer.org Mobile Testing Testing Frameworks Energy Efficiency This paper evaluates eight popular mobile UI automation frameworks. We have discovered that there are automation frameworks that increase energy consumption up to 7500%. While limited in the interactions one can do, Espresso is the most energy efficient framework. Depending on the needs of the tester, Appium, Monkeyrunner, or UIAutomator are good alternatives. We show the importance of using energy efficient frameworks and provide a decision tree to help developers make an educated decision on which framework suits best their testing needs.",
              "pageNumber": 400,
              "isPageNumberRoman": false
            },
            {
              "id": "3aOJ0uuQI9MnrJTTOVKiIn",
              "type": "authorPaper",
              "text": "Poster: Precooked Developer Dashboards: What to Show and How to Use",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2YzSMhy4hX7dROj5nXlVAm/3cgnIym26ZtWGwA6sgvoZK.pdf",
              "extraLocations": [],
              "authorNames": "Vladimir Ivanov (Innopolis University), Alan Rogers (Innopolis University), Giancarlo Succi (Innopolis University), Jooyong Yi (Innopolis University), Vasili Zorin (Innopolis University)",
              "abstract": "Designing an effective and useful dashboard is expensive and it would be important to determine if it is possible to elaborate a \"generic\" useful and effective dashboard, usable in a variety of circumstances. To determine if it is possible to develop such dashboard and, if so, its structure we interviewed 67 software engineers from 44 different companies. Their answers made us confident in the possibility of building such dashboard.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Precooked Developer Dashboards: What to Show and How to Use 1521528043430 Vladimir Ivanov Innopolis University v.ivanov@innopolis.ru Alan Rogers Innopolis University a.rogers@innopolis.ru Giancarlo Succi Innopolis University g.succi@innopolis.ru Jooyong Yi Innopolis University j.yi@innopolis.ru Vasili Zorin Innopolis University v.zorin@innopolis.ru developer dashboards GQM software engineering Designing an effective and useful dashboard is expensive and it would be important to determine if it is possible to elaborate a \"generic\" useful and effective dashboard, usable in a variety of circumstances. To determine if it is possible to develop such dashboard and, if so, its structure we interviewed 67 software engineers from 44 different companies. Their answers made us confident in the possibility of building such dashboard.",
              "pageNumber": 402,
              "isPageNumberRoman": false
            },
            {
              "id": "1lOwBYqIagtXY2LaiWde2V",
              "type": "authorPaper",
              "text": "Poster: Understanding and Leveraging Developer Inexpertise",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6Wyfsjr8AM6PGJt2Nw4jsw/1eB4hHPOy8K6gcGnmDJe9T.pdf",
              "extraLocations": [],
              "authorNames": "Lykes Claytor (Virginia Tech), Francisco Servant (Virginia Tech)",
              "abstract": "Existing work in modeling developer expertise assumes that developers reflect their expertise in their contributions and that such expertise can be analyzed to provide support for developer tasks. However, developers also make contributions in which they reflect their inexpertise such as by making mistakes in their code. We refine the hypotheses of the expertise-identification literature by proposing developer inexpertise as a factor that should be modeled to automate support for developer tasks.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Understanding and Leveraging Developer Inexpertise 1521220537867 Lykes Claytor Virginia Tech frank8@vt.edu Francisco Servant Virginia Tech fservant@vt.edu expertise modeling expert recommendation history mining Existing work in modeling developer expertise assumes that developers reflect their expertise in their contributions and that such expertise can be analyzed to provide support for developer tasks. However, developers also make contributions in which they reflect their inexpertise such as by making mistakes in their code. We refine the hypotheses of the expertise-identification literature by proposing developer inexpertise as a factor that should be modeled to automate support for developer tasks.",
              "pageNumber": 404,
              "isPageNumberRoman": false
            },
            {
              "id": "2KZS4G3JnjpKVzgaPJ0nZu",
              "type": "authorPaper",
              "text": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf",
              "extraLocations": [],
              "authorNames": "Isabella Ferreira (Pontifical Catholic University of Rio de Janeiro), Eduardo Fernandes (Pontifical Catholic University of Rio de Janeiro), Diego Cedrim (Pontifical Catholic University of Rio de Janeiro), Anderson Uchôa (Pontifical Catholic University of Rio de Janeiro), Ana Carla Bibiano (Pontifical Catholic University of Rio de Janeiro), Alessandro Garcia (Pontifical Catholic University of Rio de Janeiro), João Lucas Correia (Federal University of Alagoas), Filipe Santos (Federal University of Alagoas), Gabriel Nunes (Federal University of Alagoas), Caio Barbosa (Federal University of Alagoas), Baldoino Fonseca (Federal University of Alagoas), Rafael de Mello (Pontifical Catholic University of Rio de Janeiro)",
              "abstract": "Code refactoring is widely practiced by software developers. There is an explicit assumption that code refactoring improves the structural quality of a software project, thereby also reducing its bug proneness. However, refactoring is often applied with different purposes in practice. Depending on the complexity of certain refactorings, developers might unconsciously make the source code more susceptible to have bugs. In this paper, we present a longitudinal study of 5 Java open source projects, where 20,689 refactorings, and 1,033 bug reports were analyzed. We found that many bugs are introduced in the refactored code as soon as the first immediate change is made on it. Furthermore, code elements affected by refactorings performed in conjunction with other changes are more prone to have bugs than those affected by pure refactorings.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug 1521296475283 Isabella Ferreira Pontifical Catholic University of Rio de Janeiro iferreira@inf.puc-rio.br Eduardo Fernandes Pontifical Catholic University of Rio de Janeiro emfernandes@inf.puc-rio.br Diego Cedrim Pontifical Catholic University of Rio de Janeiro dcgrego@inf.puc-rio.br Anderson Uchôa Pontifical Catholic University of Rio de Janeiro auchoa@inf.puc-rio.br Ana Carla Bibiano Pontifical Catholic University of Rio de Janeiro abibiano@inf.puc-rio.br Alessandro Garcia Pontifical Catholic University of Rio de Janeiro afgarcia@inf.puc-rio.br João Lucas Correia Federal University of Alagoas jlmc@ic.ufal.br Filipe Santos Federal University of Alagoas filipebatista@ic.ufal.br Gabriel Nunes Federal University of Alagoas gabrielnunes@ic.ufal.br Caio Barbosa Federal University of Alagoas cbvs@ic.ufal.br Baldoino Fonseca Federal University of Alagoas baldoino@ic.ufal.br Rafael de Mello Pontifical Catholic University of Rio de Janeiro rmaiani@inf.puc-rio.br Refactoring bug proneness software maintenance empirical study Code refactoring is widely practiced by software developers. There is an explicit assumption that code refactoring improves the structural quality of a software project, thereby also reducing its bug proneness. However, refactoring is often applied with different purposes in practice. Depending on the complexity of certain refactorings, developers might unconsciously make the source code more susceptible to have bugs. In this paper, we present a longitudinal study of 5 Java open source projects, where 20,689 refactorings, and 1,033 bug reports were analyzed. We found that many bugs are introduced in the refactored code as soon as the first immediate change is made on it. Furthermore, code elements affected by refactorings performed in conjunction with other changes are more prone to have bugs than those affected by pure refactorings.",
              "pageNumber": 406,
              "isPageNumberRoman": false
            },
            {
              "id": "5Z77D2etRzkSbfzMLTn5bc",
              "type": "authorPaper",
              "text": "Poster: Predicting the Fault Revelation Utility of Mutants",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/42QsecgC6WhEpnjE0Q8yxp/3hghmlVpOkcbn1KqnwEInF.pdf",
              "extraLocations": [],
              "authorNames": "Thierry Chekam (Interdisciplinary Centre for Security), Mike Papadakis (Interdisciplinary Centre for Security), Tegawendé Bissyandé (Interdisciplinary Centre for Security), Yves Le Traon (Interdisciplinary Centre for Security)",
              "abstract": "Mutation testing is one of the strongest code-based test criteria. However, it is expensive as it involves a large number of mutants. To deal with this issue we propose a machine learning approach that learns to select fault revealing mutants. Fault revealing mutants are valuable to testers as their killing results in (collateral) fault revelation. We thus, formulate mutant reduction as the problem of selecting the mutants that are most likely to lead to test cases that uncover unknown program faults. We tackle this problem using a set of static program features and machine learning. Experimental results involving 1,629 real faults show that our approach reveals 14% to 18% more faults than a random mutant selection baseline.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Predicting the Fault Revelation Utility of Mutants 1520935906472 Thierry Chekam Interdisciplinary Centre for Security thierry.titcheu-chekam@uni.lu Mike Papadakis Interdisciplinary Centre for Security michail.papadakis@uni.lu Tegawendé Bissyandé Interdisciplinary Centre for Security tegawende.bissyande@uni.lu Yves Le Traon Interdisciplinary Centre for Security yves.letraon@uni.lu Mutation testing Fault Revelation Machine Learning Mutation testing is one of the strongest code-based test criteria. However, it is expensive as it involves a large number of mutants. To deal with this issue we propose a machine learning approach that learns to select fault revealing mutants. Fault revealing mutants are valuable to testers as their killing results in (collateral) fault revelation. We thus, formulate mutant reduction as the problem of selecting the mutants that are most likely to lead to test cases that uncover unknown program faults. We tackle this problem using a set of static program features and machine learning. Experimental results involving 1,629 real faults show that our approach reveals 14% to 18% more faults than a random mutant selection baseline.",
              "pageNumber": 408,
              "isPageNumberRoman": false
            },
            {
              "id": "5d7nTNoTDC8nPbQAJMhqyy",
              "type": "authorPaper",
              "text": "Poster: Memory and Resource Leak Defects in Java Projects: An Empirical Study",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2f9wrt7uGagtPEL8BMtuH/6fG2npcpWprcKQHHzpzUwr.pdf",
              "extraLocations": [],
              "authorNames": "Mohammadreza Ghanavati (Heidelberg University), Diego Costa (Heidelberg University), Artur Andrzejak (Heidelberg University), Janos Seboek (Heidelberg University)",
              "abstract": "Despite many software engineering efforts and programming language support, resource and memory leaks remain a troublesome issue in managed languages such as Java. Understanding the properties of leak-related issues, such as their type distribution, how they are found, and which defects induce them is an essential prerequisite for designing better approaches for avoidance, diagnosis, and repair of leak-related bugs. To answer these questions, we conduct an empirical study on 452 issues found in repositories of 10 mature Apache Java projects.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Memory and Resource Leak Defects in Java Projects: An Empirical Study 1520884473450 Mohammadreza Ghanavati Heidelberg University mohammadreza.ghanavati@informatik.uni-heidelberg.de Diego Costa Heidelberg University diego.costa@informatik.uni-heidelberg.de Artur Andrzejak Heidelberg University artur.andrzejak@informatik.uni-heidelberg.de Janos Seboek Heidelberg University seboek@cl.uni-heidelberg.de empirical study memory leak resource leak leak detection fault localization Despite many software engineering efforts and programming language support, resource and memory leaks remain a troublesome issue in managed languages such as Java. Understanding the properties of leak-related issues, such as their type distribution, how they are found, and which defects induce them is an essential prerequisite for designing better approaches for avoidance, diagnosis, and repair of leak-related bugs. To answer these questions, we conduct an empirical study on 452 issues found in repositories of 10 mature Apache Java projects.",
              "pageNumber": 410,
              "isPageNumberRoman": false
            },
            {
              "id": "5BEf48oWZMAvlkUAGq8wE5",
              "type": "authorPaper",
              "text": "Poster: Hybrid Traversal: Efficient Source Code Analysis at Scale",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2NPcU40Nlwn2KbCodc68JA/7pV86Vfe0PMckYKjDeVlRT.pdf",
              "extraLocations": [],
              "authorNames": "Ramanathan Ramu (Iowa State University), Ganesha Upadhyaya (Iowa State University), Hoan A Nguyen (Iowa State University), Hridesh Rajan (Iowa State University)",
              "abstract": "Source code analysis at a large scale is useful for solving many software engineering problems, however, could be very expensive, thus, making its use difficult. This work proposes hybrid traversal, a technique for performing source code analysis over control flow graphs more efficiently. Analysis over a control flow graph requires traversing the graph and it can be done using several traversal strategies. Our observation is that no single traversal strategy is suitable for different analyses and different graphs. Our key insight is that using the characteristics of the analysis and the properties of the graph it is possible to select a most efficient traversal strategy for a <analysis, graph> pair. Our evaluation using a set of analyses with different characteristics and a large dataset of graphs with different properties shows up to 30% reduction in the analysis time. Further, the overhead of our technique for selecting the most efficient traversal strategy is very low; between 0.01%-0.2%.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Hybrid Traversal: Efficient Source Code Analysis at Scale 1521504735133 Ramanathan Ramu Iowa State University rramu@iastate.edu Ganesha Upadhyaya Iowa State University ganeshau@iastate.edu Hoan A Nguyen Iowa State University hoan@iastate.edu Hridesh Rajan Iowa State University hridesh@iastate.edu Source code analysis Boa Source code analysis at a large scale is useful for solving many software engineering problems, however, could be very expensive, thus, making its use difficult. This work proposes hybrid traversal, a technique for performing source code analysis over control flow graphs more efficiently. Analysis over a control flow graph requires traversing the graph and it can be done using several traversal strategies. Our observation is that no single traversal strategy is suitable for different analyses and different graphs. Our key insight is that using the characteristics of the analysis and the properties of the graph it is possible to select a most efficient traversal strategy for a <analysis, graph> pair. Our evaluation using a set of analyses with different characteristics and a large dataset of graphs with different properties shows up to 30% reduction in the analysis time. Further, the overhead of our technique for selecting the most efficient traversal strategy is very low; between 0.01%-0.2%.",
              "pageNumber": 412,
              "isPageNumberRoman": false
            },
            {
              "id": "iFmypK1PtAXNF3xyKc2qb",
              "type": "authorPaper",
              "text": "Poster: Defect Prediction Metrics for Infrastructure as Code Scripts in DevOps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6z0ElYo6kCuhP8EM07S76I/7w6jX8zdDuiJ9pLqb3q0NC.pdf",
              "extraLocations": [],
              "authorNames": "Akond Rahman (North Carolina State University), Jonathan Stallings (North Carolina State University), Laurie Williams (North Carolina State University)",
              "abstract": "Use of infrastructure as code (IaC) scripts helps software teams manage their configuration and infrastructure automatically. Information technology (IT) organizations use IaC scripts to create and manage automated deployment pipelines to deliver services rapidly. IaC scripts can be defective, resulting in dire consequences, such as creating wide-scale service outages for end-users. Prediction of defective IaC scripts can help teams to mitigate defects in these scripts by prioritizing their inspection efforts. The goal of this paper is to help software practitioners in prioritizing their inspection efforts for infrastructure as code (IaC) scripts by proposing defect prediction model-related metrics. IaC scripts use domain specific languages (DSL) that are fundamentally different from object-oriented programming (OOP) languages. Hence, the OOP-based metrics that researchers used in defect prediction might not be applicable for IaC scripts. We apply Constructivist Grounded Theory (CGT) on defect-related commits mined from version control systems to identify metrics suitable for IaC scripts. By applying CGT, we identify 18 metrics. Of these metrics, 13 are related to IaC, for example, count of string occurrences in a script. Four of the identified metrics are related to churn, and one metric is lines of code.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Defect Prediction Metrics for Infrastructure as Code Scripts in DevOps 1520448837987 Akond Rahman North Carolina State University aarahman@ncsu.edu Jonathan Stallings North Carolina State University jwstalli@ncsu.edu Laurie Williams North Carolina State University williams@csc.ncsu.edu Continuous Deployment DevOps Infrastructure as Code Metrics Use of infrastructure as code (IaC) scripts helps software teams manage their configuration and infrastructure automatically. Information technology (IT) organizations use IaC scripts to create and manage automated deployment pipelines to deliver services rapidly. IaC scripts can be defective, resulting in dire consequences, such as creating wide-scale service outages for end-users. Prediction of defective IaC scripts can help teams to mitigate defects in these scripts by prioritizing their inspection efforts. The goal of this paper is to help software practitioners in prioritizing their inspection efforts for infrastructure as code (IaC) scripts by proposing defect prediction model-related metrics. IaC scripts use domain specific languages (DSL) that are fundamentally different from object-oriented programming (OOP) languages. Hence, the OOP-based metrics that researchers used in defect prediction might not be applicable for IaC scripts. We apply Constructivist Grounded Theory (CGT) on defect-related commits mined from version control systems to identify metrics suitable for IaC scripts. By applying CGT, we identify 18 metrics. Of these metrics, 13 are related to IaC, for example, count of string occurrences in a script. Four of the identified metrics are related to churn, and one metric is lines of code.",
              "pageNumber": 414,
              "isPageNumberRoman": false
            },
            {
              "id": "113iMa2R8LntaHloz0EVLx",
              "type": "authorPaper",
              "text": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf",
              "extraLocations": [],
              "authorNames": "Michael Vierhauser (University of Notre Dame), Sean Bayley (University of Notre Dame), Jinghui Cheng (Polythechnique de Montréal), Wandi Xiong (Iowa State University), Robyn Lutz (Iowa State University), Joshua Huseman (University of Notre Dame), Jane Cleland-Huang (University of Notre Dame)",
              "abstract": "The growing adoption of small unmanned aircraft systems (sUAS) for tasks such as eCommerce, aerial surveillance, and environmental monitoring introduces the need for new safety mechanisms in an increasingly cluttered airspace. Safety assurance cases (SAC) provide a state-of-the-art solution for reasoning about system and software safety in numerous safety-critical domains. We propose a novel approach based on the idea of interlocking safety cases. The sUAS infrastructure safety case (iSAC) specifies assumptions and applies constraints upon the behavior of sUAS entering the airspace. Each sUAS then demonstrates compliance to the iSAC by presenting its own (partial) safety case (uSAC) which connects to the iSAC through a set of interlock points. To enforce a \"trust but verify\" policy, sUAS conformance is monitored at runtime while it is in the airspace and its behavior is described using a reputation model based on the iSAC's expectations of its behavior.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments 1520876817448 Michael Vierhauser University of Notre Dame mvierhau@nd.edu Sean Bayley University of Notre Dame sbayley@nd.edu Jinghui Cheng Polythechnique de Montréal jinghui.cheng@polymtl.ca Wandi Xiong Iowa State University wdxiong@iastate.edu Robyn Lutz Iowa State University rlutz@iastate.edu Joshua Huseman University of Notre Dame jhuseman@nd.edu Jane Cleland-Huang University of Notre Dame JaneClelandHuang@nd.edu sUAS Unmanned Autonomous Systems Safety Assurance Cases Monitoring The growing adoption of small unmanned aircraft systems (sUAS) for tasks such as eCommerce, aerial surveillance, and environmental monitoring introduces the need for new safety mechanisms in an increasingly cluttered airspace. Safety assurance cases (SAC) provide a state-of-the-art solution for reasoning about system and software safety in numerous safety-critical domains. We propose a novel approach based on the idea of interlocking safety cases. The sUAS infrastructure safety case (iSAC) specifies assumptions and applies constraints upon the behavior of sUAS entering the airspace. Each sUAS then demonstrates compliance to the iSAC by presenting its own (partial) safety case (uSAC) which connects to the iSAC through a set of interlock points. To enforce a \"trust but verify\" policy, sUAS conformance is monitored at runtime while it is in the airspace and its behavior is described using a reputation model based on the iSAC's expectations of its behavior.",
              "pageNumber": 416,
              "isPageNumberRoman": false
            },
            {
              "id": "6FFL2aDSo3Km5lbyPf6SE3",
              "type": "authorPaper",
              "text": "Poster: A Systematic Literature Review to Support the Selection of User Acceptance Testing Techniques",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/28621IjsF5CqlbNGEX1dtM/XW3rQylLODA98aqhrpwRp.pdf",
              "extraLocations": [],
              "authorNames": "Ernani César Dos Santos (Federal University of Santa Catarina), Patrícia Vilain (Federal University of Santa Catarina), Douglas Hiura Longo (Federal University of Santa Catarina)",
              "abstract": "User Acceptance Testing (UAT) aims to determine whether or not a software satisfies users acceptance criteria. Although some studies have used acceptance tests as software requirements, no previous study has collected information about available UAT techniques and established a comparison of them, to support an organization in the selection of one over another. This work presents a Systematic Literature Review on UAT to find out available techniques and compare their main features. We selected 80 studies and found out 21 UAT techniques. As result, we created a comparative table summarizing these techniques and their features.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: A Systematic Literature Review to Support the Selection of User Acceptance Testing Techniques 1521494796842 Ernani César Dos Santos Federal University of Santa Catarina ernani.santos@posgrad.ufsc.br Patrícia Vilain Federal University of Santa Catarina patricia.vilain@ufsc.br Douglas Hiura Longo Federal University of Santa Catarina undefined User acceptance testing techniques classification features User Acceptance Testing (UAT) aims to determine whether or not a software satisfies users acceptance criteria. Although some studies have used acceptance tests as software requirements, no previous study has collected information about available UAT techniques and established a comparison of them, to support an organization in the selection of one over another. This work presents a Systematic Literature Review on UAT to find out available techniques and compare their main features. We selected 80 studies and found out 21 UAT techniques. As result, we created a comparative table summarizing these techniques and their features.",
              "pageNumber": 418,
              "isPageNumberRoman": false
            },
            {
              "id": "5Gtdo7YUnuDVnKB9pXFf99",
              "type": "authorPaper",
              "text": "Poster: Assurance Cases for Scientific Computing Software",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ry3rQd3HdBw1019rH4hy0/5UCpbcH3AAnGNkxQVVCZVm.pdf",
              "extraLocations": [],
              "authorNames": "Spencer Smith (McMaster University), Mojdeh Sayari Nejad (McMaster University), Alan Wassyng (McMaster University)",
              "abstract": "Assurance cases, which provide an organized and explicit argument for correctness, should be used for certifying Scientific Computing Software (SCS), especially when the software impacts health and safety. Assurance cases have already been effectively used for safety cases for real time systems. Their advantages for SCS include engaging domain experts, producing only necessary documentation, and providing evidence that can potentially be verified/replicated by a third party. This paper illustrates assurance cases for SCS through the correctness case for 3dfim+, an existing medical imaging application. No errors were found in 3dfim+. However, the example still justifies the value of assurance cases, since the existing documentation is shown to have ambiguities and omissions, such as an incompletely defined ranking function and missing details on the coordinate system convention adopted. In addition, a potential concern for the software itself is identified: running the software does not produce any warning about the necessity of using data that matches the assumed parametric statistical model.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Assurance Cases for Scientific Computing Software 1521516440118 Spencer Smith McMaster University smiths@mcmaster.ca Mojdeh Sayari Nejad McMaster University sayarinm@mcmaster.ca Alan Wassyng McMaster University wassyng@mcmaster.ca assurance cases software quality software requirements specification medical imaging software Assurance cases, which provide an organized and explicit argument for correctness, should be used for certifying Scientific Computing Software (SCS), especially when the software impacts health and safety. Assurance cases have already been effectively used for safety cases for real time systems. Their advantages for SCS include engaging domain experts, producing only necessary documentation, and providing evidence that can potentially be verified/replicated by a third party. This paper illustrates assurance cases for SCS through the correctness case for 3dfim+, an existing medical imaging application. No errors were found in 3dfim+. However, the example still justifies the value of assurance cases, since the existing documentation is shown to have ambiguities and omissions, such as an incompletely defined ranking function and missing details on the coordinate system convention adopted. In addition, a potential concern for the software itself is identified: running the software does not produce any warning about the necessity of using data that matches the assumed parametric statistical model.",
              "pageNumber": 420,
              "isPageNumberRoman": false
            },
            {
              "id": "1oeb2WHhwsv30RFkKAjNLE",
              "type": "authorPaper",
              "text": "Poster: Grafter: Transplantation and Differential Testing for Clones",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Dcj5hI5ay5ogwHLf0wwb6/2bpb6bAzfOMffNyv2sJYlw.pdf",
              "extraLocations": [],
              "authorNames": "Tianyi Zhang (University of California), Miryung Kim (University of California)",
              "abstract": "Code clones are common in software. When applying similar edits to clones, developers often find it difficult to examine the runtime behavior of clones. The problem is exacerbated when some clones are tested, while their counterparts are not. To reuse tests for similar but not identical clones, Grafter transplants one clone to its counterpart by (1) identifying variations in identifier names, types, and method call targets, (2) resolving compilation errors caused by such variations through code transformation, and (3) inserting stub code to transfer input data and intermediate output values for examination. To help developers examine behavioral differences between clones, Grafter supports fine-grained differential testing at both the test outcome level and the internal program state level. Our evaluation shows that Grafter can successfully reuse tests and detect behavioral differences. The tool is available for download at http://web.cs.ucla.edu/~tianyi.zhang/grafter.html and the demo video is available at https://youtu.be/1iqAeuM8s3U.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Grafter: Transplantation and Differential Testing for Clones 1521483955761 Tianyi Zhang University of California tianyi.zhang@cs.ucla.edu Miryung Kim University of California miryung@cs.ucla.edu Code clones Software Transplantation Differential Testing Code clones are common in software. When applying similar edits to clones, developers often find it difficult to examine the runtime behavior of clones. The problem is exacerbated when some clones are tested, while their counterparts are not. To reuse tests for similar but not identical clones, Grafter transplants one clone to its counterpart by (1) identifying variations in identifier names, types, and method call targets, (2) resolving compilation errors caused by such variations through code transformation, and (3) inserting stub code to transfer input data and intermediate output values for examination. To help developers examine behavioral differences between clones, Grafter supports fine-grained differential testing at both the test outcome level and the internal program state level. Our evaluation shows that Grafter can successfully reuse tests and detect behavioral differences. The tool is available for download at http://web.cs.ucla.edu/~tianyi.zhang/grafter.html and the demo video is available at https://youtu.be/1iqAeuM8s3U.",
              "pageNumber": 422,
              "isPageNumberRoman": false
            },
            {
              "id": "5GgC6zHjV5USxCcfuNKEYb",
              "type": "authorPaper",
              "text": "Poster: Symbolic Path Cost Analysis for Side-Channel Detection",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qkGd3UA7CbCn9vt8iHqv0/572IaUvLUJjp18q2vinwmw.pdf",
              "extraLocations": [],
              "authorNames": "Tegan Brennan (University of California Santa Barbara), Seemanta Saha (University of California Santa Barbara), Tevfik Bultan (University of California Santa Barbara)",
              "abstract": "We present a static, scalable analysis technique for detecting side channels in software systems. Our method is motivated by the observation that a sizable class of side-channel vulnerabilities occur when the value of private data results in multiple distinct control flow paths with differentiable observables. Given a set of secret variables, a type of side channel, and a program, our goal is to detect the set of branch conditions responsible for potential side channels of the given type in the program, and generate a pair of witness paths in the control flow graph for the detected side channel. Our technique achieves this by analyzing the control flow graph of the program with respect to a cost model (such as time or memory usage), and identifies if a change in the secret value can cause a detectable change in the observed cost of the program behavior. It also generates a pair of witness paths in the control flow graph, differing only on the branch conditions influenced by the secret, and whose observable output under the given side channel differs by more than some user defined threshold. We implemented our approach in a prototype tool, CoCo-Channel (Compositional Constraint-based side Channel analyzer), for analyzing Java programs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Symbolic Path Cost Analysis for Side-Channel Detection 1521525701628 Tegan Brennan University of California Santa Barbara tegan@cs.ucsb.edu Seemanta Saha University of California Santa Barbara seemantasaha@cs.ucsb.edu Tevfik Bultan University of California Santa Barbara bultan@cs.ucsb.edu side channel analysis static analysis constraint solvers computer security program path analysis We present a static, scalable analysis technique for detecting side channels in software systems. Our method is motivated by the observation that a sizable class of side-channel vulnerabilities occur when the value of private data results in multiple distinct control flow paths with differentiable observables. Given a set of secret variables, a type of side channel, and a program, our goal is to detect the set of branch conditions responsible for potential side channels of the given type in the program, and generate a pair of witness paths in the control flow graph for the detected side channel. Our technique achieves this by analyzing the control flow graph of the program with respect to a cost model (such as time or memory usage), and identifies if a change in the secret value can cause a detectable change in the observed cost of the program behavior. It also generates a pair of witness paths in the control flow graph, differing only on the branch conditions influenced by the secret, and whose observable output under the given side channel differs by more than some user defined threshold. We implemented our approach in a prototype tool, CoCo-Channel (Compositional Constraint-based side Channel analyzer), for analyzing Java programs.",
              "pageNumber": 424,
              "isPageNumberRoman": false
            },
            {
              "id": "3ugiZPNJ3syJqdm6CpIfRY",
              "type": "authorPaper",
              "text": "Poster: Identifying Security Issues in Software Development: Are Keywords Enough?",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6gBAdmDKYhyHsm7KCt99cN/4hTlGNOOjkp6Hde2uwrpbn.pdf",
              "extraLocations": [],
              "authorNames": "Patrick Morrison (North Carolina State University), Tosin Daniel Oyetoyan (SINTEF Digital), Laurie Williams (North Carolina State University)",
              "abstract": "Identifying security issues before attackers do has become a critical concern for software development teams and software users. One approach to identifying security issues in software development artifacts is to use lists of security-related keywords to build classifiers for detecting security issues. However, generic keyword lists may miss project-specific vocabulary. The goal of this research is to support researchers and practitioners in identifying security issues in software development project artifacts by defining and evaluating a systematic scheme for identifying project-specific security vocabularies that can be used for keyword-based classification. We sampled and manually classified 5400 messages from the Apache Derby, Apache Camel, and Dolibarr projects to form an oracle. In addition, we collected each project's publicly disclosed vulnerability data from the CVE and mapped them to the project's dataset to create a CVE-labelled data. We extracted project-specific vocabulary from each project and built classifiers to predict security-related issues in both the oracle and CVE dataset. In our data, we found that the vocabularies of each project included project-specific terms in addition to generic security keywords. Classifiers based on the project-specific security vocabularies increased recall performance by at least double (at varying costs to precision) compared with the previous published keyword lists we evaluated.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Identifying Security Issues in Software Development: Are Keywords Enough? 1521450153574 Patrick Morrison North Carolina State University pjmorris@ncsu.edu Tosin Daniel Oyetoyan SINTEF Digital tosin.oyetoyan@sintef.no Laurie Williams North Carolina State University williams@csc.ncsu.edu security vocabulary classification model CVE prediction Identifying security issues before attackers do has become a critical concern for software development teams and software users. One approach to identifying security issues in software development artifacts is to use lists of security-related keywords to build classifiers for detecting security issues. However, generic keyword lists may miss project-specific vocabulary. The goal of this research is to support researchers and practitioners in identifying security issues in software development project artifacts by defining and evaluating a systematic scheme for identifying project-specific security vocabularies that can be used for keyword-based classification. We sampled and manually classified 5400 messages from the Apache Derby, Apache Camel, and Dolibarr projects to form an oracle. In addition, we collected each project's publicly disclosed vulnerability data from the CVE and mapped them to the project's dataset to create a CVE-labelled data. We extracted project-specific vocabulary from each project and built classifiers to predict security-related issues in both the oracle and CVE dataset. In our data, we found that the vocabularies of each project included project-specific terms in addition to generic security keywords. Classifiers based on the project-specific security vocabularies increased recall performance by at least double (at varying costs to precision) compared with the previous published keyword lists we evaluated.",
              "pageNumber": 426,
              "isPageNumberRoman": false
            },
            {
              "id": "5usRJNQDBUfNjjyNpuHUXD",
              "type": "authorPaper",
              "text": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf",
              "extraLocations": [],
              "authorNames": "Gábor Horváth (Eötvös Loránd University), Péter Szécsi (Eötvös Loránd University), Zoltán Gera (Eötvös Loránd University), Dániel Krupp (Ericsson Ltd.), Norbert Pataki (Eötvös Loránd University)",
              "abstract": "Static analysis is a great approach to find bugs and code smells. Some of the errors span across multiple translation units. Unfortunately, it is challenging to achieve cross translation unit analysis for C family languages. In this short paper, we describe a model and an implementation for cross translation unit (CTU) symbolic execution for C. We were able to extend the scope of the analysis without modifying any of the existing checks. The analysis is implemented in the open source Clang compiler. We also measured the performance of the approach and the quality of the reports. The implementation is already accepted into mainline Clang.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages 1521115919276 Gábor Horváth Eötvös Loránd University xazax@caesar.elte.hu Péter Szécsi Eötvös Loránd University ps95@caesar.elte.hu Zoltán Gera Eötvös Loránd University gerazo@caesar.elte.hu Dániel Krupp Ericsson Ltd. daniel.krupp@ericsson.com Norbert Pataki Eötvös Loránd University patakino@elte.hu static analysis symbolic execution cross translation unit Clang Static analysis is a great approach to find bugs and code smells. Some of the errors span across multiple translation units. Unfortunately, it is challenging to achieve cross translation unit analysis for C family languages. In this short paper, we describe a model and an implementation for cross translation unit (CTU) symbolic execution for C. We were able to extend the scope of the analysis without modifying any of the existing checks. The analysis is implemented in the open source Clang compiler. We also measured the performance of the approach and the quality of the reports. The implementation is already accepted into mainline Clang.",
              "pageNumber": 428,
              "isPageNumberRoman": false
            },
            {
              "id": "AEaFviW0w1kqJcElD7ZgW",
              "type": "authorPaper",
              "text": "Poster: Path-Based Function Embeddings",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/13uqQQomxpZIToZ2zI454A/4WnK3w1UjpFGbWZ1mk5omc.pdf",
              "extraLocations": [],
              "authorNames": "Daniel DeFreez (University of California), Aditya Thakur (University of California), Cindy Rubio-González (University of California)",
              "abstract": "Identifying relationships among program elements, such as functions, is useful for program understanding, debugging, and analysis. We present func2vec, an algorithm that uses static traces to embed functions in a vector space such that related functions are close together, even if they are semantically and syntactically dissimilar. We present applications of func2vec that aid program comprehension.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Path-Based Function Embeddings 1521500049086 Daniel DeFreez University of California dcdefreez@ucdavis.edu Aditya Thakur University of California avthakur@ucdavis.edu Cindy Rubio-González University of California crubio@ucdavis.edu Embeddings Program Comprehension Systems Software Identifying relationships among program elements, such as functions, is useful for program understanding, debugging, and analysis. We present func2vec, an algorithm that uses static traces to embed functions in a vector space such that related functions are close together, even if they are semantically and syntactically dissimilar. We present applications of func2vec that aid program comprehension.",
              "pageNumber": 430,
              "isPageNumberRoman": false
            },
            {
              "id": "1JgsfdBTu4ciXyirXNpZkX",
              "type": "authorPaper",
              "text": "Poster: Multimorphic Testing",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/uzXACjp9SwFasi2pVULVp/4Acd9HUX23SsFtwgf1MOHh.pdf",
              "extraLocations": [],
              "authorNames": "Paul Temple (Univ Rennes), Mathieu Acher (Univ Rennes), Jean-Marc Jézéquel (Univ Rennes)",
              "abstract": "The functional correctness of a software application is, of course, a prime concern, but other issues such as its execution time, precision, or energy consumption might also be important in some contexts. Systematically testing these quantitative properties is still extremely difficult, in particular, because there exists no method to tell the developer whether such a test set is \"good enough\" or even whether a test set is better than another one. This paper proposes a new method, called Multimorphic testing, to assess the relative effectiveness of a test suite for revealing performance variations of a software system. By analogy with mutation testing, our core idea is to vary software parameters, and to check whether it makes any difference on the outcome of the tests: i.e. are some tests able to \"kill\" bad morphs (configurations)? Our method can be used to evaluate the quality of a test suite with respect to a quantitative property of interest, such as execution time or computation accuracy.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Multimorphic Testing 1520863661322 Paul Temple Univ Rennes paul.temple@irisa.fr Mathieu Acher Univ Rennes mathieu.acher@irisa.fr Jean-Marc Jézéquel Univ Rennes jean-marc.jezequel@irisa.fr variability configuration software product line mutation testing metamorphic testing validation verification testing The functional correctness of a software application is, of course, a prime concern, but other issues such as its execution time, precision, or energy consumption might also be important in some contexts. Systematically testing these quantitative properties is still extremely difficult, in particular, because there exists no method to tell the developer whether such a test set is \"good enough\" or even whether a test set is better than another one. This paper proposes a new method, called Multimorphic testing, to assess the relative effectiveness of a test suite for revealing performance variations of a software system. By analogy with mutation testing, our core idea is to vary software parameters, and to check whether it makes any difference on the outcome of the tests: i.e. are some tests able to \"kill\" bad morphs (configurations)? Our method can be used to evaluate the quality of a test suite with respect to a quantitative property of interest, such as execution time or computation accuracy.",
              "pageNumber": 432,
              "isPageNumberRoman": false
            },
            {
              "id": "27RONLNT0N6l7YXUGjSisN",
              "type": "authorPaper",
              "text": "Poster: Property Specification Patterns for Robotic Missions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf",
              "extraLocations": [],
              "authorNames": "Claudio Menghi (Chalmers ), Christos Tsigkanos (Politecnico di Milano), Thorsten Berger (Chalmers ), Patrizio Pelliccione (Chalmers ), Carlo Ghezzi (Politecnico di Milano)",
              "abstract": "Engineering dependable software for mobile robots is becoming increasingly important. A core asset in engineering mobile robots is the mission specification—a formal description of the goals that mobile robots shall achieve. Such mission specifications are used, among others, to synthesize, verify, simulate, or guide the engineering of robot software. Development of precise mission specifications is challenging. Engineers need to translate the mission requirements into specification structures expressed in a logical language—a laborious and error-prone task. To mitigate this problem, we present a catalog of mission specification patterns for mobile robots. Our focus is on robot movement, one of the most prominent and recurrent specification problems for mobile robots. Our catalog maps common mission specification problems to recurrent solutions, which we provide as templates that can be used by engineers. The patterns are the result of analyzing missions extracted from the literature. For each pattern, we describe usage intent, known uses, relationships to other patterns, and—most importantly—a template representing the solution as a logical formula in temporal logic. Our specification patterns constitute reusable building blocks that can be used by engineers to create complex mission specifications while reducing specification mistakes. We believe that our patterns support researchers working on tool support and techniques to synthesize and verify mission specifications, and language designers creating rich domain-specific languages for mobile robots, incorporating our patterns as language concepts.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Property Specification Patterns for Robotic Missions 1521391386204 Claudio Menghi Chalmers claudio.menghi@gu.se Christos Tsigkanos Politecnico di Milano christos.tsigkanos@polimi.it Thorsten Berger Chalmers thorsten.berger@gu.se Patrizio Pelliccione Chalmers patrizio.pelliccione@cse.gu.se Carlo Ghezzi Politecnico di Milano carlo.ghezzi@polimi.it mission specification pattern catalog robot control model driven engineering Engineering dependable software for mobile robots is becoming increasingly important. A core asset in engineering mobile robots is the mission specification—a formal description of the goals that mobile robots shall achieve. Such mission specifications are used, among others, to synthesize, verify, simulate, or guide the engineering of robot software. Development of precise mission specifications is challenging. Engineers need to translate the mission requirements into specification structures expressed in a logical language—a laborious and error-prone task. To mitigate this problem, we present a catalog of mission specification patterns for mobile robots. Our focus is on robot movement, one of the most prominent and recurrent specification problems for mobile robots. Our catalog maps common mission specification problems to recurrent solutions, which we provide as templates that can be used by engineers. The patterns are the result of analyzing missions extracted from the literature. For each pattern, we describe usage intent, known uses, relationships to other patterns, and—most importantly—a template representing the solution as a logical formula in temporal logic. Our specification patterns constitute reusable building blocks that can be used by engineers to create complex mission specifications while reducing specification mistakes. We believe that our patterns support researchers working on tool support and techniques to synthesize and verify mission specifications, and language designers creating rich domain-specific languages for mobile robots, incorporating our patterns as language concepts.",
              "pageNumber": 434,
              "isPageNumberRoman": false
            },
            {
              "id": "2g0Om0Wpxv5LymeCLMVQ8K",
              "type": "authorPaper",
              "text": "Poster: Autotuning PostgreSQL: A Blueprint for Successful Autotuning of Real-World Applications",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kXPYWE3EQc7SeJd3lthrV/5kU2UcOItB1UnYsqHiveS7.pdf",
              "extraLocations": [],
              "authorNames": "Thomas Karcher (Karlsruhe Institute of Technology), Mathias Landhäußer (thingsTHINKING GmbH)",
              "abstract": "Autotuning is a technique for optimizing the performance of sequential and parallel applications. We explore the problem of successfully applying on-line autotuning to real-world applications. We tune PostgreSQL, an open-source database server software, by optimizing tuning parameters that affect table scans. We evaluate the effects on the performance using the TPC-H benchmark and achieve speedups up to 3.9. A video subsuming the process is available at https://dx.doi.org/10.5445/DIVA/2018-192.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Autotuning PostgreSQL: A Blueprint for Successful Autotuning of Real-World Applications 1521147636282 Thomas Karcher Karlsruhe Institute of Technology karcher@ira.uka.de Mathias Landhäußer thingsTHINKING GmbH mathias@thingsthinking.net On-line autotuning database On-line autotuning database PostgreSQL heuristic search-based run-time optimization parameter tuning heuristic search based run time optimization parameter tuning Autotuning is a technique for optimizing the performance of sequential and parallel applications. We explore the problem of successfully applying on-line autotuning to real-world applications. We tune PostgreSQL, an open-source database server software, by optimizing tuning parameters that affect table scans. We evaluate the effects on the performance using the TPC-H benchmark and achieve speedups up to 3.9. A video subsuming the process is available at https://dx.doi.org/10.5445/DIVA/2018-192.",
              "pageNumber": 436,
              "isPageNumberRoman": false
            },
            {
              "id": "4kav8asDBEQmZsTYu0gqR",
              "type": "authorPaper",
              "text": "Poster: Towards Multi-robot Applications Planning Under Uncertainty",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5OMIq2Xre09PiJrZEN6sZ1/1qIbZQKf2SutDZRTgOpDaJ.pdf",
              "extraLocations": [],
              "authorNames": "Claudio Menghi (Chalmers ), Sergio García (Chalmers ), Patrizio Pelliccione (Chalmers ), Jana Tumova (KTH Royal Institute of Technology)",
              "abstract": "Novel robotic applications are no longer based on single robots. They rather require teams of robots that collaborate and interact to perform a desired mission. They must also be used in contexts in which only partial knowledge about the robots and their environment is present. To ensure mission achievement, robotic applications require the usage of planners that compute the set of actions the robots must perform. Current planning techniques are often based on centralized solutions and hence they do not scale when teams of robots are considered, they consider rather simple missions, and they do not work in partially known environments. To address these challenges, we present a planning solution that decomposes the team of robots into subclasses, considers complex high-level missions given in temporal logic, and at the same time works when only partial knowledge of the environment is available.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Towards Multi-robot Applications Planning Under Uncertainty 1521390363464 Claudio Menghi Chalmers claudio.menghi@gu.se Sergio García Chalmers sergio.garcia@gu.se Patrizio Pelliccione Chalmers patrizio.pelliccione@gu.se Jana Tumova KTH Royal Institute of Technology tumova@kth.se planning with uncertainty planning with missing information uncertainty partial models multi robot planning Novel robotic applications are no longer based on single robots. They rather require teams of robots that collaborate and interact to perform a desired mission. They must also be used in contexts in which only partial knowledge about the robots and their environment is present. To ensure mission achievement, robotic applications require the usage of planners that compute the set of actions the robots must perform. Current planning techniques are often based on centralized solutions and hence they do not scale when teams of robots are considered, they consider rather simple missions, and they do not work in partially known environments. To address these challenges, we present a planning solution that decomposes the team of robots into subclasses, considers complex high-level missions given in temporal logic, and at the same time works when only partial knowledge of the environment is available.",
              "pageNumber": 438,
              "isPageNumberRoman": false
            },
            {
              "id": "2CN71HeqUWidl6eN3z1imG",
              "type": "authorPaper",
              "text": "Poster: Companies' Domination in FLOSS Development - An Empirical Study of OpenStack",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qzz37M5aaQHMR84AdL5Ao/6BpbDRR3MKYdAc0gfHratN.pdf",
              "extraLocations": [],
              "authorNames": "Yuxia Zhang (Peking University), Xin Tan (Peking University), Minghui Zhou (Peking University), Zhi Jin (Peking University)",
              "abstract": "Commercial participation continues to grow in free/libre open source software (FLOSS) projects. Companies may take the lead in developing FLOSS rather than volunteers, which may change the nature of FLOSS development and affect the FLOSS community. Despite substantial research on commercial participation, it remains unclear whether companies dominate FLOSS development, to what extent the domination exists and whether the domination affects the FLOSS community. We therefore conduct an empirical study on OpenStack with a focus on its four main projects (Nova, Swift, Glance, and Neutron) to explore the commercial domination. We employ the development data of the four projects to quantify companies' contributions from two aspects: the developers they provided and the commits made by those developers. We find that there are nearly half of the versions, in which the four projects are dominated by one company. The dominant companies change occasionally, but the number never exceeds three for any project. We found that the commercial domination is negatively associated with the participation of companies and contributors, while it is positively associated with the productivity of contributors and the quality of issue reports. Our study contributes to the understanding of commercial domination and its impact on FLOSS community. Our findings reveal the adverse consequences brought by commercial domination in addition to its benefits.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Companies' Domination in FLOSS Development - An Empirical Study of OpenStack 1521453767329 Yuxia Zhang Peking University yuxiaz@pku.edu.cn Xin Tan Peking University tanxin16@pku.edu.cn Minghui Zhou Peking University zhmh@pku.edu.cn Zhi Jin Peking University zhijin@pku.edu.cn FLOSS project commercial participation companies' domination Commercial participation continues to grow in free/libre open source software (FLOSS) projects. Companies may take the lead in developing FLOSS rather than volunteers, which may change the nature of FLOSS development and affect the FLOSS community. Despite substantial research on commercial participation, it remains unclear whether companies dominate FLOSS development, to what extent the domination exists and whether the domination affects the FLOSS community. We therefore conduct an empirical study on OpenStack with a focus on its four main projects (Nova, Swift, Glance, and Neutron) to explore the commercial domination. We employ the development data of the four projects to quantify companies' contributions from two aspects: the developers they provided and the commits made by those developers. We find that there are nearly half of the versions, in which the four projects are dominated by one company. The dominant companies change occasionally, but the number never exceeds three for any project. We found that the commercial domination is negatively associated with the participation of companies and contributors, while it is positively associated with the productivity of contributors and the quality of issue reports. Our study contributes to the understanding of commercial domination and its impact on FLOSS community. Our findings reveal the adverse consequences brought by commercial domination in addition to its benefits.",
              "pageNumber": 440,
              "isPageNumberRoman": false
            },
            {
              "id": "ujEZZLyXbO89GcoxS2qlU",
              "type": "authorPaper",
              "text": "Poster: Reordering Tests for Faster Test Suite Execution",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7oVX1R77LaoVJNTHrsYtBM/3tK6Om3mgGpegy1wHzDDa6.pdf",
              "extraLocations": [],
              "authorNames": "Panagiotis Stratis (University of Edinburgh), Ajitha Rajan (University of Edinburgh)",
              "abstract": "As software takes on more responsibility, it gets increasingly complex, requiring an extremely large number of tests for effective validation. Executing these large test suites is expensive, both in terms of time and energy. Cache misses are a significant contributing factor to execution time of software. In this paper, we propose an approach that helps order test executions in a test suite in such a way that instruction cache misses are reduced, and thereby execution time. We conduct an empirical evaluation with 20 subject programs and test suites from the SIR repository, EEMBC suite and LLVM Symbolizer, comparing execution times and cache misses with test orderings maximising instruction locality versus a traditional ordering maximising coverage, as well as random permutations. Performance gains were considerable for programs and test suites where the average number of different instructions executed between tests was high. We achieved an average execution speedup of 6.83% and a maximum execution speedup of 17% over subject programs with differing control flow between test executions.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Reordering Tests for Faster Test Suite Execution 1521527511849 Panagiotis Stratis University of Edinburgh s1329012@sms.ed.ac.uk Ajitha Rajan University of Edinburgh arajan@staffmail.ed.ac.uk Test execution cache locality test distance nearest neighbour As software takes on more responsibility, it gets increasingly complex, requiring an extremely large number of tests for effective validation. Executing these large test suites is expensive, both in terms of time and energy. Cache misses are a significant contributing factor to execution time of software. In this paper, we propose an approach that helps order test executions in a test suite in such a way that instruction cache misses are reduced, and thereby execution time. We conduct an empirical evaluation with 20 subject programs and test suites from the SIR repository, EEMBC suite and LLVM Symbolizer, comparing execution times and cache misses with test orderings maximising instruction locality versus a traditional ordering maximising coverage, as well as random permutations. Performance gains were considerable for programs and test suites where the average number of different instructions executed between tests was high. We achieved an average execution speedup of 6.83% and a maximum execution speedup of 17% over subject programs with differing control flow between test executions.",
              "pageNumber": 442,
              "isPageNumberRoman": false
            },
            {
              "id": "1Hog8sxOX1lbwVmjeBJ7WD",
              "type": "authorPaper",
              "text": "Poster: Answering the Requirements Traceability Questions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54xELw09vUNSoYFjh1AziH/3vdJIWxnVZhNTP9QUA8bWD.pdf",
              "extraLocations": [],
              "authorNames": "Arushi Gupta (University of Cincinnati), Wentao Wang (University of Cincinnati), Nan Niu (University of Cincinnati), Juha Savolainen (Danfoss)",
              "abstract": "To understand requirements traceability in practice, we present a preliminary study of identifying questions from requirements repositories and examining their answering status. Investigating four open-source projects results in 733 requirements questions, among which 43% were answered successfully, 35% were answered unsuccessfully, and 22% were not answered at all. We evaluate the accuracy of using a state-of-the-art natural language processing tool to identify the requirements questions and illuminate automated ways to classify their answering status.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: Answering the Requirements Traceability Questions 1520816466451 Arushi Gupta University of Cincinnati gupta2ai@mail.uc.edu Wentao Wang University of Cincinnati wang2wt@mail.uc.edu Nan Niu University of Cincinnati nan.niu@uc.edu Juha Savolainen Danfoss juhaerik.savolainen@danfoss.com Traceability requirements questions answering status To understand requirements traceability in practice, we present a preliminary study of identifying questions from requirements repositories and examining their answering status. Investigating four open-source projects results in 733 requirements questions, among which 43% were answered successfully, 35% were answered unsuccessfully, and 22% were not answered at all. We evaluate the accuracy of using a state-of-the-art natural language processing tool to identify the requirements questions and illuminate automated ways to classify their answering status.",
              "pageNumber": 444,
              "isPageNumberRoman": false
            },
            {
              "id": "5Qwp0apZBu2oeX7RFHgLcb",
              "type": "authorPaper",
              "text": "Poster: BugZoo – A Platform for Studying Software Bugs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45zwa1bRIOh1A6fI6pqtjD/6r2CoIFj6WjZXHtWAgT3hP.pdf",
              "extraLocations": [],
              "authorNames": "Christopher Steven Timperley (Carnegie Mellon University), Susan Stepney (University of York), Claire Le  Goues (Carnegie Mellon University)",
              "abstract": "Proposing a new method for automatically detecting, localising, or repairing software faults requires a fair, reproducible evaluation of the effectiveness of the method relative to existing alternatives. Measuring effectiveness requires both an indicative set of bugs, and a mechanism for reliably reproducing and interacting with those bugs. We present BugZoo: a decentralised platform for distributing, reproducing, and interacting with historical software bugs. connects existing datasets and tools to developers and researchers, and provides a controlled environment for conducting experiments. To ensure reproducibility, extensibility, and usability, BugZoo uses Docker containers to package, deliver, and interact with bugs and tools. Adding BugZoo support to existing datasets and tools is simple and non-invasive, requiring only a small number of supplementary files. BugZoo is open-source and available to download at: https://github.com/squaresLab/BugZoo",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Poster: BugZoo – A Platform for Studying Software Bugs 1521504059946 Christopher Steven Timperley Carnegie Mellon University ctimperley@cmu.edu Susan Stepney University of York susan.stepney@york.ac.uk Claire Le Goues Carnegie Mellon University clegoues@cs.cmu.edu Docker real bugs bug reproduction bug framework software bugs BugZoo ManyBugs GenProg open science Proposing a new method for automatically detecting, localising, or repairing software faults requires a fair, reproducible evaluation of the effectiveness of the method relative to existing alternatives. Measuring effectiveness requires both an indicative set of bugs, and a mechanism for reliably reproducing and interacting with those bugs. We present BugZoo: a decentralised platform for distributing, reproducing, and interacting with historical software bugs. connects existing datasets and tools to developers and researchers, and provides a controlled environment for conducting experiments. To ensure reproducibility, extensibility, and usability, BugZoo uses Docker containers to package, deliver, and interact with bugs and tools. Adding BugZoo support to existing datasets and tools is simple and non-invasive, requiring only a small number of supplementary files. BugZoo is open-source and available to download at: https://github.com/squaresLab/BugZoo",
              "pageNumber": 446,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Doctoral Symposium",
          "lineItems": [
            {
              "id": "PD1jXB63vgMdJxJYCoiik",
              "type": "authorPaper",
              "text": "An Approach to Engineer and Realize Emergent Configurations in the Internet of Things",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2B0sfqIDyxpMbt669xKL1h/1xasZ4y5RwS7fT5k0X7je5.pdf",
              "extraLocations": [],
              "authorNames": "Fahed Alkhabbas (Malmö University)",
              "abstract": "The Internet of Things (IoT) is a fast propagating technology that is expected to emerge in almost all aspects of our daily life. The IoT environment is well known for being dynamic and uncertain. Connected devices, and their software, can be discovered at runtime and might also become suddenly unavailable. The involvement of the human in the loop complicates more the scene. People's activities are stochastic and their needs are not always predictable. Therefore, coping with the dynamic IoT environment should be considered as a first class requirement when engineering IoT systems. A useful concept for supporting this effort is Emergent Configurations (ECs). An EC consists of a dynamic set of devices that cooperate temporarily to achieve a user goal. This PhD work aims to use the concept of ECs as a basis for a novel approach for realizing IoT systems. More specifically, this thesis aims at: (i) producing characterization models for IoT systems and ECs; (ii) proposing a concrete architecture and an approach for realizing ECs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 An Approach to Engineer and Realize Emergent Configurations in the Internet of Things 1518469090378 Fahed Alkhabbas Malmö University fahed.alkhabbas@mau.se Internet of Things Emergent Configurations Software Architecture Self-adaptation The Internet of Things (IoT) is a fast propagating technology that is expected to emerge in almost all aspects of our daily life. The IoT environment is well known for being dynamic and uncertain. Connected devices, and their software, can be discovered at runtime and might also become suddenly unavailable. The involvement of the human in the loop complicates more the scene. People's activities are stochastic and their needs are not always predictable. Therefore, coping with the dynamic IoT environment should be considered as a first class requirement when engineering IoT systems. A useful concept for supporting this effort is Emergent Configurations (ECs). An EC consists of a dynamic set of devices that cooperate temporarily to achieve a user goal. This PhD work aims to use the concept of ECs as a basis for a novel approach for realizing IoT systems. More specifically, this thesis aims at: (i) producing characterization models for IoT systems and ECs; (ii) proposing a concrete architecture and an approach for realizing ECs.",
              "pageNumber": 448,
              "isPageNumberRoman": false
            },
            {
              "id": "4jyB3lrlhfkgMVFShWWxEj",
              "type": "authorPaper",
              "text": "Effort-Oriented Methods and Tools for Software Development and Maintenance for Mobile Apps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3mvwFyGcBppykuARDF0iq0/7xWee7ahxHpkzGo5w3QJnO.pdf",
              "extraLocations": [],
              "authorNames": "Gemma Catolino (University of Salerno)",
              "abstract": "The present research project aims to propose methods and tools for mobile applications development and maintenance that rely on effort information (estimations). Specifically, we will focus on two main challenges to overcome existing work: (i) conceiving effort estimation approaches that can be applied earlier in the development cycle and evolve through the development process (ii) prioritizing development and maintenance tasks by relying on effort estimation information.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Effort-Oriented Methods and Tools for Software Development and Maintenance for Mobile Apps 1518513908734 Gemma Catolino University of Salerno gcatolino@unisa.it Effort Estimation Maintenance and Evolution Mobile Apps The present research project aims to propose methods and tools for mobile applications development and maintenance that rely on effort information (estimations). Specifically, we will focus on two main challenges to overcome existing work: (i) conceiving effort estimation approaches that can be applied earlier in the development cycle and evolve through the development process (ii) prioritizing development and maintenance tasks by relying on effort estimation information.",
              "pageNumber": 450,
              "isPageNumberRoman": false
            },
            {
              "id": "30TrlUJrh6qcMLFuLcNbPG",
              "type": "authorPaper",
              "text": "Understanding and Improving Cyber-Physical System Models and Development Tools",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JVZTMBQ0Moq4XEPHzCVVd/BO1pk4MXqVy481gt4VcZn.pdf",
              "extraLocations": [],
              "authorNames": "Shafiul Azam Chowdhury (The University of Texas at Arlington)",
              "abstract": "Recent years have seen an increasing interest in understanding and analyzing cyber-physical system (CPS) models and their development tools. Existing work in this area is limited by the lack of an open corpus of CPS models, which we aim to address by building the by-far largest curated corpus of CPS artifacts. Next, to address the safety-critical aspect of CPS development tools, we discuss the design and evaluation of the very first differential testing framework for arbitrary CPS tool chain. We identify challenges unique to commercial CPS tool chain testing and present a tool implementation which has already found 9 new, confirmed bugs in Simulink, the most widely used CPS development tool.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Understanding and Improving Cyber-Physical System Models and Development Tools 1518353641174 Shafiul Azam Chowdhury The University of Texas at Arlington shafiulazam.chowdhury@mavs.uta.edu cyber-physical system differential testing tool chain bugs Simulink corpus Recent years have seen an increasing interest in understanding and analyzing cyber-physical system (CPS) models and their development tools. Existing work in this area is limited by the lack of an open corpus of CPS models, which we aim to address by building the by-far largest curated corpus of CPS artifacts. Next, to address the safety-critical aspect of CPS development tools, we discuss the design and evaluation of the very first differential testing framework for arbitrary CPS tool chain. We identify challenges unique to commercial CPS tool chain testing and present a tool implementation which has already found 9 new, confirmed bugs in Simulink, the most widely used CPS development tool.",
              "pageNumber": 452,
              "isPageNumberRoman": false
            },
            {
              "id": "6WCs1zBXQOOtWk5Z5v0uTP",
              "type": "authorPaper",
              "text": "Effective Engineering of Multi-robot Software Applications",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3X5JM95s9XLfHIuYNyxBlw/2whdP4qVU48MOqrNa2j6WK.pdf",
              "extraLocations": [],
              "authorNames": "Sergio García (University of Gothenburg)",
              "abstract": "The number and complexity of robotic applications that are being developed both in industry and academia are increasing continuously. However, those applications are not engineered through well-defined system engineering processes, and this leads to time-consuming issues. Besides, robot applications are increasingly based on teams of autonomous robots that work collaboratively with other robots and/or humans to accomplish complex missions. This further increases the complexity of the controlling application. In this Ph.D. project, we aim to bring software engineering best practices to the robotic domain in order to produce processes, architectural models, and methods to be used by developers in order to tackle common challenges such as reusability, variability, and modularity. The goal is to reduce development time and effort, thereby reducing the time-to-market of robotic applications. To validate our results we make use of different models of real robots in real-world scenarios.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Effective Engineering of Multi-robot Software Applications 1518424299686 Sergio García University of Gothenburg sergio.garcia@gu.se Robotics Software Engineering Software Architecture Multi robot The number and complexity of robotic applications that are being developed both in industry and academia are increasing continuously. However, those applications are not engineered through well-defined system engineering processes, and this leads to time-consuming issues. Besides, robot applications are increasingly based on teams of autonomous robots that work collaboratively with other robots and/or humans to accomplish complex missions. This further increases the complexity of the controlling application. In this Ph.D. project, we aim to bring software engineering best practices to the robotic domain in order to produce processes, architectural models, and methods to be used by developers in order to tackle common challenges such as reusability, variability, and modularity. The goal is to reduce development time and effort, thereby reducing the time-to-market of robotic applications. To validate our results we make use of different models of real robots in real-world scenarios.",
              "pageNumber": 454,
              "isPageNumberRoman": false
            },
            {
              "id": "6wviQaqGSqHG0inxuQQ0NI",
              "type": "authorPaper",
              "text": "Automated Migration Support for Software Product Line Co-evolution",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4CqA1ySu5pLzpR0zG80jCO/3QaPR5SUOtbuxB6z0TOK3S.pdf",
              "extraLocations": [],
              "authorNames": "Lea Gerling (Stiftung Universität Hildesheim)",
              "abstract": "The idea of automated migration support arises from the problems observed in practice and the missing solutions for software product line (SPL) co-evolution support. In practice it is common to realize new functionality via unsystematic code cloning: A product is separated from its related SPL and then modified. When a separated product and the SPL evolve over time, this is called SPL co-evolution. During this process, developers have to manually migrate, for example, features or bugfixes between the SPL and the product. Currently, there exist only partially automated solutions for this use case. The proposed approach is the first, which aims at using semantic merging to migrate arbitrary semantic units, like features or bugfixes, between a SPL and separated products.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Automated Migration Support for Software Product Line Co-evolution 1518364231768 Lea Gerling Stiftung Universität Hildesheim gerling@sse.uni-hildesheim.de Software product line co-evolution feature migration evolution support semantic merging The idea of automated migration support arises from the problems observed in practice and the missing solutions for software product line (SPL) co-evolution support. In practice it is common to realize new functionality via unsystematic code cloning: A product is separated from its related SPL and then modified. When a separated product and the SPL evolve over time, this is called SPL co-evolution. During this process, developers have to manually migrate, for example, features or bugfixes between the SPL and the product. Currently, there exist only partially automated solutions for this use case. The proposed approach is the first, which aims at using semantic merging to migrate arbitrary semantic units, like features or bugfixes, between a SPL and separated products.",
              "pageNumber": 456,
              "isPageNumberRoman": false
            },
            {
              "id": "5Z8RTFBh7Xv4ngLEWFmsgj",
              "type": "authorPaper",
              "text": "Constructing Supply Chains in Open Source Software",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/237l8BpJ5Mk8si9rFnzmfM/33F0J8UY3SH7YZCjfED42Y.pdf",
              "extraLocations": [],
              "authorNames": "Yuxing Ma (University of Tennessee)",
              "abstract": "The supply chain is an extremely successful way to cope with the risk posed by distributed decision making in product sourcing and distribution. While open source software has similarly distributed decision making and involves code and information flows similar to those in ordinary supply chains, the actual networks necessary to quantify and communicate risks in software supply chains have not been constructed on large scale. This work proposes to close this gap by measuring dependency, code reuse, and knowledge flow networks in open source software. We have done preliminary work by developing suitable tools and methods that rely on public version control data to measure and comparing these networks for R language and emberjs packages. We propose ways to calculate the three networks for the entirety of public software, evaluate their accuracy, and to provide public infrastructure to build risk assessment and mitigation tools for various individual and organizational participants in open sources software. We hope that this infrastructure will contribute to more predictable experience with OSS and lead to its even wider adoption.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Constructing Supply Chains in Open Source Software 1518394416117 Yuxing Ma University of Tennessee myxlvxm@gmail.com software supply chain open source knowledge flow risk management The supply chain is an extremely successful way to cope with the risk posed by distributed decision making in product sourcing and distribution. While open source software has similarly distributed decision making and involves code and information flows similar to those in ordinary supply chains, the actual networks necessary to quantify and communicate risks in software supply chains have not been constructed on large scale. This work proposes to close this gap by measuring dependency, code reuse, and knowledge flow networks in open source software. We have done preliminary work by developing suitable tools and methods that rely on public version control data to measure and comparing these networks for R language and emberjs packages. We propose ways to calculate the three networks for the entirety of public software, evaluate their accuracy, and to provide public infrastructure to build risk assessment and mitigation tools for various individual and organizational participants in open sources software. We hope that this infrastructure will contribute to more predictable experience with OSS and lead to its even wider adoption.",
              "pageNumber": 458,
              "isPageNumberRoman": false
            },
            {
              "id": "5H8ZWt9Uu3rqoj44d9m5Ye",
              "type": "authorPaper",
              "text": "The Relationship between Personality and Value-Based Decision-Making",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4kVeFAH3CN7teUDfgXVWB6/728jptONMstNKZFbgqiYsa.pdf",
              "extraLocations": [],
              "authorNames": "Fabiana Freitas Mendes (University of Oulu)",
              "abstract": "Within the context of software engineering, many decisions take place and such decisions should employ value propositions that focus on short as well as long-term goals. In 2003, Boehm coined the term Value-Based Software Engineering (VBSE), which entails the change from a value-neutral to a value-based approach. VBSE argues that decisions should be based on all key stakeholders' value propositions, and to balance both reach the short as well as long-term goal(s) the ones. This paper details a PhD research plan that aims to study the relationship between personality and decision-making within the context of VBSE. The research focuses on group decision-making, considering three aspects: the interaction among decision-makers, their perception of the decision value and their personality traits. The research methodology will be experiment which will revolve around a hypothetical software development project and some decisions that need to be made, for example, the features to be included and the priority of each one. The contribution from a theoretical perspective is to understand the relationship among three main aspects: personality traits, decision-making process, and decision value. From practitioners' perspective, the contribution is to provide help on improving software project decision-making.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 The Relationship between Personality and Value-Based Decision-Making 1518457813455 Fabiana Freitas Mendes University of Oulu fabianamendes@unb.br Value Based Software Engineering Personality Decision Making Within the context of software engineering, many decisions take place and such decisions should employ value propositions that focus on short as well as long-term goals. In 2003, Boehm coined the term Value-Based Software Engineering (VBSE), which entails the change from a value-neutral to a value-based approach. VBSE argues that decisions should be based on all key stakeholders' value propositions, and to balance both reach the short as well as long-term goal(s) the ones. This paper details a PhD research plan that aims to study the relationship between personality and decision-making within the context of VBSE. The research focuses on group decision-making, considering three aspects: the interaction among decision-makers, their perception of the decision value and their personality traits. The research methodology will be experiment which will revolve around a hypothetical software development project and some decisions that need to be made, for example, the features to be included and the priority of each one. The contribution from a theoretical perspective is to understand the relationship among three main aspects: personality traits, decision-making process, and decision value. From practitioners' perspective, the contribution is to provide help on improving software project decision-making.",
              "pageNumber": 460,
              "isPageNumberRoman": false
            },
            {
              "id": "2k0OuNRhSm2b3ww3Q7mVYs",
              "type": "authorPaper",
              "text": "IoT-Based Urban Security Models",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6YXYYzNnctK574hnuer103/3W8gSBvWz8G90IbmMvAMw4.pdf",
              "extraLocations": [],
              "authorNames": "Mahyar Tourchi Moghaddam (University of L'Aquila)",
              "abstract": "The era of Cyber-Physical Systems (CPS) and IoT gives rise to the necessity of multi-proficiency in software, hardware, and the Cyber-Physical Space (CPSp) wherein the IoT components are deployed. Focusing on software engineering aspects, this research proposes a model-driven engineering approach to engineer CPS and model pedestrians flow. To this end, design-time decisions and run-time data ought to be fused to improve the efficiency of crowd monitoring and emergency handling. Moreover, the research aims at building some mathematical models applicable as the core of the system controller to facilitate optimum route selection, crowd movement prediction, and hazard diffusion detection; while considers the architectural characteristics of the complex area to be evacuated.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 IoT-Based Urban Security Models 1518458631583 Mahyar Tourchi Moghaddam University of L'Aquila mahyar.tourchimoghaddam@graduate.univaq.it Cyber-Physical Systems Urban Security IoT Network Flow BN The era of Cyber-Physical Systems (CPS) and IoT gives rise to the necessity of multi-proficiency in software, hardware, and the Cyber-Physical Space (CPSp) wherein the IoT components are deployed. Focusing on software engineering aspects, this research proposes a model-driven engineering approach to engineer CPS and model pedestrians flow. To this end, design-time decisions and run-time data ought to be fused to improve the efficiency of crowd monitoring and emergency handling. Moreover, the research aims at building some mathematical models applicable as the core of the system controller to facilitate optimum route selection, crowd movement prediction, and hazard diffusion detection; while considers the architectural characteristics of the complex area to be evacuated.",
              "pageNumber": 462,
              "isPageNumberRoman": false
            },
            {
              "id": "4z2MwkCu5jvqfC8QdTUPIJ",
              "type": "authorPaper",
              "text": "Assisted Discovery of Software Vulnerabilities",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6CuAT993NY8oMGLP3ilI8g/4P6xSdtDZgs45l6Ma2p3rZ.pdf",
              "extraLocations": [],
              "authorNames": "Nuthan Munaiah (Rochester Institute of Technology)",
              "abstract": "As more aspects of our daily lives rely on technology, the software that enables the technology must be secure. Developers rely on practices such as threat modeling, static and dynamic analyses, code review, and fuzz and penetration testing to engineer secure software. These practices, while effective at identifying vulnerabilities in software, are limited in their ability to describe the potential reasons for the existence of vulnerabilities. In order to overcome this limitation, researchers have proposed empirically validated metrics to identify factors that may have led to the introduction of vulnerabilities in the past. Developers must be made aware of these factors so that they can proactively consider the security implications of each line of code that they contribute. The goal of our research is to assist developers in engineering secure software by providing a technique that generates scientific, interpretable, and actionable feedback on security as the software evolves. In this paper, we provide an overview of our proposed approach to accomplish this research goal through a series of three research studies in which we (1) systematize the knowledge on vulnerability discovery metrics, (2) leverage the metrics to generate feedback on security, and (3) implement a framework for providing automatically generated feedback on security using code reviews as a medium.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Assisted Discovery of Software Vulnerabilities 1518031230399 Nuthan Munaiah Rochester Institute of Technology nm6061@rit.edu vulnerability metrics feedback As more aspects of our daily lives rely on technology, the software that enables the technology must be secure. Developers rely on practices such as threat modeling, static and dynamic analyses, code review, and fuzz and penetration testing to engineer secure software. These practices, while effective at identifying vulnerabilities in software, are limited in their ability to describe the potential reasons for the existence of vulnerabilities. In order to overcome this limitation, researchers have proposed empirically validated metrics to identify factors that may have led to the introduction of vulnerabilities in the past. Developers must be made aware of these factors so that they can proactively consider the security implications of each line of code that they contribute. The goal of our research is to assist developers in engineering secure software by providing a technique that generates scientific, interpretable, and actionable feedback on security as the software evolves. In this paper, we provide an overview of our proposed approach to accomplish this research goal through a series of three research studies in which we (1) systematize the knowledge on vulnerability discovery metrics, (2) leverage the metrics to generate feedback on security, and (3) implement a framework for providing automatically generated feedback on security using code reviews as a medium.",
              "pageNumber": 464,
              "isPageNumberRoman": false
            },
            {
              "id": "3ckAqC10xASb1BkDA52cOz",
              "type": "authorPaper",
              "text": "Automatic Verification of Time Behavior of Programs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4j6XzJGjLowqu92qYj6YFf/2xaVLob5LP2L7186xha31d.pdf",
              "extraLocations": [],
              "authorNames": "Giovanni Liva (Alpen-Adria Universität)",
              "abstract": "Automatic verification of software could save companies from huge losses due to errors in their programs. Existing techniques to prevent and detect errors are mainly based on imprecise heuristics which can report false positives. Formal verification techniques are an alternative to the heuristic approaches. They are more precise and can report errors with higher rigor. However, they cannot be directly applied because current programming languages have no defined semantics that specifies how the source code is interpreted in the execution of programs. Moreover, no existing work tries to develop a semantics for the time domain. The target of this thesis is to provide a verification framework based on a defined time semantics that can help developers to automatically detect time related errors in the behavior of programs. We define a time semantics that allows us to ascribe a meaning to source code statements that alter and use time. Based on the time semantics, we develop an approach to (i) automatically assert time properties and (ii) reverse engineer timed automata, a formal model of the time behavior that is amenable for verification. We plan to evaluate our approaches with quantitative and qualitative studies. The quantitative studies will measure the performance of our approaches in open source projects and the qualitative studies will collect the developers' feedback about the applicability and usefulness of our proposed techniques.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Automatic Verification of Time Behavior of Programs 1517227723281 Giovanni Liva Alpen-Adria Universität giovanni.liva@aau.at Formal Verification Reverse Engineering Modelling Software Behavior Automatic verification of software could save companies from huge losses due to errors in their programs. Existing techniques to prevent and detect errors are mainly based on imprecise heuristics which can report false positives. Formal verification techniques are an alternative to the heuristic approaches. They are more precise and can report errors with higher rigor. However, they cannot be directly applied because current programming languages have no defined semantics that specifies how the source code is interpreted in the execution of programs. Moreover, no existing work tries to develop a semantics for the time domain. The target of this thesis is to provide a verification framework based on a defined time semantics that can help developers to automatically detect time related errors in the behavior of programs. We define a time semantics that allows us to ascribe a meaning to source code statements that alter and use time. Based on the time semantics, we develop an approach to (i) automatically assert time properties and (ii) reverse engineer timed automata, a formal model of the time behavior that is amenable for verification. We plan to evaluate our approaches with quantitative and qualitative studies. The quantitative studies will measure the performance of our approaches in open source projects and the qualitative studies will collect the developers' feedback about the applicability and usefulness of our proposed techniques.",
              "pageNumber": 468,
              "isPageNumberRoman": false
            },
            {
              "id": "25LIMaCRniM3tdONNrgq5l",
              "type": "authorPaper",
              "text": "Learning to Accelerate Compiler Testing",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3uK1gDyyScWheR1bC2y6e9/79BSSHLXynlzwtnQRCEfis.pdf",
              "extraLocations": [],
              "authorNames": "Junjie Chen (Peking University)",
              "abstract": "Compilers are one of the most important software infrastructures. Compiler testing is an effective and widely-used way to assure the quality of compilers. While many compiler testing techniques have been proposed to detect compiler bugs, these techniques still suffer from the serious efficiency problem. This is because these techniques need to run a large number of randomly generated test programs on the fly through automated test-generation tools (e.g., Csmith). To accelerate compiler testing, it is desirable to schedule the execution order of the generated test programs so that the test programs that are more likely to trigger compiler bugs are executed earlier. Since different test programs tend to trigger the same compiler bug, the ideal goal of accelerating compiler testing is to execute the test programs triggering different compiler bugs in the beginning. However, such perfect goal is hard to achieve, and thus in this work, we design four steps to approach the ideal goal through learning, in order to largely accelerate compiler testing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Learning to Accelerate Compiler Testing 1517983603177 Junjie Chen Peking University chenjunjie@pku.edu.cn Compiler Testing Test Prioritization Machine Learning Compilers are one of the most important software infrastructures. Compiler testing is an effective and widely-used way to assure the quality of compilers. While many compiler testing techniques have been proposed to detect compiler bugs, these techniques still suffer from the serious efficiency problem. This is because these techniques need to run a large number of randomly generated test programs on the fly through automated test-generation tools (e.g., Csmith). To accelerate compiler testing, it is desirable to schedule the execution order of the generated test programs so that the test programs that are more likely to trigger compiler bugs are executed earlier. Since different test programs tend to trigger the same compiler bug, the ideal goal of accelerating compiler testing is to execute the test programs triggering different compiler bugs in the beginning. However, such perfect goal is hard to achieve, and thus in this work, we design four steps to approach the ideal goal through learning, in order to largely accelerate compiler testing.",
              "pageNumber": 472,
              "isPageNumberRoman": false
            },
            {
              "id": "2h48GrovzyRidYGnRZ82oC",
              "type": "authorPaper",
              "text": "Characteristics of Defective Infrastructure as Code Scripts in DevOps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qQwqPKXmLrzPlie0owrAE/yV0y2PkH9og3ffZ5iR9RA.pdf",
              "extraLocations": [],
              "authorNames": "Akond Rahman (North Carolina State University)",
              "abstract": "Defects in infrastructure as code (IaC) scripts can have serious consequences for organizations who adopt DevOps. By identifying which characteristics of IaC scripts correlate with defects, we can identify anti-patterns, and help software practitioners make informed decisions on better development and maintenance of IaC scripts, and increase quality of IaC scripts. The goal of this paper is to help practitioners increase the quality of IaC scripts by identifying characteristics of IaC scripts and IaC development process that correlate with defects, and violate security and privacy objectives. We focus on characteristics of IaC scripts and IaC development that (i) correlate with IaC defects, and (ii) violate security and privacy-related objectives namely, confidentiality, availability, and integrity. For our initial studies, we mined open source version control systems from three organizations: Mozilla, Openstack, and Wikimedia, to identify the defect-related characteristics and conduct our case studies. From our empirical analysis, we identify (i) 14 IaC code and four churn characteristics that correlate with defects; and (ii) 12 process characteristics such as, frequency of changes, and ownership of IaC scripts that correlate with defects. We propose the following studies: (i) identify structural characteristics that correlate with defects; (ii) with respect to prediction performance, compare which characteristics of IaC scripts are more correlated with defects; and (iii) identify characteristics that violate security and privacy objectives.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Characteristics of Defective Infrastructure as Code Scripts in DevOps 1518219578214 Akond Rahman North Carolina State University aarahman@ncsu.edu defect devops infrastructure as code metric Defects in infrastructure as code (IaC) scripts can have serious consequences for organizations who adopt DevOps. By identifying which characteristics of IaC scripts correlate with defects, we can identify anti-patterns, and help software practitioners make informed decisions on better development and maintenance of IaC scripts, and increase quality of IaC scripts. The goal of this paper is to help practitioners increase the quality of IaC scripts by identifying characteristics of IaC scripts and IaC development process that correlate with defects, and violate security and privacy objectives. We focus on characteristics of IaC scripts and IaC development that (i) correlate with IaC defects, and (ii) violate security and privacy-related objectives namely, confidentiality, availability, and integrity. For our initial studies, we mined open source version control systems from three organizations: Mozilla, Openstack, and Wikimedia, to identify the defect-related characteristics and conduct our case studies. From our empirical analysis, we identify (i) 14 IaC code and four churn characteristics that correlate with defects; and (ii) 12 process characteristics such as, frequency of changes, and ownership of IaC scripts that correlate with defects. We propose the following studies: (i) identify structural characteristics that correlate with defects; (ii) with respect to prediction performance, compare which characteristics of IaC scripts are more correlated with defects; and (iii) identify characteristics that violate security and privacy objectives.",
              "pageNumber": 476,
              "isPageNumberRoman": false
            },
            {
              "id": "6nreCEvDQdaAC0DzxFNyy1",
              "type": "authorPaper",
              "text": "Fostering Software Developers' Productivity at Work Through Self-Monitoring and Goal-Setting",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/sko7a5nTLsy1Aru1aeJYf/3QR0YadN1XxbNVWdQ8wIwU.pdf",
              "extraLocations": [],
              "authorNames": "André N. Meyer (University of Zurich)",
              "abstract": "Software development organizations strive to enhance the productivity of their developers. While research has looked into various ways for improving developer productivity, little is known about the activities they pursue at work, how these activities influence the fragmentation of work, and how these insights could be leveraged to foster productivity at work. In my PhD thesis, I address software developer productivity by taking a mixed-method approach to investigate developers' perceptions of productivity in the field and to examine the individual differences of each developer's work. My goal is to increase developers' awareness about their own work habits and productivity, and to encourage productive behavior changes at work through the provision of two persuasive technologies, self-monitoring and goal-setting.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Fostering Software Developers' Productivity at Work Through Self-Monitoring and Goal-Setting 1517088624600 André N. Meyer University of Zurich ameyer@ifi.uzh.ch Productivity Quantified Workplace Self-Monitoring Goal-Setting Interruptions Context Switching Software development organizations strive to enhance the productivity of their developers. While research has looked into various ways for improving developer productivity, little is known about the activities they pursue at work, how these activities influence the fragmentation of work, and how these insights could be leveraged to foster productivity at work. In my PhD thesis, I address software developer productivity by taking a mixed-method approach to investigate developers' perceptions of productivity in the field and to examine the individual differences of each developer's work. My goal is to increase developers' awareness about their own work habits and productivity, and to encourage productive behavior changes at work through the provision of two persuasive technologies, self-monitoring and goal-setting.",
              "pageNumber": 480,
              "isPageNumberRoman": false
            },
            {
              "id": "2vrr5MCXDkvc0IvUDJtnBW",
              "type": "authorPaper",
              "text": "Interactive Model Mining from Embedded Legacy Software",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1cfwipvkgIwd5Lm6KKokhq/5X2aqxuZ9LRYaoi1QZdvT4.pdf",
              "extraLocations": [],
              "authorNames": "Wasim Said (Robert Bosch GmbH)",
              "abstract": "Model mining from software systems can be very helpful for program comprehension. The few existing approaches for extracting high level models from code – when applied to real-world systems written in C – deliver too detailed and complex models that cannot be understood by humans. In my Ph.D. project, I propose an approach that complements fully-automatic model mining approaches with user interaction to get understandable models. The evaluation of this approach includes a controlled experiment with a large number of experts, in order to assess the effectiveness of the interactively mined models for understanding complex legacy software.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Interactive Model Mining from Embedded Legacy Software 1518183820530 Wasim Said Robert Bosch GmbH Wasim.Said@de.bosch.com model mining state machines software analysis program comprehension reverse engineering embedded software Model mining from software systems can be very helpful for program comprehension. The few existing approaches for extracting high level models from code – when applied to real-world systems written in C – deliver too detailed and complex models that cannot be understood by humans. In my Ph.D. project, I propose an approach that complements fully-automatic model mining approaches with user interaction to get understandable models. The evaluation of this approach includes a controlled experiment with a large number of experts, in order to assess the effectiveness of the interactively mined models for understanding complex legacy software.",
              "pageNumber": 484,
              "isPageNumberRoman": false
            },
            {
              "id": "63JycavAsy0A8MdoAloMxa",
              "type": "authorPaper",
              "text": "Assessing Personalized Software Defect Predictors",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/56BI32EtiUjZ28AvsLjlR0/67ejFNZL10171eoNvzwVtG.pdf",
              "extraLocations": [],
              "authorNames": "Beyza Eken (Istanbul Technical University)",
              "abstract": "Software defect prediction models guide developers and testers to identify defect prone software modules in fewer time and effort, compared to manual inspections of the source code. The state-of-the-art predictors on publicly available software engineering data could catch around 70% of the defects. While early studies mostly utilize static code properties of the software, recent studies incorporate the people factor into the prediction models, such as the number of developers that touched a code unit, the experience of the developer, and interaction and cognitive behaviors of developers. Those information could give a stronger clue about the defect-prone parts because they could explain defect injection patterns in software development. Personalization has been emerging in many other systems such as social platforms, web search engines such that people get customized recommendations based on their actions, profiles and interest. Following this point of view, customization in defect prediction with respect to each developer would increase predictions' accuracy and usefulness than traditional, general models. In this thesis, we focus on building a personalized defect prediction framework that gives instant feedback to the developer at change level, based on historical defect and change data. Our preliminary analysis of the personalized prediction models of 121 developers in six open source projects indicate that, a personalized approach is not always the best model when compared to general models built for six projects. Other factors such as project characteristics, developer's historical data, the context and frequency of contributions, and/or development methodologies might affect which model to consider in practice. Eventually, this topic is open to improvement with further empirical studies on each of these factors.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Assessing Personalized Software Defect Predictors 1518476127948 Beyza Eken Istanbul Technical University ekenbeyza@gmail.com personalized defect prediction bug prediction customization Software defect prediction models guide developers and testers to identify defect prone software modules in fewer time and effort, compared to manual inspections of the source code. The state-of-the-art predictors on publicly available software engineering data could catch around 70% of the defects. While early studies mostly utilize static code properties of the software, recent studies incorporate the people factor into the prediction models, such as the number of developers that touched a code unit, the experience of the developer, and interaction and cognitive behaviors of developers. Those information could give a stronger clue about the defect-prone parts because they could explain defect injection patterns in software development. Personalization has been emerging in many other systems such as social platforms, web search engines such that people get customized recommendations based on their actions, profiles and interest. Following this point of view, customization in defect prediction with respect to each developer would increase predictions' accuracy and usefulness than traditional, general models. In this thesis, we focus on building a personalized defect prediction framework that gives instant feedback to the developer at change level, based on historical defect and change data. Our preliminary analysis of the personalized prediction models of 121 developers in six open source projects indicate that, a personalized approach is not always the best model when compared to general models built for six projects. Other factors such as project characteristics, developer's historical data, the context and frequency of contributions, and/or development methodologies might affect which model to consider in practice. Eventually, this topic is open to improvement with further empirical studies on each of these factors.",
              "pageNumber": 488,
              "isPageNumberRoman": false
            },
            {
              "id": "4oZrzsoRpgqikYEuLRXckc",
              "type": "authorPaper",
              "text": "Crowdsourced Software Development and Maintenance",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6YipsPizLvhNMfP0ZApmdR/7tziaWqEES1nb0PuCtqOhp.pdf",
              "extraLocations": [],
              "authorNames": "Bin Lin (Università della Svizzera italiana)",
              "abstract": "As modern software systems are becoming increasingly complex, developers often need to rely on online sources to address problems encountered during software development and maintenance. These resources provide developers with access to peers' expertise, covering knowledge of different software lifecycle phases, including design, implementation, and maintenance. However, exploiting such knowledge and converting it into actionable items is far from trivial, due to the vastness of the information available online as well as to its unstructured nature. In this research, we aim at (partially) crowdsourcing the software design, implementation and maintenance process by exploiting the knowledge embedded in various sources available on the Web (e.g., Stack Overflow discussions, presentations on SlideShare, open source code, etc.). For example, we want to support software design decisions (e.g., whether to use a specific library for the implementation of a feature) by performing opinion mining on the vast amount of information available on the Web, and we want to recommend refactoring operations by learning from the code written in open source systems. The final goal is to improve developers' productivity and code quality.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Crowdsourced Software Development and Maintenance 1517845341406 Bin Lin Università della Svizzera italiana bin.lin@usi.ch crowdsourcing software development software maintenance As modern software systems are becoming increasingly complex, developers often need to rely on online sources to address problems encountered during software development and maintenance. These resources provide developers with access to peers' expertise, covering knowledge of different software lifecycle phases, including design, implementation, and maintenance. However, exploiting such knowledge and converting it into actionable items is far from trivial, due to the vastness of the information available online as well as to its unstructured nature. In this research, we aim at (partially) crowdsourcing the software design, implementation and maintenance process by exploiting the knowledge embedded in various sources available on the Web (e.g., Stack Overflow discussions, presentations on SlideShare, open source code, etc.). For example, we want to support software design decisions (e.g., whether to use a specific library for the implementation of a feature) by performing opinion mining on the vast amount of information available on the Web, and we want to recommend refactoring operations by learning from the code written in open source systems. The final goal is to improve developers' productivity and code quality.",
              "pageNumber": 492,
              "isPageNumberRoman": false
            },
            {
              "id": "4qAZ2nbVq0Ko18J5Jo3mev",
              "type": "authorPaper",
              "text": "A Neuro-Cognitive Perspective of Program Comprehension",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3i9dCcUyc9C48XPlNzhoOn/6EbUeXNHs6F2GkD1mkfUeK.pdf",
              "extraLocations": [],
              "authorNames": "Norman Peitek (Leibniz Institute for Neurobiology)",
              "abstract": "Program comprehension is the cognitive process of understanding code. Researchers have proposed several models to describe program comprehension. However, because program comprehension is an internal process and difficult to measure, the accuracy of the existing models are limited. Neuro-imaging methods, such as functional magnetic resonance imaging (fMRI), provide a novel neuro-cognitive perspective to program-comprehension research. With my thesis work, we aim at establishing fMRI as a new tool for program-comprehension and software-engineering studies. Furthermore, we seek to refine our existing framework for conducting fMRI studies by extending it with eye tracking and improved control conditions. We describe how we will apply our upgraded framework to extend our understanding of program comprehension. In the long-run, we would like to contribute insights from our fMRI studies into software-engineering practices by providing code-styling guidelines and programming tools, which reduce the required cognitive effort to comprehend code.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 A Neuro-Cognitive Perspective of Program Comprehension 1517299292107 Norman Peitek Leibniz Institute for Neurobiology norman.peitek@lin-magdeburg.de program comprehension top down comprehension functional magnetic resonance imaging eye tracking Program comprehension is the cognitive process of understanding code. Researchers have proposed several models to describe program comprehension. However, because program comprehension is an internal process and difficult to measure, the accuracy of the existing models are limited. Neuro-imaging methods, such as functional magnetic resonance imaging (fMRI), provide a novel neuro-cognitive perspective to program-comprehension research. With my thesis work, we aim at establishing fMRI as a new tool for program-comprehension and software-engineering studies. Furthermore, we seek to refine our existing framework for conducting fMRI studies by extending it with eye tracking and improved control conditions. We describe how we will apply our upgraded framework to extend our understanding of program comprehension. In the long-run, we would like to contribute insights from our fMRI studies into software-engineering practices by providing code-styling guidelines and programming tools, which reduce the required cognitive effort to comprehend code.",
              "pageNumber": 496,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "ACM Student Research Competition",
          "lineItems": [
            {
              "id": "3kwQ3dqmtoKP5YjsYEOYUp",
              "type": "authorPaper",
              "text": "VarXplorer: Reasoning About Feature Interactions",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IEIAqCPJEDZTj1hipt8Hg/bO9BZd0LDQfVqKQs9J25A.pdf",
              "extraLocations": [],
              "authorNames": "Larissa Rocha Soares (Federal University of Bahia)",
              "abstract": "Feature interactions occur when a feature behavior is influenced by the presence of another feature(s). Typically, interactions may lead to faults that are not easily identified from the analysis of each feature separately, especially when feature specifications are missing. In this paper, we propose VarXplorer, an iterative approach that supports developers to detect internal interactions on control and data flow of configurable systems, by means of feature-interaction graphs and an interaction specification language.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 VarXplorer: Reasoning About Feature Interactions 1519586583069 Larissa Rocha Soares Federal University of Bahia lari.rsoares@gmail.com Highly Configurable Systems Feature Interaction Variability-Aware Execution Feature interactions occur when a feature behavior is influenced by the presence of another feature(s). Typically, interactions may lead to faults that are not easily identified from the analysis of each feature separately, especially when feature specifications are missing. In this paper, we propose VarXplorer, an iterative approach that supports developers to detect internal interactions on control and data flow of configurable systems, by means of feature-interaction graphs and an interaction specification language.",
              "pageNumber": 500,
              "isPageNumberRoman": false
            },
            {
              "id": "7vrbAaTiJ6dPU6xbNs6jlQ",
              "type": "authorPaper",
              "text": "Toward an Empirical Theory of Feedback-Driven Development",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6QgvimQvGSMHm543W6rBya/4hYF4BqDuA3HHAL8O9GmGV.pdf",
              "extraLocations": [],
              "authorNames": "Moritz Beller (Delft University of Technology)",
              "abstract": "Software developers today crave for feedback, be it from their peers or even bots in the form of code review, static analysis tools like their compiler, or the local or remote execution of their tests in the Continuous Integration (CI) environment. With the advent of social coding sites like GitHub and tight integration of CI services like Travis CI, software development practices have fundamentally changed. Despite a highly changed software engineering landscape, however, we still lack a suitable description of an individual's contemporary software development practices, that is how an individual code contribution comes to be. Existing descriptions like the v-model are either too coarse-grained to describe an individual contributor's workflow, or only regard a sub-part of the development process like Test-Driven Development. In addition, most existing models are prerather than de-scriptive. By contrast, in our thesis, we perform a series of empirical studies to describe the individual constituents of Feedback-Driven Development (FDD) and then compile the evidence into an initial theory on how modern software development works. Our thesis culminates in the finding that feedback loops are the characterizing criterion of contemporary software development. Our model is flexible enough to accommodate a broad bandwidth of contemporary workflows, despite large variances in how projects use and configure parts of FDD.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Toward an Empirical Theory of Feedback-Driven Development Moritz Beller Delft University of Technology m.m.beller@tudelft.nl Feedback-Driven Development (FDD) Software developers today crave for feedback, be it from their peers or even bots in the form of code review, static analysis tools like their compiler, or the local or remote execution of their tests in the Continuous Integration (CI) environment. With the advent of social coding sites like GitHub and tight integration of CI services like Travis CI, software development practices have fundamentally changed. Despite a highly changed software engineering landscape, however, we still lack a suitable description of an individual's contemporary software development practices, that is how an individual code contribution comes to be. Existing descriptions like the v-model are either too coarse-grained to describe an individual contributor's workflow, or only regard a sub-part of the development process like Test-Driven Development. In addition, most existing models are prerather than de-scriptive. By contrast, in our thesis, we perform a series of empirical studies to describe the individual constituents of Feedback-Driven Development (FDD) and then compile the evidence into an initial theory on how modern software development works. Our thesis culminates in the finding that feedback loops are the characterizing criterion of contemporary software development. Our model is flexible enough to accommodate a broad bandwidth of contemporary workflows, despite large variances in how projects use and configure parts of FDD.",
              "pageNumber": 503,
              "isPageNumberRoman": false
            },
            {
              "id": "44Vfa2ROWtUtCCYPG3wbos",
              "type": "authorPaper",
              "text": "Automatically Finding Bugs in Commercial Cyber-Physical System Development Tool Chains",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5JiheKcasvQTAijbzzIUHH/6R3AwFA3XlkwVU3O0s1ArD.pdf",
              "extraLocations": [],
              "authorNames": "Shafiul Azam Chowdhury (The University of Texas at Arlington)",
              "abstract": "Commercial Cyber-physical System (CPS) development tools (e.g. MathWorks' Simulink) are widely used to design, simulate and automatically generate artifacts which are deployed in safety-critical embedded hardware. CyFuzz, the state-of-the-art CPS tool chain testing scheme is inefficient, cannot generate feature-rich inputs and is ineffective in finding new tool chain bugs. To better understand various properties of publicly available CPS models, we conducted the first large-scale study of 391 publicly-available Simulink models. Next, we proposed an efficient CPS model-generation scheme capable of creating large, feature-rich random inputs. Our tool realization for testing Simulink which found 8 new confirmed bugs, along with the study-artifacts are publicly available.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Automatically Finding Bugs in Commercial Cyber-Physical System Development Tool Chains 1520201920438 Shafiul Azam Chowdhury The University of Texas at Arlington shafiulazam.chowdhury@mavs.uta.edu cyber-physical systems differential testing simulink Commercial Cyber-physical System (CPS) development tools (e.g. MathWorks' Simulink) are widely used to design, simulate and automatically generate artifacts which are deployed in safety-critical embedded hardware. CyFuzz, the state-of-the-art CPS tool chain testing scheme is inefficient, cannot generate feature-rich inputs and is ineffective in finding new tool chain bugs. To better understand various properties of publicly available CPS models, we conducted the first large-scale study of 391 publicly-available Simulink models. Next, we proposed an efficient CPS model-generation scheme capable of creating large, feature-rich random inputs. Our tool realization for testing Simulink which found 8 new confirmed bugs, along with the study-artifacts are publicly available.",
              "pageNumber": 506,
              "isPageNumberRoman": false
            },
            {
              "id": "glYXygCHn5gbUPGNkSBS9",
              "type": "authorPaper",
              "text": "Interactive and Automated Debugging for Big Data Analytics",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/188doY8oxmCjN0EdlE23TZ/5Oc01PAwjhI9a1jBByORdl.pdf",
              "extraLocations": [],
              "authorNames": "Muhammad Ali Gulzar (University of California)",
              "abstract": "An abundance of data in many disciplines of science, engineering, national security, health care, and business has led to the emerging field of Big Data Analytics that run in a cloud computing environment. To process massive quantities of data in the cloud, developers leverage Data-Intensive Scalable Computing (DISC) systems such as Google's MapReduce, Hadoop, and Spark. Currently, developers do not have easy means to debug DISC applications. The use of cloud computing makes application development feel more like batch jobs and the nature of debugging is therefore post-mortem. Developers of big data applications write code that implements a data processing pipeline and test it on their local workstation with a small sample data, downloaded from a TB-scale data warehouse. They cross fingers and hope that the program works in the expensive production cloud. When a job fails or they get a suspicious result, data scientists spend hours guessing at the source of the error, digging through post-mortem logs. In such cases, the data scientists may want to pinpoint the root cause of errors by investigating a subset of corresponding input records. The vision of my work is to provide interactive, real-time and automated debugging services for big data processing programs in modern DISC systems with minimum performance impact. My work investigates the following research questions in the context of big data analytics: (1) What are the necessary debugging primitives for interactive big data processing? (2) What scalable fault localization algorithms are needed to help the user to localize and characterize the root causes of errors? (3) How can we improve testing efficiency during iterative development of DISC applications by reasoning the semantics of dataflow operators and user-defined functions used inside dataflow operators in tandem? To answer these questions, we synthesize and innovate ideas from software engineering, big data systems, and program analysis, and coordinate innovations across the software stack from the user-facing API all the way down to the systems infrastructure.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Interactive and Automated Debugging for Big Data Analytics 1520222823967 Muhammad Ali Gulzar University of California gulzar@cs.ucla.edu Debugging Testing Fault Localization Big Data Systems Data Intensive Scalable Computing Systems Data Provenance Data Cleaning An abundance of data in many disciplines of science, engineering, national security, health care, and business has led to the emerging field of Big Data Analytics that run in a cloud computing environment. To process massive quantities of data in the cloud, developers leverage Data-Intensive Scalable Computing (DISC) systems such as Google's MapReduce, Hadoop, and Spark. Currently, developers do not have easy means to debug DISC applications. The use of cloud computing makes application development feel more like batch jobs and the nature of debugging is therefore post-mortem. Developers of big data applications write code that implements a data processing pipeline and test it on their local workstation with a small sample data, downloaded from a TB-scale data warehouse. They cross fingers and hope that the program works in the expensive production cloud. When a job fails or they get a suspicious result, data scientists spend hours guessing at the source of the error, digging through post-mortem logs. In such cases, the data scientists may want to pinpoint the root cause of errors by investigating a subset of corresponding input records. The vision of my work is to provide interactive, real-time and automated debugging services for big data processing programs in modern DISC systems with minimum performance impact. My work investigates the following research questions in the context of big data analytics: (1) What are the necessary debugging primitives for interactive big data processing? (2) What scalable fault localization algorithms are needed to help the user to localize and characterize the root causes of errors? (3) How can we improve testing efficiency during iterative development of DISC applications by reasoning the semantics of dataflow operators and user-defined functions used inside dataflow operators in tandem? To answer these questions, we synthesize and innovate ideas from software engineering, big data systems, and program analysis, and coordinate innovations across the software stack from the user-facing API all the way down to the systems infrastructure.",
              "pageNumber": 509,
              "isPageNumberRoman": false
            },
            {
              "id": "25aVfIRWtU8RnL557Aijwr",
              "type": "authorPaper",
              "text": "Deadlock Detector and Solver (DDS)",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4LhwjjNo4lCDQtbPpFD5FB/7moreI11zxtiZIHNWYU0EH.pdf",
              "extraLocations": [],
              "authorNames": "Eman Aldakheel (University of Illinois at Chicago)",
              "abstract": "Deadlock is among the most complex problems affecting the reliability of programs containing multiple, asynchronous threads. When undetected, deadlocks can lead to permanent thread blockage. Current detection methods are typically based on timeout and rollback of computations, resulting in significant delays. This paper presents Deadlock Detector and Solver (DDS), which can quickly detect and resolve circular deadlocks in Java programs. DDS uses a supervisory controller, which monitors program execution and automatically detects deadlocks resulting from hold-and-wait cycles on monitor locks. When a deadlock is detected, DDS uses a preemptive strategy to break the deadlock. Based on our experiments, DDS can in fact resolve deadlocks without significant run-time overhead.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Deadlock Detector and Solver (DDS) Eman Aldakheel University of Illinois at Chicago ealdak2@uic.edu Deadlock is among the most complex problems affecting the reliability of programs containing multiple, asynchronous threads. When undetected, deadlocks can lead to permanent thread blockage. Current detection methods are typically based on timeout and rollback of computations, resulting in significant delays. This paper presents Deadlock Detector and Solver (DDS), which can quickly detect and resolve circular deadlocks in Java programs. DDS uses a supervisory controller, which monitors program execution and automatically detects deadlocks resulting from hold-and-wait cycles on monitor locks. When a deadlock is detected, DDS uses a preemptive strategy to break the deadlock. Based on our experiments, DDS can in fact resolve deadlocks without significant run-time overhead.",
              "pageNumber": 512,
              "isPageNumberRoman": false
            },
            {
              "id": "6hxT37NodJve6v283rpaur",
              "type": "authorPaper",
              "text": "AutoModel: A Domain-Specific Language for Automatic Modeling of Real-Time Embedded Systems",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/ZlHGDtBSalF9VqoSGSVfL/3isRFB1xVFH9k7IIeF7VrG.pdf",
              "extraLocations": [],
              "authorNames": "Nafiseh Kahani (Queen’s University Kingston)",
              "abstract": "This paper introduces a new approach to the automation of realtime embedded systems modeling. Our approach is based on a new domain-specific language called AutoModel to specify the requirements of a system in terms of its components, goals and constraints. Our automated approach accepts the specified requirements and infers both structural and behavioral models to implement the requirements in the UML-RT modelling language. Existing modeling tools can then be used to generate an implementation from the inferred models without extra work.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 AutoModel: A Domain-Specific Language for Automatic Modeling of Real-Time Embedded Systems 1520254521517 Nafiseh Kahani Queen’s University Kingston kahani@cs.queensu.ca Model-Driven Development (MDD) Model Synthesis UML-RT This paper introduces a new approach to the automation of realtime embedded systems modeling. Our approach is based on a new domain-specific language called AutoModel to specify the requirements of a system in terms of its components, goals and constraints. Our automated approach accepts the specified requirements and infers both structural and behavioral models to implement the requirements in the UML-RT modelling language. Existing modeling tools can then be used to generate an implementation from the inferred models without extra work.",
              "pageNumber": 515,
              "isPageNumberRoman": false
            },
            {
              "id": "6bIkORSN9Msc0a8j1CtjsS",
              "type": "authorPaper",
              "text": "When to Extract Features: Towards a Recommender System",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2fpiKqW0sVzlS68wEP8vBv/2Ftk9xhQEpH2odZA08OMU6.pdf",
              "extraLocations": [],
              "authorNames": "Jacob Krüger (Otto-von-Guericke University Magdeburg & Harz University of Applied Sciences Wernigerode)",
              "abstract": "In practice, many organizations rely on cloning to implement customer-specific variants of a system. While this approach can have several disadvantages, organizations fear to extract reusable features later on, due to the corresponding efforts and risks. A particularly challenging and poorly supported task is to decide which features to extract. To tackle this problem, we aim to develop a recommender system that proposes suitable features based on automated analyses of the cloned legacy systems. In this paper, we sketch this recommender and its empirically derived metrics, which comprise cohesion, impact, and costs of features as well as the users' previous decisions. Overall, we will facilitate the adoption of systematic reuse based on an integrated platform.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 When to Extract Features: Towards a Recommender System Jacob Krüger Otto-von-Guericke University Magdeburg & Harz University of Applied Sciences Wernigerode jkrueger@ovgu.de Software product line extractive approach software maintenance In practice, many organizations rely on cloning to implement customer-specific variants of a system. While this approach can have several disadvantages, organizations fear to extract reusable features later on, due to the corresponding efforts and risks. A particularly challenging and poorly supported task is to decide which features to extract. To tackle this problem, we aim to develop a recommender system that proposes suitable features based on automated analyses of the cloned legacy systems. In this paper, we sketch this recommender and its empirically derived metrics, which comprise cohesion, impact, and costs of features as well as the users' previous decisions. Overall, we will facilitate the adoption of systematic reuse based on an integrated platform.",
              "pageNumber": 518,
              "isPageNumberRoman": false
            },
            {
              "id": "1W9CdfQaFQpJf32TlX9cYi",
              "type": "authorPaper",
              "text": "Compiler-Assisted Test Acceleration Using GPUs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4JzQjbNq4YEiNUbSnl9yg1/1QTjJ6wJGAyVTQDVxzM2Fu.pdf",
              "extraLocations": [],
              "authorNames": "Vanya Yaneva (University of Edinburgh)",
              "abstract": "Software testing is a crucial part of the software development process, but is often extremely time consuming, expensive, manual and error prone. This has resulted in a crucial need for test automation and acceleration. We propose using GPUs for the acceleration of test execution, by running individual functional tests in parallel on the GPU threads. We provide a fully automatic framework, called ParTeCL, which generates GPU code from sequential programs and executes their tests in parallel on the GPU. Current evaluation on 9 programs from the EEMBC industry standard benchmark suite show that ParTeCL achieves an average speedup of 16x when compared to a single CPU for these benchmarks.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Compiler-Assisted Test Acceleration Using GPUs 1519661932628 Vanya Yaneva University of Edinburgh vanya.yaneva@ed.ac.uk Functional testing Automated testing GPUs Compilers Software testing is a crucial part of the software development process, but is often extremely time consuming, expensive, manual and error prone. This has resulted in a crucial need for test automation and acceleration. We propose using GPUs for the acceleration of test execution, by running individual functional tests in parallel on the GPU threads. We provide a fully automatic framework, called ParTeCL, which generates GPU code from sequential programs and executes their tests in parallel on the GPU. Current evaluation on 9 programs from the EEMBC industry standard benchmark suite show that ParTeCL achieves an average speedup of 16x when compared to a single CPU for these benchmarks.",
              "pageNumber": 521,
              "isPageNumberRoman": false
            },
            {
              "id": "3QPQZtkjr1HYjxz0QbxPCu",
              "type": "authorPaper",
              "text": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1ZsiNGW1FlIUiebl2YFpnq/4si1YHUkd9yFqd1PBG1WLV.pdf",
              "extraLocations": [],
              "authorNames": "Asher Trockman (University of Evansville)",
              "abstract": "In fast-paced, reuse-heavy software development, the transparency provided by social coding platforms like GitHub is essential to decision making. Developers infer the quality of projects using visible cues, known as signals, collected from personal profile and repository pages. We report on a large-scale, mixed-methods empirical study of npm packages that explores the emerging phenomenon of repository badges, with which maintainers signal underlying qualities about the project to contributors and users. We investigate which qualities maintainers intend to signal and how well badges correlate with those qualities. After surveying developers, mining 294,941 repositories, and applying statistical modeling and time series analysis techniques, we find that non-trivial badges, which display the build status, test coverage, and up-to-dateness of dependencies, are mostly reliable signals, correlating with more tests, better pull requests, and fresher dependencies. Displaying such badges correlates with best practices, but the effects do not always persist.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem 1520314617356 Asher Trockman University of Evansville asher.trockman@gmail.com repository badge signaling theory regression discontinuity design mining software repositories dependency manager In fast-paced, reuse-heavy software development, the transparency provided by social coding platforms like GitHub is essential to decision making. Developers infer the quality of projects using visible cues, known as signals, collected from personal profile and repository pages. We report on a large-scale, mixed-methods empirical study of npm packages that explores the emerging phenomenon of repository badges, with which maintainers signal underlying qualities about the project to contributors and users. We investigate which qualities maintainers intend to signal and how well badges correlate with those qualities. After surveying developers, mining 294,941 repositories, and applying statistical modeling and time series analysis techniques, we find that non-trivial badges, which display the build status, test coverage, and up-to-dateness of dependencies, are mostly reliable signals, correlating with more tests, better pull requests, and fresher dependencies. Displaying such badges correlates with best practices, but the effects do not always persist.",
              "pageNumber": 524,
              "isPageNumberRoman": false
            },
            {
              "id": "43dVU4kFPN43H699spJUmZ",
              "type": "authorPaper",
              "text": "Combining Symbolic Execution and Model Checking to Verify MPI Programs",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/71r3uEpj8w9w85mn05wLgG/41PZQTwzxIZljqdsgu08rA.pdf",
              "extraLocations": [],
              "authorNames": "Hengbiao Yu (National University of Defense Technology)",
              "abstract": "Message Passing Interface (MPI) has become the standard programming paradigm in high performance computing. It is challenging to verify MPI programs because of high parallelism and non-determinism. This paper presents MPI symbolic verifier (MPI-SV), the first symbolic execution based tool for verifying MPI programs having both blocking and non-blocking operations. MPI-SV exploits symbolic execution to automatically generate path-level models, and performs model checking on the models w.r.t. expected properties. The results of model checking are leveraged to prune redundant paths. We have implemented MPI-SV and the extensive evaluation demonstrates MPI-SV's effectiveness and efficiency.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Combining Symbolic Execution and Model Checking to Verify MPI Programs 1520241503843 Hengbiao Yu National University of Defense Technology hengbiaoyu@nudt.edu.cn MPI Verification Symbolic Execution Model Checking Message Passing Interface (MPI) has become the standard programming paradigm in high performance computing. It is challenging to verify MPI programs because of high parallelism and non-determinism. This paper presents MPI symbolic verifier (MPI-SV), the first symbolic execution based tool for verifying MPI programs having both blocking and non-blocking operations. MPI-SV exploits symbolic execution to automatically generate path-level models, and performs model checking on the models w.r.t. expected properties. The results of model checking are leveraged to prune redundant paths. We have implemented MPI-SV and the extensive evaluation demonstrates MPI-SV's effectiveness and efficiency.",
              "pageNumber": 527,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Technical Briefings",
          "lineItems": [],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Session I",
          "lineItems": [
            {
              "id": "2yX1pLSjJ1IVElOv1yEhmu",
              "type": "authorPaper",
              "text": "Automatic Software Summarization: The State of the Art",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54CdjHMEEvZOX7240tsnI0/pD8iZ5Q7JF5mIlQD0vxUc.pdf",
              "extraLocations": [],
              "authorNames": "Laura Moreno (Colorado State University), Andrian Marcus (The University of Texas at Dallas)",
              "abstract": "While automatic text summarization has been widely studied for more than fifty years, in software engineering, automatic summarization is an emerging area that shows great potential and poses new and exciting research challenges. This technical briefing provides an introduction to the state of the art and maps future research directions in automatic software summarization. A first version was presented at ICSE'17 and now it is updated and enhanced, based on feedback from the audience.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Automatic Software Summarization: The State of the Art 1518501098717 Laura Moreno Colorado State University lmorenoc@colostate.edu Andrian Marcus The University of Texas at Dallas amarcus@utdallas.edu Automatic summarization software artifacts software summarization While automatic text summarization has been widely studied for more than fifty years, in software engineering, automatic summarization is an emerging area that shows great potential and poses new and exciting research challenges. This technical briefing provides an introduction to the state of the art and maps future research directions in automatic software summarization. A first version was presented at ICSE'17 and now it is updated and enhanced, based on feedback from the audience.",
              "pageNumber": 530,
              "isPageNumberRoman": false
            },
            {
              "id": "4vstr3Bs9VddkfKis9memn",
              "type": "authorPaper",
              "text": "Strategy for Continuous Testing in iDevOps",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1z1MaPpKJOumLTpr9cFqOs/4SgR50gt6y5PtxiOnmlH5g.pdf",
              "extraLocations": [],
              "authorNames": "Peter Zimmerer (Siemens AG)",
              "abstract": "This tutorial presentation describes the state-of-the-art in the emerging area of continuous testing in a DevOps context. It specifies the building blocks of a strategy for continuous testing in industrial-grade DevOps projects (iDevOps) and shares our motivations, achievements, and experiences on our journey to transform testing into the iDevOps world.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Strategy for Continuous Testing in iDevOps 1517560338955 Peter Zimmerer Siemens AG peter.zimmerer@siemens.com DevOps continuous integration (CI) continuous delivery (CD) continuous testing (CT) test strategy test architecture mindset This tutorial presentation describes the state-of-the-art in the emerging area of continuous testing in a DevOps context. It specifies the building blocks of a strategy for continuous testing in industrial-grade DevOps projects (iDevOps) and shares our motivations, achievements, and experiences on our journey to transform testing into the iDevOps world.",
              "pageNumber": 532,
              "isPageNumberRoman": false
            },
            {
              "id": "49cTImADQbWcz4yCtVwIVl",
              "type": "authorPaper",
              "text": "Analyzing Software Engineering Experiments: Everything You Always Wanted to Know but Were Afraid to Ask",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jEtcrihLMyv2tOdNL64Qa/1xcUJfLdb0AwoiSDBB60Fa.pdf",
              "extraLocations": [],
              "authorNames": "Sira Vegas (Universidad Politecnica de Madrid)",
              "abstract": "Experimentation is a key issue in science and engineering. But it is one of software engineering's stumbling blocks. Quite a lot of experiments are run nowadays, but it is a risky business. Software engineering has some special features, leading to some experimentation issues being conceived of differently than in other disciplines. The aim of this technical briefing is to help participants to avoid common pitfalls when analyzing the results of software engineering experiments. The technical briefing is not intended as a data analysis course, because there is already plenty of literature on this subject. It reviews several key issues that we have identified in published software engineering experiments, and addresses them based on the knowledge acquired after 19 years running experiments.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Analyzing Software Engineering Experiments: Everything You Always Wanted to Know but Were Afraid to Ask 1518445399571 Sira Vegas Universidad Politecnica de Madrid svegas@fi.upm.es Software Engineering experimentation controlled experiments analysis of experiments Experimentation is a key issue in science and engineering. But it is one of software engineering's stumbling blocks. Quite a lot of experiments are run nowadays, but it is a risky business. Software engineering has some special features, leading to some experimentation issues being conceived of differently than in other disciplines. The aim of this technical briefing is to help participants to avoid common pitfalls when analyzing the results of software engineering experiments. The technical briefing is not intended as a data analysis course, because there is already plenty of literature on this subject. It reviews several key issues that we have identified in published software engineering experiments, and addresses them based on the knowledge acquired after 19 years running experiments.",
              "pageNumber": 534,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Session II",
          "lineItems": [
            {
              "id": "5Ydfj6YCer2ZS8Sku1TweP",
              "type": "authorPaper",
              "text": "Natural Language Requirements Processing: From Research to Practice",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45ZhVVW7fESrCGLd7YOZQq/4SzwhsqsO7Je02vin728Ca.pdf",
              "extraLocations": [],
              "authorNames": "Alessio Ferrari (CNR-ISTI)",
              "abstract": "Automated manipulation of natural language requirements, for classification, tracing, defect detection, information extraction, and other tasks, has been pursued by requirements engineering (RE) researchers for more than two decades. Recent technological advancements in natural language processing (NLP) have made it possible to apply this research more widely within industrial settings. This technical briefing targets researchers and practitioners, and aims to give an overview of what NLP can do today for RE problems, and what could do if specific research challenges, also emerging from practical experiences, are addressed. The talk will: survey current research on applications of NLP to RE problems; present representative industrially-ready techniques, with a focus on defect detection and information extraction problems; present enabling technologies in NLP that can play a role in RE research, including distributional semantics representations; discuss criteria for evaluation of NLP techniques in the RE context; outline the main challenges for a systematic application of the techniques in industry. The crosscutting topics that will permeate the talk are the need for domain adaptation, and the essential role of the human-in-the-loop.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Natural Language Requirements Processing: From Research to Practice 1518086677161 Alessio Ferrari CNR-ISTI alessio.ferrari@isti.cnr.it requirements engineering natural language processing Automated manipulation of natural language requirements, for classification, tracing, defect detection, information extraction, and other tasks, has been pursued by requirements engineering (RE) researchers for more than two decades. Recent technological advancements in natural language processing (NLP) have made it possible to apply this research more widely within industrial settings. This technical briefing targets researchers and practitioners, and aims to give an overview of what NLP can do today for RE problems, and what could do if specific research challenges, also emerging from practical experiences, are addressed. The talk will: survey current research on applications of NLP to RE problems; present representative industrially-ready techniques, with a focus on defect detection and information extraction problems; present enabling technologies in NLP that can play a role in RE research, including distributional semantics representations; discuss criteria for evaluation of NLP techniques in the RE context; outline the main challenges for a systematic application of the techniques in industry. The crosscutting topics that will permeate the talk are the need for domain adaptation, and the essential role of the human-in-the-loop.",
              "pageNumber": 536,
              "isPageNumberRoman": false
            },
            {
              "id": "3ku2gXDHxJDSpHiynnidEW",
              "type": "authorPaper",
              "text": "Metamorphic Testing 20 Years Later: A Hands-on Introduction",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2t0NMGURSnuIg1cFBefkVh/1SMaE5CZb1A4BX4uKBxyBR.pdf",
              "extraLocations": [],
              "authorNames": "Sergio Segura (University of Seville), Zhi Quan Zhou (University of Wollongong)",
              "abstract": "Two of the key challenges in software testing are the automated generation of test cases, and the identification of failures by checking test outputs. Both challenges are effectively addressed by metamorphic testing (MT), a software testing technique where failures are not revealed by checking an individual concrete output, but by checking the relations among the inputs and outputs of multiple executions of the software under test. Two decades after its introduction, MT is becoming a fully-fledged testing paradigm with successful applications in multiple domains including, among others, big data engineering, simulation and modeling, compilers, machine learning programs, autonomous cars and drones, and cybersecurity. This technical briefing will provide an introduction to MT from a double perspective. First, we will present the technique and the results of a novel survey outlining its main trends and lessons learned. Then, we will go deeper and present some of the successful applications of the technique, as well as challenges and opportunities on the topic. The briefing will be complemented with practical exercises on testing real web applications and APIs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Metamorphic Testing 20 Years Later: A Hands-on Introduction 1517994516139 Sergio Segura University of Seville sergiosegura@us.es Zhi Quan Zhou University of Wollongong zhiquan@uow.edu.au metamorphic testing tutorial Two of the key challenges in software testing are the automated generation of test cases, and the identification of failures by checking test outputs. Both challenges are effectively addressed by metamorphic testing (MT), a software testing technique where failures are not revealed by checking an individual concrete output, but by checking the relations among the inputs and outputs of multiple executions of the software under test. Two decades after its introduction, MT is becoming a fully-fledged testing paradigm with successful applications in multiple domains including, among others, big data engineering, simulation and modeling, compilers, machine learning programs, autonomous cars and drones, and cybersecurity. This technical briefing will provide an introduction to MT from a double perspective. First, we will present the technique and the results of a novel survey outlining its main trends and lessons learned. Then, we will go deeper and present some of the successful applications of the technique, as well as challenges and opportunities on the topic. The briefing will be complemented with practical exercises on testing real web applications and APIs.",
              "pageNumber": 538,
              "isPageNumberRoman": false
            },
            {
              "id": "6MffrlCJDCwkM39uhIO1im",
              "type": "authorPaper",
              "text": "How to Analyze Git Repositories with Command Line Tools: We're not in Kansas Anymore",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ez2GftNEYDvJXCwDk6umC/5YKnoCvwDQQN7mGMEmps6W.pdf",
              "extraLocations": [],
              "authorNames": "Diomidis Spinellis (Athens University of Economics and Business), Georgios Gousios (Delft University of Technology)",
              "abstract": "Git repositories are an important source of empirical software engineering product and process data. Running the Git command-line tool and processing its output with other Unix tools allows the incremental construction of sophisticated data processing pipelines. Git data analytics on the command-line can be systematically presented through a pattern that involves fetching, selection, processing, summarization, and reporting. For each part of the processing pipeline, we examine the tools and techniques that can be most effectively used to perform the task at hand. The presented techniques can be easily applied, first to get a feeling of version control repository data at hand and then also for extracting empirical results.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 How to Analyze Git Repositories with Command Line Tools: We're not in Kansas Anymore 1518201072201 Diomidis Spinellis Athens University of Economics and Business dds@aueb.gr Georgios Gousios Delft University of Technology G.Gousios@tudelft.nl Git data analytics command-line tools pipes and filters empirical software engineering Git repositories are an important source of empirical software engineering product and process data. Running the Git command-line tool and processing its output with other Unix tools allows the incremental construction of sophisticated data processing pipelines. Git data analytics on the command-line can be systematically presented through a pattern that involves fetching, selection, processing, summarization, and reporting. For each part of the processing pipeline, we examine the tools and techniques that can be most effectively used to perform the task at hand. The presented techniques can be easily applied, first to get a feeling of version control repository data at hand and then also for extracting empirical results.",
              "pageNumber": 540,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Session III",
          "lineItems": [
            {
              "id": "2uSOjNWYwAsHg15VBNBBTW",
              "type": "authorPaper",
              "text": "Big Data Software Analytics with Apache Spark",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Pq1pHhWkuE8B9vxwVjvDS/2EQ0kQL1MCbGUXNIsabNTG.pdf",
              "extraLocations": [],
              "authorNames": "Georgios Gousios (Delft University of Technology)",
              "abstract": "At the beginning of every research effort, researchers in empirical software engineering have to go through the processes of extracting data from raw data sources and transforming them to what their tools expect as inputs. This step is time consuming and error prone, while the produced artifacts (code, intermediate datasets) are usually not of scientific value. In the recent years, Apache Spark has emerged as a solid foundation for data science and has taken the big data analytics domain by storm. We believe that the primitives exposed by Apache Spark can help software engineering researchers create and share reproducible, high-performance data analysis pipelines. In our technical briefing, we discuss how researchers can profit from Apache Spark, through a hands-on case study.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Big Data Software Analytics with Apache Spark 1518005301422 Georgios Gousios Delft University of Technology g.gousios@tudelft.nl data analytics big data apache spark At the beginning of every research effort, researchers in empirical software engineering have to go through the processes of extracting data from raw data sources and transforming them to what their tools expect as inputs. This step is time consuming and error prone, while the produced artifacts (code, intermediate datasets) are usually not of scientific value. In the recent years, Apache Spark has emerged as a solid foundation for data science and has taken the big data analytics domain by storm. We believe that the primitives exposed by Apache Spark can help software engineering researchers create and share reproducible, high-performance data analysis pipelines. In our technical briefing, we discuss how researchers can profit from Apache Spark, through a hands-on case study.",
              "pageNumber": 542,
              "isPageNumberRoman": false
            },
            {
              "id": "9YPZ7umozmMBtMlVmLguo",
              "type": "authorPaper",
              "text": "Demystifying Cyber-Physical Malware",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6rR3Oss6Q3R6co8CGNWcxG/70SHos1HRvTtUahcJWu9r7.pdf",
              "extraLocations": [],
              "authorNames": "Suraj Kothari (Iowa State University)",
              "abstract": "The traditional notion of malware is too narrow, and the prevalent characterizations (virus, worm, trojan horse, spyware etc.) are neither precise nor comprehensive enough to characterize cyber-physical malware (CPM). Detecting sophisticated CPM is like searching for a needle in the haystack without knowing what the needle looks like. This technical briefing congregates interdisciplinary knowledge to describe the fundamentals of CPM, the mathematical foundation for analyzing and verifying CPM, the current state-of-the-art, the challenges, and directions for future research. Employing real-world examples, we shall illustrate the challenges of analyzing and verifying CPM.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Demystifying Cyber-Physical Malware 1518103712378 Suraj Kothari Iowa State University kothari@iastate.edu Cyber-Physical Malware Software Modeling and Verification The traditional notion of malware is too narrow, and the prevalent characterizations (virus, worm, trojan horse, spyware etc.) are neither precise nor comprehensive enough to characterize cyber-physical malware (CPM). Detecting sophisticated CPM is like searching for a needle in the haystack without knowing what the needle looks like. This technical briefing congregates interdisciplinary knowledge to describe the fundamentals of CPM, the mathematical foundation for analyzing and verifying CPM, the current state-of-the-art, the challenges, and directions for future research. Employing real-world examples, we shall illustrate the challenges of analyzing and verifying CPM.",
              "pageNumber": 544,
              "isPageNumberRoman": false
            },
            {
              "id": "4qeGYquuaa5gzail4bm4IB",
              "type": "authorPaper",
              "text": "Detecting and Managing Code Smells: Research and Practice",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/549ytWjXRLllNI0BsiStTv/2umET2tBXamvFcvHU4QGiu.pdf",
              "extraLocations": [],
              "authorNames": "Tushar Sharma (Athens University of Economics and Business)",
              "abstract": "Code smells indicate the presence of quality problems that make the software hard to maintain and evolve. A software development team can keep their software maintainable by identifying smells and refactor them. In the first part of the session, we present a comprehensive overview of the literature concerning smells covering various dimensions of the metaphor including defining characteristics, classification, types, as well as causes and impacts of smells. In the second part, we delve into the details of smell detection methods prevailed currently both in research prototypes and industrial tools. The final part present actionable and pragmatic strategies for practitioners to avoid, detect, and eradicate smells from their codebase.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Detecting and Managing Code Smells: Research and Practice 1518096717798 Tushar Sharma Athens University of Economics and Business tusharsharma@ieee.org Code smells Antipatterns Software quality Code Quality Smell detection tools Software maintenance Technical debt Code smells indicate the presence of quality problems that make the software hard to maintain and evolve. A software development team can keep their software maintainable by identifying smells and refactor them. In the first part of the session, we present a comprehensive overview of the literature concerning smells covering various dimensions of the metaphor including defining characteristics, classification, types, as well as causes and impacts of smells. In the second part, we delve into the details of smell detection methods prevailed currently both in research prototypes and industrial tools. The final part present actionable and pragmatic strategies for practitioners to avoid, detect, and eradicate smells from their codebase.",
              "pageNumber": 546,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        },
        {
          "class": "SD",
          "type": "SD_SUBSESSION",
          "title": "Session IV",
          "lineItems": [
            {
              "id": "27AdybOEROtahlFbNw2zjO",
              "type": "authorPaper",
              "text": "Machine Learning for Software Engineering: Models, Methods, and Applications",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68mZt2BRUQO2z4mysF42zv/3BBCZzcXIipNq8ElKPyNZb.pdf",
              "extraLocations": [],
              "authorNames": "Karl Meinke (KTH Royal Institute of Technology), Amel Bennaceur (The Open University)",
              "abstract": "Machine Learning (ML) is the discipline that studies methods for automatically inferring models from data. Machine learning has been successfully applied in many areas of software engineering ranging from behaviour extraction, to testing, to bug fixing. Many more applications are yet be defined. However, a better understanding of ML methods, their assumptions and guarantees would help software engineers adopt and identify the appropriate methods for their desired applications. We argue that this choice can be guided by the models one seeks to infer. In this technical briefing, we review and reflect on the applications of ML for software engineering organised according to the models they produce and the methods they use. We introduce the principles of ML, give an overview of some key methods, and present examples of areas of software engineering benefiting from ML. We also discuss the open challenges for reaching the full potential of ML for software engineering and how ML can benefit from software engineering methods.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Machine Learning for Software Engineering: Models, Methods, and Applications 1517833059230 Karl Meinke KTH Royal Institute of Technology karlm@kth.se Amel Bennaceur The Open University amel.bennaceur@open.ac.uk Model driven software engineering Machine Learning Machine Learning (ML) is the discipline that studies methods for automatically inferring models from data. Machine learning has been successfully applied in many areas of software engineering ranging from behaviour extraction, to testing, to bug fixing. Many more applications are yet be defined. However, a better understanding of ML methods, their assumptions and guarantees would help software engineers adopt and identify the appropriate methods for their desired applications. We argue that this choice can be guided by the models one seeks to infer. In this technical briefing, we review and reflect on the applications of ML for software engineering organised according to the models they produce and the methods they use. We introduce the principles of ML, give an overview of some key methods, and present examples of areas of software engineering benefiting from ML. We also discuss the open challenges for reaching the full potential of ML for software engineering and how ML can benefit from software engineering methods.",
              "pageNumber": 548,
              "isPageNumberRoman": false
            },
            {
              "id": "6aQoo5aVNIRUrdOPhS8N63",
              "type": "authorPaper",
              "text": "State of the Systems Security",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16NkHqyJbfZD6kRjwn0A0P/2F2WQynAsV39OuGf2ZOphJ.pdf",
              "extraLocations": [],
              "authorNames": "Eric Bodden (Heinz Nixdorf Institute at Paderborn University & Fraunhofer Institute for Mechatronic Systems Design (IEM))",
              "abstract": "Software-intensive systems are increasingly pervading our everyday lives. As they get more and more connected, this opens them up to far-reaching cyber attacks. Moreover, a recent study by the U.S. Department of Homeland Security shows that more than 90% of current cyber-attacks are enabled not by faulty crypto, networks or hardware but by application-level implementation vulnerabilities. I argue that those problems can only be resolved by the widespread introduction of a secure software development lifecycle (SDLC). In this technical briefing I explain where secure engineering currently fails in practice, and what software engineers can do if they want to make a positive impact in the field. I will do so by explaining major open challenges in the field, but also by resorting to success stories from the introduction of SDLCs in industry.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 State of the Systems Security 1517511268515 Eric Bodden Heinz Nixdorf Institute at Paderborn University & Fraunhofer Institute for Mechatronic Systems Design (IEM) eric.bodden@upb.de Secure software engineering Secure software development lifecycle Software-intensive systems are increasingly pervading our everyday lives. As they get more and more connected, this opens them up to far-reaching cyber attacks. Moreover, a recent study by the U.S. Department of Homeland Security shows that more than 90% of current cyber-attacks are enabled not by faulty crypto, networks or hardware but by application-level implementation vulnerabilities. I argue that those problems can only be resolved by the widespread introduction of a secure software development lifecycle (SDLC). In this technical briefing I explain where secure engineering currently fails in practice, and what software engineers can do if they want to make a positive impact in the field. I will do so by explaining major open challenges in the field, but also by resorting to success stories from the introduction of SDLCs in industry.",
              "pageNumber": 550,
              "isPageNumberRoman": false
            },
            {
              "id": "6QgxeJE1ZSgnIogRq1REcs",
              "type": "authorPaper",
              "text": "Multi-platform Computing for Physical Devices via MakeCode and CODAL",
              "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ot68K3aKE7CQfcrmRVKlR/jsk9AWtBkZikr0gw8xmBk.pdf",
              "extraLocations": [],
              "authorNames": "Thomas Ball (Microsoft Research), Judith Bishop (Stellenbosch University), Joe Finney (Lancaster University)",
              "abstract": "As the Internet of Things becomes commonplace, modern software must encompass the sensors, actuators and controllers that make up these physical computers. But can non-experts program such systems? Can such software development be undertaken by anyone, especially programmers who are learning or who are not aiming to be technical experts? We describe the motivation and principles behind Microsoft MakeCode and CODAL, two symbiotic frameworks which have many innovative engineering features for physical computing. Together, these two technologies highlight a new approach to software development for embedded computing devices which provides accessible programming languages and environments that reduce the complexity of programming embedded devices without compromising the flexibility or performance of the resulting software.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Companion Proceedings ICSE-Companion 2018 Multi-platform Computing for Physical Devices via MakeCode and CODAL 1518464764833 Thomas Ball Microsoft Research tball@microsoft.com Judith Bishop Stellenbosch University judithbishop@outlook.com Joe Finney Lancaster University j.finney@lancaster.ac.uk Physical computing internet of things programming languages runtime layer micro:bit Typescript MakeCode CODAL As the Internet of Things becomes commonplace, modern software must encompass the sensors, actuators and controllers that make up these physical computers. But can non-experts program such systems? Can such software development be undertaken by anyone, especially programmers who are learning or who are not aiming to be technical experts? We describe the motivation and principles behind Microsoft MakeCode and CODAL, two symbiotic frameworks which have many innovative engineering features for physical computing. Together, these two technologies highlight a new approach to software development for embedded computing devices which provides accessible programming languages and environments that reduce the complexity of programming embedded devices without compromising the flexibility or performance of the resulting software.",
              "pageNumber": 552,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false,
          "chair": ""
        }
      ]
    },
    {
      "title": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results",
      "acronym": "ICSE-NIER",
      "year": 2018,
      "frontMatter": [
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_I",
          "text": "Title Page i",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7bSN3AQV3r7ttS9Z67PeSz/3mfd5vT3CAkzuhEHyljCLm.pdf",
          "extraLocations": [],
          "pageNumber": 1,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_III",
          "text": "Title Page iii",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5cwhJb8MwWmjE45JpOcnFK/215TSGi1Pb79ljmeC47O2k.pdf",
          "extraLocations": [],
          "pageNumber": 3,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_COPYRIGHT_PAGE",
          "text": "Copyright Page",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1D5nKbHbUcqURnxBisJ55R/2ajQiPQ6tZgD6CdPvY3gY7.pdf",
          "extraLocations": [],
          "pageNumber": 4,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TABLE_OF_CONTENTS",
          "text": "Table of Contents",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2fbjDeDd4jnNPdbMGVdPXo/1SFIQ7Qjvqr5jd2yJa9Jnm.pdf",
          "extraLocations": [],
          "pageNumber": 5,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_GENERAL_CHAIR",
          "text": "Message from the General Chair",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/41RT0ZyHvLbRokaUXnvCO/2ttx4T2PM8MsOTFn99IeNs.pdf",
          "extraLocations": [],
          "pageNumber": 9,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the NIER Chairs",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7LWX5odvVpBKXFPmkMJeXm/4iQT6C2KrI6olU6UlvI5uO.pdf",
          "extraLocations": [],
          "pageNumber": 12,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "New Ideas and Emerging Results Program Committee",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/18AZMK0uHUlg5Ese77gXju/1VkMfwdrFyvYHZbwUUnxdf.pdf",
          "extraLocations": [],
          "pageNumber": 13,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_SPONSORS_CONFERENCE_SUPPORT",
          "text": "Sponsors and Supporters",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4n3GxPHr9Soy5S7FlN76Xu/6gY3ZXJkXstEbwyyl3UvUF.pdf",
          "extraLocations": [],
          "pageNumber": 17,
          "isPageNumberRoman": true
        }
      ],
      "backMatter": [
        {
          "class": "BM",
          "type": "BM_AUTHOR_INDEX",
          "text": "Author Index",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P3uuBD4RBfURz8HeGQyfp/6ov4HgIcC3lkcGhFT8iES8.pdf",
          "extraLocations": [],
          "pageNumber": 113,
          "isPageNumberRoman": false
        },
        {
          "class": "BM",
          "type": "BM_ROSTER",
          "text": "Publisher's Information",
          "articleLocation": null,
          "extraLocations": [],
          "pageNumber": ""
        }
      ],
      "sections": [
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Security, Safety, and Quality",
          "lineItems": [
            {
              "id": "35DYuX7Ahqgt99MOhamDkB",
              "type": "authorPaper",
              "text": "Generative Secure Design, Defined",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/28Ti47g1XoQkNrxFNkwOEO/6D4SveoetTi1fAdD6ku27b.pdf",
              "extraLocations": [],
              "authorNames": "Riccardo Scandariato (University of Gothenburg), Jennifer Horkhoff (University of Gothenburg), Robert Feldt (Chalmers)",
              "abstract": "In software-intensive industries, companies face the constant challenge of not having enough security experts on staff in order to validate the design of the high-complexity projects they run. Many of these companies are now realizing that increasing automation in their secure development process is the only way forward in order to cope with the ultra-large scale of modern systems. This paper embraces that viewpoint. We chart the roadmap to the development of a generative design tool that iteratively produces several design alternatives, each attempting to solve the security goals by incorporating security mechanisms. The tool explores the possible solutions by starting from well-known security techniques and by creating variations via mutations and crossovers. By incorporating user feedback, the tool generates increasingly better design alternatives.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Generative Secure Design, Defined 1517830935116 Riccardo Scandariato University of Gothenburg riccardo.scandariato@cse.gu.se Jennifer Horkhoff University of Gothenburg jennifer.horkhoff@cse.gu.se Robert Feldt Chalmers robert.feldt@chalmers.se Security Design Tool In software-intensive industries, companies face the constant challenge of not having enough security experts on staff in order to validate the design of the high-complexity projects they run. Many of these companies are now realizing that increasing automation in their secure development process is the only way forward in order to cope with the ultra-large scale of modern systems. This paper embraces that viewpoint. We chart the roadmap to the development of a generative design tool that iteratively produces several design alternatives, each attempting to solve the security goals by incorporating security mechanisms. The tool explores the possible solutions by starting from well-known security techniques and by creating variations via mutations and crossovers. By incorporating user feedback, the tool generates increasingly better design alternatives.",
              "pageNumber": 1,
              "isPageNumberRoman": false
            },
            {
              "id": "1Nv92ulocgazYjz0aTHGzY",
              "type": "authorPaper",
              "text": "Towards Secure Dynamic Product Lines in the Cloud",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf",
              "extraLocations": [],
              "authorNames": "Sebastian Krieter (Harz University of Applied Sciences; University of Magdeburg), Jacob Krüger (Harz University of Applied Sciences; University of Magdeburg), Nico Weichbrodt (TU Braunschweig), Vasily A. Sartakov (TU Braunschweig), Rüdiger Kapitza (TU Braunschweig), Thomas Leich (Harz University of Applied Sciences; METOP GmbH)",
              "abstract": "Cloud-based technologies play an increasing role in software engineering because of their scalability, availability, and cost efficiency. However, due to privacy issues, developers and organizations still hesitate to host applications that handle sensitive data on servers of external cloud providers. Modern hardware extensions, such as Intel's Software Guard Extensions (SGX), are an attempt to provide confidentiality and integrity for applications running on external hardware. Still, enabling SGX in cloud systems poses new challenges considering scalability and flexibility. In this paper, we propose an approach to address these issues by employing concepts from the domain of Dynamic Software Product Lines (DSPLs). We aim to enable applications running on SGX-based cloud systems to be securely reconfigurable and extendable during runtime. In particular, we describe properties that such an approach should fulfill and discuss corresponding challenges.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Towards Secure Dynamic Product Lines in the Cloud 1518384580158 Sebastian Krieter Harz University of Applied Sciences; University of Magdeburg skrieter@hs-harz.de Jacob Krüger Harz University of Applied Sciences; University of Magdeburg jkrueger@hs-harz.de Nico Weichbrodt TU Braunschweig weichbr@ibr.cs.tu-bs.de Vasily A. Sartakov TU Braunschweig sartakov@ibr.cs.tu-bs.de Rüdiger Kapitza TU Braunschweig rrkapitz@ibr.cs.tu-bs.de Thomas Leich Harz University of Applied Sciences; METOP GmbH tleich@hs-harz.de Cloud computing SGX Software product line Security Cloud-based technologies play an increasing role in software engineering because of their scalability, availability, and cost efficiency. However, due to privacy issues, developers and organizations still hesitate to host applications that handle sensitive data on servers of external cloud providers. Modern hardware extensions, such as Intel's Software Guard Extensions (SGX), are an attempt to provide confidentiality and integrity for applications running on external hardware. Still, enabling SGX in cloud systems poses new challenges considering scalability and flexibility. In this paper, we propose an approach to address these issues by employing concepts from the domain of Dynamic Software Product Lines (DSPLs). We aim to enable applications running on SGX-based cloud systems to be securely reconfigurable and extendable during runtime. In particular, we describe properties that such an approach should fulfill and discuss corresponding challenges.",
              "pageNumber": 5,
              "isPageNumberRoman": false
            },
            {
              "id": "1aJ4upqeraGFWX1ziTukw1",
              "type": "authorPaper",
              "text": "Towards Forensic-Ready Software Systems",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf",
              "extraLocations": [],
              "authorNames": "Liliana Pasquale (University College Dublin), Dalal Alrajeh (Imperial College London), Claudia Peersman (University of Bristol), Thein Tun (The Open University), Bashar Nuseibeh (The Open University and Lero – the Irish Software Research Centre), Awais Rashid (University of Bristol)",
              "abstract": "As software becomes more ubiquitous, and the risk of cyber-crimes increases, ensuring that software systems are forensic-ready (i.e., capable of supporting potential digital investigations) is critical. However, little or no attention has been given to how well-suited existing software engineering methodologies and practices are for the systematic development of such systems. In this paper, we consider the meaning of forensic readiness of software, de\u001bfine forensic readiness requirements, and highlight some of the open software engineering challenges in the face of forensic readiness. We use a real software system developed to investigate online sharing of child abuse media to illustrate the presented concepts.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Towards Forensic-Ready Software Systems 1518549673928 Liliana Pasquale University College Dublin liliana.pasquale@ucd.ie Dalal Alrajeh Imperial College London dalal.alrajeh@ic.ac.uk Claudia Peersman University of Bristol claudia.peersman@bristol.ac.uk Thein Tun The Open University thein.tun@open.ac.uk Bashar Nuseibeh The Open University and Lero – the Irish Software Research Centre b.nuseibeh@open.ac.uk Awais Rashid University of Bristol awais.rashid@bristol.ac.uk Requirements Engineering Forensic readiness Forensic Ready Systems Digital Forensics As software becomes more ubiquitous, and the risk of cyber-crimes increases, ensuring that software systems are forensic-ready (i.e., capable of supporting potential digital investigations) is critical. However, little or no attention has been given to how well-suited existing software engineering methodologies and practices are for the systematic development of such systems. In this paper, we consider the meaning of forensic readiness of software, de\u001bfine forensic readiness requirements, and highlight some of the open software engineering challenges in the face of forensic readiness. We use a real software system developed to investigate online sharing of child abuse media to illustrate the presented concepts.",
              "pageNumber": 9,
              "isPageNumberRoman": false
            },
            {
              "id": "n8XqD39ZiOown0UlWXtWj",
              "type": "authorPaper",
              "text": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf",
              "extraLocations": [],
              "authorNames": "Chung-Ling Lin (Western Michigan University), Wuwei Shen (Western Michigan University), Steven Drager (Air Force Research Laboratory), Betty Cheng (Michigan State University)",
              "abstract": "Evaluation of assurance cases typically requires certifiers' domain knowledge and experience, and, as such, most software certification has been conducted manually. Given the advancement in uncertainty theories and software traceability, we envision that these technologies can synergistically be combined and leveraged to offer some degree of automation to improve the certifiers' capability to perform software certification. To this end, we present a novel confidence calculation framework that 1) applies the Dempster-Shafer theory as a mathematical model to calculate the confidence between a parent claim and its children claims; and 2) uses the vector space model to evaluate the confidence for the evidence items using traceability information. A fragment of an assurance case (expressed in the goal-structuring notation – GSN) for the coupled tank system is used to illustrate our new framework.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Measure Confidence of Assurance Cases in Safety-Critical Domains 1518449362053 Chung-Ling Lin Western Michigan University chung-ling.lin@wmich.edu Wuwei Shen Western Michigan University wuwei.shen@wmich.edu Steven Drager Air Force Research Laboratory steven.drager@us.af.mil Betty Cheng Michigan State University chengb@cse.msu.edu Software Certification Dempster-Shafer theory Software Traceability Vector Space Model (VSM) Evaluation of assurance cases typically requires certifiers' domain knowledge and experience, and, as such, most software certification has been conducted manually. Given the advancement in uncertainty theories and software traceability, we envision that these technologies can synergistically be combined and leveraged to offer some degree of automation to improve the certifiers' capability to perform software certification. To this end, we present a novel confidence calculation framework that 1) applies the Dempster-Shafer theory as a mathematical model to calculate the confidence between a parent claim and its children claims; and 2) uses the vector space model to evaluate the confidence for the evidence items using traceability information. A fragment of an assurance case (expressed in the goal-structuring notation – GSN) for the coupled tank system is used to illustrate our new framework.",
              "pageNumber": 13,
              "isPageNumberRoman": false
            },
            {
              "id": "4aUFyfamFcY2VsaQZWNpYB",
              "type": "authorPaper",
              "text": "A Critical Review of \"A Practical Guide to Select Quality Indicators for Assessing Pareto-Based Search Algorithms in Search-Based Software Engineering\": Essay on Quality Indicator Selection for SBSE",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6UAPfFBg43xIyqHtpkPyPH/5XsmxGGTBk7EC4UT2514rP.pdf",
              "extraLocations": [],
              "authorNames": "Miqing Li (University of Birmingham, UK), Tao Chen (University of Birmingham, UK), Xin Yao (University of Birmingham, UK)",
              "abstract": "This paper presents a critical review of the work published at ICSE'2016 on a practical guide of quality indicator selection for assessing multiobjective solution sets in search-based software engineering (SBSE). This review has two goals. First, we aim at explaining why we disagree with the work at ICSE'2016 and why the reasons behind this disagreement are important to the SBSE community. Second, we aim at providing a more clarified guide of quality indicator selection, serving as a new direction on this particular topic for the SBSE community. In particular, we argue that it does matter which quality indicator to select, whatever in the same quality category or across different categories. This claim is based upon the fundamental goal of multiobjective optimisation — supplying the decision-maker a set of solutions which are the most consistent with their preferences.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 A Critical Review of \"A Practical Guide to Select Quality Indicators for Assessing Pareto-Based Search Algorithms in Search-Based Software Engineering\": Essay on Quality Indicator Selection for SBSE 1517771379752 Miqing Li University of Birmingham, UK m.li.8@cs.bham.ac.uk Tao Chen University of Birmingham, UK t.chen@cs.bham.ac.uk Xin Yao University of Birmingham, UK x.yao@cs.bham.ac.uk Multiobjective optimisation search-based software engineering quality assessment quality indicator selection This paper presents a critical review of the work published at ICSE'2016 on a practical guide of quality indicator selection for assessing multiobjective solution sets in search-based software engineering (SBSE). This review has two goals. First, we aim at explaining why we disagree with the work at ICSE'2016 and why the reasons behind this disagreement are important to the SBSE community. Second, we aim at providing a more clarified guide of quality indicator selection, serving as a new direction on this particular topic for the SBSE community. In particular, we argue that it does matter which quality indicator to select, whatever in the same quality category or across different categories. This claim is based upon the fundamental goal of multiobjective optimisation — supplying the decision-maker a set of solutions which are the most consistent with their preferences.",
              "pageNumber": 17,
              "isPageNumberRoman": false
            },
            {
              "id": "3XQM1cVGg2qoWLPoeqHyUk",
              "type": "authorPaper",
              "text": "Enabling Real-Time Feedback in Software Engineering",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf",
              "extraLocations": [],
              "authorNames": "Enrique Larios Vargas (Software Improvement Group), Joseph Hejderup (Delft University of Technology), Maria Kechagia (Delft University of Technology), Magiel Bruntink (Software Improvement Group), Georgios Gousios (Delft University of Technology)",
              "abstract": "Modern software projects consist of more than just code: teams follow development processes, the code runs on servers or mobile phones and produces run time logs and users talk about the software in forums like StackOverflow and Twitter and rate it on app stores. Insights stemming from the real-time analysis of combined software engineering data can help software practitioners to conduct faster decision-making. With the development of CodeFeedr, a Real-time Software Analytics Platform, we aim to make software analytics a core feedback loop for software engineering projects. CodeFeedr's vision entails: (1) The ability to unify archival and current software analytics data under a single query language, and (2) The feasibility to apply new techniques and methods for high-level aggregation and summarization of near real-time information on software development. In this paper, we outline three use cases where our platform is expected to have a significant impact on the quality and speed of decision making; dependency management, productivity analytics, and run-time error feedback.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Enabling Real-Time Feedback in Software Engineering 1518431299140 Enrique Larios Vargas Software Improvement Group e.lariosvargas@sig.eu Joseph Hejderup Delft University of Technology J.I.Hejderup@tudelft.nl Maria Kechagia Delft University of Technology M.Kechagia@tudelft.nl Magiel Bruntink Software Improvement Group m.bruntink@sig.eu Georgios Gousios Delft University of Technology G.Gousios@tudelft.nl software analytics real time feedback streaming data Modern software projects consist of more than just code: teams follow development processes, the code runs on servers or mobile phones and produces run time logs and users talk about the software in forums like StackOverflow and Twitter and rate it on app stores. Insights stemming from the real-time analysis of combined software engineering data can help software practitioners to conduct faster decision-making. With the development of CodeFeedr, a Real-time Software Analytics Platform, we aim to make software analytics a core feedback loop for software engineering projects. CodeFeedr's vision entails: (1) The ability to unify archival and current software analytics data under a single query language, and (2) The feasibility to apply new techniques and methods for high-level aggregation and summarization of near real-time information on software development. In this paper, we outline three use cases where our platform is expected to have a significant impact on the quality and speed of decision making; dependency management, productivity analytics, and run-time error feedback.",
              "pageNumber": 21,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Programming and Code Analysis",
          "lineItems": [
            {
              "id": "DaGPRbfkTYh2RZgXqDJiT",
              "type": "authorPaper",
              "text": "Combining Spreadsheet Smells for Improved Fault Prediction",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf",
              "extraLocations": [],
              "authorNames": "Patrick Koch (AAU Klagenfurt), Konstantin Schekotihin (AAU Klagenfurt), Dietmar Jannach (AAU Klagenfurt), Birgit Hofer (Graz University of Technology), Franz Wotawa (Graz University of Technology), Thomas Schmitz (TU Dortmund)",
              "abstract": "Spreadsheets are commonly used in organizations as a programming tool for business-related calculations and decision making. Since faults in spreadsheets can have severe business impacts, a number of approaches from general software engineering have been applied to spreadsheets in recent years, among them the concept of code smells. Smells can in particular be used for the task of fault prediction. An analysis of existing spreadsheet smells, however, revealed that the predictive power of individual smells can be limited. In this work we therefore propose a machine learning based approach which combines the predictions of individual smells by using an AdaBoost ensemble classifier. Experiments on two public datasets containing real-world spreadsheet faults show significant improvements in terms of fault prediction accuracy.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Combining Spreadsheet Smells for Improved Fault Prediction 1518183582978 Patrick Koch AAU Klagenfurt Patrick.Koch@aau.at Konstantin Schekotihin AAU Klagenfurt Konstantin.Schekotihin@aau.at Dietmar Jannach AAU Klagenfurt Dietmar.Jannach@aau.at Birgit Hofer Graz University of Technology bhofer@ist.tugraz.at Franz Wotawa Graz University of Technology wotawa@ist.tugraz.at Thomas Schmitz TU Dortmund thomas.schmitz@tu-dortmund.de Spreadsheet Smells Spreadsheet QA Fault Prediction Spreadsheets are commonly used in organizations as a programming tool for business-related calculations and decision making. Since faults in spreadsheets can have severe business impacts, a number of approaches from general software engineering have been applied to spreadsheets in recent years, among them the concept of code smells. Smells can in particular be used for the task of fault prediction. An analysis of existing spreadsheet smells, however, revealed that the predictive power of individual smells can be limited. In this work we therefore propose a machine learning based approach which combines the predictions of individual smells by using an AdaBoost ensemble classifier. Experiments on two public datasets containing real-world spreadsheet faults show significant improvements in terms of fault prediction accuracy.",
              "pageNumber": 25,
              "isPageNumberRoman": false
            },
            {
              "id": "uLzYb21q0dXMsMsHz2V6p",
              "type": "authorPaper",
              "text": "Images of Code: Lossy Compression for Native Instructions",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4O33wTClUcK5dLf9D2ytLQ/7vjaqiOp3476mtH6LPlGdm.pdf",
              "extraLocations": [],
              "authorNames": "Marcelino Rodriguez-Cancio (University of Rennes 1), Jules White (Vanderbilt University), Benoit Baudry (KHT)",
              "abstract": "Developers can use lossy compression on images and many other artifacts to reduce size and improve network transfer times. Native program instructions, however, are typically not considered candi-dates for lossy compression since arbitrary losses in instructions may dramatically affect program output. In this paper we show that lossy compression of compiled native instructions is possible in certain circumstances. We demonstrate that the instructions sequence of a program can be lossily translated into a separate but equivalent program with instruction-wise differences, which still produces the same output. We contribute the novel insight that it is possible to exploit such instruction differences to design lossy compression schemes for native code. We support this idea with sound and unsound program transformations that improve performance of compression techniques such as Run-Length (RLE), Huffman and LZ77. We also show that large areas of code can endure tampered instructions with no impact on the output, a result consistent with previous works from various communities.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Images of Code: Lossy Compression for Native Instructions 1518211100236 Marcelino Rodriguez-Cancio University of Rennes 1 me@marcelinorc Jules White Vanderbilt University jules@dre.vanderbilt.edu Benoit Baudry KHT baudry@kth.se lossy compression software diversity approximate computing Developers can use lossy compression on images and many other artifacts to reduce size and improve network transfer times. Native program instructions, however, are typically not considered candi-dates for lossy compression since arbitrary losses in instructions may dramatically affect program output. In this paper we show that lossy compression of compiled native instructions is possible in certain circumstances. We demonstrate that the instructions sequence of a program can be lossily translated into a separate but equivalent program with instruction-wise differences, which still produces the same output. We contribute the novel insight that it is possible to exploit such instruction differences to design lossy compression schemes for native code. We support this idea with sound and unsound program transformations that improve performance of compression techniques such as Run-Length (RLE), Huffman and LZ77. We also show that large areas of code can endure tampered instructions with no impact on the output, a result consistent with previous works from various communities.",
              "pageNumber": 29,
              "isPageNumberRoman": false
            },
            {
              "id": "4xRmP8E9HQuUVxYW42hOaR",
              "type": "authorPaper",
              "text": "Hierarchical Learning of Cross-Language Mappings Through Distributed Vector Representations for Code",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/63peqgtl2cqa2Vdl1J8VcL/33ID2f2G6xIYVCyhGCws1B.pdf",
              "extraLocations": [],
              "authorNames": "Nghi D. Q. Bui (Singapore Management University), Lingxiao Jiang (Singapore Management University)",
              "abstract": "Translating a program written in one programming language to another can be useful for software development tasks that need functionality implementations in different languages. Although past studies have considered this problem, they may be either specific to the language grammars, or specific to certain kinds of code elements (e.g., tokens, phrases, API uses). This paper proposes a new approach to automatically learn cross-language representations for various kinds of structural code elements that may be used for program translation. Our key idea is two folded: First, we normalize and enrich code token streams with additional structural and semantic information, and train cross-language vector representations for the tokens (a.k.a. shared embeddings based on word2vec, a neural-network-based technique for producing word embeddings; Second, hierarchically from bottom up, we construct shared embeddings for code elements of higher levels of granularity (e.g., expressions, statements, methods) from the embeddings for their constituents, and then build mappings among code elements across languages based on similarities among embeddings. Our preliminary evaluations on about 40,000 Java and C# source files from 9 software projects show that our approach can automatically learn shared embeddings for various code elements in different languages and identify their cross-language mappings with reasonable Mean Average Precision scores. When compared with an existing tool for mapping library API methods, our approach identifies many more mappings accurately. The mapping results and code can be accessed at https://github.com/bdqnghi/hierarchical-programming-language-mapping) We believe that our idea for learning cross-language vector representations with code structural information can be a useful step towards automated program translation.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Hierarchical Learning of Cross-Language Mappings Through Distributed Vector Representations for Code 1518428022210 Nghi D. Q. Bui Singapore Management University dqnbui.2016@phdis.smu.edu.sg Lingxiao Jiang Singapore Management University lxjiang@smu.edu.sg software maintenance language mapping word2vec syntactic structure program translation Translating a program written in one programming language to another can be useful for software development tasks that need functionality implementations in different languages. Although past studies have considered this problem, they may be either specific to the language grammars, or specific to certain kinds of code elements (e.g., tokens, phrases, API uses). This paper proposes a new approach to automatically learn cross-language representations for various kinds of structural code elements that may be used for program translation. Our key idea is two folded: First, we normalize and enrich code token streams with additional structural and semantic information, and train cross-language vector representations for the tokens (a.k.a. shared embeddings based on word2vec, a neural-network-based technique for producing word embeddings; Second, hierarchically from bottom up, we construct shared embeddings for code elements of higher levels of granularity (e.g., expressions, statements, methods) from the embeddings for their constituents, and then build mappings among code elements across languages based on similarities among embeddings. Our preliminary evaluations on about 40,000 Java and C# source files from 9 software projects show that our approach can automatically learn shared embeddings for various code elements in different languages and identify their cross-language mappings with reasonable Mean Average Precision scores. When compared with an existing tool for mapping library API methods, our approach identifies many more mappings accurately. The mapping results and code can be accessed at https://github.com/bdqnghi/hierarchical-programming-language-mapping) We believe that our idea for learning cross-language vector representations with code structural information can be a useful step towards automated program translation.",
              "pageNumber": 33,
              "isPageNumberRoman": false
            },
            {
              "id": "2NREG8fyGPtCixC3ag2Ygv",
              "type": "authorPaper",
              "text": "Which Library Should I Use?: A Metric-Based Comparison of Software Libraries",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7tvenWpQiRYIQUZxjDtYA1/6oJRf6G9ZAFW05DP8p42aj.pdf",
              "extraLocations": [],
              "authorNames": "Fernando López de la Mora (University of Alberta), Sarah Nadi (University of Alberta)",
              "abstract": "Software libraries ease development tasks by allowing client developers to reuse code written by third parties. To perform a specific task, there is usually a large number of libraries that offer the desired functionality. Unfortunately, selecting the appropriate library to use is not straightforward since developers are often unaware of the advantages and disadvantages of each library, and may also care about different characteristics in different situations. In this paper, we introduce the idea of using software metrics to help developers choose the libraries most suited to their needs. We propose creating library comparisons based on several metrics extracted from multiple sources such as software repositories, issue tracking systems, and Q&amp;A websites. By consolidating all of this information in a single website, we enable developers to make informed decisions by comparing metric data belonging to libraries from several domains. Additionally, we will use this website to survey developers about which metrics are the most valuable to them, helping us answer the broader question of what determines library quality. In this short paper, we describe the metrics we propose in our work and present preliminary results, as well as faced challenges.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Which Library Should I Use?: A Metric-Based Comparison of Software Libraries 1517854232529 Fernando López de la Mora University of Alberta lopezdel@ualberta.ca Sarah Nadi University of Alberta nadi@ualberta.ca software library software metrics application programming interfaces mining software repositories assisted developer support Software libraries ease development tasks by allowing client developers to reuse code written by third parties. To perform a specific task, there is usually a large number of libraries that offer the desired functionality. Unfortunately, selecting the appropriate library to use is not straightforward since developers are often unaware of the advantages and disadvantages of each library, and may also care about different characteristics in different situations. In this paper, we introduce the idea of using software metrics to help developers choose the libraries most suited to their needs. We propose creating library comparisons based on several metrics extracted from multiple sources such as software repositories, issue tracking systems, and Q&amp;A websites. By consolidating all of this information in a single website, we enable developers to make informed decisions by comparing metric data belonging to libraries from several domains. Additionally, we will use this website to survey developers about which metrics are the most valuable to them, helping us answer the broader question of what determines library quality. In this short paper, we describe the metrics we propose in our work and present preliminary results, as well as faced challenges.",
              "pageNumber": 37,
              "isPageNumberRoman": false
            },
            {
              "id": "6dspjyAVqJ6I9Cpo0Fc6q4",
              "type": "authorPaper",
              "text": "UniComp: A Semantics-Aware Model Compiler for Optimised Predictable Software",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/hzHwzSfCAh1hC8lk5nnX3/6Q6xNjTCRFx0Jx8aySTZRl.pdf",
              "extraLocations": [],
              "authorNames": "Federico Ciccozzi (Mälardalen University)",
              "abstract": "In Model-Driven Engineering, executables are generated from domain-specific modelling languages (DSMLs) through two steps: generation of program code in a third-generation programming languages (3GLs, like C++ or Java) from a model, and compilation of the generated code to object code. 3GL code generation raises three issues. (1) Code generators are DSML- and 3GL-specific, hence they can not be used for other DSMLs or 3GLs than those they were designed for. (2) Existing code generators do not exploit model semantics; hence, 3GL programs do not always semantically reflect models. (3) Existing 3GL compilers are unable to exploit model semantics; hence, they are not able to operate model-specific optimisations. (2) and (3) seriously threaten predictability of the generated executables. We advocate the need and provides a solution proposal for an innovative model compilation framework based on model semantics to produce executables without translations to 3GLs. Model compilation will be based on a common semantics, the Semantics of a Foundational Subset for Executable UML Models (fUML), and will semantically underpin any DSML whose execution semantics can be specified with fUML.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 UniComp: A Semantics-Aware Model Compiler for Optimised Predictable Software 1517931808340 Federico Ciccozzi Mälardalen University federico.ciccozzi@mdh.se UML ALF fUML compilation model-driven engineering predictability semantics In Model-Driven Engineering, executables are generated from domain-specific modelling languages (DSMLs) through two steps: generation of program code in a third-generation programming languages (3GLs, like C++ or Java) from a model, and compilation of the generated code to object code. 3GL code generation raises three issues. (1) Code generators are DSML- and 3GL-specific, hence they can not be used for other DSMLs or 3GLs than those they were designed for. (2) Existing code generators do not exploit model semantics; hence, 3GL programs do not always semantically reflect models. (3) Existing 3GL compilers are unable to exploit model semantics; hence, they are not able to operate model-specific optimisations. (2) and (3) seriously threaten predictability of the generated executables. We advocate the need and provides a solution proposal for an innovative model compilation framework based on model semantics to produce executables without translations to 3GLs. Model compilation will be based on a common semantics, the Semantics of a Foundational Subset for Executable UML Models (fUML), and will semantically underpin any DSML whose execution semantics can be specified with fUML.",
              "pageNumber": 41,
              "isPageNumberRoman": false
            },
            {
              "id": "6mvGsftqYsx02iEIroYXr3",
              "type": "authorPaper",
              "text": "Self-Adaptive Static Analysis",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1gSz9MfSQhkps7eUcuRDeR/S8b0IXIkWsFEoKSFNF5yu.pdf",
              "extraLocations": [],
              "authorNames": "Eric Bodden (Paderborn University & Fraunhofer IEM)",
              "abstract": "Static code analysis is a powerful approach to detect quality deficiencies such as performance bottlenecks, safety violations or security vulnerabilities already during a software system's implementation. Yet, as current software systems continue to grow, current static-analysis systems more frequently face the problem of insufficient scalability. We argue that this is mainly due to the fact that current static analyses are implemented fully manually, often in general-purpose programming languages such as Java or C, or in declarative languages such as Datalog. This design choice predefines the way in which the static analysis evaluates, and limits the optimizations and extensions static-analysis designers can apply. To boost scalability to a new level, we propose to fuse static-analysis with just-in-time-optimization technology, introducing for the first time static analyses that are managed and inherently self-adaptive. Those analyses automatically adapt themselves to yield a performance/precision tradeoff that is optimal with respect to the analyzed software system and to the analysis itself. Self-adaptivity is enabled by the novel idea of designing a dedicated intermediate representation, not for the analyzed program but for the analysis itself. This representation allows for an automatic optimization and adaptation of the analysis code, both ahead-of-time (through static analysis of the static analysis) as well as just-in-time during the analysis' execution, similar to just-in-time compilers.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Self-Adaptive Static Analysis 1517768044919 Eric Bodden Paderborn University & Fraunhofer IEM eric.bodden@upb.de Static program analysis virtual machines intermediate representations Static code analysis is a powerful approach to detect quality deficiencies such as performance bottlenecks, safety violations or security vulnerabilities already during a software system's implementation. Yet, as current software systems continue to grow, current static-analysis systems more frequently face the problem of insufficient scalability. We argue that this is mainly due to the fact that current static analyses are implemented fully manually, often in general-purpose programming languages such as Java or C, or in declarative languages such as Datalog. This design choice predefines the way in which the static analysis evaluates, and limits the optimizations and extensions static-analysis designers can apply. To boost scalability to a new level, we propose to fuse static-analysis with just-in-time-optimization technology, introducing for the first time static analyses that are managed and inherently self-adaptive. Those analyses automatically adapt themselves to yield a performance/precision tradeoff that is optimal with respect to the analyzed software system and to the analysis itself. Self-adaptivity is enabled by the novel idea of designing a dedicated intermediate representation, not for the analyzed program but for the analysis itself. This representation allows for an automatic optimization and adaptation of the analysis code, both ahead-of-time (through static analysis of the static analysis) as well as just-in-time during the analysis' execution, similar to just-in-time compilers.",
              "pageNumber": 45,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Mining, Verifying, and Learning",
          "lineItems": [
            {
              "id": "5RhjqSMFin6oPkeccOPyOX",
              "type": "authorPaper",
              "text": "Mining Container Image Repositories for Software Configuration and Beyond",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4wlZKfwOLMVMe3mCqFtWP1/6EIw9CKjiQiNIPFziN2DRW.pdf",
              "extraLocations": [],
              "authorNames": "Tianyin Xu (University of Illinois at Urbana–Champaign), Darko Marinov (University of Illinois at Urbana–Champaign)",
              "abstract": "This paper introduces the idea of mining container image repositories for configuration and other deployment information of software systems. Unlike traditional software repositories (e.g., source code repositories and app stores), image repositories encapsulate the entire execution ecosystem for running target software, including its configurations, dependent libraries and components, and OS-level utilities, which contributes to a wealth of data and information. We showcase the opportunities based on concrete software engineering tasks that can benefit from mining image repositories. To facilitate future mining efforts, we summarize the challenges of analyzing image repositories and the approaches that can address these challenges. We hope that this paper will stimulate exciting research agenda of mining this emerging type of software repositories.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Mining Container Image Repositories for Software Configuration and Beyond 1518337866400 Tianyin Xu University of Illinois at Urbana–Champaign tyxu@illinois.edu Darko Marinov University of Illinois at Urbana–Champaign marinov@illinois.edu container image Docker configuration software repository This paper introduces the idea of mining container image repositories for configuration and other deployment information of software systems. Unlike traditional software repositories (e.g., source code repositories and app stores), image repositories encapsulate the entire execution ecosystem for running target software, including its configurations, dependent libraries and components, and OS-level utilities, which contributes to a wealth of data and information. We showcase the opportunities based on concrete software engineering tasks that can benefit from mining image repositories. To facilitate future mining efforts, we summarize the challenges of analyzing image repositories and the approaches that can address these challenges. We hope that this paper will stimulate exciting research agenda of mining this emerging type of software repositories.",
              "pageNumber": 49,
              "isPageNumberRoman": false
            },
            {
              "id": "2tIaKmX07r9SyI544HKtCZ",
              "type": "authorPaper",
              "text": "Explainable Software Analytics",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/18qTr6yU8gmdGlxPJwuabL/5riZmj2mdJZSyRCz4NRyUd.pdf",
              "extraLocations": [],
              "authorNames": "Hoa Khanh Dam (University of Wollongong), Truyen Tran (Deakin University), Aditya Ghose (University of Wollongong)",
              "abstract": "Software analytics has been the subject of considerable recent attention but is yet to receive significant industry traction. One of the key reasons is that software practitioners are reluctant to trust predictions produced by the analytics machinery without understanding the rationale for those predictions. While complex models such as deep learning and ensemble methods improve predictive performance, they have limited explainability. In this paper, we argue that making software analytics models explainable to software practitioners is as important as achieving accurate predictions. Explainability should therefore be a key measure for evaluating software analytics models. We envision that explainability will be a key driver for developing software analytics models that are useful in practice. We outline a research roadmap for this space, building on social science, explainable artificial intelligence and software engineering.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Explainable Software Analytics 1517963016126 Hoa Khanh Dam University of Wollongong hoa@uow.edu.au Truyen Tran Deakin University truyen.tran@deakin.edu.au Aditya Ghose University of Wollongong aditya@uow.edu.au Software engineering software analytics Mining software repositories Software analytics has been the subject of considerable recent attention but is yet to receive significant industry traction. One of the key reasons is that software practitioners are reluctant to trust predictions produced by the analytics machinery without understanding the rationale for those predictions. While complex models such as deep learning and ensemble methods improve predictive performance, they have limited explainability. In this paper, we argue that making software analytics models explainable to software practitioners is as important as achieving accurate predictions. Explainability should therefore be a key measure for evaluating software analytics models. We envision that explainability will be a key driver for developing software analytics models that are useful in practice. We outline a research roadmap for this space, building on social science, explainable artificial intelligence and software engineering.",
              "pageNumber": 53,
              "isPageNumberRoman": false
            },
            {
              "id": "3X2LjZH5CRq1zHOD0cupSz",
              "type": "authorPaper",
              "text": "Generalizing Specific-Instance Interpolation Proofs with SyGuS",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6O8wrhX2O9cvQjAmWGmMqK/dS8C4iWQN1NmsD2aISsDI.pdf",
              "extraLocations": [],
              "authorNames": "Muqsit Azeem (TCS Research), Kumar Madhukar (TCS Research), R. Venkatesh (TCS Research)",
              "abstract": "Proving correctness of programs is a challenging task, and consequently has been the focus of a lot of research. One way to break this problem down is to look at one execution path of the program, argue for its correctness, and see if the argument extends to the entire program. However, that may not often be the case, i.e. the proof of a given instance can be overly specific. In this paper, we propose a technique to generalize from such specific-instance proofs, to derive a correctness argument for the entire program. The individual proofs are obtained from an off-the-shelf interpolating prover, and we use Syntax-Guided Synthesis (SyGuS) to generalize the facts that constitute those proofs. Our initial experiment with a prototype tool shows that there is a lot of scope to guide the generalization engine to converge to a proof very quickly.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Generalizing Specific-Instance Interpolation Proofs with SyGuS 1518419999612 Muqsit Azeem TCS Research muqsit.azeem@tcs.com Kumar Madhukar TCS Research kumar.madhukar@tcs.com R. Venkatesh TCS Research r.venky@tcs.com Verification Interpolants Syntax-Guided Synthesis Proving correctness of programs is a challenging task, and consequently has been the focus of a lot of research. One way to break this problem down is to look at one execution path of the program, argue for its correctness, and see if the argument extends to the entire program. However, that may not often be the case, i.e. the proof of a given instance can be overly specific. In this paper, we propose a technique to generalize from such specific-instance proofs, to derive a correctness argument for the entire program. The individual proofs are obtained from an off-the-shelf interpolating prover, and we use Syntax-Guided Synthesis (SyGuS) to generalize the facts that constitute those proofs. Our initial experiment with a prototype tool shows that there is a lot of scope to guide the generalization engine to converge to a proof very quickly.",
              "pageNumber": 57,
              "isPageNumberRoman": false
            },
            {
              "id": "xoCBGUHbmliUzE4J5apKE",
              "type": "authorPaper",
              "text": "Efficient Parametric Model Checking Using Domain-Specific Modelling Patterns",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/3VKXquAtw3Bsoa1GQ2m1Cn/IwXQwRyRAgcZEgA31O87n.pdf",
              "extraLocations": [],
              "authorNames": "Radu Calinescu (University of York), Kenneth Johnson (Auckland University of Technology), Colin Paterson (University of York)",
              "abstract": "We propose a parametric model checking (PMC) method that enables the efficient analysis of quality-of-service (QoS) properties of component-based systems. Our method builds on recent advances in PMC techniques and tools, and can handle large models by exploiting domain-specific modelling patterns for the software components. We precompute closed-form expressions for key QoS properties of such patterns, and handle system-level PMC by combining these expressions into easy-to-evaluate systems of equations.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Efficient Parametric Model Checking Using Domain-Specific Modelling Patterns 1518282220417 Radu Calinescu University of York Radu.Calinescu@york.ac.uk Kenneth Johnson Auckland University of Technology kenneth.johnson@aut.ac.nz Colin Paterson University of York colin.paterson@york.ac.uk parametric model checking Markov models quality of service We propose a parametric model checking (PMC) method that enables the efficient analysis of quality-of-service (QoS) properties of component-based systems. Our method builds on recent advances in PMC techniques and tools, and can handle large models by exploiting domain-specific modelling patterns for the software components. We precompute closed-form expressions for key QoS properties of such patterns, and handle system-level PMC by combining these expressions into easy-to-evaluate systems of equations.",
              "pageNumber": 61,
              "isPageNumberRoman": false
            },
            {
              "id": "5ReHXxKVzEzssyvLaNy1uh",
              "type": "authorPaper",
              "text": "Deep Learning UI Design Patterns of Mobile Apps",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/69IMKxOq8MkgR0RQk5pkhq/6mwRgrVk2jUBuGBSoq81Rt.pdf",
              "extraLocations": [],
              "authorNames": "Tam Nguyen (Auburn University), Phong Vu (Auburn University), Hung Pham (Utah State University), Tung Nguyen (Auburn University)",
              "abstract": "User interface (UI) is one of the most important components of a mobile app and strongly influences users' perception of the app. However, UI design tasks are typically manual and time-consuming. This paper proposes a novel approach to (semi)-automate those tasks. Our key idea is to develop and deploy advanced deep learning models based on recurrent neural networks (RNN) and generative adversarial networks (GAN) to learn UI design patterns from millions of currently available mobile apps. Once trained, those models can be used to search for UI design samples given user-provided descriptions written in natural language and generate professional-looking UI designs from simpler, less elegant design drafts.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Deep Learning UI Design Patterns of Mobile Apps 1518466285424 Tam Nguyen Auburn University tam@auburn.edu Phong Vu Auburn University lenniel@auburn.edu Hung Pham Utah State University hv.pham.2704@gmail.com Tung Nguyen Auburn University tung@auburn.edu User Interface Deep Learning UI Design Patterns User interface (UI) is one of the most important components of a mobile app and strongly influences users' perception of the app. However, UI design tasks are typically manual and time-consuming. This paper proposes a novel approach to (semi)-automate those tasks. Our key idea is to develop and deploy advanced deep learning models based on recurrent neural networks (RNN) and generative adversarial networks (GAN) to learn UI design patterns from millions of currently available mobile apps. Once trained, those models can be used to search for UI design samples given user-provided descriptions written in natural language and generate professional-looking UI designs from simpler, less elegant design drafts.",
              "pageNumber": 65,
              "isPageNumberRoman": false
            },
            {
              "id": "1Ds4sKQioBFQyd8KnhCJMO",
              "type": "authorPaper",
              "text": "Code Review Comments: Language Matters",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/165qeNKip9XUqW8VEtQDW0/41SjKvey4HBZGWpDcrBYdh.pdf",
              "extraLocations": [],
              "authorNames": "Vasiliki Efstathiou (Athens University of Economics and Business), Diomidis Spinellis (Athens University of Economics and Business)",
              "abstract": "Recent research provides evidence that effective communication in collaborative software development has significant impact on the software development lifecycle. Although related qualitative and quantitative studies point out textual characteristics of well-formed messages, the underlying semantics of the intertwined linguistic structures still remain largely misinterpreted or ignored. Especially, regarding quality of code reviews the importance of thorough feedback, and explicit rationale is often mentioned but rarely linked with related linguistic features. As a first step towards addressing this shortcoming, we propose grounding these studies on theories of linguistics. We particularly focus on linguistic structures of coherent speech and explain how they can be exploited in practice. We reflect on related approaches and examine through a preliminary study on four open source projects, possible links between existing findings and the directions we suggest for detecting textual features of useful code reviews.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Code Review Comments: Language Matters 1518705334560 Vasiliki Efstathiou Athens University of Economics and Business vefstathiou@aueb.gr Diomidis Spinellis Athens University of Economics and Business dds@aueb.gr Collaborative Software Development Code Review Natural Language Processing Lexical Semantics Recent research provides evidence that effective communication in collaborative software development has significant impact on the software development lifecycle. Although related qualitative and quantitative studies point out textual characteristics of well-formed messages, the underlying semantics of the intertwined linguistic structures still remain largely misinterpreted or ignored. Especially, regarding quality of code reviews the importance of thorough feedback, and explicit rationale is often mentioned but rarely linked with related linguistic features. As a first step towards addressing this shortcoming, we propose grounding these studies on theories of linguistics. We particularly focus on linguistic structures of coherent speech and explain how they can be exploited in practice. We reflect on related approaches and examine through a preliminary study on four open source projects, possible links between existing findings and the directions we suggest for detecting textual features of useful code reviews.",
              "pageNumber": 69,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Empirical Studies and Requirements",
          "lineItems": [
            {
              "id": "36Te6syO5accmF2TMPWu3P",
              "type": "authorPaper",
              "text": "Replication Studies Considered Harmful",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4fllez1Ua1MOYwjGmK5ZM2/3T97HCGwX1OLqQdgf9iabB.pdf",
              "extraLocations": [],
              "authorNames": "Martin Shepperd (Brunel University London)",
              "abstract": "Context: There is growing interest in establishing software engineering as an evidence-based discipline. To that end, replication is often used to gain confidence in empirical findings, as opposed to reproduction where the goal is showing the correctness, or validity of the published results. Objective: To consider what is required for a replication study to confirm the original experiment and apply this understanding in software engineering. Method: Simulation is used to demonstrate why the prediction interval for confirmation can be surprisingly wide. This analysis is applied to three recent replications. Results: It is shown that because the prediction intervals are wide, almost all replications are confirmatory, so in that sense there is no 'replication crisis', however, the contributions to knowledge are negligible. Conclusion: Replicating empirical software engineering experiments, particularly if they are under-powered or under-reported, is a waste of scientific resources. By contrast, meta-analysis is strongly advocated so that all relevant experiments are combined to estimate the population effect.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Replication Studies Considered Harmful 1518379694983 Martin Shepperd Brunel University London martin.shepperd@brunel.ac.uk Software engineering empirical study replication evidence Context: There is growing interest in establishing software engineering as an evidence-based discipline. To that end, replication is often used to gain confidence in empirical findings, as opposed to reproduction where the goal is showing the correctness, or validity of the published results. Objective: To consider what is required for a replication study to confirm the original experiment and apply this understanding in software engineering. Method: Simulation is used to demonstrate why the prediction interval for confirmation can be surprisingly wide. This analysis is applied to three recent replications. Results: It is shown that because the prediction intervals are wide, almost all replications are confirmatory, so in that sense there is no 'replication crisis', however, the contributions to knowledge are negligible. Conclusion: Replicating empirical software engineering experiments, particularly if they are under-powered or under-reported, is a waste of scientific resources. By contrast, meta-analysis is strongly advocated so that all relevant experiments are combined to estimate the population effect.",
              "pageNumber": 73,
              "isPageNumberRoman": false
            },
            {
              "id": "3oevayRnaMJsVo8Ak3Bjf2",
              "type": "authorPaper",
              "text": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf",
              "extraLocations": [],
              "authorNames": "Matthias Galster (University of Canterbury), Danny Weyns (KU Leuven), Antony Tang (Swinburne University of Technology), Rick Kazman (University of Hawaii), Mehdi Mirakhorli (Rochester Institute of Technology)",
              "abstract": "Empirical software engineering (SE) research is often criticized for poorly designed and reported studies, a lack of replications to build up bodies of knowledge, and little practical relevance. In this paper, we discuss issues in empirical software architecture research as an illustration of these issues in one subfield of SE and as a step towards better understanding empirical research in SE in general. Based on feedback from software architecture researchers and practitioners, we explore why, despite persistent discussions in the SE research community, there are still disagreements about why and how to conduct empirical research. Then, we explore how empirical SE research can progress beyond \"one-off\" studies and endless \"new and exciting\" results toward SE research as a mature science. This would allow us to establish foundations for evaluating existing and future empirical research and help researchers design and publish better studies.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 From Craft to Science: The Road Ahead for Empirical Software Engineering Research 1518408154465 Matthias Galster University of Canterbury mgalster@ieee.org Danny Weyns KU Leuven danny.weyns@kuleuven.be Antony Tang Swinburne University of Technology atang@swin.edu.au Rick Kazman University of Hawaii kazman@hawaii.edu Mehdi Mirakhorli Rochester Institute of Technology mehdi@se.rit.edu empirical research software engineering Empirical software engineering (SE) research is often criticized for poorly designed and reported studies, a lack of replications to build up bodies of knowledge, and little practical relevance. In this paper, we discuss issues in empirical software architecture research as an illustration of these issues in one subfield of SE and as a step towards better understanding empirical research in SE in general. Based on feedback from software architecture researchers and practitioners, we explore why, despite persistent discussions in the SE research community, there are still disagreements about why and how to conduct empirical research. Then, we explore how empirical SE research can progress beyond \"one-off\" studies and endless \"new and exciting\" results toward SE research as a mature science. This would allow us to establish foundations for evaluating existing and future empirical research and help researchers design and publish better studies.",
              "pageNumber": 77,
              "isPageNumberRoman": false
            },
            {
              "id": "421J0DU9YE5E3qyYkKC0l0",
              "type": "authorPaper",
              "text": "Towards Saving Money in Using Smart Contracts",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf",
              "extraLocations": [],
              "authorNames": "Ting Chen (University of Electronic Science and Technology of China), Zihao Li (University of Electronic Science and Technology of China), Hao Zhou (The Hong Kong Polytechnic University), Jiachi Chen (The Hong Kong Polytechnic University), Xiapu Luo (The Hong Kong Polytechnic University), Xiaoqi Li (The Hong Kong Polytechnic University), Xiaosong Zhang (University of Electronic Science and Technology of China)",
              "abstract": "Being a new kind of software leveraging blockchain to execute real contracts, smart contracts are in great demand due to many advantages. Ethereum is the largest blockchain platform that supports smart contracts by running them in its virtual machine. To ensure that a smart contract will terminate eventually and prevent abuse of resources, Ethereum charges the developers for deploying smart contracts and the users for executing smart contracts. Although our previous work shows that under-optimized smart contracts may cost more money than necessary, it just lists 7 anti-patterns and the detection method for 3 of them. In this paper, we conduct the first in-depth investigation on such under-optimized smart contracts. We first identify 24 anti-patterns from the execution traces of real smart contracts. Then, we design and develop GasReducer, the first tool to automatically detect all these anti-patterns from the bytecode of smart contracts and replace them with efficient code through bytecode-to-bytecode optimization. Using GasReducer to analyze all smart contracts and their execution traces, we detect 9,490,768 and 557,565,754 anti-pattern instances in deploying and invoking smart contracts, respectively",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Towards Saving Money in Using Smart Contracts 1518687494372 Ting Chen University of Electronic Science and Technology of China chenting19870201@163.com Zihao Li University of Electronic Science and Technology of China gforiq@qq.com Hao Zhou The Hong Kong Polytechnic University sunmoonsky0001@gmail.com Jiachi Chen The Hong Kong Polytechnic University chenjiachi317@163.com Xiapu Luo The Hong Kong Polytechnic University csxluo@comp.polyu.edu.hk Xiaoqi Li The Hong Kong Polytechnic University csxqli@comp.polyu.edu.hk Xiaosong Zhang University of Electronic Science and Technology of China johnsonzxs@uestc.edu.cn Smart contract Anti patterns Detection Optimization Being a new kind of software leveraging blockchain to execute real contracts, smart contracts are in great demand due to many advantages. Ethereum is the largest blockchain platform that supports smart contracts by running them in its virtual machine. To ensure that a smart contract will terminate eventually and prevent abuse of resources, Ethereum charges the developers for deploying smart contracts and the users for executing smart contracts. Although our previous work shows that under-optimized smart contracts may cost more money than necessary, it just lists 7 anti-patterns and the detection method for 3 of them. In this paper, we conduct the first in-depth investigation on such under-optimized smart contracts. We first identify 24 anti-patterns from the execution traces of real smart contracts. Then, we design and develop GasReducer, the first tool to automatically detect all these anti-patterns from the bytecode of smart contracts and replace them with efficient code through bytecode-to-bytecode optimization. Using GasReducer to analyze all smart contracts and their execution traces, we detect 9,490,768 and 557,565,754 anti-pattern instances in deploying and invoking smart contracts, respectively",
              "pageNumber": 81,
              "isPageNumberRoman": false
            },
            {
              "id": "5uFBxLOlviMEtM3TdPsws6",
              "type": "authorPaper",
              "text": "Understanding the Impact of Pair Programming on the Minds of Developers",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf",
              "extraLocations": [],
              "authorNames": "Sara Busechian (University of Perugia), Vladimir Ivanov (Innopolis University), Alan Rogers (Innopolis University), Ilyas Sirazitdinov (Innopolis University), Giancarlo Succi (Innopolis University), Alexander Tormasov (Innopolis University), Jooyong Yi (Innopolis University)",
              "abstract": "Software is mostly, if not entirely, a knowledge artifact. Software best practices are often thought to work because they induce more productive behaviour in software developers. In this paper we deployed a new generation tool, portable multichannel EEG, to obtain direct physical insight into the mental processes of working software developers engaged in their standard activities. We have demonstrated the feasibility of this approach and obtained a glimpse of its potential power to distinguish physical brain activity of developers working with different methodologies.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Understanding the Impact of Pair Programming on the Minds of Developers 1518437820862 Sara Busechian University of Perugia sarabusechian@gmail.com Vladimir Ivanov Innopolis University v.ivanov@innopolis.ru Alan Rogers Innopolis University a.rogers@innopolis.ru Ilyas Sirazitdinov Innopolis University i.sirazitdinov@innopolis.ru Giancarlo Succi Innopolis University g.succi@innopolis.ru Alexander Tormasov Innopolis University tor@innopolis.ru Jooyong Yi Innopolis University j.yi@innopolis.ru Brain sciences empirical studies pair programming Software is mostly, if not entirely, a knowledge artifact. Software best practices are often thought to work because they induce more productive behaviour in software developers. In this paper we deployed a new generation tool, portable multichannel EEG, to obtain direct physical insight into the mental processes of working software developers engaged in their standard activities. We have demonstrated the feasibility of this approach and obtained a glimpse of its potential power to distinguish physical brain activity of developers working with different methodologies.",
              "pageNumber": 85,
              "isPageNumberRoman": false
            },
            {
              "id": "7gLJzhr6KiHN6a6nrbcCfH",
              "type": "authorPaper",
              "text": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf",
              "extraLocations": [],
              "authorNames": "Yasuhiro Watanabe (Waseda University), Hironori Washizaki (Waseda University), Kiyoshi Honda (Waseda University), Yoshiaki Fukazawa (Waseda University), Masahiro Taga (e-Seikatsu Co.), Akira Matsuzaki (e-Seikatsu Co.), Takayoshi Suzuki (e-Seikatsu Co.)",
              "abstract": "A Business-to-Business (B-to-B) software development company develops services to satisfy their customers' requirements. Developers should prioritize customer satisfaction because customers greatly influence on agile software development. However, it is possible that a B-to-B software development company has following issues: 1) failure to understand actual users because the requirements are not often derived from actual users and 2) failure to satisfy the future customers' requirements when only satisfying current customers. Although many previous works proposed methods to elicit the requirements based on actual quantitative data, these works had not considered customers and end-users simultaneously. Herein we proposed Retrospective based on Data-Driven Persona Significance (ReD2PS) to help developers to plan future releases. ReD2PS includes Persona Significance Index (PerSiI) to reflect the correspondence between target users, which developers assume based on requirements in releases, and end-users' personas. A case study involving a Japanese cloud application shows that PerSiI reflects the relationship between target users and end-users to discuss about the validity and effectiveness of ReD2PS.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development 1518425493185 Yasuhiro Watanabe Waseda University jellyfish44-time@akane.waseda.jp Hironori Washizaki Waseda University washizaki@waseda.jp Kiyoshi Honda Waseda University khonda@ruri.waseda.jp Yoshiaki Fukazawa Waseda University fukazawa@waseda.jp Masahiro Taga e-Seikatsu Co. masahiro.taga@e-seikatsu.co.jp Akira Matsuzaki e-Seikatsu Co. akira.matsuzaki@e-seikatsu.co.jp Takayoshi Suzuki e-Seikatsu Co. takayoshi.suzuki@e-seikatsu.co.jp Data driven Personas Personas Release Planning Requirement Engineering Data Driven Requirement Engineering A Business-to-Business (B-to-B) software development company develops services to satisfy their customers' requirements. Developers should prioritize customer satisfaction because customers greatly influence on agile software development. However, it is possible that a B-to-B software development company has following issues: 1) failure to understand actual users because the requirements are not often derived from actual users and 2) failure to satisfy the future customers' requirements when only satisfying current customers. Although many previous works proposed methods to elicit the requirements based on actual quantitative data, these works had not considered customers and end-users simultaneously. Herein we proposed Retrospective based on Data-Driven Persona Significance (ReD2PS) to help developers to plan future releases. ReD2PS includes Persona Significance Index (PerSiI) to reflect the correspondence between target users, which developers assume based on requirements in releases, and end-users' personas. A case study involving a Japanese cloud application shows that PerSiI reflects the relationship between target users and end-users to discuss about the validity and effectiveness of ReD2PS.",
              "pageNumber": 89,
              "isPageNumberRoman": false
            },
            {
              "id": "42SCpWriLrz2yuCgYMusOJ",
              "type": "authorPaper",
              "text": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf",
              "extraLocations": [],
              "authorNames": "Mahnaz Behroozi (North Carolina State University), Alison Lui (University of Notre Dame), Ian Moore (North Carolina State University), Denae Ford (North Carolina State University), Chris Parnin (North Carolina State University)",
              "abstract": "Problem-solving on a whiteboard is a popular technical interview technique used in industry. However, several critics have raised concerns that whiteboard interviews can cause excessive stress and cognitive load on candidates, ultimately reinforcing bias in hiring practices. Unfortunately, many sensors used for measuring cognitive state are not robust to movement. In this paper, we describe an approach where we use a head-mounted eye-tracker and computer vision algorithms to collect robust metrics of cognitive state. To demonstrate the feasibility of the approach, we study two proposed interview settings: on the whiteboard and on paper with 11 participants. Our preliminary results suggest that the whiteboard setting pressures candidates into keeping shorter attention lengths and experiencing higher levels of cognitive load compared to solving the same problems on paper. For instance, we observed 60ms shorter fixation durations and 3x more regressions when solving problems on the whiteboard. Finally, we describe a vision for creating a more inclusive technical interview process through future studies of interventions that lower cognitive load and stress.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard 1518280368300 Mahnaz Behroozi North Carolina State University mbehroo@ncsu.edu Alison Lui University of Notre Dame Alison.M.Lui.2@nd.edu Ian Moore North Carolina State University ipmoore@ncsu.edu Denae Ford North Carolina State University dford3@ncsu.edu Chris Parnin North Carolina State University cjparnin@ncsu.edu technical interviews cognitive load eyetracking Problem-solving on a whiteboard is a popular technical interview technique used in industry. However, several critics have raised concerns that whiteboard interviews can cause excessive stress and cognitive load on candidates, ultimately reinforcing bias in hiring practices. Unfortunately, many sensors used for measuring cognitive state are not robust to movement. In this paper, we describe an approach where we use a head-mounted eye-tracker and computer vision algorithms to collect robust metrics of cognitive state. To demonstrate the feasibility of the approach, we study two proposed interview settings: on the whiteboard and on paper with 11 participants. Our preliminary results suggest that the whiteboard setting pressures candidates into keeping shorter attention lengths and experiencing higher levels of cognitive load compared to solving the same problems on paper. For instance, we observed 60ms shorter fixation durations and 3x more regressions when solving problems on the whiteboard. Finally, we describe a vision for creating a more inclusive technical interview process through future studies of interventions that lower cognitive load and stress.",
              "pageNumber": 93,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Software Engineering in Other Domains",
          "lineItems": [
            {
              "id": "YEpTj2WqEAVDqmE4t0sCs",
              "type": "authorPaper",
              "text": "Deep Customization of Multi-tenant SaaS Using Intrusive Microservices",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/21RHGeVqhABQzfCCA9FBCo/4aXCmrOeKegXHqHD0m3lof.pdf",
              "extraLocations": [],
              "authorNames": "Hui Song (SINTEF Digital), Franck Chauvel (SINTEF Digital), Arnor Solberg (SINTEF Digital)",
              "abstract": "Enterprise software needs to be customizable, and the customization needs from a customer are often beyond what the software vendor can predict in advance. In the on-premises era, customers do deep customizations beyond vendor's prediction by directly modifying the vendor's source code and then build and operate it on their own premises. When enterprise software is moving to cloud-based multi-tenant SaaS (Software as a Service), it is no longer possible for customers to directly modify the vendor's source code, because the same instance of code is shared by multiple customers at runtime. Therefore, the question is whether it is still possible to do deep customization on multi-tenant SaaS. In this paper, we give an answer to this question with a novel architecture style to realize deep customization of SaaS using intrusive microservices. We evaluate the approach on an open source online commercial system, and discuss the further research questions to make deep customization applicable in practice.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Deep Customization of Multi-tenant SaaS Using Intrusive Microservices 1517908990314 Hui Song SINTEF Digital hui.song@sintef.no Franck Chauvel SINTEF Digital franck.chauvel@sintef.no Arnor Solberg SINTEF Digital arnor.solberg@sintef.no Customization SaaS Multi tenancy Architecture style Enterprise software needs to be customizable, and the customization needs from a customer are often beyond what the software vendor can predict in advance. In the on-premises era, customers do deep customizations beyond vendor's prediction by directly modifying the vendor's source code and then build and operate it on their own premises. When enterprise software is moving to cloud-based multi-tenant SaaS (Software as a Service), it is no longer possible for customers to directly modify the vendor's source code, because the same instance of code is shared by multiple customers at runtime. Therefore, the question is whether it is still possible to do deep customization on multi-tenant SaaS. In this paper, we give an answer to this question with a novel architecture style to realize deep customization of SaaS using intrusive microservices. We evaluate the approach on an open source online commercial system, and discuss the further research questions to make deep customization applicable in practice.",
              "pageNumber": 97,
              "isPageNumberRoman": false
            },
            {
              "id": "4ve5IicbAcHeU7IN3JSrB",
              "type": "authorPaper",
              "text": "Software Ecosystem Call Graph for Dependency Management",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/199DSNOuJy8dk5Lo1tps7o/4uO2C4sysYHwbKheBX1IQH.pdf",
              "extraLocations": [],
              "authorNames": "Joseph Hejderup (Delft University of Technology), Arie van Deursen (Delft University of Technology), Georgios Gousios (Delft University of Technology)",
              "abstract": "A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Software Ecosystem Call Graph for Dependency Management 1518439786952 Joseph Hejderup Delft University of Technology j.i.hejderup@tudelft.nl Arie van Deursen Delft University of Technology arie.vandeursen@tudelft.nl Georgios Gousios Delft University of Technology G.Gousios@tudelft.nl dependency management software ecosystem dependencies program analysis call graphs A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application.",
              "pageNumber": 101,
              "isPageNumberRoman": false
            },
            {
              "id": "sMbAfpPvDkm0vXRyYj0Hl",
              "type": "authorPaper",
              "text": "An Immersive Future for Software Engineering — Avenues and Approaches",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1EpjKazCrYQMpJpG57Wp2A/4qzQRZDxVTtuh4cl4S2HuV.pdf",
              "extraLocations": [],
              "authorNames": "Vibhu Saujanya Sharma (Accenture Labs), Rohit Mehra (Accenture Labs), Vikrant Kaulgud (Accenture Labs), Sanjay Podder (Accenture Labs)",
              "abstract": "Software systems are increasingly becoming more intricate and complex, necessitating new ways to be able to comprehend and visualize them. At the same time, the nature of software engineering teams itself is changing with people playing more fluid roles often needing seamless and contextual intelligence, for faster and better decisions. Moreover, the next-generation of software engineers will all be post-millennials, which may have totally different expectations from their software engineering workplace. Thus, we believe that it is important to have a re-look at the way we traditionally do software engineering and immersive technologies have a huge potential here to help out with such challenges. However, while immersive technologies, devices and platforms, have matured in past few years, there has been very little research on studying how these technologies can influence software engineering. In this paper, we introduce how traditional software engineering can leverage immersive approaches for building, delivering and maintaining next-generation software applications. As part of our initial research, we present an augmented-reality based prototype for project managers, which provides contextual and immersive insights. Finally, we also discuss important research questions that we are investigating further as part of our immersive software engineering research.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 An Immersive Future for Software Engineering — Avenues and Approaches 1518516021150 Vibhu Saujanya Sharma Accenture Labs vibhu.sharma@accenture.com Rohit Mehra Accenture Labs rohit.a.mehra@accenture.com Vikrant Kaulgud Accenture Labs vikrant.kaulgud@accenture.com Sanjay Podder Accenture Labs sanjay.podder@accenture.com Software Delivery Immersive Experience Augmented Reality Virtual Reality Software systems are increasingly becoming more intricate and complex, necessitating new ways to be able to comprehend and visualize them. At the same time, the nature of software engineering teams itself is changing with people playing more fluid roles often needing seamless and contextual intelligence, for faster and better decisions. Moreover, the next-generation of software engineers will all be post-millennials, which may have totally different expectations from their software engineering workplace. Thus, we believe that it is important to have a re-look at the way we traditionally do software engineering and immersive technologies have a huge potential here to help out with such challenges. However, while immersive technologies, devices and platforms, have matured in past few years, there has been very little research on studying how these technologies can influence software engineering. In this paper, we introduce how traditional software engineering can leverage immersive approaches for building, delivering and maintaining next-generation software applications. As part of our initial research, we present an augmented-reality based prototype for project managers, which provides contextual and immersive insights. Finally, we also discuss important research questions that we are investigating further as part of our immersive software engineering research.",
              "pageNumber": 105,
              "isPageNumberRoman": false
            },
            {
              "id": "5mP1HYqmZ5W87kXvVkRFzw",
              "type": "authorPaper",
              "text": "Dronology: An Incubator for Cyber-Physical Systems Research",
              "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/60Bj5IUfIQNUqonqo6EFmt/79AKWLxdXte7sWSbVlkcwS.pdf",
              "extraLocations": [],
              "authorNames": "Jane Cleland-Huang (University of Notre Dame), Michael Vierhauser (University of Notre Dame), Sean Bayley (University of Notre Dame)",
              "abstract": "Research in the area of Cyber-Physical Systems (CPS) is hampered by the lack of available project environments in which to explore open challenges and to propose and rigorously evaluate solutions. In this \"New Ideas and Emerging Results\" paper we introduce a CPS research incubator – based upon a system, and its associated project environment, for managing and coordinating the flight of small Unmanned Aerial Systems (sUAS). The research incubator provides a new community resource, making available diverse, high-quality project artifacts produced across multiple releases of a safety-critical CPS. It enables researchers to experiment with their own novel solutions within a fully-executable runtime environment that supports both high-fidelity sUAS simulations as well as physical sUAS. Early collaborators from the software engineering community have shown broad and enthusiastic support for the project and its role as a research incubator, and have indicated their intention to leverage the environment to address their own research areas of goal modeling, runtime adaptation, safety-assurance, and software evolution.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: New Ideas and Emerging Results ICSE-NIER 2018 Dronology: An Incubator for Cyber-Physical Systems Research 1518474754984 Jane Cleland-Huang University of Notre Dame janeclelandhuang@nd.edu Michael Vierhauser University of Notre Dame mvierhau@nd.edu Sean Bayley University of Notre Dame sbayley@nd.edu Research Environments Unmanned Autonomous Systems Software Engineering Research in the area of Cyber-Physical Systems (CPS) is hampered by the lack of available project environments in which to explore open challenges and to propose and rigorously evaluate solutions. In this \"New Ideas and Emerging Results\" paper we introduce a CPS research incubator – based upon a system, and its associated project environment, for managing and coordinating the flight of small Unmanned Aerial Systems (sUAS). The research incubator provides a new community resource, making available diverse, high-quality project artifacts produced across multiple releases of a safety-critical CPS. It enables researchers to experiment with their own novel solutions within a fully-executable runtime environment that supports both high-fidelity sUAS simulations as well as physical sUAS. Early collaborators from the software engineering community have shown broad and enthusiastic support for the project and its role as a research incubator, and have indicated their intention to leverage the environment to address their own research areas of goal modeling, runtime adaptation, safety-assurance, and software evolution.",
              "pageNumber": 109,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        }
      ]
    },
    {
      "title": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training",
      "acronym": "ICSE-SEET",
      "year": 2018,
      "frontMatter": [
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_I",
          "text": "Title Page i",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1av8OZvUH1lDYtTYtKbiKr/5hGtrMpDXQ7NxwDtDT29U9.pdf",
          "extraLocations": [],
          "pageNumber": 1,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_III",
          "text": "Title Page iii",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7DKZhJiEsiz0AJ4YYd2hSf/7EgIFLXBt9MHQtTTue0K0p.pdf",
          "extraLocations": [],
          "pageNumber": 3,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_COPYRIGHT_PAGE",
          "text": "Copyright Page",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1E1BG9JTMg4eIvz2ymXl8U/6zV9rHZGffAE8STNTOlzcI.pdf",
          "extraLocations": [],
          "pageNumber": 4,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TABLE_OF_CONTENTS",
          "text": "Table of Contents",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/64ahgUoADE4nK4OLhzZBoN/5Qq0SC88R0Tvt7UWMDebVS.pdf",
          "extraLocations": [],
          "pageNumber": 5,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_GENERAL_CHAIR",
          "text": "Message from the General Chair",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/8LXtfbLyzTm4T0MgXI4Zv/4Rs786oIMRCiuPsyeQSGRa.pdf",
          "extraLocations": [],
          "pageNumber": 8,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the SEET Chairs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7fOxBMqDT1wXVKl0zPzGFC/1skTUZ9hjI7gZQGlgimN5H.pdf",
          "extraLocations": [],
          "pageNumber": 11,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Software Engineering Education and Training Program Committee",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/43h2nlxP5aBqsFkwdWAcpp/4uAOoIvgy2v408IDu5E9Cs.pdf",
          "extraLocations": [],
          "pageNumber": 12,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Software Engineering Education and Training Additional Reviewers",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1F5YRv6XoZR4YGQsd9qa32/3vjKSDIEpuLG3aoOX4AkDC.pdf",
          "extraLocations": [],
          "pageNumber": 15,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_SPONSORS_CONFERENCE_SUPPORT",
          "text": "Sponsors and Supporters",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/59q9fo1nbXAQ4Y7OK4inkk/3jjx6K7P9l7APUoUq0ALNu.pdf",
          "extraLocations": [],
          "pageNumber": 16,
          "isPageNumberRoman": true
        }
      ],
      "backMatter": [
        {
          "class": "BM",
          "type": "BM_AUTHOR_INDEX",
          "text": "Author Index",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7slXW8UXLpdnz3A1QuAIvc/303EAvKZ00hFh671KexbgP.pdf",
          "extraLocations": [],
          "pageNumber": 173,
          "isPageNumberRoman": false
        },
        {
          "class": "BM",
          "type": "BM_ROSTER",
          "text": "Publisher's Information",
          "articleLocation": null,
          "extraLocations": [],
          "pageNumber": ""
        }
      ],
      "sections": [
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Reusable Recipes",
          "lineItems": [
            {
              "id": "6frIHVaBagOhmuqcBUtxYW",
              "type": "authorPaper",
              "text": "10+ Years of Teaching Software Engineering with iTrust: The Good, the Bad, and the Ugly",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3EjhI0gr5St4AFs3lVXxnq/1oGHNe0eI3D9HLwWrcK93B.pdf",
              "extraLocations": [],
              "authorNames": "Sarah Heckman (North Carolina State University), Kathryn Stolee (North Carolina State University), Christopher Parnin (North Carolina State University)",
              "abstract": "This paper presents an experience report with a junior-level software engineering course at North Carolina State University. We provide an overview of the course structure and the course project, iTrust, that has been developed by students over 25 semesters. We summarize reflections from faculty, teaching assistants, and students (through course evaluations). From our lessons learned, we present our course improvements as we prepare for the next ten years of software engineering courses. Our main lessons learned are 1) course technologies have a lifespan and require periodic updating to balance student learning and working with a legacy system; 2) teaching assistant longevity and support is critical to course success; and 3) the value of working with a large, legacy system in a semester long course is supported by faculty, teaching assistants, and eventually students.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 10+ Years of Teaching Software Engineering with iTrust: The Good, the Bad, and the Ugly 1518200674991 Sarah Heckman North Carolina State University sarah_heckman@ncsu.edu Kathryn Stolee North Carolina State University ktstolee@ncsu.edu Christopher Parnin North Carolina State University cjparnin@ncsu.edu software engineering education iTrust This paper presents an experience report with a junior-level software engineering course at North Carolina State University. We provide an overview of the course structure and the course project, iTrust, that has been developed by students over 25 semesters. We summarize reflections from faculty, teaching assistants, and students (through course evaluations). From our lessons learned, we present our course improvements as we prepare for the next ten years of software engineering courses. Our main lessons learned are 1) course technologies have a lifespan and require periodic updating to balance student learning and working with a legacy system; 2) teaching assistant longevity and support is critical to course success; and 3) the value of working with a large, legacy system in a semester long course is supported by faculty, teaching assistants, and eventually students.",
              "pageNumber": 1,
              "isPageNumberRoman": false
            },
            {
              "id": "tWDXgD5a4IwOZVSdqCtYg",
              "type": "authorPaper",
              "text": "Toward Enhancing the Training of Software Engineering Students and Professionals Using Active Video Watching",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/514Lia1cgT3MTvnEb0jjVq/12MwgOxicqOE6tPJIkAvle.pdf",
              "extraLocations": [],
              "authorNames": "Matthias Galster (University of Canterbury), Antonija Mitrovic (University of Canterbury), Matthew Gordon (University of Canterbury)",
              "abstract": "Soft skills (e.g., the ability to communicate, negotiate, collaborate) are essential for software engineers. However, teaching soft skills in a conventional classroom setting is time-consuming and resource-intensive. In this paper, we present and motivate the idea of adopting active video watching (AVW) for soft skills training in software engineering education. Also, we discuss how AVW can contribute to formal learning (e.g., at universities), but also to professional development (e.g., in software development organizations). Furthermore, we present AVW-Space, a web-based AVW platform. Finally, we report our experience from using AVW in a software engineering project course to teach university students presentation skills as one example of soft skills essential for practicing software engineers.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Toward Enhancing the Training of Software Engineering Students and Professionals Using Active Video Watching 1518388775119 Matthias Galster University of Canterbury mgalster@ieee.org Antonija Mitrovic University of Canterbury tanja.mitrovic@canterbury.ac.nz Matthew Gordon University of Canterbury mjg208@uclive.ac.nz Active video watching soft skills students professionals Soft skills (e.g., the ability to communicate, negotiate, collaborate) are essential for software engineers. However, teaching soft skills in a conventional classroom setting is time-consuming and resource-intensive. In this paper, we present and motivate the idea of adopting active video watching (AVW) for soft skills training in software engineering education. Also, we discuss how AVW can contribute to formal learning (e.g., at universities), but also to professional development (e.g., in software development organizations). Furthermore, we present AVW-Space, a web-based AVW platform. Finally, we report our experience from using AVW in a software engineering project course to teach university students presentation skills as one example of soft skills essential for practicing software engineers.",
              "pageNumber": 5,
              "isPageNumberRoman": false
            },
            {
              "id": "3Iae4JP1sD629weJtLolXB",
              "type": "authorPaper",
              "text": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf",
              "extraLocations": [],
              "authorNames": "Stefan Kögel (Ulm University), Michael Stegmaier (Ulm University), Raffaela Groner (Ulm University), Matthias Tichy (Ulm University), Stefan Götz (Ulm University), Sascha Rechenberger (Ulm University)",
              "abstract": "Software engineering students not only have to learn theoretical concepts but also how to successfully apply them in practice. Hence, projects are an important part of software engineering curricula. As software engineering methods and technologies are only relevant for non-trivial software systems, we report in this paper on a master-level software engineering project course in which a team of students developed a compiler for the Game Boy in a single semester. The students developed different languages and corresponding parsers to a common intermediate language, optimizations on the intermediate language, as well as a code generator for the Game Boy. We particularly present lessons learned by us and the students as well as potential course improvements.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project 1518176495537 Stefan Kögel Ulm University stefan.koegel@uni-ulm.de Michael Stegmaier Ulm University michael-1.stegmaier@uni-ulm.de Raffaela Groner Ulm University raffaela.groner@uni-ulm.de Matthias Tichy Ulm University matthias.tichy@uni-ulm.de Stefan Götz Ulm University stefan.goetz@uni-ulm.de Sascha Rechenberger Ulm University sascha.rechenberger@uni-ulm.de Compiler construction software engineering education project based learning Software engineering students not only have to learn theoretical concepts but also how to successfully apply them in practice. Hence, projects are an important part of software engineering curricula. As software engineering methods and technologies are only relevant for non-trivial software systems, we report in this paper on a master-level software engineering project course in which a team of students developed a compiler for the Game Boy in a single semester. The students developed different languages and corresponding parsers to a common intermediate language, optimizations on the intermediate language, as well as a code generator for the Game Boy. We particularly present lessons learned by us and the students as well as potential course improvements.",
              "pageNumber": 9,
              "isPageNumberRoman": false
            },
            {
              "id": "5CPv6nPoEnyBa7zbdYufw",
              "type": "authorPaper",
              "text": "Easing IoT Development for Novice Programmers Through Code Recipes",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ZtsyuXJ5vJnjyeaGgkT4s/3Lq6ORQJLOs8ulbEf7E5Mg.pdf",
              "extraLocations": [],
              "authorNames": "Fulvio Corno (Politecnico di Torino), Luigi De Russis (Politecnico di Torino), Juan Pablo Sáenz (Politecnico di Torino)",
              "abstract": "The co-existence of various kinds of devices, protocols, architectures, and programming languages make Internet of Things (IoT) systems complex to develop, even for experienced programmers. Perforce, Software Engineering challenges are even more difficult to address by novice programmers. Previous research focused on identifying the most challenging issues that novice programmers experience when developing IoT systems. The results suggested that the integration of heterogeneous software components is one of the most painful issues, mainly due to the lack of documentation understandable by inexperienced developers, from both conceptual and technical perspectives. In fact, novice programmers devote a significant effort looking for documentation and code samples willing to understand them conceptually, or in the worst case, at least to make them work. Driven by the research question: \"How do the lessons learned by IoT novice programmers can be captured, so they become an asset for other novice developers?\", in this paper, we introduce Code Recipes. They consist of summarized and well-defined documentation modules, independent from programming languages or run-time environments, by which non-expert programmers can smoothly become familiar with source code, written by other developers that faced similar issues. Through a use case, we show how Code Recipes are a feasible mechanism to support novice IoT programmers in building their IoT systems",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Easing IoT Development for Novice Programmers Through Code Recipes 1516979500930 Fulvio Corno Politecnico di Torino fulvio.corno@polito.it Luigi De Russis Politecnico di Torino luigi.derussis@polito.it Juan Pablo Sáenz Politecnico di Torino juan.saenz@polito.it Novice programmers Internet of Things Documentation Code Fragments The co-existence of various kinds of devices, protocols, architectures, and programming languages make Internet of Things (IoT) systems complex to develop, even for experienced programmers. Perforce, Software Engineering challenges are even more difficult to address by novice programmers. Previous research focused on identifying the most challenging issues that novice programmers experience when developing IoT systems. The results suggested that the integration of heterogeneous software components is one of the most painful issues, mainly due to the lack of documentation understandable by inexperienced developers, from both conceptual and technical perspectives. In fact, novice programmers devote a significant effort looking for documentation and code samples willing to understand them conceptually, or in the worst case, at least to make them work. Driven by the research question: \"How do the lessons learned by IoT novice programmers can be captured, so they become an asset for other novice developers?\", in this paper, we introduce Code Recipes. They consist of summarized and well-defined documentation modules, independent from programming languages or run-time environments, by which non-expert programmers can smoothly become familiar with source code, written by other developers that faced similar issues. Through a use case, we show how Code Recipes are a feasible mechanism to support novice IoT programmers in building their IoT systems",
              "pageNumber": 13,
              "isPageNumberRoman": false
            },
            {
              "id": "5hZVa8TAR3K8lsftwg6c07",
              "type": "authorPaper",
              "text": "Making the Liskov Substitution Principle Happy and Sad",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7sFqL5kqLFeYrq0VDIofeA/3SkOhugw3u15AiiCFvwywy.pdf",
              "extraLocations": [],
              "authorNames": "Elisa Baniassad (University of British Columbia)",
              "abstract": "The Liskov Substitution Principle states, among other constraints, that a subtype is not substitutable for its super type if it strengthens its operations' preconditions, or weakens its operations' postconditions. We found that students in two subsequent courses had trouble remembering these rules. Their major stumbling block appeared to be recalling which condition (pre- or post-) could be strengthened and which could be weakened. We developed a simple visual reminder to help: A method is happy if it is substitutable—A smile is wider at the top than at the bottom, suggesting weaker/looser/wider pre-conditions, and stronger/tighter/narrower post conditions.; A method is sad if it isn't substitutable—a frown is narrower at the top, suggesting stronger/tighter/narrower preconditions, and wider at the bottom, suggesting weaker/looser/wider postconditions. Though the technique is far from perfect, we found that it allowed students to move on to the more interesting design questions around the LSP.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Making the Liskov Substitution Principle Happy and Sad 1518464609901 Elisa Baniassad University of British Columbia ebani@cs.ubc.ca Software engineering education The Liskov Substitution Principle states, among other constraints, that a subtype is not substitutable for its super type if it strengthens its operations' preconditions, or weakens its operations' postconditions. We found that students in two subsequent courses had trouble remembering these rules. Their major stumbling block appeared to be recalling which condition (pre- or post-) could be strengthened and which could be weakened. We developed a simple visual reminder to help: A method is happy if it is substitutable—A smile is wider at the top than at the bottom, suggesting weaker/looser/wider pre-conditions, and stronger/tighter/narrower post conditions.; A method is sad if it isn't substitutable—a frown is narrower at the top, suggesting stronger/tighter/narrower preconditions, and wider at the bottom, suggesting weaker/looser/wider postconditions. Though the technique is far from perfect, we found that it allowed students to move on to the more interesting design questions around the LSP.",
              "pageNumber": 17,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Take-Home Lessons I",
          "lineItems": [
            {
              "id": "6tQJ5XtjsXcX6QMspWJbM5",
              "type": "authorPaper",
              "text": "Software Engineering Lab - an Essential Component of a Software Engineering Curriculum",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ptyke5Ujj8onvnHjCVVPG/6rVK664qnM9Emso3vbuo0M.pdf",
              "extraLocations": [],
              "authorNames": "Mira Balaban (Ben-Gurion University of the Negev), Arnon Sturm (Ben-Gurion University of the Negev)",
              "abstract": "The goal of Software Engineering (SE) education is to teach theory and practice of software sciences, with an ultimate practical goal. Quite surprisingly, although standard SE programs include many hands-on courses, they do not include practical lab courses in software development and maintenance, as common in other engineering disciplines. A capstone project course, that is standard in most SE programs, cannot function as an instructive SE-lab course since it does not enable effective teaching and cannot replace a planned SE-development experiment. This paper describes an SE-lab course that creates lab conditions, where students are faced with a deliberately challenging, planned SE development and management tasks, and the course staff provides team-based guidance. The paper analyzes the lab ideals, principles and goals, explains how they are realized in the lab content, and presents its evaluation from the students and the instructors' viewpoints.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Software Engineering Lab - an Essential Component of a Software Engineering Curriculum 1518289727148 Mira Balaban Ben-Gurion University of the Negev mira@cs.bgu.ac.il Arnon Sturm Ben-Gurion University of the Negev sturm@bgu.ac.il Software Engineering Education Lab Questionnaire The goal of Software Engineering (SE) education is to teach theory and practice of software sciences, with an ultimate practical goal. Quite surprisingly, although standard SE programs include many hands-on courses, they do not include practical lab courses in software development and maintenance, as common in other engineering disciplines. A capstone project course, that is standard in most SE programs, cannot function as an instructive SE-lab course since it does not enable effective teaching and cannot replace a planned SE-development experiment. This paper describes an SE-lab course that creates lab conditions, where students are faced with a deliberately challenging, planned SE development and management tasks, and the course staff provides team-based guidance. The paper analyzes the lab ideals, principles and goals, explains how they are realized in the lab content, and presents its evaluation from the students and the instructors' viewpoints.",
              "pageNumber": 21,
              "isPageNumberRoman": false
            },
            {
              "id": "5XAOudyqMIO0K7wjrpmHHO",
              "type": "authorPaper",
              "text": "Dimensions of Experientialism for Software Engineering Education",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/605U6RSfff0jOaGLn2b2pi/6Exq3LcKAqn1jIVxLN55aJ.pdf",
              "extraLocations": [],
              "authorNames": "Reid Holmes (University of British Columbia), Meghan Allen (University of British Columbia), Michelle Craig (University of Toronto)",
              "abstract": "There is a gap between the abstract concepts taught in the classroom and the skills needed for students to succeed once they join the workplace. The Undergraduate Capstone Open Source Projects (UCOSP) program was developed to narrow this gap by enabling undergraduate computer science students to have an experiential software engineering learning opportunity. Over the past 8 years, 737 students from 30 universities have taken part in this program. In this paper, we sought to understand student perceptions of how UCOSP complements traditional classwork by providing real-world software engineering exposure. We report on a qualitative analysis of 2,203 quotes collected from 167 students from 18 universities over six academic terms. We analyzed these data using a grounded theory approach based on open coding to gain insight into the key benefits of the program from the students' perspective. We found that students highly value being able to apply their classroom knowledge to real, novel tasks, for real projects with a community of users, while receiving real mentorship from a member of the development team. Further, we found that contributing to real software systems provides greater understanding of software engineering than might otherwise be obtained through more traditional means. Our goal is that our analysis can help fellow educators add additional experimentalism into their existing programs.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Dimensions of Experientialism for Software Engineering Education 1518387172744 Reid Holmes University of British Columbia rtholmes@cs.ubc.ca Meghan Allen University of British Columbia meghana@cs.ubc.ca Michelle Craig University of Toronto mcraig@cs.toronto.edu experiential learning software engineering education capstone There is a gap between the abstract concepts taught in the classroom and the skills needed for students to succeed once they join the workplace. The Undergraduate Capstone Open Source Projects (UCOSP) program was developed to narrow this gap by enabling undergraduate computer science students to have an experiential software engineering learning opportunity. Over the past 8 years, 737 students from 30 universities have taken part in this program. In this paper, we sought to understand student perceptions of how UCOSP complements traditional classwork by providing real-world software engineering exposure. We report on a qualitative analysis of 2,203 quotes collected from 167 students from 18 universities over six academic terms. We analyzed these data using a grounded theory approach based on open coding to gain insight into the key benefits of the program from the students' perspective. We found that students highly value being able to apply their classroom knowledge to real, novel tasks, for real projects with a community of users, while receiving real mentorship from a member of the development team. Further, we found that contributing to real software systems provides greater understanding of software engineering than might otherwise be obtained through more traditional means. Our goal is that our analysis can help fellow educators add additional experimentalism into their existing programs.",
              "pageNumber": 31,
              "isPageNumberRoman": false
            },
            {
              "id": "6pgRSfqrHx7xlBKdS1hGQN",
              "type": "authorPaper",
              "text": "Open-Source Software in Class: Students' Common Mistakes",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/Aqs0gf1RPfzilfgb9ZyI3/1l4siOSDqHYjJEhkm195YS.pdf",
              "extraLocations": [],
              "authorNames": "Zhewei Hu (North Carolina State University), Yang Song (University of North Carolina Wilmington), Edward Gehringer (North Carolina State University)",
              "abstract": "Introducing Open Source Software (OSS) projects into a software-engineering course has many advantages, for instance, allowing students to learn good coding practices from real-world projects, and giving students a glimpse of a real project. However, it is not easy for instructors to induce one or more OSS core teams to lend support for course projects. The alternative is to have students work on \"toy features\"—features for these projects not specified by OSS core teams, but by teaching staff. However, the project may be unimportant to the OSS project or may disrupt its design, making those code contributions unlikely to be integrated into the OSS code repository. In this paper, we, as both teaching staff and the core team for one OSS project called Expertiza, discuss our experience in supporting 700 students on 313 OSS-based course projects in the past five years. We manually checked these course projects, and summarize 13 common mistakes that frequently occur in students' contributions, such as not following the existing design or messy pull requests. We propose five suggestions to help students reduce the frequency of common mistakes and improve the quality of their OSS pull requests.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Open-Source Software in Class: Students' Common Mistakes 1518101497466 Zhewei Hu North Carolina State University zhu6@ncsu.edu Yang Song University of North Carolina Wilmington songy@uncw.edu Edward Gehringer North Carolina State University efg@ncsu.edu Open-source software software engineering open source curriculum Expertiza Introducing Open Source Software (OSS) projects into a software-engineering course has many advantages, for instance, allowing students to learn good coding practices from real-world projects, and giving students a glimpse of a real project. However, it is not easy for instructors to induce one or more OSS core teams to lend support for course projects. The alternative is to have students work on \"toy features\"—features for these projects not specified by OSS core teams, but by teaching staff. However, the project may be unimportant to the OSS project or may disrupt its design, making those code contributions unlikely to be integrated into the OSS code repository. In this paper, we, as both teaching staff and the core team for one OSS project called Expertiza, discuss our experience in supporting 700 students on 313 OSS-based course projects in the past five years. We manually checked these course projects, and summarize 13 common mistakes that frequently occur in students' contributions, such as not following the existing design or messy pull requests. We propose five suggestions to help students reduce the frequency of common mistakes and improve the quality of their OSS pull requests.",
              "pageNumber": 40,
              "isPageNumberRoman": false
            },
            {
              "id": "2hJBKKPidRuzWJMvnvDynt",
              "type": "authorPaper",
              "text": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf",
              "extraLocations": [],
              "authorNames": "Maria Paasivaara (Aalto University & IT University of Copenhagen), Dragos Voda (Aalto University), Ville T. Heikkilä (Aalto University), Jari Vanhanen (Aalto University), Casper Lassenius (Aalto University)",
              "abstract": "Teaching of software engineering using capstone projects has seen a steady growth over the years with overwhelmingly positive reported experiences. Discerning what students consider of value before and after a software project course, is crucial for developing a relevant curriculum. This paper reports on the affective learning outcomes of a Scrum based capstone course with industrial clients. We measured affective learning as changes in the attitudes towards the difficulty and importance of certain aspects present in software development, including technical, teamwork and customer interaction. Data was collected from 14 student teams of 7-9 members in the form of team interviews and individual surveys, with 86 students participating in the interviews and 86 valid survey answers. %corresponding to a 66% response rate. Our results show that students largely change their attitudes in the desired direction after the course regarding both importance and difficulty, with 57% reporting an increased understanding of the importance of collaboration and communication within the team and 44% reporting less than expected difficulty in learning new technologies/programming languages.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes? 1518497268169 Maria Paasivaara Aalto University & IT University of Copenhagen maria.paasivaara@gmail.com Dragos Voda Aalto University dragos.voda@aalto.fi Ville T. Heikkilä Aalto University v.t.heikkila@gmail.com Jari Vanhanen Aalto University jari.vanhanen@aalto.fi Casper Lassenius Aalto University Casper.Lassenius@aalto.fi software engineering education capstone courses Scrum affective learning Teaching of software engineering using capstone projects has seen a steady growth over the years with overwhelmingly positive reported experiences. Discerning what students consider of value before and after a software project course, is crucial for developing a relevant curriculum. This paper reports on the affective learning outcomes of a Scrum based capstone course with industrial clients. We measured affective learning as changes in the attitudes towards the difficulty and importance of certain aspects present in software development, including technical, teamwork and customer interaction. Data was collected from 14 student teams of 7-9 members in the form of team interviews and individual surveys, with 86 students participating in the interviews and 86 valid survey answers. %corresponding to a 66% response rate. Our results show that students largely change their attitudes in the desired direction after the course regarding both importance and difficulty, with 57% reporting an increased understanding of the importance of collaboration and communication within the team and 44% reporting less than expected difficulty in learning new technologies/programming languages.",
              "pageNumber": 49,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "We Measure",
          "lineItems": [
            {
              "id": "4nR2hW2RdH38PYpiywpZDL",
              "type": "authorPaper",
              "text": "Continuous Delivery of Personalized Assessment and Feedback in Agile Software Engineering Projects",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ztuOBdGuPzPaaZ5ZxbGjy/7Bjf67pa1UxMHWufh4okAy.pdf",
              "extraLocations": [],
              "authorNames": "Xiaoying Bai (Tsinghua University), Mingjie Li (Tsinghua University), Dan Pei (Tsinghua University), Shanshan Li (Tsinghua University), Deming Ye (Tsinghua University)",
              "abstract": "In recent years, Agile development has been adopted in project practices of Software Engineering (SE) courses. However, it is a great challenge to provide timely assessment and feedback to project teams and individual students with a frequency that catches up with iterative, incremental, and cooperative software development with continuous deliveries. Conventional project reviews are mostly dependent upon instructors and teaching assistants in a manual reviewing/mentoring approach, which are simply not scalable. In this paper, we argue that agile projects warrant a \"continuous delivery\" of personalized assessment and feedback. To this end, we propose an online-offline combined approach and built a system upon GitLab. An online platform was built by integrating DevOps tool chains so that personalized reports and assessments are delivered automatically to the teams/students, which serve as the very efficient trigger and basis for the close and targeted offline interactions between students and TAs: daily discussion over instant messaging and weekly in person meeting. This system has been in operation since 2014 for an undergraduate SE course, with over 500 students participating in over 130 project teams in total. Our results show that such a continuous assessment/feedback delivery system is very effective in educating Agile projects in SE courses.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Continuous Delivery of Personalized Assessment and Feedback in Agile Software Engineering Projects 1518615914517 Xiaoying Bai Tsinghua University baixy@tsinghua.edu.cn Mingjie Li Tsinghua University li-mj14@mails.tsinghua.edu.cn Dan Pei Tsinghua University peidan@tsinghua.edu.cn Shanshan Li Tsinghua University lishanshan@tsinghua.edu.cn Deming Ye Tsinghua University ydm14@mails.tsinghua.edu.cn Software Engineering Course Project Agile DevOps Assessment In recent years, Agile development has been adopted in project practices of Software Engineering (SE) courses. However, it is a great challenge to provide timely assessment and feedback to project teams and individual students with a frequency that catches up with iterative, incremental, and cooperative software development with continuous deliveries. Conventional project reviews are mostly dependent upon instructors and teaching assistants in a manual reviewing/mentoring approach, which are simply not scalable. In this paper, we argue that agile projects warrant a \"continuous delivery\" of personalized assessment and feedback. To this end, we propose an online-offline combined approach and built a system upon GitLab. An online platform was built by integrating DevOps tool chains so that personalized reports and assessments are delivered automatically to the teams/students, which serve as the very efficient trigger and basis for the close and targeted offline interactions between students and TAs: daily discussion over instant messaging and weekly in person meeting. This system has been in operation since 2014 for an undergraduate SE course, with over 500 students participating in over 130 project teams in total. Our results show that such a continuous assessment/feedback delivery system is very effective in educating Agile projects in SE courses.",
              "pageNumber": 58,
              "isPageNumberRoman": false
            },
            {
              "id": "40uQseIObqtj7bkO8GOPmE",
              "type": "authorPaper",
              "text": "Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/49j2HKsc7xCbCMCQBewE5d/6YasTauDw1E3JGL4Jft3He.pdf",
              "extraLocations": [],
              "authorNames": "Eray Tuzun (Bilkent University and Havelsan), Hakan Erdogmus (Carnegie Mellon University), Izzet Gokhan Ozbilgin (Havelsan)",
              "abstract": "It has been 50 years since the term \"software engineering\" was coined in 1968 at a NATO conference. The field should be relatively mature by now, with most established universities covering core software engineering topics in their Computer Science programs and others offering specialized degrees. However, still many practitioners lament a lack of skills in new software engineering hires. With the growing demand for software engineers from the industry, this apparent gap becomes more and more pronounced. One corporate strategy to address this gap is for the industry to develop supplementary training programs before the hiring process, which could also help companies screen viable candidates. In this paper, we report on our experiences and lessons learned in conducting a summer school program aimed at screening new graduates, introducing them to core skills relevant to the organization and industry, and assessing their attitudes toward mastering those skills before the hiring process begins. Our experience suggests that such initiatives can be mutually beneficial for new hires and companies alike. We support this insight with pre- and post-training data collected from the participants during the first edition of the summer school and a follow-up questionnaire conducted after a year with the participants, 50% of whom were hired by the company shortly after the summer school",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program 1518460705920 Eray Tuzun Bilkent University and Havelsan eraytuzun@cs.bilkent.edu.tr Hakan Erdogmus Carnegie Mellon University hakan.erdogmus@sv.cmu.edu Izzet Gokhan Ozbilgin Havelsan gozbilgin@havelsan.com.tr software engineering education software engineering training software engineering summer school hiring practices for software professionals It has been 50 years since the term \"software engineering\" was coined in 1968 at a NATO conference. The field should be relatively mature by now, with most established universities covering core software engineering topics in their Computer Science programs and others offering specialized degrees. However, still many practitioners lament a lack of skills in new software engineering hires. With the growing demand for software engineers from the industry, this apparent gap becomes more and more pronounced. One corporate strategy to address this gap is for the industry to develop supplementary training programs before the hiring process, which could also help companies screen viable candidates. In this paper, we report on our experiences and lessons learned in conducting a summer school program aimed at screening new graduates, introducing them to core skills relevant to the organization and industry, and assessing their attitudes toward mastering those skills before the hiring process begins. Our experience suggests that such initiatives can be mutually beneficial for new hires and companies alike. We support this insight with pre- and post-training data collected from the participants during the first edition of the summer school and a follow-up questionnaire conducted after a year with the participants, 50% of whom were hired by the company shortly after the summer school",
              "pageNumber": 68,
              "isPageNumberRoman": false
            },
            {
              "id": "32CdXPpnYrCz0OTZ7qj1vb",
              "type": "authorPaper",
              "text": "Compilation Error Repair: For the Student Programs, From the Student Programs",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf",
              "extraLocations": [],
              "authorNames": "Umair Z. Ahmed (IIT Kanpur), Pawan Kumar (IIT Kanpur), Amey Karkare (IIT Kanpur), Purushottam Kar (IIT Kanpur), Sumit Gulwani (Microsoft Research)",
              "abstract": "Compile-time errors pose a major learning hurdle for students of introductory programming courses. Compiler error messages, while accurate, are targeted at seasoned programmers, and seem cryptic to beginners. In this work, we address this problem of pedagogically-inspired program repair and report TRACER (Targeted RepAir of Compilation ERrors), a system for performing repairs on compilation errors, aimed at introductory programmers. TRACER invokes a novel combination of tools from programming language theory and deep learning and offers repairs that not only enable successful compilation, but repairs that are very close to those actually performed by students on similar errors. The ability to offer such targeted corrections, rather than just code that compiles, makes TRACER more relevant in offering real-time feedback to students in lab or tutorial sessions, as compared to existing works that merely offer a certain compilation success rate. In an evaluation on 4500 erroneous C programs written by students of a freshman year programming course, TRACER recommends a repair exactly matching the one expected by the student for 68% of the cases, and in 79.27% of the cases, produces a compilable repair. On a further set of 6971 programs that require errors to be fixed on multiple lines, TRACER enjoyed a success rate of 44% compared to the 27% success rate offered by the state-of-the-art technique DeepFix.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Compilation Error Repair: For the Student Programs, From the Student Programs 1518458032511 Umair Z. Ahmed IIT Kanpur umair@cse.iitk.ac.in Pawan Kumar IIT Kanpur kpawan@cse.iitk.ac.in Amey Karkare IIT Kanpur karkare@cse.iitk.ac.in Purushottam Kar IIT Kanpur purushot@cse.iitk.ac.in Sumit Gulwani Microsoft Research sumitg@microsoft.com Intelligent Tutoring Systems Compilation Errors Automatic Repair Recommendation Systems Compile-time errors pose a major learning hurdle for students of introductory programming courses. Compiler error messages, while accurate, are targeted at seasoned programmers, and seem cryptic to beginners. In this work, we address this problem of pedagogically-inspired program repair and report TRACER (Targeted RepAir of Compilation ERrors), a system for performing repairs on compilation errors, aimed at introductory programmers. TRACER invokes a novel combination of tools from programming language theory and deep learning and offers repairs that not only enable successful compilation, but repairs that are very close to those actually performed by students on similar errors. The ability to offer such targeted corrections, rather than just code that compiles, makes TRACER more relevant in offering real-time feedback to students in lab or tutorial sessions, as compared to existing works that merely offer a certain compilation success rate. In an evaluation on 4500 erroneous C programs written by students of a freshman year programming course, TRACER recommends a repair exactly matching the one expected by the student for 68% of the cases, and in 79.27% of the cases, produces a compilable repair. On a further set of 6971 programs that require errors to be fixed on multiple lines, TRACER enjoyed a success rate of 44% compared to the 27% success rate offered by the state-of-the-art technique DeepFix.",
              "pageNumber": 78,
              "isPageNumberRoman": false
            },
            {
              "id": "2ZBF4SO8lSRz95xKeYBd8q",
              "type": "authorPaper",
              "text": "Improving Integrated Development Environment Commands Knowledge With Recommender Systems",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2vph05WQ3iK9VFCt3gEw5E/2TSyFSTJYXkqwOxmSAyBve.pdf",
              "extraLocations": [],
              "authorNames": "Marko Gasparic (Free University of Bozen-Bolzano), Tural Gurbanov (Free University of Bozen-Bolzano), Francesco Ricci (Free University of Bozen-Bolzano)",
              "abstract": "Development tools have an impact on software engineers' productivity and quality of software construction. We believe that it is crucial to teach future software engineers how to exploit integrated development environment functionality, if we want to encourage the effective application of software development principles and practices. Our research shows that recommender systems can be deployed to improve integrated development environment knowledge of computer science students by automatically suggesting new and useful commands, such as buttons and shortcuts that execute different functions. While previous work focused on optimizing the algorithmic predictive capability of a recommender to identify the commands that the users will eventually use, we have addressed a set of research questions related to the overall acceptance of a complete recommender system in a real-life setting. The evaluation results show that a command recommender system can be well accepted by computer science students. In particular, when students are supported by such a system, they use a considerably larger set of commands available in their development environment. Moreover, the results show that the highest acceptance rate and the usefulness score were achieved by a non-personalized, popularity-based algorithm, while the most novel commands were suggested by a context-aware algorithm.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Improving Integrated Development Environment Commands Knowledge With Recommender Systems 1518366394719 Marko Gasparic Free University of Bozen-Bolzano m.gasparic@gmail.com Tural Gurbanov Free University of Bozen-Bolzano tural.gurbanov@inf.unibz.it Francesco Ricci Free University of Bozen-Bolzano francesco.ricci@unibz.it IDE command recommender system functionality learning students Development tools have an impact on software engineers' productivity and quality of software construction. We believe that it is crucial to teach future software engineers how to exploit integrated development environment functionality, if we want to encourage the effective application of software development principles and practices. Our research shows that recommender systems can be deployed to improve integrated development environment knowledge of computer science students by automatically suggesting new and useful commands, such as buttons and shortcuts that execute different functions. While previous work focused on optimizing the algorithmic predictive capability of a recommender to identify the commands that the users will eventually use, we have addressed a set of research questions related to the overall acceptance of a complete recommender system in a real-life setting. The evaluation results show that a command recommender system can be well accepted by computer science students. In particular, when students are supported by such a system, they use a considerably larger set of commands available in their development environment. Moreover, the results show that the highest acceptance rate and the usefulness score were achieved by a non-personalized, popularity-based algorithm, while the most novel commands were suggested by a context-aware algorithm.",
              "pageNumber": 88,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Take-Home Lessons II",
          "lineItems": [
            {
              "id": "6NYxJjeYL3GUkXtOZWs9Gh",
              "type": "authorPaper",
              "text": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf",
              "extraLocations": [],
              "authorNames": "Francisco J. Gutierrez (University of Chile), Jocelyn Simmonds (University of Chile), Nancy Hitschfeld (University of Chile), Cecilia Casanova (University of Chile), Cecilia Sotomayor (University of Chile), Vanessa Peña-Araya (University of Chile)",
              "abstract": "Recent literature reports a fair amount of initiatives on how to engage younger populations in achieving computational literacy. However, there is considerable less research on how to effectively deliver software development skills in a way that can be accepted and ultimately adopted by this user group. As a way to bridge this gap, we ran an extracurricular project-based workshop, targeting 10-12 years old learners with no prior coding experience, delivered over five days in the computer labs at the University of Chile. In this workshop, participants follow hands-on activities where they acquire the basics of computer programming and develop a small-scale software application using Scratch. These activities showcase that good software engineering practices can be taught to K-6 students, where these students are guided by experienced computer science undergraduate and graduate students. This paper presents a descriptive case study that focuses on assessing how K-6 learners assimilate and use these practices when developing their first computing application in a non-traditional learning experience. In order to do this, we designed and calibrated a rubric to evaluate the software products generated by the workshop participants. Our findings provide further evidence that it is indeed possible to teach initial notions of software engineering to this user group, structuring these constructs in a non-technical language that can be assimilated by novice developers. Furthermore, we did not observe significant differences in this matter according to gender and socio-economic status.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch 1518461935553 Francisco J. Gutierrez University of Chile frgutier@dcc.uchile.cl Jocelyn Simmonds University of Chile jsimmond@dcc.uchile.cl Nancy Hitschfeld University of Chile nancy@dcc.uchile.cl Cecilia Casanova University of Chile ccasanov@dcc.uchile.cl Cecilia Sotomayor University of Chile cecilia.sotomayor@u.uchile.cl Vanessa Peña-Araya University of Chile vpena@dcc.uchile.cl Software engineering education Software development Rubric K-6 learners Scratch Case study Recent literature reports a fair amount of initiatives on how to engage younger populations in achieving computational literacy. However, there is considerable less research on how to effectively deliver software development skills in a way that can be accepted and ultimately adopted by this user group. As a way to bridge this gap, we ran an extracurricular project-based workshop, targeting 10-12 years old learners with no prior coding experience, delivered over five days in the computer labs at the University of Chile. In this workshop, participants follow hands-on activities where they acquire the basics of computer programming and develop a small-scale software application using Scratch. These activities showcase that good software engineering practices can be taught to K-6 students, where these students are guided by experienced computer science undergraduate and graduate students. This paper presents a descriptive case study that focuses on assessing how K-6 learners assimilate and use these practices when developing their first computing application in a non-traditional learning experience. In order to do this, we designed and calibrated a rubric to evaluate the software products generated by the workshop participants. Our findings provide further evidence that it is indeed possible to teach initial notions of software engineering to this user group, structuring these constructs in a non-technical language that can be assimilated by novice developers. Furthermore, we did not observe significant differences in this matter according to gender and socio-economic status.",
              "pageNumber": 98,
              "isPageNumberRoman": false
            },
            {
              "id": "5zyeCgE7FRCQ7a05f1HRRo",
              "type": "authorPaper",
              "text": "Use of JiTT in a Graduate Software Testing Course: An Experience Report",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7KI9xFrlptWhB1WS8sHiEe/2ipWZAAMbfjOAgdYm5JLyp.pdf",
              "extraLocations": [],
              "authorNames": "Alexandra Martinez (Universidad de Costa Rica)",
              "abstract": "This paper describes our experience using Just-in-Time Teaching (JiTT) in a graduate Software Testing course during two semesters. JiTT is a pedagogical strategy that bridges in-class and out-of-class components through preparatory web-based assignments, known as warm-ups. Our JiTT design was as follows. The preparatory out-of-class component consisted of a reading test, which required students to read a chapter from the textbook and then answer a web-based test available in our virtual platform. Reading tests were due the day before class in order to give the teacher enough time to read over the student's responses and adjust the next lesson accordingly. The in-class component was organized around student common misconceptions or difficulties, extracted from the reading tests submitted by the students. Discussions and cooperative learning activities were among the teaching strategies used in class. Our approach was assessed from the students' and teacher's perspective. The students' perspective was obtained from a survey. The teacher's perspective consisted in an assessment of strengths and limitations. Results from our evaluation show that a vast majority of students believe their learning improves when they prepare for class by reading the material in advance. They also think that reading tests are an effective way of verifying that students did the assigned reading. Most of them also consider that JiTT is an appropriate teaching strategy for the course. From the teacher's perspective, a major strength found was that students were more engaged in class, asking interesting questions that enriched class discussion. Also, the use of open-ended (essay-type) questions in reading tests has the additional benefit of helping them become better writers (organize their ideas better and clarify their thinking through writing).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Use of JiTT in a Graduate Software Testing Course: An Experience Report 1518433192941 Alexandra Martinez Universidad de Costa Rica alexandra.martinez@ecci.ucr.ac.cr JiTT Just-in-Time Teaching Software testing graduate course This paper describes our experience using Just-in-Time Teaching (JiTT) in a graduate Software Testing course during two semesters. JiTT is a pedagogical strategy that bridges in-class and out-of-class components through preparatory web-based assignments, known as warm-ups. Our JiTT design was as follows. The preparatory out-of-class component consisted of a reading test, which required students to read a chapter from the textbook and then answer a web-based test available in our virtual platform. Reading tests were due the day before class in order to give the teacher enough time to read over the student's responses and adjust the next lesson accordingly. The in-class component was organized around student common misconceptions or difficulties, extracted from the reading tests submitted by the students. Discussions and cooperative learning activities were among the teaching strategies used in class. Our approach was assessed from the students' and teacher's perspective. The students' perspective was obtained from a survey. The teacher's perspective consisted in an assessment of strengths and limitations. Results from our evaluation show that a vast majority of students believe their learning improves when they prepare for class by reading the material in advance. They also think that reading tests are an effective way of verifying that students did the assigned reading. Most of them also consider that JiTT is an appropriate teaching strategy for the course. From the teacher's perspective, a major strength found was that students were more engaged in class, asking interesting questions that enriched class discussion. Also, the use of open-ended (essay-type) questions in reading tests has the additional benefit of helping them become better writers (organize their ideas better and clarify their thinking through writing).",
              "pageNumber": 108,
              "isPageNumberRoman": false
            },
            {
              "id": "6y5TJ96B92nWSYThe2geDw",
              "type": "authorPaper",
              "text": "Re-imagining a Course in Software Project Management",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/lMzeYRFCLK5hr8vXsQJVt/dDnKXUBMiBVrNSMfHyRRS.pdf",
              "extraLocations": [],
              "authorNames": "Paul Ralph (University of Auckland)",
              "abstract": "It is now common for software engineering programs to include some project management education, typically in the final year of the undergraduate program, or at the postgraduate level. Such courses are challenging for several reasons: faculty are unfamiliar with management education and literature; the software project management literature is dominated by nonempirical, atheoretical, unscientific practitioner recommendations; common software engineering pedagogical approaches are inappropriate for teaching management; and many students seem unwilling or unable to take the course seriously (that is, by attending all classes and completing all assigned readings, activities and projects). This paper describes a postgraduate management course in software engineering, which was iteratively refined over seven years to address all of these problems. Its key features include: 1) scholarly, evidence-based readings; 2) quizzes on readings at the beginning of every class; 3) Brief, slide-free lectures; 4) copious in-class activities formalized into a gradeable workbook; 5) an ambitious, multistage project combining novel research, collaborative data collection and literature reviewing, peer review workshops and individual deliverables. The course embodies both research-led teaching and substantial, novel class-based research.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Re-imagining a Course in Software Project Management 1516933989351 Paul Ralph University of Auckland paul@paulralph.name Education Training Software Project Management Scrum XP Lean Kanban It is now common for software engineering programs to include some project management education, typically in the final year of the undergraduate program, or at the postgraduate level. Such courses are challenging for several reasons: faculty are unfamiliar with management education and literature; the software project management literature is dominated by nonempirical, atheoretical, unscientific practitioner recommendations; common software engineering pedagogical approaches are inappropriate for teaching management; and many students seem unwilling or unable to take the course seriously (that is, by attending all classes and completing all assigned readings, activities and projects). This paper describes a postgraduate management course in software engineering, which was iteratively refined over seven years to address all of these problems. Its key features include: 1) scholarly, evidence-based readings; 2) quizzes on readings at the beginning of every class; 3) Brief, slide-free lectures; 4) copious in-class activities formalized into a gradeable workbook; 5) an ambitious, multistage project combining novel research, collaborative data collection and literature reviewing, peer review workshops and individual deliverables. The course embodies both research-led teaching and substantial, novel class-based research.",
              "pageNumber": 116,
              "isPageNumberRoman": false
            },
            {
              "id": "4uvrXNPmWwwuNMlj6NNYC",
              "type": "authorPaper",
              "text": "Providing a Baseline in Software Process Improvement Education with Lego Scrum Simulations",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/53i20BMExum14PymS4u5O6/6mZV0bO3jDs6KpRTVHgpFw.pdf",
              "extraLocations": [],
              "authorNames": "Jan-Philipp Steghöfer (Chalmers )",
              "abstract": "A critical aspect of software process education in general and software process improvement (SPI) education in particular is to give students the chance to experience processes and issues associated with process at first hand. This is, however, often difficult in an educational setting since providing a meaningful project in which to apply a process can take away time and focus from the intended learning objectives. Instead, miniatures and simulations can be used to create an environment in which students can interact with processes directly without taking up large parts of the curriculum. In this paper, we report on our experience of using Lego Scrum simulations in an SPI course at the Bachelor level. The simulations are used both to introduce a baseline for the students to let them experience process issues directly, create an improvement plan that addresses observed issues, and to apply and evaluate the plan in a second simulation. This allows students to engage with SPI methods practically, instead of purely theoretically, and allows the teacher to refer to the shared experience throughout the course. The collected data shows that the approach is suitable, but that students struggle with the demand of putting an improvement plan into practice. We show which issues commonly occur in the simulations and thus allow teachers who adopt the practice to scaffold it and react accordingly, in particular to empower the students to take on responsibility for the improvement of the process.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Providing a Baseline in Software Process Improvement Education with Lego Scrum Simulations 1518187263991 Jan-Philipp Steghöfer Chalmers jan-philipp.steghofer@gu.se Software Process Improvement SPI Software Engineering Education Scrum A critical aspect of software process education in general and software process improvement (SPI) education in particular is to give students the chance to experience processes and issues associated with process at first hand. This is, however, often difficult in an educational setting since providing a meaningful project in which to apply a process can take away time and focus from the intended learning objectives. Instead, miniatures and simulations can be used to create an environment in which students can interact with processes directly without taking up large parts of the curriculum. In this paper, we report on our experience of using Lego Scrum simulations in an SPI course at the Bachelor level. The simulations are used both to introduce a baseline for the students to let them experience process issues directly, create an improvement plan that addresses observed issues, and to apply and evaluate the plan in a second simulation. This allows students to engage with SPI methods practically, instead of purely theoretically, and allows the teacher to refer to the shared experience throughout the course. The collected data shows that the approach is suitable, but that students struggle with the demand of putting an improvement plan into practice. We show which issues commonly occur in the simulations and thus allow teachers who adopt the practice to scaffold it and react accordingly, in particular to empower the students to take on responsibility for the improvement of the process.",
              "pageNumber": 126,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "The Bigger Picture",
          "lineItems": [
            {
              "id": "755xC1kOl1Zw74HA0wn0O7",
              "type": "authorPaper",
              "text": "Increasing Student Engagement in Higher Education Using a Context-Aware Q&A Teaching Framework",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/70xg6U2NS78MdWNOncB6PJ/1EzW0QC7tyq9nW243YE3yj.pdf",
              "extraLocations": [],
              "authorNames": "Jan Knobloch (Technical University of Munich), Jonas Kaltenbach (Technical University of Munich), Bernd Bruegge (Technical University of Munich)",
              "abstract": "Modeling in Software Engineering is a complex task which includes interaction and discussion. Often multiple iterations are needed to end up with a satisfying design to handle given problems like complexity or change. This behavior can also be seen in education in software engineering, where learners tend to iterate over their models after having multiple discussions with their instructors or peers about possible solutions. This is an important part of the learning process, however, it is increasingly harder to implement for large scale on campus courses due to high student to lecturer ratios. One of the biggest problems is that lecturers are not able to allocate their time during class to support all students equally. This issue leads to new teaching methodologies and automated or semi-automated tools to support in-class interaction of students. However, these tools are lacking an automated mapping between questions asked and the teaching context provided. This context has to be inserted manually or is implicitly available during the lecture, however is lost after the lecture is over. In this paper we describe the adaption of a lecture-style instruction and the introduction of a context-aware Q&amp;A teaching framework to increase student interaction by parallelizing it with content delivery. We achieve this while also lowering barriers for students to participate, even in multi-classroom setups. The stated approach also allows the creation of a knowledge repository which persists student interaction including its teaching context. This repository can be used by students to prepare for upcoming exams as well as by instructors to optimize their teaching content. Using our approach, we are able to show that there is an increase in student participation, leading to increased student examination performance for active students.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Increasing Student Engagement in Higher Education Using a Context-Aware Q&A Teaching Framework 1517413801030 Jan Knobloch Technical University of Munich knobloch@in.tum.de Jonas Kaltenbach Technical University of Munich kaltenbj@in.tum.de Bernd Bruegge Technical University of Munich bruegge@in.tum.de question &amp; answer system context teaching education interaction Modeling in Software Engineering is a complex task which includes interaction and discussion. Often multiple iterations are needed to end up with a satisfying design to handle given problems like complexity or change. This behavior can also be seen in education in software engineering, where learners tend to iterate over their models after having multiple discussions with their instructors or peers about possible solutions. This is an important part of the learning process, however, it is increasingly harder to implement for large scale on campus courses due to high student to lecturer ratios. One of the biggest problems is that lecturers are not able to allocate their time during class to support all students equally. This issue leads to new teaching methodologies and automated or semi-automated tools to support in-class interaction of students. However, these tools are lacking an automated mapping between questions asked and the teaching context provided. This context has to be inserted manually or is implicitly available during the lecture, however is lost after the lecture is over. In this paper we describe the adaption of a lecture-style instruction and the introduction of a context-aware Q&amp;A teaching framework to increase student interaction by parallelizing it with content delivery. We achieve this while also lowering barriers for students to participate, even in multi-classroom setups. The stated approach also allows the creation of a knowledge repository which persists student interaction including its teaching context. This repository can be used by students to prepare for upcoming exams as well as by instructors to optimize their teaching content. Using our approach, we are able to show that there is an increase in student participation, leading to increased student examination performance for active students.",
              "pageNumber": 136,
              "isPageNumberRoman": false
            },
            {
              "id": "5kdi8PWG811OfREUoBKjGQ",
              "type": "authorPaper",
              "text": "SIGSOFT Distinguished Paper - Barriers to Gender Diversity in Software Development Education: Actionable Insights from a Danish Case Study",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AJhTrUssN0WJPtCcbwJHK/6l3xdI8rwGcAb2T1oMgJnG.pdf",
              "extraLocations": [],
              "authorNames": "Valeria Borsotti (IT University of Copenhagen)",
              "abstract": "This paper contributes to the growing literature on the gender gap in computer science education by focusing on an exploratory case study conducted at the IT University of Copenhagen (ITU), Denmark. The specific objective of this study was to draw on existing research in order to empirically investigate the main socio-cultural barriers to female participation in the bachelor of Software Development at ITU, and to generate insights that would inform concrete and effective interventions. This investigation takes the form of an exploratory case study, providing insights into influential factors such as students' perceptions, attitudes and behavior towards software development education and gender differences in pre-university coding skills. Empirical evidence has been collected through semi-structured interviews with 38 students (undergraduate and high school) and surveys with 395 students (undergraduate and high school). Research findings from the study have subsequently informed the design of local interventions that have led to the recruitment of double the percentage of women in the bachelor of Software Development at ITU in one year, from 11% in 2016 to 22% 2017. The study also describes and discusses such interventions.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 SIGSOFT Distinguished Paper - Barriers to Gender Diversity in Software Development Education: Actionable Insights from a Danish Case Study 1518457862034 Valeria Borsotti IT University of Copenhagen vbor@itu.dk Gender Diversity Software Development Education Stereotypes Computer Science Education Exploratory Case Study This paper contributes to the growing literature on the gender gap in computer science education by focusing on an exploratory case study conducted at the IT University of Copenhagen (ITU), Denmark. The specific objective of this study was to draw on existing research in order to empirically investigate the main socio-cultural barriers to female participation in the bachelor of Software Development at ITU, and to generate insights that would inform concrete and effective interventions. This investigation takes the form of an exploratory case study, providing insights into influential factors such as students' perceptions, attitudes and behavior towards software development education and gender differences in pre-university coding skills. Empirical evidence has been collected through semi-structured interviews with 38 students (undergraduate and high school) and surveys with 395 students (undergraduate and high school). Research findings from the study have subsequently informed the design of local interventions that have led to the recruitment of double the percentage of women in the bachelor of Software Development at ITU in one year, from 11% in 2016 to 22% 2017. The study also describes and discusses such interventions.",
              "pageNumber": 146,
              "isPageNumberRoman": false
            },
            {
              "id": "4YqX2rtFjvlg2AyrdQlh4z",
              "type": "authorPaper",
              "text": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf",
              "extraLocations": [],
              "authorNames": "Birgit Penzenstadler (California State University Long Beach), Stefanie Betz (Karlsruhe Institute of Technology), Colin C. Venters (University of Huddersfield), Ruzanna Chitchyan (University of Bristol), Jari Porras (Lappeenranta University of Technology), Norbert Seyff (FHNW), Leticia Duboc (La Salle - Ramon Llull University), Christoph Becker (University of Toronto)",
              "abstract": "Sustainability has become an important concern across many disciplines, and software systems play an increasingly central role in addressing it. However, teaching students from software engineering and related disciplines to effectively act in this space requires interdisciplinary courses that combines the concept of sustainability with software engineering practice and principles. Yet, presently little guidance exist on which subjects and materials to cover in such courses and how, combined with a lack of reusable learning objects. This paper describes a summer school course on Software Engineering for Sustainability (SE4S). We provide a blueprint for this course, in the hope that it can help the community develop a shared approach and methods to teaching SE4S. Practical lessons learned from delivery of this course are also reported here, and could help iterate over the course materials, structure, and guidance for future improvements. The course blueprint, availability of used materials and report of the study results make this course viable for replication and further improvement.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Everything is INTERRELATED: Teaching Software Engineering for Sustainability 1518105455614 Birgit Penzenstadler California State University Long Beach birgit.penzenstadler@csulb.edu Stefanie Betz Karlsruhe Institute of Technology stefanie.betz@kit.edu Colin C. Venters University of Huddersfield C.Venters@hud.ac.uk Ruzanna Chitchyan University of Bristol r.chitchyan@bristol.ac.uk Jari Porras Lappeenranta University of Technology jari.porras@lut.fi Norbert Seyff FHNW norbert.seyff@fhnw.ch Leticia Duboc La Salle - Ramon Llull University lduboc@salleurl.edu Christoph Becker University of Toronto christoph.becker@utoronto.ca Sustainability software engineering pedagogy sustainability design sustainability education Sustainability has become an important concern across many disciplines, and software systems play an increasingly central role in addressing it. However, teaching students from software engineering and related disciplines to effectively act in this space requires interdisciplinary courses that combines the concept of sustainability with software engineering practice and principles. Yet, presently little guidance exist on which subjects and materials to cover in such courses and how, combined with a lack of reusable learning objects. This paper describes a summer school course on Software Engineering for Sustainability (SE4S). We provide a blueprint for this course, in the hope that it can help the community develop a shared approach and methods to teaching SE4S. Practical lessons learned from delivery of this course are also reported here, and could help iterate over the course materials, structure, and guidance for future improvements. The course blueprint, availability of used materials and report of the study results make this course viable for replication and further improvement.",
              "pageNumber": 153,
              "isPageNumberRoman": false
            },
            {
              "id": "2cF1ofBmlOkXmuCuUJ8X4V",
              "type": "authorPaper",
              "text": "Redesigning an Undergraduate Software Engineering Course for a Large Cohort",
              "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3g39cLGpyUxZGisjnexmtX/Il0Xh2Abc6hhUNSv1d32N.pdf",
              "extraLocations": [],
              "authorNames": "Claudia Iacob (University of Portsmouth), Shamal Faily (Bournemouth University)",
              "abstract": "Teaching Software Engineering on an undergraduate programme is challenging, particularly when dealing with large numbers of students. On one hand, a strong understanding of software and good programming skills are prerequisites. On the other hand, the scale of the projects developed as part of undergraduate programmes do not always make the need for engineering obvious. Encouraging teamwork when students have little professional experience also adds to the level of complexity when delivering material. In this paper, we present a study on the redesign of a second year undergraduate course on Software Engineering for a large cohort.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering Education and Training ICSE-SEET 2018 Redesigning an Undergraduate Software Engineering Course for a Large Cohort 1517423995236 Claudia Iacob University of Portsmouth iacob.claudia@gmail.com Shamal Faily Bournemouth University sfaily@bournemouth.ac.uk Software engineering teamwork education Teaching Software Engineering on an undergraduate programme is challenging, particularly when dealing with large numbers of students. On one hand, a strong understanding of software and good programming skills are prerequisites. On the other hand, the scale of the projects developed as part of undergraduate programmes do not always make the need for engineering obvious. Encouraging teamwork when students have little professional experience also adds to the level of complexity when delivering material. In this paper, we present a study on the redesign of a second year undergraduate course on Software Engineering for a large cohort.",
              "pageNumber": 163,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        }
      ]
    },
    {
      "title": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice",
      "acronym": "ICSE-SEIP",
      "year": 2018,
      "frontMatter": [
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_I",
          "text": "Title Page i",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/f9jycOJfILrer6f8tpyoi/5BCLDMPjsqfScin2UE199B.pdf",
          "extraLocations": [],
          "pageNumber": 1,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_III",
          "text": "Title Page iii",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6XyEKZJcxjgUwgcYv6VcNU/4eaeBBCaeU6bSfoKpQvVRj.pdf",
          "extraLocations": [],
          "pageNumber": 3,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_COPYRIGHT_PAGE",
          "text": "Copyright Page",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1Zi66re4esRBWtEvyEwXZi/4rxQuoHsLHb3bJT3AtDE4o.pdf",
          "extraLocations": [],
          "pageNumber": 4,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TABLE_OF_CONTENTS",
          "text": "Table of Contents",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7Iy1FGxpH2BgQIcrkUky5F/2O13gnAjYVHtzFqY29RP7V.pdf",
          "extraLocations": [],
          "pageNumber": 5,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_GENERAL_CHAIR",
          "text": "Message from the General Chair",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4DF802FVoIujMOsbN0GUSj/2A9H0KD8W2LsDzjK0EYyeQ.pdf",
          "extraLocations": [],
          "pageNumber": 10,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the SEIP Chairs",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3UVS3krMG9P3tHm74r5fa9/6fiBYHBpNB6MHGZQdlmaGx.pdf",
          "extraLocations": [],
          "pageNumber": 13,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Software Engineering in Practice Program Committee",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MG4AEZTlEWfCgR1w2cCmJ/1cl2YdGUqjPuLUV6QcG3BH.pdf",
          "extraLocations": [],
          "pageNumber": 14,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_SPONSORS_CONFERENCE_SUPPORT",
          "text": "Sponsors and Supporters",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6pvXfe8FL8v2h1u84jiA7X/KAHWL5wzFC4J5pB39yHgM.pdf",
          "extraLocations": [],
          "pageNumber": 18,
          "isPageNumberRoman": true
        }
      ],
      "backMatter": [
        {
          "class": "BM",
          "type": "BM_AUTHOR_INDEX",
          "text": "Author Index",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/76JN5UpQjCHEGtP7hrF5di/5poVse7eoqA6qHr2yQEYUl.pdf",
          "extraLocations": [],
          "pageNumber": 317,
          "isPageNumberRoman": false
        },
        {
          "class": "BM",
          "type": "BM_ROSTER",
          "text": "Publisher's Information",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/497omRLjenrBcTUqzYCXBh/13EcHftIx7N9JUMjcz8bzl.pdf",
          "extraLocations": [],
          "pageNumber": 320,
          "isPageNumberRoman": false
        }
      ],
      "sections": [
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Cloud and DevOps",
          "lineItems": [
            {
              "id": "3he7LrKdYWaELZkZ1OvK0T",
              "type": "authorPaper",
              "text": "Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3cdPpSbZHTPdKRDJmYqHi5/14bRIwemub5Z9iDjUUa7uz.pdf",
              "extraLocations": [],
              "authorNames": "Heng Li (Queen's University), Tse-Hsun (Peter) Chen (Concordia University), Ahmed E. Hassan (Queen's University), Mohamed Nasser (BlackBerry), Parminder Flora (BlackBerry)",
              "abstract": "In current DevOps practice, developers are responsible for the operation and maintenance of software systems. However, the human costs for the operation and maintenance grow fast along with the increasing functionality and complexity of software systems. Autonomic computing aims to reduce or eliminate such human intervention. However, there are many existing large systems that did not consider autonomic computing capabilities in their design. Adding autonomic computing capabilities to these existing systems is particularly challenging, because of 1) the significant amount of efforts that are required for investigating and refactoring the existing code base, 2) the risk of adding additional complexity, and 3) the difficulties for allocating resources while developers are busy adding core features to the system. In this paper, we share our industrial experience of re-engineering autonomic computing capabilities to an existing large-scale software system. Our autonomic computing capabilities effectively reduce human intervention on performance configuration tuning and significantly improve system performance. In particular, we discuss the challenges that we encountered and the lessons that we learned during this re-engineering process. For example, in order to minimize the change impact to the original system, we use a variety of approaches (e.g., aspect-oriented programming) to separate the concerns of autonomic computing from the original behaviour of the system. We also share how we tested such autonomic computing capabilities under different conditions, which has never been discussed in prior work. As there are numerous large-scale software systems that still require expensive human intervention, we believe our experience provides valuable insights to software practitioners who wish to add autonomic computing capabilities to these existing large-scale software systems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems 1518465412839 Heng Li Queen's University hengli@cs.queensu.ca Tse-Hsun (Peter) Chen Concordia University peterc@encs.concordia.ca Ahmed E. Hassan Queen's University ahmed@cs.queensu.ca Mohamed Nasser BlackBerry mn2@bb.ca Parminder Flora BlackBerry pfl@bb.ca Autonomic computing software re-engineering performance engineering software testing In current DevOps practice, developers are responsible for the operation and maintenance of software systems. However, the human costs for the operation and maintenance grow fast along with the increasing functionality and complexity of software systems. Autonomic computing aims to reduce or eliminate such human intervention. However, there are many existing large systems that did not consider autonomic computing capabilities in their design. Adding autonomic computing capabilities to these existing systems is particularly challenging, because of 1) the significant amount of efforts that are required for investigating and refactoring the existing code base, 2) the risk of adding additional complexity, and 3) the difficulties for allocating resources while developers are busy adding core features to the system. In this paper, we share our industrial experience of re-engineering autonomic computing capabilities to an existing large-scale software system. Our autonomic computing capabilities effectively reduce human intervention on performance configuration tuning and significantly improve system performance. In particular, we discuss the challenges that we encountered and the lessons that we learned during this re-engineering process. For example, in order to minimize the change impact to the original system, we use a variety of approaches (e.g., aspect-oriented programming) to separate the concerns of autonomic computing from the original behaviour of the system. We also share how we tested such autonomic computing capabilities under different conditions, which has never been discussed in prior work. As there are numerous large-scale software systems that still require expensive human intervention, we believe our experience provides valuable insights to software practitioners who wish to add autonomic computing capabilities to these existing large-scale software systems.",
              "pageNumber": 1,
              "isPageNumberRoman": false
            },
            {
              "id": "4i38eUcsVsn77Zk773vvdx",
              "type": "authorPaper",
              "text": "Java Performance Troubleshooting and Optimization at Alibaba",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6Pki5vDjIRR2hvFp24PCnX/2KpxLLSxNFaXCJ56QTRISU.pdf",
              "extraLocations": [],
              "authorNames": "Fangxi Yin (Alibaba Group), Denghui Dong (Alibaba Group), Sanhong Li (Alibaba Group), Jianmei Guo (Alibaba Group), Kingsum Chow (Alibaba Group)",
              "abstract": "Alibaba is moving toward one of the most efficient cloud infrastructures for global online shopping. On the 2017 Double 11 Global Shopping Festival, Alibaba's cloud platform achieved total sales of more than 25 billion dollars and supported peak volumes of 325,000 transactions and 256,000 payments per second. Most of the cloud-based e-commerce transactions were processed by hundreds of thousands of Java applications with above a billion lines of code. It is challenging to achieve comprehensive and efficient performance troubleshooting and optimization for large-scale online Java applications in production. We proposed new approaches to method profiling and code warmup for Java performance tuning. Our fine-grained, low-overhead method profiler improves the efficiency of Java performance troubleshooting. Moreover, our approach to ahead-of-time code warmup significantly reduces the runtime overheads of just-in-time compiler to address the bursty traffic. Our approaches have been implemented in Alibaba JDK (AJDK), a customized version of OpenJDK, and have been rolled out to Alibaba's cloud platform to support online critical business.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Java Performance Troubleshooting and Optimization at Alibaba 1517834078422 Fangxi Yin Alibaba Group fangxi.yfx@alibaba-inc.com Denghui Dong Alibaba Group denghui.ddh@alibaba-inc.com Sanhong Li Alibaba Group sanhong.lsh@alibaba-inc.com Jianmei Guo Alibaba Group guojianmei@gmail.com Kingsum Chow Alibaba Group kingsum.chow@gmail.com Java performance method profiling code warmup overhead Alibaba is moving toward one of the most efficient cloud infrastructures for global online shopping. On the 2017 Double 11 Global Shopping Festival, Alibaba's cloud platform achieved total sales of more than 25 billion dollars and supported peak volumes of 325,000 transactions and 256,000 payments per second. Most of the cloud-based e-commerce transactions were processed by hundreds of thousands of Java applications with above a billion lines of code. It is challenging to achieve comprehensive and efficient performance troubleshooting and optimization for large-scale online Java applications in production. We proposed new approaches to method profiling and code warmup for Java performance tuning. Our fine-grained, low-overhead method profiler improves the efficiency of Java performance troubleshooting. Moreover, our approach to ahead-of-time code warmup significantly reduces the runtime overheads of just-in-time compiler to address the bursty traffic. Our approaches have been implemented in Alibaba JDK (AJDK), a customized version of OpenJDK, and have been rolled out to Alibaba's cloud platform to support online critical business.",
              "pageNumber": 11,
              "isPageNumberRoman": false
            },
            {
              "id": "1pZ70xl6iwsuebH0iihBFO",
              "type": "authorPaper",
              "text": "An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5SLpOxrOC7MRElPGBMwNp4/5cFXN3dt0iFNy5h7oQMqXT.pdf",
              "extraLocations": [],
              "authorNames": "Joop Aué (Adyen B.V.), Maurício Aniche (Delft University of Technology), Maikel Lobbezoo (Adyen B.V.), Arie van Deursen (Delft University of Technology)",
              "abstract": "Service-oriented architectures are more popular than ever, and increasingly companies and organizations depend on services offered through Web APIs. The capabilities and complexity of Web APIs differ from service to service, and therefore the impact of API errors varies. API problem cases related to Adyen's payment service were found to have direct considerable impact on API consumer applications. With more than 60,000 daily API errors, the potential impact is enormous. In an effort to reduce the impact of API related problems, we analyze 2.43 million API error responses to identify the underlying faults. We quantify the occurrence of faults in terms of the frequency and impacted API consumers. We also challenge our quantitative results by means of a survey with 40 API consumers. Our results show that 1) faults in API integration can be grouped into 11 general causes: invalid user input, missing user input, expired request data, invalid request data, missing request data, insufficient permissions, double processing, configuration, missing server data, internal and third party, 2) most faults can be attributed to the invalid or missing request data, and most API consumers seem to be impacted by faults caused by invalid request data and third party integration; and 3) insufficient guidance on certain aspects of the integration and on how to recover from errors is an important challenge to developers.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company 1517934470948 Joop Aué Adyen B.V. joop.aue@adyen.com Maurício Aniche Delft University of Technology m.f.aniche@tudelft.nl Maikel Lobbezoo Adyen B.V. maikel.lobbezoo@adyen.com Arie van Deursen Delft University of Technology arie.vandeursen@tudelft.nl web engineering web API integration webservices Service-oriented architectures are more popular than ever, and increasingly companies and organizations depend on services offered through Web APIs. The capabilities and complexity of Web APIs differ from service to service, and therefore the impact of API errors varies. API problem cases related to Adyen's payment service were found to have direct considerable impact on API consumer applications. With more than 60,000 daily API errors, the potential impact is enormous. In an effort to reduce the impact of API related problems, we analyze 2.43 million API error responses to identify the underlying faults. We quantify the occurrence of faults in terms of the frequency and impacted API consumers. We also challenge our quantitative results by means of a survey with 40 API consumers. Our results show that 1) faults in API integration can be grouped into 11 general causes: invalid user input, missing user input, expired request data, invalid request data, missing request data, insufficient permissions, double processing, configuration, missing server data, internal and third party, 2) most faults can be attributed to the invalid or missing request data, and most API consumers seem to be impacted by faults caused by invalid request data and third party integration; and 3) insufficient guidance on certain aspects of the integration and on how to recover from errors is an important challenge to developers.",
              "pageNumber": 13,
              "isPageNumberRoman": false
            },
            {
              "id": "2Xj1Sdw9JnNNyAENgUQ4Pw",
              "type": "authorPaper",
              "text": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf",
              "extraLocations": [],
              "authorNames": "Rob van der Valk (Vrije Universiteit Amsterdam), Patrizio Pelliccione (Chalmers University of Technology), Patricia Lago (Vrije Universiteit Amsterdam), Rogardt Heldal (Chalmers University of Technology), Eric Knauss (Chalmers University of Technology), Jacob Juul (Volvo Cars)",
              "abstract": "Most of the innovation in automotive is nowadays coming from electronics and software. The pressure of reducing time to market and increasing flexibility while keeping quality are leading motivations for these companies to embrace system-wide Continuous Integration and Delivery (CI&amp;D), which in the scope of complex automotive value-chains, implies inter-organizational CI&amp;D. In this paper, we investigate the challenges and impediments posed by inter-organizational CI&amp;D in the automotive domain, i.e. continuous software development that involves agile interaction between an OEM (the car manufacturer) and its software suppliers. In particular, we focus on legal contracts that regulate the agreements between these companies and transparency intended as the degree/level of information that is shared between the various companies in the value-chain. The main findings of this study show that (i) inter-organizational transparency is considered positive but not a necessary condition for inter-organizational CI&amp;D, (ii) transparency has positive effects on information sharing among different companies, and (iii) legal contracts are an impediment for inter-organizational CI&amp;D. The results of the study provide useful insights for practitioners that work in similar settings. In addition, the identified challenges and impediments define a research agenda for researchers.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem 1518420253520 Rob van der Valk Vrije Universiteit Amsterdam robvdvalk@gmail.com Patrizio Pelliccione Chalmers University of Technology patrizio.pelliccione@gu.se Patricia Lago Vrije Universiteit Amsterdam p.lago@vu.nl Rogardt Heldal Chalmers University of Technology heldal@chalmers.se Eric Knauss Chalmers University of Technology eric.knauss@cse.gu.se Jacob Juul Volvo Cars jacob.juul@volvocars.com Continuous integration and delivery transparency legal contracts information sharing automotive interview survey Most of the innovation in automotive is nowadays coming from electronics and software. The pressure of reducing time to market and increasing flexibility while keeping quality are leading motivations for these companies to embrace system-wide Continuous Integration and Delivery (CI&amp;D), which in the scope of complex automotive value-chains, implies inter-organizational CI&amp;D. In this paper, we investigate the challenges and impediments posed by inter-organizational CI&amp;D in the automotive domain, i.e. continuous software development that involves agile interaction between an OEM (the car manufacturer) and its software suppliers. In particular, we focus on legal contracts that regulate the agreements between these companies and transparency intended as the degree/level of information that is shared between the various companies in the value-chain. The main findings of this study show that (i) inter-organizational transparency is considered positive but not a necessary condition for inter-organizational CI&amp;D, (ii) transparency has positive effects on information sharing among different companies, and (iii) legal contracts are an impediment for inter-organizational CI&amp;D. The results of the study provide useful insights for practitioners that work in similar settings. In addition, the identified challenges and impediments define a research agenda for researchers.",
              "pageNumber": 23,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Data and Databases",
          "lineItems": [
            {
              "id": "2BSTNz2D07SWGggWKuTgev",
              "type": "authorPaper",
              "text": "A Data Decomposition Method for Stepwise Migration of Complex Legacy Data",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3O1Ktk2tXxpTHy1ufdypxO/4EhNANlLNIYSkF2FDJHDAs.pdf",
              "extraLocations": [],
              "authorNames": "Andreas Martens (adesso AG), Matthias Book (University of Iceland), Volker Gruhn (University of Duisburg-Essen)",
              "abstract": "Sooner or later, in almost every company, the maintenance and further development of large enterprise IT applications reaches its limit. From the point of view of cost as well as technical capability, legacy applications must eventually be replaced by new enterprise IT applications. Data migration is an inevitable part of making this switch. While different data migration strategies can be applied, incremental data migration is one of the most popular strategies, due to its low level of risk: The entire data volume is split into several data tranches, which are then migrated in individual migration steps. The key to a successful migration is the strategy for decomposing the data into suitable tranches. This paper presents an approach for data decomposition where the entire data volume of a monolithic enterprise IT application is split into independent data migration tranches. Each tranche comprises the data to be migrated in one migration step, which is usually executed during the application's downtime window. Unlike other approaches, which describe data migration in a highly abstract way, we propose specific heuristics for data decomposition into independent data packages (tranches). The data migration approach described here is being applied in one of the largest migration projects currently underway in the European healthcare sector, comprising millions of customer records.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 A Data Decomposition Method for Stepwise Migration of Complex Legacy Data 1518186227191 Andreas Martens adesso AG andreas.martens@adesso.de Matthias Book University of Iceland book@hi.is Volker Gruhn University of Duisburg-Essen volker.gruhn@paluno.uni-due.de incremental data migration data decomposition data migration tranches units of migration Sooner or later, in almost every company, the maintenance and further development of large enterprise IT applications reaches its limit. From the point of view of cost as well as technical capability, legacy applications must eventually be replaced by new enterprise IT applications. Data migration is an inevitable part of making this switch. While different data migration strategies can be applied, incremental data migration is one of the most popular strategies, due to its low level of risk: The entire data volume is split into several data tranches, which are then migrated in individual migration steps. The key to a successful migration is the strategy for decomposing the data into suitable tranches. This paper presents an approach for data decomposition where the entire data volume of a monolithic enterprise IT application is split into independent data migration tranches. Each tranche comprises the data to be migrated in one migration step, which is usually executed during the application's downtime window. Unlike other approaches, which describe data migration in a highly abstract way, we propose specific heuristics for data decomposition into independent data packages (tranches). The data migration approach described here is being applied in one of the largest migration projects currently underway in the European healthcare sector, comprising millions of customer records.",
              "pageNumber": 33,
              "isPageNumberRoman": false
            },
            {
              "id": "2ukhm5uPiLgbJd4gRTkpUq",
              "type": "authorPaper",
              "text": "Mind the Gap: Can and Should Software Engineering Data Sharing Become a Path of Less Resistance?",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/20Kc1uOIkbe0dfcoVIjuY7/3zjdBx6uh7Dz8E5XCvaOTo.pdf",
              "extraLocations": [],
              "authorNames": "Ken Wallace (BAE Systems)",
              "abstract": "The facility to process data is, arguably, the defining capability underpinning the transformative power of software: the relationships of each to the other are deep and extensive. This is reflected in the degree to which both software engineering practitioners and researchers rely upon data to direct their endeavours. Ironically however, while both the industrial and research communities are dependent upon data these dependencies present a dichotomy. Practitioners can suffer an abundance of data, much of it dark, which they struggle to interpret and apply beneficially. Isolated by gaps between industry and academia researchers often find themselves lacking data, watching as their industrial counterparts pursue a different and distinct course of action. Integrating evidence with experience gained in practice and through engagement with research this talk offers an industrial perspective on whether this situation can be improved upon; and what the benefits of achieving this outcome, particularly for practitioners, might be.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Mind the Gap: Can and Should Software Engineering Data Sharing Become a Path of Less Resistance? 1517823344313 Ken Wallace BAE Systems krw@ieee.org Software Engineering Data Evidence Informed Industrial Practice Assessment Defects Digital Commons Evaluation The facility to process data is, arguably, the defining capability underpinning the transformative power of software: the relationships of each to the other are deep and extensive. This is reflected in the degree to which both software engineering practitioners and researchers rely upon data to direct their endeavours. Ironically however, while both the industrial and research communities are dependent upon data these dependencies present a dichotomy. Practitioners can suffer an abundance of data, much of it dark, which they struggle to interpret and apply beneficially. Isolated by gaps between industry and academia researchers often find themselves lacking data, watching as their industrial counterparts pursue a different and distinct course of action. Integrating evidence with experience gained in practice and through engagement with research this talk offers an industrial perspective on whether this situation can be improved upon; and what the benefits of achieving this outcome, particularly for practitioners, might be.",
              "pageNumber": 43,
              "isPageNumberRoman": false
            },
            {
              "id": "20E3aJvKKxYSkKDzNnUQH2",
              "type": "authorPaper",
              "text": "Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7coDDNB5gFaIi3yM57kNPD/11bmVU627jwxwAbd5Hc27n.pdf",
              "extraLocations": [],
              "authorNames": "Marija Selakovic (TU Darmstadt), Michael Barnett (Microsoft Research), Madan Musuvathi (Microsoft Research), Todd Mytkowicz (Microsoft Research)",
              "abstract": "Building scalable big data programs currently requires programmers to combine relational (SQL) with non-relational code (Java, C#, Scala). Relational code is declarative - a program describes what the computation is and the compiler decides how to distribute the program. SQL query optimization has enjoyed a rich and fruitful history, however, most research and commercial optimization engines treat non-relational code as a black-box and thus are unable to optimize it. This paper empirically studies over 3 million SCOPE programs across five data centers within Microsoft and finds programs with non-relational code take between 45-70% of data center CPU time. We further explore the potential for SCOPE optimization by generating more native code from the non-relational part. Finally, we present 6 case studies showing that triggering more generation of native code in these jobs yields significant performance improvement: optimizing just one portion resulted in as much as 25% improvement for an entire program.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE 1518184090950 Marija Selakovic TU Darmstadt m.selakovic89@gmail.com Michael Barnett Microsoft Research mbarnett@microsoft.com Madan Musuvathi Microsoft Research madanm@microsoft.com Todd Mytkowicz Microsoft Research toddm@microsoft.com Big data Performance Profiling Cross language optimizations Building scalable big data programs currently requires programmers to combine relational (SQL) with non-relational code (Java, C#, Scala). Relational code is declarative - a program describes what the computation is and the compiler decides how to distribute the program. SQL query optimization has enjoyed a rich and fruitful history, however, most research and commercial optimization engines treat non-relational code as a black-box and thus are unable to optimize it. This paper empirically studies over 3 million SCOPE programs across five data centers within Microsoft and finds programs with non-relational code take between 45-70% of data center CPU time. We further explore the potential for SCOPE optimization by generating more native code from the non-relational part. Finally, we present 6 case studies showing that triggering more generation of native code in these jobs yields significant performance improvement: optimizing just one portion resulted in as much as 25% improvement for an entire program.",
              "pageNumber": 45,
              "isPageNumberRoman": false
            },
            {
              "id": "2xY1lwQz2htO4QkA60DuUG",
              "type": "authorPaper",
              "text": "Smelly Relations: Measuring and Understanding Database Schema Quality",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf",
              "extraLocations": [],
              "authorNames": "Tushar Sharma (Athens University of Economics and Business), Marios Fragkoulis (Athens University of Economics and Business), Stamatia Rizou (Singular Logic), Magiel Bruntink (Software Improvement Group), Diomidis Spinellis (Athens University of Economics and Business)",
              "abstract": "Context: Databases are an integral element of enterprise applications. Similarly to code, database schemas are also prone to smells - best practice violations. Objective: We aim to explore database schema quality, associated characteristics and their relationships with other software artifacts. Method: We present a catalog of 13 database schema smells and elicit developers' perspective through a survey. We extract embedded SQL statements and identify database schema smells by employing the DbDeo tool which we developed. We analyze 2925 production-quality systems (357 industrial and 2568 well-engineered open-source projects) and empirically study quality characteristics of their database schemas. In total, we analyze 629 million lines of code containing more than 393 thousand SQL statements. Results: We find that the index abuse smell occurs most frequently in database code, that the use of an ORM framework doesn't immune the application from database smells, and that some database smells, such as adjacency list, are more prone to occur in industrial projects compared to open-source projects. Our co-occurrence analysis shows that whenever the clone table smell in industrial projects and the values in attribute definition smell in open-source projects get spotted, it is very likely to find other database smells in the project. Conclusion: The awareness and knowledge of database smells are crucial for developing high-quality software systems and can be enhanced by the adoption of better tools helping developers to identify database smells early.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Smelly Relations: Measuring and Understanding Database Schema Quality 1517254403669 Tushar Sharma Athens University of Economics and Business tushar@aueb.gr Marios Fragkoulis Athens University of Economics and Business mfg@aueb.gr Stamatia Rizou Singular Logic srizou@singularlogic.eu Magiel Bruntink Software Improvement Group m.bruntink@sig.eu Diomidis Spinellis Athens University of Economics and Business dds@aueb.gr Database schema smells Code smells Antipatterns Software quality Software maintenance Technical debt Context: Databases are an integral element of enterprise applications. Similarly to code, database schemas are also prone to smells - best practice violations. Objective: We aim to explore database schema quality, associated characteristics and their relationships with other software artifacts. Method: We present a catalog of 13 database schema smells and elicit developers' perspective through a survey. We extract embedded SQL statements and identify database schema smells by employing the DbDeo tool which we developed. We analyze 2925 production-quality systems (357 industrial and 2568 well-engineered open-source projects) and empirically study quality characteristics of their database schemas. In total, we analyze 629 million lines of code containing more than 393 thousand SQL statements. Results: We find that the index abuse smell occurs most frequently in database code, that the use of an ORM framework doesn't immune the application from database smells, and that some database smells, such as adjacency list, are more prone to occur in industrial projects compared to open-source projects. Our co-occurrence analysis shows that whenever the clone table smell in industrial projects and the values in attribute definition smell in open-source projects get spotted, it is very likely to find other database smells in the project. Conclusion: The awareness and knowledge of database smells are crucial for developing high-quality software systems and can be enhanced by the adoption of better tools helping developers to identify database smells early.",
              "pageNumber": 55,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Architecture",
          "lineItems": [
            {
              "id": "4HqwB5OeegSpEawllkkXEv",
              "type": "authorPaper",
              "text": "Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/xLEjBh7hPb5V1LsqUWnRl/4mUPQnhdOLBljWKOk5ULOT.pdf",
              "extraLocations": [],
              "authorNames": "Anders Magnusson (Volov Group Trucks Technology), Leo Laine (Volvo Group Truck Technology), Johan Lindberg (Volvo Group Trucks Technology)",
              "abstract": "Nowadays software and electronics play a fundamental role for commercial vehicles in order for a driver to manually operate them effectively and safely in different transport applications. Although the overall design thinking in the commercial vehicle industry is still very much oriented towards a geometric perspective and thus physical modules, which for software means binaries related to physical electronic boxes. Furthermore, there are many incentives for a higher degree of automation for commercial vehicles to gain productivity, while at the same time facing very different demands on final transport applications. In addition, the environmental impact drives the need to reduce the fossil fuel usage by introducing electrified propulsion torque, which could be distributed over several vehicle units. In order to manage this variety of final applications a product line oriented approach is used that will also be challenged by the need to support a feature range from manual to fully automated vehicles and alternative powertrains, possibly distributed torque supply and electrification of many things. In order to deal with different transport applications; wide feature range; and a transition from traditionally closed embedded systems towards interconnected machines and systems there is a need to shift the traditional ECU-oriented mindset. In this paper a supplementary perspective is added to the traditional geometry-oriented perspective – a functionality perspective, which facilitates reasoning about functionality and thus application software. The paper proposes a reference architecture that is based on horizontal and vertical layering of functionality.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility 1518179138742 Anders Magnusson Volov Group Trucks Technology anders.magnusson.3@volvo.com Leo Laine Volvo Group Truck Technology leo.laine@volvo.com Johan Lindberg Volvo Group Trucks Technology johan.jl.lindberg@volvo.com automotive reference architecture application software automation electro mobility platforms product lines horizontal layering vertical layering Nowadays software and electronics play a fundamental role for commercial vehicles in order for a driver to manually operate them effectively and safely in different transport applications. Although the overall design thinking in the commercial vehicle industry is still very much oriented towards a geometric perspective and thus physical modules, which for software means binaries related to physical electronic boxes. Furthermore, there are many incentives for a higher degree of automation for commercial vehicles to gain productivity, while at the same time facing very different demands on final transport applications. In addition, the environmental impact drives the need to reduce the fossil fuel usage by introducing electrified propulsion torque, which could be distributed over several vehicle units. In order to manage this variety of final applications a product line oriented approach is used that will also be challenged by the need to support a feature range from manual to fully automated vehicles and alternative powertrains, possibly distributed torque supply and electrification of many things. In order to deal with different transport applications; wide feature range; and a transition from traditionally closed embedded systems towards interconnected machines and systems there is a need to shift the traditional ECU-oriented mindset. In this paper a supplementary perspective is added to the traditional geometry-oriented perspective – a functionality perspective, which facilitates reasoning about functionality and thus application software. The paper proposes a reference architecture that is based on horizontal and vertical layering of functionality.",
              "pageNumber": 65,
              "isPageNumberRoman": false
            },
            {
              "id": "6lPbYFWhe6yPiPqdmxC5Jw",
              "type": "authorPaper",
              "text": "Exploration of Technical Debt in Start-ups",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf",
              "extraLocations": [],
              "authorNames": "Eriks Klotins (Blekinge Institute of Technology), Michael Unterkalmsteiner (Blekinge Institute of Technology), Panagiota Chatzipetrou (Blekinge Institue of Technology), Tony Gorschek (Blekinge Institute of Technology), Rafael Prikladnicki (Pontifcal Catholic University of Rio Grande do Sul), Nirnaya Tripathi (University of Oulu), Leandro Pompermaier (Pontifcal Catholic University of Rio Grande do Sul)",
              "abstract": "Context: Software start-ups are young companies aiming to build and market software-intensive products fast with little resources. Aiming to accelerate time-to-market, start-ups often opt for ad-hoc engineering practices, make shortcuts in product engineering, and accumulate technical debt. Objective: In this paper we explore to what extent precedents, dimensions and outcomes associated with technical debt are prevalent in start-ups. Method: We apply a case survey method to identify aspects of technical debt and contextual information characterizing the engineering context in start-ups. Results: By analyzing responses from 86 start-up cases we found that start-ups accumulate most technical debt in the testing dimension, despite attempts to automate testing. Furthermore, we found that start-up team size and experience is a leading precedent for accumulating technical debt: larger teams face more challenges in keeping the debt under control. Conclusions: This study highlights the necessity to monitor levels of technical debt and to preemptively introduce practices to keep the debt under control. Adding more people to an already di cult to maintain product could amplify other precedents, such as resource shortages, communication issues and negatively a ect decisions pertaining to the use of good engineering practices.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Exploration of Technical Debt in Start-ups 1517911349350 Eriks Klotins Blekinge Institute of Technology eriks.klotins@bth.se Michael Unterkalmsteiner Blekinge Institute of Technology michael.unterkalmsteiner@bth.se Panagiota Chatzipetrou Blekinge Institue of Technology panagiota.chatzipetrou@bth.se Tony Gorschek Blekinge Institute of Technology tony.gorschek@bth.se Rafael Prikladnicki Pontifcal Catholic University of Rio Grande do Sul rafael.prikladnicki@pucrs.br Nirnaya Tripathi University of Oulu nirnaya.Tripathi@oulu.fi Leandro Pompermaier Pontifcal Catholic University of Rio Grande do Sul leandro.pompermaier@pucrs.br Software start-ups technical debt Context: Software start-ups are young companies aiming to build and market software-intensive products fast with little resources. Aiming to accelerate time-to-market, start-ups often opt for ad-hoc engineering practices, make shortcuts in product engineering, and accumulate technical debt. Objective: In this paper we explore to what extent precedents, dimensions and outcomes associated with technical debt are prevalent in start-ups. Method: We apply a case survey method to identify aspects of technical debt and contextual information characterizing the engineering context in start-ups. Results: By analyzing responses from 86 start-up cases we found that start-ups accumulate most technical debt in the testing dimension, despite attempts to automate testing. Furthermore, we found that start-up team size and experience is a leading precedent for accumulating technical debt: larger teams face more challenges in keeping the debt under control. Conclusions: This study highlights the necessity to monitor levels of technical debt and to preemptively introduce practices to keep the debt under control. Adding more people to an already di cult to maintain product could amplify other precedents, such as resource shortages, communication issues and negatively a ect decisions pertaining to the use of good engineering practices.",
              "pageNumber": 75,
              "isPageNumberRoman": false
            },
            {
              "id": "2kz8aMrJ7XEbSmAcM2VSdD",
              "type": "authorPaper",
              "text": "Variant Management Solution for Large Scale Software Product Lines",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4J94vc6uZu9C5yPCTynFex/1z41fCXlOqEfSXyXWq6peW.pdf",
              "extraLocations": [],
              "authorNames": "Richard Pohl (Robert Bosch GmbH), Mischa Höchsmann (itemis AG), Philipp Wohlgemuth (Robert Bosch GmbH), Christian Tischer (Robert Bosch GmbH)",
              "abstract": "Application lifecycle management for large scale software product lines (SPL) comes with the challenge to integrate distributed development activities across different parts of an organization and the engineering process in a tool landscape. Variant management is a cross-cutting concern that has interaction points with many of those integrated solutions. At Bosch, two different tools are used for variant management: pure::variants, a feature modeling tool for describing the feature-oriented product decomposition, and the custom tool MIC that offers a more comprehensive set of fine-grained variability management mechanisms. These include parameters, automated configurations or constraints. In turn, it is more suitable for component selection that is done close to the technology. In this experience report, we present a methodological approach on how to use the two tools with a technical integration solution we developed. Its purpose is to serve as an example for establishing successful variant management in large-scale product lines with respect to methodology and tools.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Variant Management Solution for Large Scale Software Product Lines 1518258843897 Richard Pohl Robert Bosch GmbH richard.pohl@de.bosch.com Mischa Höchsmann itemis AG mhoechsmann@itemis.de Philipp Wohlgemuth Robert Bosch GmbH philipp.wohlgemuth@de.bosch.com Christian Tischer Robert Bosch GmbH christian.tischer@de.bosch.com Software Product Lines Variant Management Application Lifecycle Management Experience Report Application lifecycle management for large scale software product lines (SPL) comes with the challenge to integrate distributed development activities across different parts of an organization and the engineering process in a tool landscape. Variant management is a cross-cutting concern that has interaction points with many of those integrated solutions. At Bosch, two different tools are used for variant management: pure::variants, a feature modeling tool for describing the feature-oriented product decomposition, and the custom tool MIC that offers a more comprehensive set of fine-grained variability management mechanisms. These include parameters, automated configurations or constraints. In turn, it is more suitable for component selection that is done close to the technology. In this experience report, we present a methodological approach on how to use the two tools with a technical integration solution we developed. Its purpose is to serve as an example for establishing successful variant management in large-scale product lines with respect to methodology and tools.",
              "pageNumber": 85,
              "isPageNumberRoman": false
            },
            {
              "id": "4ROMcu0keYYGKW70WepExb",
              "type": "authorPaper",
              "text": "How to Design a Program Repair Bot? Insights from the Repairnator Project",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1ExIKnJipGMFZO7lPRAngF/2DiGXRSudrFpQa60hIp2VD.pdf",
              "extraLocations": [],
              "authorNames": "Simon Urli (University of Lille & Inria Lille), Zhongxing Yu (University of Lille & Inria Lille), Lionel Seinturier (University of Lille & Inria Lille), Martin Monperrus (KTH Royal Institute of Technology)",
              "abstract": "Program repair research has made tremendous progress over the last few years, and software development bots are now being invented to help developers gain productivity. In this paper, we investigate the concept of a \"program repair bot\" and present Repairnator. The Repairnator bot is an autonomous agent that constantly monitors test failures, reproduces bugs, and runs program repair tools against each reproduced bug. If a patch is found, Repairnator bot reports it to the developers. At the time of writing, Repairnator uses three different program repair systems and has been operating since February 2017. In total, it has studied 11 523 test failures over 1 609 open-source software projects hosted on GitHub, and has generated patches for 15 different bugs. Over months, we hit a number of hard technical challenges and had to make various design and engineering decisions. This gives us a unique experience in this area. In this paper, we reflect upon Repairnator in order to share this knowledge with the automatic program repair community.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 How to Design a Program Repair Bot? Insights from the Repairnator Project 1518097317995 Simon Urli University of Lille & Inria Lille simon.urli@inria.fr Zhongxing Yu University of Lille & Inria Lille zhongxing.yu@inria.fr Lionel Seinturier University of Lille & Inria Lille lionel.seinturier@inria.fr Martin Monperrus KTH Royal Institute of Technology martin.monperrus@csc.kth.se program repair repair bot Program repair research has made tremendous progress over the last few years, and software development bots are now being invented to help developers gain productivity. In this paper, we investigate the concept of a \"program repair bot\" and present Repairnator. The Repairnator bot is an autonomous agent that constantly monitors test failures, reproduces bugs, and runs program repair tools against each reproduced bug. If a patch is found, Repairnator bot reports it to the developers. At the time of writing, Repairnator uses three different program repair systems and has been operating since February 2017. In total, it has studied 11 523 test failures over 1 609 open-source software projects hosted on GitHub, and has generated patches for 15 different bugs. Over months, we hit a number of hard technical challenges and had to make various design and engineering decisions. This gives us a unique experience in this area. In this paper, we reflect upon Repairnator in order to share this knowledge with the automatic program repair community.",
              "pageNumber": 95,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Design and Tools",
          "lineItems": [
            {
              "id": "3jFGhyWuDTegG5P20pOBe",
              "type": "authorPaper",
              "text": "Echoes from Space: Grouping Commands with Large-Scale Telemetry Data",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/36OHYwbesYzyrqceW0zbds/6lTJGOwEkmMFQO8CFju22q.pdf",
              "extraLocations": [],
              "authorNames": "Alexander Lattas (Imperial College London), Diomidis Spinellis (Athens University of Economics and Business)",
              "abstract": "Background: As evolving desktop applications continuously accrue new features and grow more complex with denser user interfaces and deeply-nested commands, it becomes inefficient to use simple heuristic processes for grouping gui commands in multilevel menus. Existing search-based software engineering studies on user performance prediction and command grouping optimization lack evidence-based answers on choosing a systematic grouping method. Research Questions: We investigate the scope of command grouping optimization methods to reduce a user's average task completion time and improve their relative performance, as well as the benefit of using detailed interaction logs compared to sampling. Method: We introduce seven grouping methods and compare their performance based on extensive telemetry data, collected from program runs of a cad application. Results: We find that methods using global frequencies, user specific frequencies, deterministic and stochastic optimization, and clustering perform the best. Conclusions: We reduce the average user task completion time by more than 17%, by running a Knapsack Problem algorithm on clustered users, training only on a small sample of the available data. We show that with most methods using just a 1% sample of the data is enough to obtain nearly the same results as those obtained from all the data. Additionally, we map the methods to specific problems and applications where they would perform better. Overall, we provide a guide on how practitioners can use search-based software engineering techniques when grouping commands in menus and interfaces, to maximize users' task execution efficiency.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Echoes from Space: Grouping Commands with Large-Scale Telemetry Data 1518463702330 Alexander Lattas Imperial College London alexandros.lattas17@imperial.ac.uk Diomidis Spinellis Athens University of Economics and Business dds@aueb.gr command grouping menu layout GUI optimization telemetry sampling Background: As evolving desktop applications continuously accrue new features and grow more complex with denser user interfaces and deeply-nested commands, it becomes inefficient to use simple heuristic processes for grouping gui commands in multilevel menus. Existing search-based software engineering studies on user performance prediction and command grouping optimization lack evidence-based answers on choosing a systematic grouping method. Research Questions: We investigate the scope of command grouping optimization methods to reduce a user's average task completion time and improve their relative performance, as well as the benefit of using detailed interaction logs compared to sampling. Method: We introduce seven grouping methods and compare their performance based on extensive telemetry data, collected from program runs of a cad application. Results: We find that methods using global frequencies, user specific frequencies, deterministic and stochastic optimization, and clustering perform the best. Conclusions: We reduce the average user task completion time by more than 17%, by running a Knapsack Problem algorithm on clustered users, training only on a small sample of the available data. We show that with most methods using just a 1% sample of the data is enough to obtain nearly the same results as those obtained from all the data. Additionally, we map the methods to specific problems and applications where they would perform better. Overall, we provide a guide on how practitioners can use search-based software engineering techniques when grouping commands in menus and interfaces, to maximize users' task execution efficiency.",
              "pageNumber": 105,
              "isPageNumberRoman": false
            },
            {
              "id": "1HPLdtg6pcEaivWH7ykdE8",
              "type": "authorPaper",
              "text": "Tool-Based Interactive Software Parallelization: A Case Study",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6WOIQt9qfOJgDlYDiHswtu/4d3FRvoz63ZHw3qyaofuzP.pdf",
              "extraLocations": [],
              "authorNames": "Andreas Wilhelm (Technical University of Munich), Faris Cakaric (Technical University of Munich), Tobias Schuele (Siemens AG), Michael Gerndt (Technical University of Munich)",
              "abstract": "Continuous advances in multicore processor technology have placed immense pressure on the software industry. Developers are forced to parallelize their applications to make them scalable. However, applications are often very large and inherently complex; here, automatic parallelization methods are inappropriate. A dependable software redesign requires profound comprehension of the underlying software architecture and its dynamic behavior. To address this problem, we propose Parceive, a tool that supports identification of parallelization scenarios at various levels of abstraction. Parceive collects behavior information at runtime and combines it with reconstructed software architecture information to generate useful visualizations for parallelization. In this paper, we motivate our approach and explain the main components of Parceive. A case study demonstrates the usefulness of the tool.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Tool-Based Interactive Software Parallelization: A Case Study 1518606360097 Andreas Wilhelm Technical University of Munich andreas.wilhelm@in.tum.de Faris Cakaric Technical University of Munich cakaric@in.tum.de Tobias Schuele Siemens AG tobias.schuele@siemens.com Michael Gerndt Technical University of Munich gerndt@in.tum.de Parallelization Software Visualization Program Comprehension Software Architecture Continuous advances in multicore processor technology have placed immense pressure on the software industry. Developers are forced to parallelize their applications to make them scalable. However, applications are often very large and inherently complex; here, automatic parallelization methods are inappropriate. A dependable software redesign requires profound comprehension of the underlying software architecture and its dynamic behavior. To address this problem, we propose Parceive, a tool that supports identification of parallelization scenarios at various levels of abstraction. Parceive collects behavior information at runtime and combines it with reconstructed software architecture information to generate useful visualizations for parallelization. In this paper, we motivate our approach and explain the main components of Parceive. A case study demonstrates the usefulness of the tool.",
              "pageNumber": 115,
              "isPageNumberRoman": false
            },
            {
              "id": "5PfJqprqMIIihZBYRnv7xt",
              "type": "authorPaper",
              "text": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf",
              "extraLocations": [],
              "authorNames": "Oleksii Kononenko (University of Waterloo), Tresa Rose (Carleton University), Olga Baysal (Carleton University), Michael Godfrey (University of Waterloo), Dennis Theisen (Shopify Inc.), Bart de Water (Shopify Inc.)",
              "abstract": "Pull-based development has become a popular choice for developing distributed projects, such as those hosted on GitHub. In this model, contributions are pulled from forked repositories, modified, and then later merged back into the main repository. In this work, we report on two empirical studies that investigate pull request (PR) merges of Active Merchant, a commercial project developed by Shopify Inc. In the first study, we apply data mining techniques on the project's GitHub repository to explore the nature of merges, and we conduct a manual inspection of pull requests; we also investigate what factors contribute to PR merge time and outcome. In the second study, we perform a qualitative analysis of the results of a survey of developers who contributed to Active Merchant. The study addresses the topic of PR review quality and developers' perception of it. The results provide insights into how these developers perform pull request merges, and what factors they find contribute to how they review and merge pull requests.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Studying Pull Request Merges: A Case Study of Shopify's Active Merchant 1518484523114 Oleksii Kononenko University of Waterloo okononen@uwaterloo.ca Tresa Rose Carleton University tresa.rose@carleton.ca Olga Baysal Carleton University olga.baysal@carleton.ca Michael Godfrey University of Waterloo migod@uwaterloo.ca Dennis Theisen Shopify Inc. dennis@shopify.com Bart de Water Shopify Inc. bart.dewater@shopify.com Pull request merges review quality survey industrial case study Pull-based development has become a popular choice for developing distributed projects, such as those hosted on GitHub. In this model, contributions are pulled from forked repositories, modified, and then later merged back into the main repository. In this work, we report on two empirical studies that investigate pull request (PR) merges of Active Merchant, a commercial project developed by Shopify Inc. In the first study, we apply data mining techniques on the project's GitHub repository to explore the nature of merges, and we conduct a manual inspection of pull requests; we also investigate what factors contribute to PR merge time and outcome. In the second study, we perform a qualitative analysis of the results of a survey of developers who contributed to Active Merchant. The study addresses the topic of PR review quality and developers' perception of it. The results provide insights into how these developers perform pull request merges, and what factors they find contribute to how they review and merge pull requests.",
              "pageNumber": 124,
              "isPageNumberRoman": false
            },
            {
              "id": "6mLg1DJPSUsganXHYuYr0q",
              "type": "authorPaper",
              "text": "A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1THX06dkdc4p9NK74CQDK6/4cihGy6VmWGDisS2sZqFnJ.pdf",
              "extraLocations": [],
              "authorNames": "Peilin Zheng (Sun Yat-sen University), Zibin Zheng (Sun Yat-sen University), Xiapu Luo (The Hong Kong Polytechnic University), Xiangping Chen (Sun Yat-sen University), Xuanzhe Liu (Peking University)",
              "abstract": "Blockchain systems, with the characteristics of decentralization, irreversibility and traceability, have attracted a lot of attentions recently. However, the current performance of blockchain is poor, which becomes a major constraint of its applications. Additionally, different blockchain systems lack standard performance monitoring approach which can automatically adapt to different systems and provide detailed and real-time performance information. To solve this problem, we propose overall performance metrics and detailed performance metrics for the users to know the exact performance in different stages of the blockchain. Then we propose a performance monitoring framework with a log-based method. It has advantages of lower overhead, more details, and better scalability than the previous performance monitoring approaches. Finally we implement the framework to monitor four well-known blockchain systems, using a set of 1,000 open-source smart contracts. The experimental results show that our framework can make detailed and real-time performance monitoring of blockchain systems. We also provide some suggestions for the future development of blockchain systems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems 1518508236585 Peilin Zheng Sun Yat-sen University zhengpl3@mail2.sysu.edu.cn Zibin Zheng Sun Yat-sen University zhzibin@mail.sysu.edu.cn Xiapu Luo The Hong Kong Polytechnic University csxluo@comp.polyu.edu.hk Xiangping Chen Sun Yat-sen University chenxp8@mail.sysu.edu.cn Xuanzhe Liu Peking University liuxuanzhe@pku.edu.cn Blockchain Smart Contract Performance Monitoring Blockchain systems, with the characteristics of decentralization, irreversibility and traceability, have attracted a lot of attentions recently. However, the current performance of blockchain is poor, which becomes a major constraint of its applications. Additionally, different blockchain systems lack standard performance monitoring approach which can automatically adapt to different systems and provide detailed and real-time performance information. To solve this problem, we propose overall performance metrics and detailed performance metrics for the users to know the exact performance in different stages of the blockchain. Then we propose a performance monitoring framework with a log-based method. It has advantages of lower overhead, more details, and better scalability than the previous performance monitoring approaches. Finally we implement the framework to monitor four well-known blockchain systems, using a set of 1,000 open-source smart contracts. The experimental results show that our framework can make detailed and real-time performance monitoring of blockchain systems. We also provide some suggestions for the future development of blockchain systems.",
              "pageNumber": 134,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Testing and Defects I",
          "lineItems": [
            {
              "id": "3X9DYtyi7pZN4cZSqm6t1V",
              "type": "authorPaper",
              "text": "Proactive and Pervasive Combinatorial Testing",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf",
              "extraLocations": [],
              "authorNames": "Dale Blue (IBM), Orna Raz (IBM Research), Rachel Tzoref-Brill (IBM Research), Paul Wojciak (IBM), Marcel Zalmanovici (IBM Research)",
              "abstract": "Combinatorial testing (CT) is a well-known technique for improving the quality of test plans while reducing testing costs. Traditionally, CT is used by testers at testing phase to design a test plan based on a manual definition of the test space. In this work, we extend the traditional use of CT to other parts of the development life cycle. We use CT at early design phase to improve design quality. We also use CT after test cases have been created and executed, in order to find gaps between design and test. For the latter use case we deploy a novel technique for a semi-automated definition of the test space, which significantly reduces the effort associated with manual test space definition. We report on our practical experience in applying CT for these use cases to three large and heavily deployed industrial products. We demonstrate the value gained from extending the use of CT by (1) discovering latent design flaws with high potential impact, and (2) correlating CT-uncovered gaps between design and test with field reported problems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Proactive and Pervasive Combinatorial Testing 1518688358786 Dale Blue IBM dblue@us.ibm.com Orna Raz IBM Research ornar@il.ibm.com Rachel Tzoref-Brill IBM Research rachelt@il.ibm.com Paul Wojciak IBM wojciak@us.ibm.com Marcel Zalmanovici IBM Research marcel@il.ibm.com Combinatorial Testing Design Review Desk Checking Combinatorial testing (CT) is a well-known technique for improving the quality of test plans while reducing testing costs. Traditionally, CT is used by testers at testing phase to design a test plan based on a manual definition of the test space. In this work, we extend the traditional use of CT to other parts of the development life cycle. We use CT at early design phase to improve design quality. We also use CT after test cases have been created and executed, in order to find gaps between design and test. For the latter use case we deploy a novel technique for a semi-automated definition of the test space, which significantly reduces the effort associated with manual test space definition. We report on our practical experience in applying CT for these use cases to three large and heavily deployed industrial products. We demonstrate the value gained from extending the use of CT by (1) discovering latent design flaws with high potential impact, and (2) correlating CT-uncovered gaps between design and test with field reported problems.",
              "pageNumber": 144,
              "isPageNumberRoman": false
            },
            {
              "id": "5Yt8L5GxpZV1tPHKqExEe6",
              "type": "authorPaper",
              "text": "Practical Selective Regression Testing with Effective Redundancy in Interleaved Tests",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5pilYClpXUQa77Kg5Y9986/5aQxPj9Migxn3tGsUQVA7h.pdf",
              "extraLocations": [],
              "authorNames": "Dusica Marijan (Simula), Marius Liaaen (Cisco Systems)",
              "abstract": "As software systems evolve and change over time, test suites used for checking the correctness of software typically grow larger. Together with size, test suites tend to grow in redundancy. This is especially problematic for complex highly-configurable software domains, as growing the size of test suites significantly impacts the cost of regression testing. In this paper we present a practical approach for reducing ineffective redundancy of regression suites in continuous integration testing (strict constraints on time-efficiency) for highly-configurable software. The main idea of our approach consists in combining coverage based redundancy metrics (test overlap) with historical fault-detection effectiveness of integration tests, to identify ineffective redundancy that is eliminated from a regression test suite. We first apply and evaluate the approach in testing of industrial video conferencing software. We further evaluate the approach using a large set of artificial subjects, in terms of fault-detection effectiveness and timeliness of regression test feedback. We compare the results with an advanced retest-all approach and random test selection. The results show that regression test selection based on coverage and history analysis can: 1) reduce regression test feedback compared to industry practice (up to 39%), 2) reduce test feedback compared to the advanced retest-all approach (up to 45%) without significantly compromising fault-detection effectiveness (less than 0.5% on average), and 3) improve fault detection effectiveness compared to random selection (72% on average).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Practical Selective Regression Testing with Effective Redundancy in Interleaved Tests 1518272370020 Dusica Marijan Simula dusica@simula.no Marius Liaaen Cisco Systems test@test.com Test redundancy selective regression testing highly configurable software highly-interleaving tests test optimization continuous regression testing As software systems evolve and change over time, test suites used for checking the correctness of software typically grow larger. Together with size, test suites tend to grow in redundancy. This is especially problematic for complex highly-configurable software domains, as growing the size of test suites significantly impacts the cost of regression testing. In this paper we present a practical approach for reducing ineffective redundancy of regression suites in continuous integration testing (strict constraints on time-efficiency) for highly-configurable software. The main idea of our approach consists in combining coverage based redundancy metrics (test overlap) with historical fault-detection effectiveness of integration tests, to identify ineffective redundancy that is eliminated from a regression test suite. We first apply and evaluate the approach in testing of industrial video conferencing software. We further evaluate the approach using a large set of artificial subjects, in terms of fault-detection effectiveness and timeliness of regression test feedback. We compare the results with an advanced retest-all approach and random test selection. The results show that regression test selection based on coverage and history analysis can: 1) reduce regression test feedback compared to industry practice (up to 39%), 2) reduce test feedback compared to the advanced retest-all approach (up to 45%) without significantly compromising fault-detection effectiveness (less than 0.5% on average), and 3) improve fault detection effectiveness compared to random selection (72% on average).",
              "pageNumber": 153,
              "isPageNumberRoman": false
            },
            {
              "id": "7haTHVnJtoazNpym1ljsxV",
              "type": "authorPaper",
              "text": "State of Mutation Testing at Google",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4sP3SrfWJU9Db3YuxsmuKI/1Erkod3XBaeGvsAAClBEqS.pdf",
              "extraLocations": [],
              "authorNames": "Goran Petrovic (Google), Marko Ivankovic (Google)",
              "abstract": "Mutation testing assesses test suite efficacy by inserting small faults into programs and measuring the ability of the test suite to detect them. It is widely considered the strongest test criterion in terms of finding the most faults and it subsumes a number of other coverage criteria. Traditional mutation analysis is computationally prohibitive which hinders its adoption as an industry standard. In order to alleviate the computational issues, we present a diff-based probabilistic approach to mutation analysis that drastically reduces the number of mutants by omitting lines of code without statement coverage and lines that are determined to be uninteresting - we dub these arid lines. Furthermore, by reducing the number of mutants and carefully selecting only the most interesting ones we make it easier for humans to understand and evaluate the result of mutation analysis. We propose a heuristic for judging whether a node is arid or not, conditioned on the programming language. We focus on a code-review based approach and consider the effects of surfacing mutation results on developer attention. The described system is used by 6,000 engineers in Google on all code changes they author or review, affecting in total more than 13,000 code authors as part of the mandatory code review process. The system processes about 30% of all diffs across Google that have statement coverage calculated. About 15% of coverage statement calculations fail across Google.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 State of Mutation Testing at Google 1517659706434 Goran Petrovic Google goranpetrovic@google.com Marko Ivankovic Google markoi@google.com mutation testing code coverage test efficacy Mutation testing assesses test suite efficacy by inserting small faults into programs and measuring the ability of the test suite to detect them. It is widely considered the strongest test criterion in terms of finding the most faults and it subsumes a number of other coverage criteria. Traditional mutation analysis is computationally prohibitive which hinders its adoption as an industry standard. In order to alleviate the computational issues, we present a diff-based probabilistic approach to mutation analysis that drastically reduces the number of mutants by omitting lines of code without statement coverage and lines that are determined to be uninteresting - we dub these arid lines. Furthermore, by reducing the number of mutants and carefully selecting only the most interesting ones we make it easier for humans to understand and evaluate the result of mutation analysis. We propose a heuristic for judging whether a node is arid or not, conditioned on the programming language. We focus on a code-review based approach and consider the effects of surfacing mutation results on developer attention. The described system is used by 6,000 engineers in Google on all code changes they author or review, affecting in total more than 13,000 code authors as part of the mandatory code review process. The system processes about 30% of all diffs across Google that have statement coverage calculated. About 15% of coverage statement calculations fail across Google.",
              "pageNumber": 163,
              "isPageNumberRoman": false
            },
            {
              "id": "1gtTdZqA4JeUvHlDEZvQ4C",
              "type": "authorPaper",
              "text": "Improving Model-Based Testing in Automotive Software Engineering",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf",
              "extraLocations": [],
              "authorNames": "Matthias Markthaler (BMW Group), Stefan Kriebel (BMW Group), Karin Samira Salman (BMW Group), Timo Greifenberg (RWTH Aachen University), Steffen Hillemacher (RWTH Aachen University), Bernhard Rumpe (RWTH Aachen University), Christoph Schulze (RWTH Aachen University), Andreas Wortmann (RWTH Aachen University), Philipp Orth (FEV Europe GmbH), Johannes Richenhagen (FEV Europe GmbH)",
              "abstract": "Testing is crucial to successfully engineering reliable automotive software. The manual derivation of test cases from ambiguous textual requirements is costly and error-prone. Model-based development can reduce the test case derivation effort by capturing requirements in structured models from which test cases can be generated with reduced effort. To facilitate the automated test case derivation at BMW, we conducted an anonymous survey among its testing practitioners and conceived a model-based improvement of the testing activities. The new model-based test case derivation extends BMW's SMArDT method with automated generation of tests, which addresses many of the practitioners' challenges uncovered through our study. This ultimately can facilitate quality assurance for automotive software.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Improving Model-Based Testing in Automotive Software Engineering 1517929349929 Matthias Markthaler BMW Group markthaler@se-rwth.de Stefan Kriebel BMW Group Stefan.Kriebel@bmw.de Karin Samira Salman BMW Group Samira.Salman@bmw.de Timo Greifenberg RWTH Aachen University greifenberg@se-rwth.de Steffen Hillemacher RWTH Aachen University hillemacher@se-rwth.de Bernhard Rumpe RWTH Aachen University rumpe@se-rwth.de Christoph Schulze RWTH Aachen University Schulze_c@fev.com Andreas Wortmann RWTH Aachen University wortmann@se-rwth.de Philipp Orth FEV Europe GmbH orth@fev.com Johannes Richenhagen FEV Europe GmbH richenhagen@fev.com Model-Based Testing Test Case Creation Testing is crucial to successfully engineering reliable automotive software. The manual derivation of test cases from ambiguous textual requirements is costly and error-prone. Model-based development can reduce the test case derivation effort by capturing requirements in structured models from which test cases can be generated with reduced effort. To facilitate the automated test case derivation at BMW, we conducted an anonymous survey among its testing practitioners and conceived a model-based improvement of the testing activities. The new model-based test case derivation extends BMW's SMArDT method with automated generation of tests, which addresses many of the practitioners' challenges uncovered through our study. This ultimately can facilitate quality assurance for automotive software.",
              "pageNumber": 172,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Agile and Ways of Working",
          "lineItems": [
            {
              "id": "5mQxnDCSK1JbBdrhyIkMO7",
              "type": "authorPaper",
              "text": "Modern Code Review: A Case Study at Google",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf",
              "extraLocations": [],
              "authorNames": "Caitlin Sadowski (Google), Emma Söderberg (Google), Luke Church (Google), Michal Sipko (Google), Alberto Bacchelli (University of Zurich)",
              "abstract": "Employing lightweight, tool-based code review of code changes (aka modern code review) has become the norm for a wide variety of open-source and industrial systems. In this paper, we make an exploratory investigation of modern code review at Google. Google introduced code review early on and evolved it over the years; our study sheds light on why Google introduced this practice and analyzes its current status, after the process has been refined through decades of code changes and millions of code reviews. By means of 12 interviews, a survey with 44 respondents, and the analysis of review logs for 9 million reviewed changes, we investigate motivations behind code review at Google, current practices, and developers' satisfaction and challenges.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Modern Code Review: A Case Study at Google 1518478417762 Caitlin Sadowski Google supertri@google.com Emma Söderberg Google emso@google.com Luke Church Google lukechurch@google.com Michal Sipko Google sipkom@google.com Alberto Bacchelli University of Zurich bacchelli@ifi.uzh.ch code review developer tools developer workflow human factors interviews reviewer recommendation systems Employing lightweight, tool-based code review of code changes (aka modern code review) has become the norm for a wide variety of open-source and industrial systems. In this paper, we make an exploratory investigation of modern code review at Google. Google introduced code review early on and evolved it over the years; our study sheds light on why Google introduced this practice and analyzes its current status, after the process has been refined through decades of code changes and millions of code reviews. By means of 12 interviews, a survey with 44 respondents, and the analysis of review logs for 9 million reviewed changes, we investigate motivations behind code review at Google, current practices, and developers' satisfaction and challenges.",
              "pageNumber": 181,
              "isPageNumberRoman": false
            },
            {
              "id": "5nQmtI6QpfqrrcPbwyj0cD",
              "type": "authorPaper",
              "text": "A Study of the Organizational Dynamics of Software Teams",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5gNECKysiAKSNV7IxUGaay/2VTsVJPZtHSofCGoLJHNhU.pdf",
              "extraLocations": [],
              "authorNames": "Michael Hilton (Carnegie Mellon University), Andrew Begel (Microsoft)",
              "abstract": "Large-scale software is developed by teams of engineers that work together. The teams' compositions change all the time, with engineers continuously leaving and joining. Learning about these organizational dynamics is vital to understanding how engineers acquire technical skills and business relationships throughout their career. In addition, since employee turnover can be costly to team morale and productivity, it is important for management to learn how to proactively guide the process. In this paper, we report on a study of a professional software development organization in which engineers switch teams frequently. We learned what causes engineers to consider leaving their teams, why they leave, how they learn about new teams, and how they decide which team to join. We also quantify the perceived costs and benefits of recent moves made by the engineers. In addition to reporting the answers to our research questions, we interpret our results to offer recommendations to engineers and their managers on how to ensure that both make better, happier team moves.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 A Study of the Organizational Dynamics of Software Teams Michael Hilton Carnegie Mellon University mhilton@cmu.edu Andrew Begel Microsoft andrew.begel@microsoft.com organizational behavior software engineers employee turnover Large-scale software is developed by teams of engineers that work together. The teams' compositions change all the time, with engineers continuously leaving and joining. Learning about these organizational dynamics is vital to understanding how engineers acquire technical skills and business relationships throughout their career. In addition, since employee turnover can be costly to team morale and productivity, it is important for management to learn how to proactively guide the process. In this paper, we report on a study of a professional software development organization in which engineers switch teams frequently. We learned what causes engineers to consider leaving their teams, why they leave, how they learn about new teams, and how they decide which team to join. We also quantify the perceived costs and benefits of recent moves made by the engineers. In addition to reporting the answers to our research questions, we interpret our results to offer recommendations to engineers and their managers on how to ensure that both make better, happier team moves.",
              "pageNumber": 191,
              "isPageNumberRoman": false
            },
            {
              "id": "1NjFNoWATW5beMBf2Rbj0U",
              "type": "authorPaper",
              "text": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf",
              "extraLocations": [],
              "authorNames": "Simon Butler (University of Skövde), Jonas Gamalielsson (University of Skövde), Björn Lundell (University of Skövde), Per Jonsson (Combitech AB), Johan Sjöberg (Findwise AB), Anders Mattsson (Husqvarna AB), Niklas Rickö (JAK), Tomas Gustavsson (PrimeKey Solutions AB), Jonas Feist (RedBridge AB), Stefan Landemoo (Saab IT AB), Erik Lönroth (Scania IT AB)",
              "abstract": "Professionals contribute to open source software (OSS) projects as part of their employment. Previous research has addressed motivations of individuals and the ways they engage with OSS projects. However, there is a lack of research which examines and explains work practices used by companies in their engagement with projects. Work practices used by companies to contribute to five established OSS projects are investigated through examination of the actions of employees in public communication channels and draw on our experiences when analysing engagement with the same projects. We find that companies utilise work practices for contributing which are congruent with the circumstances and their capabilities that support their short and long term needs. We find that companies contribute to OSS projects in different ways, such as employing core project developers, making donations, and joining project steering committees in order to advance strategic interests.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects 1518171673333 Simon Butler University of Skövde simon.butler@his.se Jonas Gamalielsson University of Skövde jonas.gamalielsson@his.se Björn Lundell University of Skövde bjorn.lundell@his.se Per Jonsson Combitech AB per.o.jonsson@combitech.se Johan Sjöberg Findwise AB johan.sjoberg@findwise.com Anders Mattsson Husqvarna AB anders.mattsson@husqvarnagroup.com Niklas Rickö JAK niklas.ricko@jak.se Tomas Gustavsson PrimeKey Solutions AB tomas.gustavsson@primekey.com Jonas Feist RedBridge AB jonas.feist@redbridge.se Stefan Landemoo Saab IT AB stefan.landemoo@saabgroup.com Erik Lönroth Scania IT AB erik.lonroth@scania.com Open source software company contribution work practices Professionals contribute to open source software (OSS) projects as part of their employment. Previous research has addressed motivations of individuals and the ways they engage with OSS projects. However, there is a lack of research which examines and explains work practices used by companies in their engagement with projects. Work practices used by companies to contribute to five established OSS projects are investigated through examination of the actions of employees in public communication channels and draw on our experiences when analysing engagement with the same projects. We find that companies utilise work practices for contributing which are congruent with the circumstances and their capabilities that support their short and long term needs. We find that companies contribute to OSS projects in different ways, such as employing core project developers, making donations, and joining project steering committees in order to advance strategic interests.",
              "pageNumber": 201,
              "isPageNumberRoman": false
            },
            {
              "id": "6negHGtlzpgDjO6VhHHMSf",
              "type": "authorPaper",
              "text": "From Agile to Continuous Development in the Healthcare Domain - Lessons Learned",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3YlVLNOvFU48vJCEI4Ofa8/6zIGIsUB4ZxPfDRQZPjui1.pdf",
              "extraLocations": [],
              "authorNames": "Walter Stocker (Siemens Healthineers)",
              "abstract": "Starting in 2006 our organization in the healthcare domain began a shift towards agile-like development rather than a strict interpretation of the \"V-model\". But this was only the beginning of an ongoing journey. Today modern software engineering is characterized by much faster development cycles than those used in traditional models. Our business demands that we shorten release cycles and support many different deployment scenarios. Due to the nature of our products, it is also necessary to address the relevant regulatory requirements which make this task even more challenging. Over the years, we have made a number of improvements in the spirit of \"continuous improvement\" that have helped us reap the benefits of a more continuous way-of-working. These include organizational, architectural, and process-based improvements as well as explicitly focusing on the necessary culture in the organization. This experience report is a summary of our learnings and hopefully will provide something for everyone that helps on their own journey.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 From Agile to Continuous Development in the Healthcare Domain - Lessons Learned 1518300043781 Walter Stocker Siemens Healthineers walter.stocker@siemens-healthineers.com Agile Continuous Delivery DevOps Software Architecture Best Practice Sharing Software Engineering Starting in 2006 our organization in the healthcare domain began a shift towards agile-like development rather than a strict interpretation of the \"V-model\". But this was only the beginning of an ongoing journey. Today modern software engineering is characterized by much faster development cycles than those used in traditional models. Our business demands that we shorten release cycles and support many different deployment scenarios. Due to the nature of our products, it is also necessary to address the relevant regulatory requirements which make this task even more challenging. Over the years, we have made a number of improvements in the spirit of \"continuous improvement\" that have helped us reap the benefits of a more continuous way-of-working. These include organizational, architectural, and process-based improvements as well as explicitly focusing on the necessary culture in the organization. This experience report is a summary of our learnings and hopefully will provide something for everyone that helps on their own journey.",
              "pageNumber": 211,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Mobile, Code and SMEs",
          "lineItems": [
            {
              "id": "Xp6EZkekixA6SGrRcgiAw",
              "type": "authorPaper",
              "text": "Helping SMEs to Better Develop Software: Experience Report and Challenges Ahead",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1JYfRO9gh0Ithz1d8uyMA1/4ygQwC2bMpXDfZhyLo60s3.pdf",
              "extraLocations": [],
              "authorNames": "Christophe Ponsard (CETIC Research Centre), Jean-Christophe Deprez (CETIC Research Centre)",
              "abstract": "Small and medium-sized enterprises (SMEs) play a key role in the worldwide economy and are increasingly dependent on software as part of their products/services or to support their operation (e.g. e-commerce, smart manufacturing). Over the past 15 years, as a research and technology transfer centre, CETIC has been busy helping Belgian SMEs to increase their maturity in software development. We have also contributed specific methods and tools for the SME target, including the OWPL framework and now the ISO29110 standard. This talk aims at sharing what we learned from different types of SMEs (from startups to grownups, both IT and non IT) about common problems gathered in a long term survey. We then focus on key issues like requirements, technical debt, test/release and (agile/lean) project management. Finally, we share our thoughts on new challenges ahead raised by the ever increasing connectivity like cybersecurity and privacy regulation (GDPR).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Helping SMEs to Better Develop Software: Experience Report and Challenges Ahead 1518460261984 Christophe Ponsard CETIC Research Centre christophe.ponsard@cetic.be Jean-Christophe Deprez CETIC Research Centre jean-christophe.deprez@cetic.be Software Development Practices Software Process Improvement Small and Medium Enterprise ISO29110 Industry Report Case Studies Small and medium-sized enterprises (SMEs) play a key role in the worldwide economy and are increasingly dependent on software as part of their products/services or to support their operation (e.g. e-commerce, smart manufacturing). Over the past 15 years, as a research and technology transfer centre, CETIC has been busy helping Belgian SMEs to increase their maturity in software development. We have also contributed specific methods and tools for the SME target, including the OWPL framework and now the ISO29110 standard. This talk aims at sharing what we learned from different types of SMEs (from startups to grownups, both IT and non IT) about common problems gathered in a long term survey. We then focus on key issues like requirements, technical debt, test/release and (agile/lean) project management. Finally, we share our thoughts on new challenges ahead raised by the ever increasing connectivity like cybersecurity and privacy regulation (GDPR).",
              "pageNumber": 213,
              "isPageNumberRoman": false
            },
            {
              "id": "5d6l02CgS0PkDdLrQdeQ6F",
              "type": "authorPaper",
              "text": "Static Analysis of Context Leaks in Android Applications",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jHnDZvs2fqlaFrFCxfUpX/1b1KkOf8jkZyi9FJDlxPt7.pdf",
              "extraLocations": [],
              "authorNames": "Flavio Toffalini (Singapore University of Technology and Design), Jun Sun (Singapore University of Technology and Design), Martín Ochoa (Singapore University of Technology and Design)",
              "abstract": "Android native applications, written in Java and distributed in APK format, are widely used in mobile devices. Their specific pattern of use lets the operating system control the creation and destruction of key resources, such as activities and services (contexts). Programmers are not supposed to interfere with such lifecycle events. Otherwise contexts might be leaked, i.e. they will never be deallocated from memory, or be deallocated too late, leading to memory exhaustion and frozen applications. In practice, it is easy to write incorrect code, which hinders garbage collection of contexts and subsequently leads to context leakage. In this work, we present a new static analysis method that finds context leaks in Android code. We apply this analysis to APKs translated into Java bytecode. We discuss the results of a large number of experiments with our analysis, which reveal context leaks in many widely used applications from the Android marketplace. This shows the practical usefulness of our technique and proves its superiority w.r.t. the well-known Lint static analysis tool. We then estimate the amount of memory saved by the collection of the leaks found and explain, experimentally, where programmers often go wrong and what the analysis is not yet able to find. Such lessons could be later leveraged for the definition of a sound or more powerful static analysis for Android leaks. This work can be considered as a practical application of software analysis techniques to solve practical problems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Static Analysis of Context Leaks in Android Applications 1517246840676 Flavio Toffalini Singapore University of Technology and Design flavio.toffalini@gmail.com Jun Sun Singapore University of Technology and Design sunjun@sutd.edu.sg Martín Ochoa Singapore University of Technology and Design martin_ochoa@sutd.edu.sg Static analysis memory leak Android Android native applications, written in Java and distributed in APK format, are widely used in mobile devices. Their specific pattern of use lets the operating system control the creation and destruction of key resources, such as activities and services (contexts). Programmers are not supposed to interfere with such lifecycle events. Otherwise contexts might be leaked, i.e. they will never be deallocated from memory, or be deallocated too late, leading to memory exhaustion and frozen applications. In practice, it is easy to write incorrect code, which hinders garbage collection of contexts and subsequently leads to context leakage. In this work, we present a new static analysis method that finds context leaks in Android code. We apply this analysis to APKs translated into Java bytecode. We discuss the results of a large number of experiments with our analysis, which reveal context leaks in many widely used applications from the Android marketplace. This shows the practical usefulness of our technique and proves its superiority w.r.t. the well-known Lint static analysis tool. We then estimate the amount of memory saved by the collection of the leaks found and explain, experimentally, where programmers often go wrong and what the analysis is not yet able to find. Such lessons could be later leveraged for the definition of a sound or more powerful static analysis for Android leaks. This work can be considered as a practical application of software analysis techniques to solve practical problems.",
              "pageNumber": 215,
              "isPageNumberRoman": false
            },
            {
              "id": "4Uo7fzntiQbtaOFSdICQPg",
              "type": "authorPaper",
              "text": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf",
              "extraLocations": [],
              "authorNames": "Ciera Jaspan (Google), Matthew Jorde (Google), Andrea Knight (Google), Caitlin Sadowski (Google), Edward Smith (Google), Collin Winter (Google), Emerson Murphy-Hill (NC State University)",
              "abstract": "Monolithic source code repositories (repos) are used by several large tech companies, but little is known about their advantages or disadvantages compared to multiple per-project repos. This paper investigates the relative tradeoffs by utilizing a mixed-methods approach. Our primary contribution is a survey of engineers who have experience with both monolithic repos and multiple, per-project repos. This paper also backs up the claims made by these engineers with a large-scale analysis of developer tool logs. Our study finds that the visibility of the codebase is a significant advantage of a monolithic repo: it enables engineers to discover APIs to reuse, find examples for using an API, and automatically have dependent code updated as an API migrates to a new version. Engineers also appreciate the centralization of dependency management in the repo. In contrast, multiple-repository (multi-repo) systems afford engineers more flexibility to select their own toolchains and provide significant access control and stability benefits. In both cases, the related tooling is also a significant factor; engineers favor particular tools and are drawn to repo management systems that support their desired toolchain.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google 1518495958577 Ciera Jaspan Google ciera@google.com Matthew Jorde Google majorde@google.com Andrea Knight Google aknight@google.com Caitlin Sadowski Google supertri@google.com Edward Smith Google edwardsmith@google.com Collin Winter Google collinwinter@google.com Emerson Murphy-Hill NC State University emerson@csc.ncsu.edu source control empirical software engineering Monolithic source code repositories (repos) are used by several large tech companies, but little is known about their advantages or disadvantages compared to multiple per-project repos. This paper investigates the relative tradeoffs by utilizing a mixed-methods approach. Our primary contribution is a survey of engineers who have experience with both monolithic repos and multiple, per-project repos. This paper also backs up the claims made by these engineers with a large-scale analysis of developer tool logs. Our study finds that the visibility of the codebase is a significant advantage of a monolithic repo: it enables engineers to discover APIs to reuse, find examples for using an API, and automatically have dependent code updated as an API migrates to a new version. Engineers also appreciate the centralization of dependency management in the repo. In contrast, multiple-repository (multi-repo) systems afford engineers more flexibility to select their own toolchains and provide significant access control and stability benefits. In both cases, the related tooling is also a significant factor; engineers favor particular tools and are drawn to repo management systems that support their desired toolchain.",
              "pageNumber": 225,
              "isPageNumberRoman": false
            },
            {
              "id": "5UCDjJgqYfl3NClE47bGEs",
              "type": "authorPaper",
              "text": "Protecting Million-User iOS Apps with Obfuscation: Motivations, Pitfalls, and Experience",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6D79uXKxsLFDPmMFKNcRW8/1VBkWnd3mBlkpIkTqvuUqq.pdf",
              "extraLocations": [],
              "authorNames": "Pei Wang (The Pennsylvania State University), Dinghao Wu (The Pennsylvania State University), Zhaofeng Chen (Baidu X-Lab), Tao Wei (Baidu X-Lab)",
              "abstract": "In recent years, mobile apps have become the infrastructure of many popular Internet services. It is now fairly common that a mobile app serves a large number of users across the globe. Different from web-based services whose important program logic is mostly placed on remote servers, many mobile apps require complicated client-side code to perform tasks that are critical to the businesses. The code of mobile apps can be easily accessed by any party after the software is installed on a rooted or jailbroken device. By examining the code, skilled reverse engineers can learn various knowledge about the design and implementation of an app. Real-world cases have shown that the disclosed critical information allows malicious parties to abuse or exploit the app-provided services for unrightful profits, leading to significant financial losses for app vendors. One of the most viable mitigations against malicious reverse engineering is to obfuscate the software before release. Despite that security by obscurity is typically considered to be an unsound protection methodology, software obfuscation can indeed increase the cost of reverse engineering, thus delivering practical merits for protecting mobile apps. In this paper, we share our experience of applying obfuscation to multiple commercial iOS apps, each of which has millions of users. We discuss the necessity of adopting obfuscation for protecting modern mobile business, the challenges of software obfuscation on the iOS platform, and our efforts in overcoming these obstacles. Our report can benefit many stakeholders in the iOS ecosystem, including developers, security service providers, and Apple as the administrator of the ecosystem.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Protecting Million-User iOS Apps with Obfuscation: Motivations, Pitfalls, and Experience 1518496734142 Pei Wang The Pennsylvania State University pxw172@ist.psu.edu Dinghao Wu The Pennsylvania State University dwu@ist.psu.edu Zhaofeng Chen Baidu X-Lab chenzhaofeng@baidu.com Tao Wei Baidu X-Lab lenx@baidu.com obfuscation software protection reverse engineering mobile iOS In recent years, mobile apps have become the infrastructure of many popular Internet services. It is now fairly common that a mobile app serves a large number of users across the globe. Different from web-based services whose important program logic is mostly placed on remote servers, many mobile apps require complicated client-side code to perform tasks that are critical to the businesses. The code of mobile apps can be easily accessed by any party after the software is installed on a rooted or jailbroken device. By examining the code, skilled reverse engineers can learn various knowledge about the design and implementation of an app. Real-world cases have shown that the disclosed critical information allows malicious parties to abuse or exploit the app-provided services for unrightful profits, leading to significant financial losses for app vendors. One of the most viable mitigations against malicious reverse engineering is to obfuscate the software before release. Despite that security by obscurity is typically considered to be an unsound protection methodology, software obfuscation can indeed increase the cost of reverse engineering, thus delivering practical merits for protecting mobile apps. In this paper, we share our experience of applying obfuscation to multiple commercial iOS apps, each of which has millions of users. We discuss the necessity of adopting obfuscation for protecting modern mobile business, the challenges of software obfuscation on the iOS platform, and our efforts in overcoming these obstacles. Our report can benefit many stakeholders in the iOS ecosystem, including developers, security service providers, and Apple as the administrator of the ecosystem.",
              "pageNumber": 235,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Safety and Culture",
          "lineItems": [
            {
              "id": "49vQ7fPy9QsdfmM1wm5kVh",
              "type": "authorPaper",
              "text": "We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/mM2flyVIs1e0wGU98L8VQ/xU4OW2h5F9cUBJIgIMkYY.pdf",
              "extraLocations": [],
              "authorNames": "Amritanshu Agrawal (North Carolina State University), Akond Rahman (North Carolina State University), Rahul Krishna (North Carolina State University), Alexander Sobran (IBM Corp), Tim Menzies (North Carolina State University)",
              "abstract": "A software project has \"Hero Developers\" when 80% of contributions are delivered by 20% of the developers. Are such heroes a good idea? Are too many heroes bad for software quality? Is it better to have more/less heroes for different kinds of projects? To answer these questions, we studied 661 open source projects from Public open source software (OSS) Github and 171 projects from an Enterprise Github. We find that hero projects are very common. In fact, as projects grow in size, nearly all project become hero projects. These findings motivated us to look more closely at the effects of heroes on software development. Analysis shows that the frequency to close issues and bugs are not significantly affected by the presence of project type (Public or Enterprise). Similarly, the time needed to resolve an issue/bug/enhancement is not affected by heroes or project type. This is a surprising result since, before looking at the data, we expected that increasing heroes on a project will slow down howfast that project reacts to change. However, we do find a statistically significant association between heroes, project types, and enhancement resolution rates. Heroes do not affect enhancement resolution rates in Public projects. However, in Enterprise projects, heroes increase the rate at which projects complete enhancements. In summary, our empirical results call for a revision of a long-held truism in software engineering. Software heroes are far more common and valuable than suggested by the literature, particularly for medium to large Enterprise developments. Organizations should reflect on better ways to find and retain more of these heroes.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development 1517504958668 Amritanshu Agrawal North Carolina State University aagrawa8@ncsu.edu Akond Rahman North Carolina State University aarahman@ncsu.edu Rahul Krishna North Carolina State University rkrish11@ncsu.edu Alexander Sobran IBM Corp asobran@us.ibm.com Tim Menzies North Carolina State University tim@menzies.us Issue Bug Commit Hero Core Github Productivity A software project has \"Hero Developers\" when 80% of contributions are delivered by 20% of the developers. Are such heroes a good idea? Are too many heroes bad for software quality? Is it better to have more/less heroes for different kinds of projects? To answer these questions, we studied 661 open source projects from Public open source software (OSS) Github and 171 projects from an Enterprise Github. We find that hero projects are very common. In fact, as projects grow in size, nearly all project become hero projects. These findings motivated us to look more closely at the effects of heroes on software development. Analysis shows that the frequency to close issues and bugs are not significantly affected by the presence of project type (Public or Enterprise). Similarly, the time needed to resolve an issue/bug/enhancement is not affected by heroes or project type. This is a surprising result since, before looking at the data, we expected that increasing heroes on a project will slow down howfast that project reacts to change. However, we do find a statistically significant association between heroes, project types, and enhancement resolution rates. Heroes do not affect enhancement resolution rates in Public projects. However, in Enterprise projects, heroes increase the rate at which projects complete enhancements. In summary, our empirical results call for a revision of a long-held truism in software engineering. Software heroes are far more common and valuable than suggested by the literature, particularly for medium to large Enterprise developments. Organizations should reflect on better ways to find and retain more of these heroes.",
              "pageNumber": 245,
              "isPageNumberRoman": false
            },
            {
              "id": "6EC8WhuYiAl6ZjwVMoA1sr",
              "type": "authorPaper",
              "text": "Improving the Definition of Software Development Projects Through Design Thinking Led Collaboration Workshops",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5ElL7JQ9jCBuLjbXyimkHW/4vWLTNPc3nHqNgUzRDRnV3.pdf",
              "extraLocations": [],
              "authorNames": "Hilary Cinis (Data61 )",
              "abstract": "Software development projects need clear agreed goals, a provable value proposition and key stakeholder commitment. Employing Design Thinking methods to focus the expertise of workshop participants can uncover and support these needs. The Data61 User Experience and Design team lead Design Thinking collaboration workshops as professional practice during engagements with clients. These workshops are run with cross-functional teams working on data/digital platforms before going to market. This talk will present findings from a total 54 Design Thinking workshops and 5x5 day co-design sprints run from Sept 2016 - Oct 2017. The talk will cover how the workshops were designed, using initial trials of a proposed workshop approach and ongoing review of workshops and design sprints. The use of our approach will be illustrated using 3 short case studies from different application domains: e-science for materials and manufacturing, infrastructure sustainability, and agricultural intelligence. Key learnings from our approach include getting internal stakeholder support for workshops, characteristics of a good format and how to balance domain expertise with user centred design practises.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Improving the Definition of Software Development Projects Through Design Thinking Led Collaboration Workshops 1518816889625 Hilary Cinis Data61 hilary.cinis@data61.csiro.au Design Thinking Cross functional teams User Experience Design Collaboration Software Engineering Software development projects need clear agreed goals, a provable value proposition and key stakeholder commitment. Employing Design Thinking methods to focus the expertise of workshop participants can uncover and support these needs. The Data61 User Experience and Design team lead Design Thinking collaboration workshops as professional practice during engagements with clients. These workshops are run with cross-functional teams working on data/digital platforms before going to market. This talk will present findings from a total 54 Design Thinking workshops and 5x5 day co-design sprints run from Sept 2016 - Oct 2017. The talk will cover how the workshops were designed, using initial trials of a proposed workshop approach and ongoing review of workshops and design sprints. The use of our approach will be illustrated using 3 short case studies from different application domains: e-science for materials and manufacturing, infrastructure sustainability, and agricultural intelligence. Key learnings from our approach include getting internal stakeholder support for workshops, characteristics of a good format and how to balance domain expertise with user centred design practises.",
              "pageNumber": 254,
              "isPageNumberRoman": false
            },
            {
              "id": "W9ZCA0GcmD3aurGhJ59KA",
              "type": "authorPaper",
              "text": "Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jAtRSWcHJcJZLW9lwLKTT/3ZbcW64L99h5TIvUQiBeJI.pdf",
              "extraLocations": [],
              "authorNames": "Hadi Hemmati (University of Calgary), Syed S. Arefin (Microsoft Corporation), Howard W. Loewen (Micropilot Inc)",
              "abstract": "Safety-critical software systems in the aviation domain, e.g., a UAV autopilot software, needs to go through a formal process of certification (e.g., DO-178C standard). One of the main requirements for this certification is having a set of explicit test cases for each software requirement. To achieve this, the DO-178C standard recommends using a model-driven approach. For instance, model-based testing (MBT) is recommended in its DO-331 supplement to automatically generate system-level test cases for the requirements provided as the specification models. In addition, the DO-178C standard also requires high level of source code coverage, which typically is achieved by a separate set of structural testing. However, the standard allows targeting high code coverage with MBT, only if the applicants justify their plan on how to achieve high code coverage through model-level testing. In this study, we propose using the Modified Condition and Decision coverage (\"MC/DC\") criterion on the specification-level constraints rather than the standard-recommended \"all transition coverage\" criterion, to achieve higher code coverage through MBT. We evaluate our approach in the context of a case study at MicroPilot Inc., our industry collaborator, which is a UAV producer company. We implemented our idea as an MC/DC coverage on transition guards in a UML state-machine-based testing tool that was developed in-house. The results show that applying model-level MC/DC coverage outperforms the typical transition-coverage (DO-178C's required MBT coverage criterion), with respect to source code-level \"all condition-decision coverage criterion\" by 33%. In addition, our MC/DC test suite detected three new faults and two instances of legacy specification in the code that are no longer in use, compared to the \"all transition\" test suite.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems 1518126400543 Hadi Hemmati University of Calgary hadi.hemmati@ucalgary.ca Syed S. Arefin Microsoft Corporation ssarefin@cs.umanitoba.ca Howard W. Loewen Micropilot Inc hloewen@micropilot.com Safety critical systems model-based testing search-based testing MC/DC code coverage constraint coverage DO-178C software certification Aviation UAV Safety-critical software systems in the aviation domain, e.g., a UAV autopilot software, needs to go through a formal process of certification (e.g., DO-178C standard). One of the main requirements for this certification is having a set of explicit test cases for each software requirement. To achieve this, the DO-178C standard recommends using a model-driven approach. For instance, model-based testing (MBT) is recommended in its DO-331 supplement to automatically generate system-level test cases for the requirements provided as the specification models. In addition, the DO-178C standard also requires high level of source code coverage, which typically is achieved by a separate set of structural testing. However, the standard allows targeting high code coverage with MBT, only if the applicants justify their plan on how to achieve high code coverage through model-level testing. In this study, we propose using the Modified Condition and Decision coverage (\"MC/DC\") criterion on the specification-level constraints rather than the standard-recommended \"all transition coverage\" criterion, to achieve higher code coverage through MBT. We evaluate our approach in the context of a case study at MicroPilot Inc., our industry collaborator, which is a UAV producer company. We implemented our idea as an MC/DC coverage on transition guards in a UML state-machine-based testing tool that was developed in-house. The results show that applying model-level MC/DC coverage outperforms the typical transition-coverage (DO-178C's required MBT coverage criterion), with respect to source code-level \"all condition-decision coverage criterion\" by 33%. In addition, our MC/DC test suite detected three new faults and two instances of legacy specification in the code that are no longer in use, compared to the \"all transition\" test suite.",
              "pageNumber": 256,
              "isPageNumberRoman": false
            },
            {
              "id": "1NvMdJlITzvv56yjMVaunL",
              "type": "authorPaper",
              "text": "On Groupthink in Safety Analysis: An Industrial Case Study",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7xH12ng5nhE1pzBYmO3hAS/3SP75ETZJqdrFybInn4XMI.pdf",
              "extraLocations": [],
              "authorNames": "Yang Wang (University of Stuttgart), Stefan Wagner (University of Stuttgart)",
              "abstract": "Context: In safety-critical systems, an effective safety analysis produces high-quality safety requirements and ensures a safe product from an early stage. Motivation: In safety-critical industries, safety analysis happens mostly in groups. The occurrence of \"groupthink\", under which the group members become concurrence-seeking, potentially leads to a poor safety assurance of products and fatalities. Objective: The purpose of this study is to investigate how groupthink influences safety analysis as well as how to reduce it. Method: We conducted a multi-case study in seven companies by surveying 39 members and interviewing 17 members including software developers, software testers, quality engineers, functional safety managers, hazard/risk managers, sales, purchasing, production managers and senior managers. Results: The TOP 10 phenomena of groupthink in safety analysis are: (1) The managers are too optimistic on the plan of safety analysis from norms. (2) The technical members overestimate their capability on avoiding risks. (3) The non-functional department is under negative stereotypes in safety analysis. (4) Non-technical members keep silence during safety analysis. (5) Team members keep consistent opinions with senior safety experts. (6) The team rationalizes the safety analysis solutions. (7) The safety analysts spontaneously freeze the safety-related documents. (8) The safety analyst has an illusion of invulnerability during verification. (9) The internal safety assessor rationalizes the safety assurance to a third party. (10) The team rationalizes the safety analysis for providing safety evidences. Furthermore, we found reasons like \"cohesion\" and \"group insulation\" and solutions like \"inviting external expert\" and \"making key members impartial\". Conclusion: There is groupthink in safety analysis in practice. Practitioners should look for the phenomena and consider solutions. However, the cases are limited to the investigated domains and countries.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 On Groupthink in Safety Analysis: An Industrial Case Study 1517984245786 Yang Wang University of Stuttgart yang.wang@informatik.uni-stuttgart.de Stefan Wagner University of Stuttgart stefan.wagner@informatik.uni-stuttgart.de Groupthink Safety analysis Case study Context: In safety-critical systems, an effective safety analysis produces high-quality safety requirements and ensures a safe product from an early stage. Motivation: In safety-critical industries, safety analysis happens mostly in groups. The occurrence of \"groupthink\", under which the group members become concurrence-seeking, potentially leads to a poor safety assurance of products and fatalities. Objective: The purpose of this study is to investigate how groupthink influences safety analysis as well as how to reduce it. Method: We conducted a multi-case study in seven companies by surveying 39 members and interviewing 17 members including software developers, software testers, quality engineers, functional safety managers, hazard/risk managers, sales, purchasing, production managers and senior managers. Results: The TOP 10 phenomena of groupthink in safety analysis are: (1) The managers are too optimistic on the plan of safety analysis from norms. (2) The technical members overestimate their capability on avoiding risks. (3) The non-functional department is under negative stereotypes in safety analysis. (4) Non-technical members keep silence during safety analysis. (5) Team members keep consistent opinions with senior safety experts. (6) The team rationalizes the safety analysis solutions. (7) The safety analysts spontaneously freeze the safety-related documents. (8) The safety analyst has an illusion of invulnerability during verification. (9) The internal safety assessor rationalizes the safety assurance to a third party. (10) The team rationalizes the safety analysis for providing safety evidences. Furthermore, we found reasons like \"cohesion\" and \"group insulation\" and solutions like \"inviting external expert\" and \"making key members impartial\". Conclusion: There is groupthink in safety analysis in practice. Practitioners should look for the phenomena and consider solutions. However, the cases are limited to the investigated domains and countries.",
              "pageNumber": 266,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Testing and Defects II",
          "lineItems": [
            {
              "id": "3ddwwFsBlS5uhjWRfc7Ii8",
              "type": "authorPaper",
              "text": "Robustness Testing of Autonomy Software",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf",
              "extraLocations": [],
              "authorNames": "Casidhe Hutchison (Carnegie Mellon University), Milda Zizyte (Carnegie Mellon University), Patrick E. Lanigan (Carnegie Mellon University), David Guttendorf (Carnegie Mellon University), Michael Wagner (Carnegie Mellon University), Claire Le Goues (Carnegie Mellon University), Philip Koopman (Carnegie Mellon University)",
              "abstract": "As robotic and autonomy systems become progressively more present in industrial and human-interactive applications, it is increasingly critical for them to behave safely in the presence of unexpected inputs. While robustness testing for traditional software systems is long-studied, robustness testing for autonomy systems is relatively uncharted territory. In our role as engineers, testers, and researchers we have observed that autonomy systems are importantly different from traditional systems, requiring novel approaches to effectively test them. We present Automated Stress Testing for Autonomy Architectures (ASTAA), a system that effectively, automatically robustness tests autonomy systems by building on classic principles, with important innovations to support this new domain. Over five years, we have used ASTAA to test 17 real-world autonomy systems, robots, and robotics-oriented libraries, across commercial and academic applications, discovering hundreds of bugs. We outline the ASTAA approach and analyze more than 150 bugs we found in real systems. We discuss what we discovered about testing autonomy systems, specifically focusing on how doing so differs from and is similar to traditional software robustness testing and other high-level lessons.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 Robustness Testing of Autonomy Software 1518438593264 Casidhe Hutchison Carnegie Mellon University fhutchin@nrec.ri.cmu.edu Milda Zizyte Carnegie Mellon University milda@cmu.edu Patrick E. Lanigan Carnegie Mellon University planigan@nrec.ri.cmu.edu David Guttendorf Carnegie Mellon University dguttendorf@nrec.ri.cmu.edu Michael Wagner Carnegie Mellon University mwagner@cmu.edu Claire Le Goues Carnegie Mellon University clegoues@cs.cmu.edu Philip Koopman Carnegie Mellon University koopman@cmu.edu dependability robustness testing safety-critical systems autonomy As robotic and autonomy systems become progressively more present in industrial and human-interactive applications, it is increasingly critical for them to behave safely in the presence of unexpected inputs. While robustness testing for traditional software systems is long-studied, robustness testing for autonomy systems is relatively uncharted territory. In our role as engineers, testers, and researchers we have observed that autonomy systems are importantly different from traditional systems, requiring novel approaches to effectively test them. We present Automated Stress Testing for Autonomy Architectures (ASTAA), a system that effectively, automatically robustness tests autonomy systems by building on classic principles, with important innovations to support this new domain. Over five years, we have used ASTAA to test 17 real-world autonomy systems, robots, and robotics-oriented libraries, across commercial and academic applications, discovering hundreds of bugs. We outline the ASTAA approach and analyze more than 150 bugs we found in real systems. We discuss what we discovered about testing autonomy systems, specifically focusing on how doing so differs from and is similar to traditional software robustness testing and other high-level lessons.",
              "pageNumber": 276,
              "isPageNumberRoman": false
            },
            {
              "id": "892s2k1JOsdl1dCdZ4QkQ",
              "type": "authorPaper",
              "text": "An Experience Report on Defect Modelling in Practice: Pitfalls and Challenges",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1XE1Rcu3h9nk31GZtFimCl/5FPku5dJlOtWZkQS6QB4ck.pdf",
              "extraLocations": [],
              "authorNames": "Chakkrit Tantithamthavorn (The University of Adelaide), Ahmed E. Hassan (Queen's University)",
              "abstract": "Over the past decade with the rise of the Mining Software Repositories (MSR) field, the modelling of defects for large and long-lived systems has become one of the most common applications of MSR. The findings and approaches of such studies have attracted the attention of many of our industrial collaborators (and other practitioners worldwide). At the core of many of these studies is the development and use of analytical models for defects. In this paper, we discuss common pitfalls and challenges that we observed as practitioners attempt to develop such models or reason about the findings of such studies. The key goal of this paper is to document such pitfalls and challenges so practitioners can avoid them in future efforts. We also hope that other academics will be mindful of such pitfalls and challenges in their own work and industrial engagements.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 An Experience Report on Defect Modelling in Practice: Pitfalls and Challenges 1517192231976 Chakkrit Tantithamthavorn The University of Adelaide chakkrit.tantithamthavorn@adelaide.edu.au Ahmed E. Hassan Queen's University ahmed@cs.queensu.ca Software Analytics Defect Prediction Models Empirical Software Engineering Data Analytics Mining Software Repositories Over the past decade with the rise of the Mining Software Repositories (MSR) field, the modelling of defects for large and long-lived systems has become one of the most common applications of MSR. The findings and approaches of such studies have attracted the attention of many of our industrial collaborators (and other practitioners worldwide). At the core of many of these studies is the development and use of analytical models for defects. In this paper, we discuss common pitfalls and challenges that we observed as practitioners attempt to develop such models or reason about the findings of such studies. The key goal of this paper is to document such pitfalls and challenges so practitioners can avoid them in future efforts. We also hope that other academics will be mindful of such pitfalls and challenges in their own work and industrial engagements.",
              "pageNumber": 286,
              "isPageNumberRoman": false
            },
            {
              "id": "17rYeq6ef7bDeZtYCmzru6",
              "type": "authorPaper",
              "text": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf",
              "extraLocations": [],
              "authorNames": "Chengyu Zhang (East China Normal University), Yichen Yan (East China Normal University), Hanru Zhou (East China Normal University), Yinbo Yao (National Trusted Embedded Software Engineering Technology Research Center), Ke Wu (National Trusted Embedded Software Engineering Technology Research Center), Ting Su (Nanyang Technological University), Weikai Miao (East China Normal University), Geguang Pu (East China Normal University)",
              "abstract": "In this paper, we aim at the automated unit coverage-based testing for embedded software. To achieve the goal, by analyzing the industrial requirements and our previous work on automated unit testing tool CAUT, we rebuild a new tool, SmartUnit, to solve the engineering requirements that take place in our partner companies. SmartUnit is a dynamic symbolic execution implementation, which supports statement, branch, boundary value and MC/DC coverage. SmartUnit has been used to test more than one million lines of code in real projects. For confidentiality motives, we select three in-house real projects for the empirical evaluations. We also carry out our evaluations on two open source database projects, SQLite and PostgreSQL, to test the scalability of our tool since the scale of the embedded software project is mostly not large, 5K-50K lines of code on average. From our experimental results, in general, more than 90% of functions in commercial embedded software achieve 100% statement, branch, MC/DC coverage, more than 80% of functions in SQLite achieve 100% MC/DC coverage, and more than 60% of functions in PostgreSQL achieve 100% MC/DC coverage. Moreover, SmartUnit is able to find the runtime exceptions at the unit testing level. We also have reported exceptions like array index out of bounds and divided-by-zero in SQLite. Furthermore, we analyze the reasons of low coverage in automated unit testing in our setting and give a survey on the situation of manual unit testing with respect to automated unit testing in industry. SmartUnit is a dynamic symbolic execution implementation, which supports statement, branch, boundary value and MC/DC coverage. SmartUnit has been used to test more than one million lines of code in real projects. For confidentiality motives, we select three in-house real projects for the empirical evaluations. We also carry out our evaluations on two open source database projects, SQLite and PostgreSQL, to test the scalability of our tool since the scale of the embedded software project is mostly not large, 5K-50K lines of code on average. From our experimental results, in general, more than 90% of functions in commercial embedded software achieve 100% statement, branch, MC/DC coverage, more than 80% of functions in SQLite achieve 100% MC/DC coverage, and more than 60% of functions in PostgreSQL achieve 100% MC/DC coverage. Moreover, SmartUnit is able to find the runtime exceptions at the unit testing level. We also have reported exceptions like array index out of bounds and divided-by-zero in SQLite. Furthermore, we analyze the reasons of low coverage in automated unit testing in our setting and give a survey on the situation of manual unit testing with respect to automated unit testing in industry.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry 1518438265625 Chengyu Zhang East China Normal University dale.chengyu.zhang@gmail.com Yichen Yan East China Normal University sei_yichen@outlook.com Hanru Zhou East China Normal University hanruzh@gmail.com Yinbo Yao National Trusted Embedded Software Engineering Technology Research Center snowingsea@gmail.com Ke Wu National Trusted Embedded Software Engineering Technology Research Center bukawu@126.com Ting Su Nanyang Technological University suting@ntu.edu.sg Weikai Miao East China Normal University wkmiao@sei.ecnu.edu.cn Geguang Pu East China Normal University ggpu@sei.ecnu.edu.cn Dynamic Symbolic Execution Automated Unit Testing Embedded System In this paper, we aim at the automated unit coverage-based testing for embedded software. To achieve the goal, by analyzing the industrial requirements and our previous work on automated unit testing tool CAUT, we rebuild a new tool, SmartUnit, to solve the engineering requirements that take place in our partner companies. SmartUnit is a dynamic symbolic execution implementation, which supports statement, branch, boundary value and MC/DC coverage. SmartUnit has been used to test more than one million lines of code in real projects. For confidentiality motives, we select three in-house real projects for the empirical evaluations. We also carry out our evaluations on two open source database projects, SQLite and PostgreSQL, to test the scalability of our tool since the scale of the embedded software project is mostly not large, 5K-50K lines of code on average. From our experimental results, in general, more than 90% of functions in commercial embedded software achieve 100% statement, branch, MC/DC coverage, more than 80% of functions in SQLite achieve 100% MC/DC coverage, and more than 60% of functions in PostgreSQL achieve 100% MC/DC coverage. Moreover, SmartUnit is able to find the runtime exceptions at the unit testing level. We also have reported exceptions like array index out of bounds and divided-by-zero in SQLite. Furthermore, we analyze the reasons of low coverage in automated unit testing in our setting and give a survey on the situation of manual unit testing with respect to automated unit testing in industry. SmartUnit is a dynamic symbolic execution implementation, which supports statement, branch, boundary value and MC/DC coverage. SmartUnit has been used to test more than one million lines of code in real projects. For confidentiality motives, we select three in-house real projects for the empirical evaluations. We also carry out our evaluations on two open source database projects, SQLite and PostgreSQL, to test the scalability of our tool since the scale of the embedded software project is mostly not large, 5K-50K lines of code on average. From our experimental results, in general, more than 90% of functions in commercial embedded software achieve 100% statement, branch, MC/DC coverage, more than 80% of functions in SQLite achieve 100% MC/DC coverage, and more than 60% of functions in PostgreSQL achieve 100% MC/DC coverage. Moreover, SmartUnit is able to find the runtime exceptions at the unit testing level. We also have reported exceptions like array index out of bounds and divided-by-zero in SQLite. Furthermore, we analyze the reasons of low coverage in automated unit testing in our setting and give a survey on the situation of manual unit testing with respect to automated unit testing in industry.",
              "pageNumber": 296,
              "isPageNumberRoman": false
            },
            {
              "id": "3aQNHBf4i2G5GPAgJgSgqV",
              "type": "authorPaper",
              "text": "What is the Connection Between Issues, Bugs, and Enhancements?",
              "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf",
              "extraLocations": [],
              "authorNames": "Rahul Krishna (North Carolina State University), Amritanshu Agrawal (North Carolina State University), Akond Rahman (North Carolina State University), Alexander Sobran (IBM Corp.), Timothy Menzies (North Carolina State University)",
              "abstract": "Agile teams juggle multiple tasks so professionals are often assigned to multiple projects, especially in service organizations that monitor and maintain large suites of software for a large user base. If we could predict changes in project conditions change, then managers could better adjust the staff allocated to those projects. This paper builds such a predictor using data from 832 open source and proprietary projects. Using a time series analysis of the last 4 months of issues, we can forecast how many bug reports and enhancement requests will be generated the next month. The forecasts made in this way only require a frequency count of these issue reports (and do not require an historical record of bugs found in the project). That is, this kind of predictive model is very easy to deploy within a project. We hence strongly recommend this method for forecasting future issues, enhancements, and bugs in a project.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Practice ICSE-SEIP 2018 What is the Connection Between Issues, Bugs, and Enhancements? 1518487806575 Rahul Krishna North Carolina State University i.m.ralk@gmail.com Amritanshu Agrawal North Carolina State University aagrawa8@ncsu.edu Akond Rahman North Carolina State University aarahman@ncsu.edu Alexander Sobran IBM Corp. asobran@us.ibm.com Timothy Menzies North Carolina State University tim@menzies.us Time series analysis Bugs Collaborations Issues Agile teams juggle multiple tasks so professionals are often assigned to multiple projects, especially in service organizations that monitor and maintain large suites of software for a large user base. If we could predict changes in project conditions change, then managers could better adjust the staff allocated to those projects. This paper builds such a predictor using data from 832 open source and proprietary projects. Using a time series analysis of the last 4 months of issues, we can forecast how many bug reports and enhancement requests will be generated the next month. The forecasts made in this way only require a frequency count of these issue reports (and do not require an historical record of bugs found in the project). That is, this kind of predictive model is very easy to deploy within a project. We hence strongly recommend this method for forecasting future issues, enhancements, and bugs in a project.",
              "pageNumber": 306,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        }
      ]
    },
    {
      "title": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society",
      "acronym": "ICSE-SEIS",
      "year": 2018,
      "frontMatter": [
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_I",
          "text": "Title Page i",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/IV0rqQgLRSoVb9ryMIeHD/Q5BWsZItl520Fl1yktVBf.pdf",
          "extraLocations": [],
          "pageNumber": 1,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TITLE_PAGE_III",
          "text": "Title Page iii",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/d0FxhfaXxODdxpxUBvOlA/5fw9MbPIZoGOnD1AHGtnEs.pdf",
          "extraLocations": [],
          "pageNumber": 3,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_COPYRIGHT_PAGE",
          "text": "Copyright Page",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6S2I61DfVVOXNDxb0N6leB/4KmScGM4TpqVToagGdM87W.pdf",
          "extraLocations": [],
          "pageNumber": 4,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_TABLE_OF_CONTENTS",
          "text": "Table of Contents",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/S5UM6QXUoeZbO2vysHJDF/6FkexF9gFRB9aLxyPNQllz.pdf",
          "extraLocations": [],
          "pageNumber": 5,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_GENERAL_CHAIR",
          "text": "Message from the General Chair",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/4f9bfcUlTQkRWDTSOnnI1R/4C7jvqoMcDyxOIguwCd6Ja.pdf",
          "extraLocations": [],
          "pageNumber": 7,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_MESSAGE_WORKSHOP_CHAIR",
          "text": "Message from the SEIS Chairs",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/3bXgQ0g5X4OG9sggD5PKZs/ZnWdmGCdRElxCEO1Dg28C.pdf",
          "extraLocations": [],
          "pageNumber": 10,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Software Engineering in Society Program Committee",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2TO7BpTice12cqiCZZiq7v/5pRmlYggiYybz9QL1BWyLJ.pdf",
          "extraLocations": [],
          "pageNumber": 11,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_WORKSHOPS_COMMITTEE",
          "text": "Software Engineering in Society Additional Reviewers",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/45AFpd6EQUbAa1IOH2kAAU/6D4U0mCFomMhqxNXTMxEgZ.pdf",
          "extraLocations": [],
          "pageNumber": 14,
          "isPageNumberRoman": true
        },
        {
          "class": "FM",
          "type": "FM_LON_SPONSORS_CONFERENCE_SUPPORT",
          "text": "Sponsors and Supporters",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/761xdVQJQvfxIT8QRMNLAJ/15Jy2ky9cJhvJUMVr8ofVF.pdf",
          "extraLocations": [],
          "pageNumber": 15,
          "isPageNumberRoman": true
        }
      ],
      "backMatter": [
        {
          "class": "BM",
          "type": "BM_AUTHOR_INDEX",
          "text": "Author Index",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5Er4NPEy0lga97TC9mkCDi/5ad1FOiWYJ8F755KnzSNm0.pdf",
          "extraLocations": [],
          "pageNumber": 95,
          "isPageNumberRoman": false
        },
        {
          "class": "BM",
          "type": "BM_ROSTER",
          "text": "Publisher's Information",
          "articleLocation": null,
          "extraLocations": [],
          "pageNumber": ""
        }
      ],
      "sections": [
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "SEIS Keynote",
          "lineItems": [
            {
              "id": "3eICGgQt8fZtzXVkwZY4iU",
              "type": "authorPaper",
              "text": "Software Heritage: Why and How We Collect, Preserve and Share All the Software Source Code",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/7MMxRx2XeqMINwIWWsmplT/4K8m85QOD25MipXvyPliC8.pdf",
              "extraLocations": [],
              "authorNames": "Roberto Di Cosmo (Software Heritage, Inria)",
              "abstract": "Software is at the heart of our digital society. It powers our industries,\nfuels innovation, mediates access to all digital information, is a\npillar of modern scientific research, and has enabled the emergence\nof new forms of social and political organizations—“code is law”, as\nLessig said [2].\nThe source code of this software is a unique form of knowledge:\nit is designed to be read by humans (the developers), and yet it is\nready to be translated into an executable form for a machine. As\nLen Shustek puts it, “Source code provides a view into the mind of\nthe designer” [3].\nSoftware source code is precious, and embodies a growing part\nof our scientific, technical and organisational knowledge.\nSoftware Heritage is an open, non-profit initiative whose mission\nis to ensure that this precious body of knowledge will be preserved\nover time and made available to all.We do this for multiple reasons.\nTo preserve the scientific and technological knowledge embedded in software source code, that is a precious part of our heritage. To allow better software development and reuse for society and industry, by building the largest and open software knowledge database, enabling the development of a broad range of value added applications.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Software Heritage: Why and How We Collect, Preserve and Share All the Software Source Code Roberto Di Cosmo Software Heritage, Inria Software is at the heart of our digital society. It powers our industries,\nfuels innovation, mediates access to all digital information, is a\npillar of modern scientific research, and has enabled the emergence\nof new forms of social and political organizations—“code is law”, as\nLessig said [2].\nThe source code of this software is a unique form of knowledge:\nit is designed to be read by humans (the developers), and yet it is\nready to be translated into an executable form for a machine. As\nLen Shustek puts it, “Source code provides a view into the mind of\nthe designer” [3].\nSoftware source code is precious, and embodies a growing part\nof our scientific, technical and organisational knowledge.\nSoftware Heritage is an open, non-profit initiative whose mission\nis to ensure that this precious body of knowledge will be preserved\nover time and made available to all.We do this for multiple reasons.\nTo preserve the scientific and technological knowledge embedded in software source code, that is a precious part of our heritage. To allow better software development and reuse for society and industry, by building the largest and open software knowledge database, enabling the development of a broad range of value added applications.",
              "pageNumber": 2,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": 1,
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Software By and For People",
          "lineItems": [
            {
              "id": "2gPKmaux0wTkZOx5Ori1eV",
              "type": "authorPaper",
              "text": "The Role of Foundations in Open Source Projects",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2Fs3L1M4Mm9GxjWCBfpSEU/5dCgP0GVMp8vJhDp3AxQXq.pdf",
              "extraLocations": [],
              "authorNames": "Javier Luis Cánovas Izquierdo (UOC), Jordi Cabot (ICREA - UOC)",
              "abstract": "In the last years, a number of Open-Source Systems (OSS) have created parallel foundations, as legal instruments to better articulate the structure, collaboration and financial model for the project. Some examples are Apache, Linux, Mozilla, Eclipse or Django foundations. Nevertheless, foundations largely differ in the kind of mission they have and the support they provide to their project/s. In this paper we study the role of foundations in open source software development. We analyze the nature of 89 software foundations and then focus on the 18 most relevant ones to study their openness and influence in the development practices taking place in the endorsed projects. Our results reveal the existence of a significant number of foundations with the sole purpose of promoting the importance of the free software movement and/or that limit themselves to core legal aspects but do not play any role in the day-to-day operations of the project (e.g., a few of them are just umbrella organizations for a large variety of projects). Therefore, while useful, foundations do not remove the need for specific projects to develop their own governance, contribution and development policies.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 The Role of Foundations in Open Source Projects 1518078174155 Javier Luis Cánovas Izquierdo UOC jcanovasi@uoc.edu Jordi Cabot ICREA - UOC jordi.cabot@icrea.cat Software Foundations Open-Source Software Open-Source Software Analysis In the last years, a number of Open-Source Systems (OSS) have created parallel foundations, as legal instruments to better articulate the structure, collaboration and financial model for the project. Some examples are Apache, Linux, Mozilla, Eclipse or Django foundations. Nevertheless, foundations largely differ in the kind of mission they have and the support they provide to their project/s. In this paper we study the role of foundations in open source software development. We analyze the nature of 89 software foundations and then focus on the 18 most relevant ones to study their openness and influence in the development practices taking place in the endorsed projects. Our results reveal the existence of a significant number of foundations with the sole purpose of promoting the importance of the free software movement and/or that limit themselves to core legal aspects but do not play any role in the day-to-day operations of the project (e.g., a few of them are just umbrella organizations for a large variety of projects). Therefore, while useful, foundations do not remove the need for specific projects to develop their own governance, contribution and development policies.",
              "pageNumber": 3,
              "isPageNumberRoman": false
            },
            {
              "id": "7wwZMPFf6zBpxG6Om7UiOF",
              "type": "authorPaper",
              "text": "User Feedback in the App Store: A Cross-Cultural Study",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf",
              "extraLocations": [],
              "authorNames": "Emitza Guzman (University of Zurich), Luís Oliveira (University of Zurich), Yves Steiner (University of Zurich), Laura C. Wagner (University of Zurich), Martin Glinz (Univeristy of Zurich)",
              "abstract": "App stores allow globally distributed users to submit user feedback, in the form of user reviews, about the apps they download. Previous research has found that many of these reviews contain valuable information for software evolution, such as bug reports or feature requests, and has designed approaches for automatically extracting this information. However, the diversity of the feedback submitted by users from diverse cultural backgrounds and the consequences this diversity might imply have not been studied so far. In this paper, we report on a cross-cultural study where we investigated cultural differences in app store reviews and identified correlations to cultural dimensions taken from a well-established cultural model. We analyzed 2,560 app reviews written by users from eight countries with diverse national culture. We contribute evidence about the influence of cultural factors on characteristics of app reviews. Our results also help developers of automated feedback analysis tools to avoid cultural bias when choosing their algorithms and the data for training and validating them.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 User Feedback in the App Store: A Cross-Cultural Study 1518479001656 Emitza Guzman University of Zurich guzman@ifi.uzh.ch Luís Oliveira University of Zurich luis.pinheiroolivera@uzh.ch Yves Steiner University of Zurich yves.steiner2@uzh.ch Laura C. Wagner University of Zurich laura.wagner@uzh.ch Martin Glinz Univeristy of Zurich glinz@ifi.uzh.ch User Feedback Feedback Analysis Culture Algorithm Bias Software Evolution App stores allow globally distributed users to submit user feedback, in the form of user reviews, about the apps they download. Previous research has found that many of these reviews contain valuable information for software evolution, such as bug reports or feature requests, and has designed approaches for automatically extracting this information. However, the diversity of the feedback submitted by users from diverse cultural backgrounds and the consequences this diversity might imply have not been studied so far. In this paper, we report on a cross-cultural study where we investigated cultural differences in app store reviews and identified correlations to cultural dimensions taken from a well-established cultural model. We analyzed 2,560 app reviews written by users from eight countries with diverse national culture. We contribute evidence about the influence of cultural factors on characteristics of app reviews. Our results also help developers of automated feedback analysis tools to avoid cultural bias when choosing their algorithms and the data for training and validating them.",
              "pageNumber": 13,
              "isPageNumberRoman": false
            },
            {
              "id": "7iF1G3ZuodRkTN0Cpp1shS",
              "type": "authorPaper",
              "text": "Assistive Computing: A Human-Centered Approach to Developing Computing Support for Cognition",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/51dPudqO9FxekQWC0DEXSE/2nwQwvhyFdHxu4mt2lRkC3.pdf",
              "extraLocations": [],
              "authorNames": "Charles Consel (Bordeaux Institute of Technology / Inria)",
              "abstract": "The growing population of cognitively impaired individuals calls for the emergence of a research area dedicated to developing computing systems that address their needs. The nature of this research area requires to bridge the many disciplines needed to develop human-centered, assistive computing systems. Such bridging may seem unattainable considering the conceptual and practical gaps between the related disciplines and the challenges of propagating human-related concerns throughout the many stages of the development process of assistive technologies. As a consequence, existing assistive technologies lack a proper needs analysis; their development is often driven by technology concerns, resulting in ill-designed and stereotype-biased systems; and, most of them are not tested for their effectiveness in assisting users. In this paper, we propose a systematic exploration of this vast challenge. First, we define Assistive Computing as a research area and propose key principles to drive its study. Then, we introduce a tool-based methodology dedicated to developing assistive computing support, integrating a range of disciplines from human-related sciences to computer science. This methodology is purposefully pragmatic in that it leverages, aggregates and revisits numerous research results, concretizing it with a range of examples. More generally, our goal is i) to provide a framework to conduct research in the area of Assistive Computing and ii) to identify the necessary bridges between disciplines to account for all the dimensions of such systems.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Assistive Computing: A Human-Centered Approach to Developing Computing Support for Cognition 1517843276731 Charles Consel Bordeaux Institute of Technology / Inria charles.consel@inria.fr Interdisciplinary research Assistive computing support Cognitive impairment User centered software development The growing population of cognitively impaired individuals calls for the emergence of a research area dedicated to developing computing systems that address their needs. The nature of this research area requires to bridge the many disciplines needed to develop human-centered, assistive computing systems. Such bridging may seem unattainable considering the conceptual and practical gaps between the related disciplines and the challenges of propagating human-related concerns throughout the many stages of the development process of assistive technologies. As a consequence, existing assistive technologies lack a proper needs analysis; their development is often driven by technology concerns, resulting in ill-designed and stereotype-biased systems; and, most of them are not tested for their effectiveness in assisting users. In this paper, we propose a systematic exploration of this vast challenge. First, we define Assistive Computing as a research area and propose key principles to drive its study. Then, we introduce a tool-based methodology dedicated to developing assistive computing support, integrating a range of disciplines from human-related sciences to computer science. This methodology is purposefully pragmatic in that it leverages, aggregates and revisits numerous research results, concretizing it with a range of examples. More generally, our goal is i) to provide a framework to conduct research in the area of Assistive Computing and ii) to identify the necessary bridges between disciplines to account for all the dimensions of such systems.",
              "pageNumber": 23,
              "isPageNumberRoman": false
            },
            {
              "id": "6iFexLyT8WpWpzWHLx7OXm",
              "type": "authorPaper",
              "text": "Agile Development for Vulnerable Populations: Lessons Learned and Recommendations",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/4vVEkUWJgiIATBNw59KzXa/1wabQ7wZRXCzAhEzzMMyi5.pdf",
              "extraLocations": [],
              "authorNames": "Marcos Baez (University of Trento), Fabio Casati (University of Trento)",
              "abstract": "In this paper we draw attention to the challenges of managing software projects for vulnerable populations, i.e., people potentially exposed to harm or not capable of protecting their own interests. The focus on human aspects, and particularly, the inclusion of human-centered approaches, has been a popular topic in the soft-ware engineering community. We argue, however, that current literature provides little understanding and guidance on how to approach these type of scenarios. Here, we shed some light on the topic by reporting on our experiences in developing innovative solutions for the residential care scenario, outlining potential issues and recommendations.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Agile Development for Vulnerable Populations: Lessons Learned and Recommendations Marcos Baez University of Trento baez@disi.unitn.it Fabio Casati University of Trento fabio.casati@unitn.it Agile development human centered design vulnerable populations In this paper we draw attention to the challenges of managing software projects for vulnerable populations, i.e., people potentially exposed to harm or not capable of protecting their own interests. The focus on human aspects, and particularly, the inclusion of human-centered approaches, has been a popular topic in the soft-ware engineering community. We argue, however, that current literature provides little understanding and guidance on how to approach these type of scenarios. Here, we shed some light on the topic by reporting on our experiences in developing innovative solutions for the residential care scenario, outlining potential issues and recommendations.",
              "pageNumber": 33,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Software Development for the Regulated and Public Sectors",
          "lineItems": [
            {
              "id": "1G5NnBSPPwv9Kp3vtwPdZq",
              "type": "authorPaper",
              "text": "Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2GtTmXlTVQhcRkpEo1qoQM/3BK0YgK2oP3ZJ3spCM5BS8.pdf",
              "extraLocations": [],
              "authorNames": "Markus Borg (RISE SICS AB), Thomas Olsson (RISE SICS AB), Ulrik Franke (RISE SICS AB), Saïd Assar (IMT Business School)",
              "abstract": "Software engineering is at the core of the digitalization of society. Ill-informed decisions can have major consequences, as made evident in the 2017 government crisis in Sweden, originating in a data breach caused by an outsourcing deal made by the Swedish Transport Agency. Many Government Agencies (GovAgs) in Sweden are rapidly undergoing a digital transition, thus it is important to overview how widespread, and mature, software development is in this part of the public sector. We present a software development census of Swedish GovAgs, complemented by document analysis and a survey. We show that 39.2% of the GovAgs develop software internally, some matching the number of developers in large companies. Our findings suggest that the development largely resembles private sector counterparts, and that established best practices are implemented. Still, we identify improvement potential in the areas of strategic sourcing, openness, collaboration across GovAgs, and quality requirements. The Swedish Government has announced the establishment of a new digitalization agency next year, and our hope is that the software engineering community will contribute its expertise with a clear voice.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census 1517834959310 Markus Borg RISE SICS AB markus.borg@ri.se Thomas Olsson RISE SICS AB thomas.olsson@ri.se Ulrik Franke RISE SICS AB ulrik.franke@ri.se Saïd Assar IMT Business School said.assar@telecom-em.eu software engineering public sector digital government census Software engineering is at the core of the digitalization of society. Ill-informed decisions can have major consequences, as made evident in the 2017 government crisis in Sweden, originating in a data breach caused by an outsourcing deal made by the Swedish Transport Agency. Many Government Agencies (GovAgs) in Sweden are rapidly undergoing a digital transition, thus it is important to overview how widespread, and mature, software development is in this part of the public sector. We present a software development census of Swedish GovAgs, complemented by document analysis and a survey. We show that 39.2% of the GovAgs develop software internally, some matching the number of developers in large companies. Our findings suggest that the development largely resembles private sector counterparts, and that established best practices are implemented. Still, we identify improvement potential in the areas of strategic sourcing, openness, collaboration across GovAgs, and quality requirements. The Swedish Government has announced the establishment of a new digitalization agency next year, and our hope is that the software engineering community will contribute its expertise with a clear voice.",
              "pageNumber": 37,
              "isPageNumberRoman": false
            },
            {
              "id": "4WsGpdVHeqp3d0Y7zYrxdU",
              "type": "authorPaper",
              "text": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf",
              "extraLocations": [],
              "authorNames": "Daniel Russo (University of Bologna), Gerolamo Taccogna (University of Genoa), Paolo Ciancarini (University of Bologna), Angelo Messina (Innopolis University), Giancarlo Succi (Innopolis University)",
              "abstract": "Although Agile is a well established software development paradigm, major concerns arise when it comes to contracting issues between a software consumer and a software producer. How to contractualize the Agile production of software, especially for security &amp; mission critical organizations, which typically outsource software projects, has been a major concern since the beginning of the \"\"Agile Era\"\". In literature, little has been done, from a foundational point of view regarding the formalization of such contracts. Indeed, when the development is outsourced, the management of the contractual life is non–trivial. This happens because the interests of the two parties are typically not aligned. In these situations, software houses strive for the minimization of the effort, while the customer commonly expects high quality artifacts. This structural asymmetry can hardly be overcome with traditional \"\"Waterfall\"\" contracts. In this work, we propose a foundational approach to the Law &amp; Economics of Agile contracts. Moreover, we explore the key elements of the Italian procurement law and outline a suitable solution to merge some basic legal constraints with Agile requirements. Finally, a case study is presented, describing how Agile contracting has been concretely implemented in the Italian Defense Acquisition Process. This work is intended to be a framework for Agile contracts for the Italian public sector of critical systems, according to the new contractual law (Codice degli Appalti).",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Contracting Agile Developments for Mission Critical Systems in the Public Sector 1518454015474 Daniel Russo University of Bologna daniel.russo@unibo.it Gerolamo Taccogna University of Genoa g.taccogna@unige.it Paolo Ciancarini University of Bologna paolo.ciancarini@unibo.it Angelo Messina Innopolis University a.messina@innopolis.ru Giancarlo Succi Innopolis University g.succi@innopolis.ru Software Engineering Agile Agile Contracts Contracting Law &amp; Economics Public Sector Although Agile is a well established software development paradigm, major concerns arise when it comes to contracting issues between a software consumer and a software producer. How to contractualize the Agile production of software, especially for security &amp; mission critical organizations, which typically outsource software projects, has been a major concern since the beginning of the \"\"Agile Era\"\". In literature, little has been done, from a foundational point of view regarding the formalization of such contracts. Indeed, when the development is outsourced, the management of the contractual life is non–trivial. This happens because the interests of the two parties are typically not aligned. In these situations, software houses strive for the minimization of the effort, while the customer commonly expects high quality artifacts. This structural asymmetry can hardly be overcome with traditional \"\"Waterfall\"\" contracts. In this work, we propose a foundational approach to the Law &amp; Economics of Agile contracts. Moreover, we explore the key elements of the Italian procurement law and outline a suitable solution to merge some basic legal constraints with Agile requirements. Finally, a case study is presented, describing how Agile contracting has been concretely implemented in the Italian Defense Acquisition Process. This work is intended to be a framework for Agile contracts for the Italian public sector of critical systems, according to the new contractual law (Codice degli Appalti).",
              "pageNumber": 47,
              "isPageNumberRoman": false
            },
            {
              "id": "4o2rxtTmyzPNe78atHIwAU",
              "type": "authorPaper",
              "text": "Resolving Ambiguities in Regulations: Towards Achieving the Kohlbergian Stage of Principled Morality",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/69icpikVftpm7I1bG2Rw90/5etwQxKickKUsDOy6kRsul.pdf",
              "extraLocations": [],
              "authorNames": "Smita Ghaisas (Tata Research Development and Design Center (TCS Research)), Abhishek Sainani (Tata Research Development and Design Center (TCS Research)), Preethu Rose Anish (Tata Research Development and Design Center (TCS Research))",
              "abstract": "According to Kohlberg, the final stage of morality is characterized by viewing laws as a means to an end by upholding values such as human dignity and fairness as guiding principles for complying with the essence of the law. Given that purpose of compliance is indeed wellbeing of citizens, software systems should, by design, incorporate these values so that laws are followed in spirit. How can we build software systems that incorporate these values? We present our work on disambiguating Health Insurance Portability and Accountability Act (HIPAA) so as to reduce the potential incidents of breach, thereby upholding of the aforesaid guiding principles of morality. We have employed deep learning based approaches to emulate the human process of disambiguation by integrating information from multiple sources, summarizing it, and augmenting the regulatory text with the additional information. This augmented regulatory text can be used by policy makers and software engineers to achieve compliance in spirit.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Resolving Ambiguities in Regulations: Towards Achieving the Kohlbergian Stage of Principled Morality 1518366048526 Smita Ghaisas Tata Research Development and Design Center (TCS Research) smita.ghaisas@tcs.com Abhishek Sainani Tata Research Development and Design Center (TCS Research) a.sainani@tcs.com Preethu Rose Anish Tata Research Development and Design Center (TCS Research) preethu.rose@tcs.com Regulations Ambiguity Resolution Principled Morality Deep Learning Compliance According to Kohlberg, the final stage of morality is characterized by viewing laws as a means to an end by upholding values such as human dignity and fairness as guiding principles for complying with the essence of the law. Given that purpose of compliance is indeed wellbeing of citizens, software systems should, by design, incorporate these values so that laws are followed in spirit. How can we build software systems that incorporate these values? We present our work on disambiguating Health Insurance Portability and Accountability Act (HIPAA) so as to reduce the potential incidents of breach, thereby upholding of the aforesaid guiding principles of morality. We have employed deep learning based approaches to emulate the human process of disambiguation by integrating information from multiple sources, summarizing it, and augmenting the regulatory text with the additional information. This augmented regulatory text can be used by policy makers and software engineers to achieve compliance in spirit.",
              "pageNumber": 57,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        },
        {
          "class": "SD",
          "type": "SD_SESSION",
          "title": "Meeting Other Sciences",
          "lineItems": [
            {
              "id": "6FVQCoBJe5d4UUPUL1Vs4g",
              "type": "authorPaper",
              "text": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf",
              "extraLocations": [],
              "authorNames": "William Simm (Lancaster University), Faiza Samreen (Lancaster University), Richard Bassett (Lancaster University), Maria Angela Ferrario (Lancaster University), Gordon Blair (Lancaster University), Jon Whittle (Monash University), Paul Young (Lancaster University)",
              "abstract": "New and emergent computing architectures and software engineering practices provide an opportunity for environmental models to be deployed more efficiently and democratically. In this paper we aim to capture the software engineering practices of environmental scientists, highlight opportunities for software engineering and work towards developing a domain specific language for the configuration and deployment of environmental models. We hold a series of interviews with environmental scientists involved in developing and deploying computer based environmental models about the approach taken in engineering models, and describe a case study in deploying an environmental model (WRF: Weather Research &amp; Forecasting) on a cloud architecture. From these studies we find a number of opportunities for A) software engineering methods and tools such as Domain Specific Languages to play a role in abstracting from underlying computing complexity, and for B) new architectures to increase efficiency and availability of deployment. Together, we propose they will allow scientists to concentrate on fundamental science rather than specifics of the underlying computing.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science 1518183475561 William Simm Lancaster University w.simm@lancaster.ac.uk Faiza Samreen Lancaster University f.samreen@lancaster.ac.uk Richard Bassett Lancaster University r.bassett@lancaster.ac.uk Maria Angela Ferrario Lancaster University m.a.ferrario@lancaster.ac.uk Gordon Blair Lancaster University g.blair@lancaster.ac.uk Jon Whittle Monash University jon.whittle@monash.edu Paul Young Lancaster University p.j.young@lancaster.ac.uk Environmental Science Model Driven Engineering Cloud Comput ing Environmental Modelling WRF New and emergent computing architectures and software engineering practices provide an opportunity for environmental models to be deployed more efficiently and democratically. In this paper we aim to capture the software engineering practices of environmental scientists, highlight opportunities for software engineering and work towards developing a domain specific language for the configuration and deployment of environmental models. We hold a series of interviews with environmental scientists involved in developing and deploying computer based environmental models about the approach taken in engineering models, and describe a case study in deploying an environmental model (WRF: Weather Research &amp; Forecasting) on a cloud architecture. From these studies we find a number of opportunities for A) software engineering methods and tools such as Domain Specific Languages to play a role in abstracting from underlying computing complexity, and for B) new architectures to increase efficiency and availability of deployment. Together, we propose they will allow scientists to concentrate on fundamental science rather than specifics of the underlying computing.",
              "pageNumber": 61,
              "isPageNumberRoman": false
            },
            {
              "id": "XUyCImXrTfpMxoqhpZuKT",
              "type": "authorPaper",
              "text": "Towards a Unified Conceptual Model for Surveillance Theories: \"We Shall Meet in the Place Where There is no Darkness\" - 1984, George Orwell",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/20y7t4eueufhr1eP4eNGPi/4mL8XsAM9N3XHllWNOFWVD.pdf",
              "extraLocations": [],
              "authorNames": "Balbir Barn (Middlesex University), Ravinder Barn (Royal Holloway University)",
              "abstract": "The erosion of values such as privacy can be a critical factor in preventing the acceptance of new innovative technology especially in challenging environments such as the criminal justice system. Erosion of privacy happens through either deliberate or inadvertent surveillance. Since Bentham's original liberal project in the 1900s, a literature and a whole study area around theories of surveillance has developed. Increasingly this general body of work has focussed on the role of information technology as a vehicle for surveillance activity. Despite an abundance of knowledge, a uni ed view of key surveillance concepts that is useful to designers of information systems in preventing or reducing unintended surveillance remains elusive. This paper contributes a conceptual model that synthesises the gamut of surveillance theories as a rst step to a theory building e ort for use by Information Systems professionals. The model is evaluated using a design science research paradigm using data from both examples of surveillance and a recently completed research project that developed technology for the UK youth justice system.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Towards a Unified Conceptual Model for Surveillance Theories: \"We Shall Meet in the Place Where There is no Darkness\" - 1984, George Orwell 1518434001351 Balbir Barn Middlesex University b.barn@mdx.ac.uk Ravinder Barn Royal Holloway University r.barn@rhul.ac.uk Surveillance Conceptual Model Reference Model Privacy The erosion of values such as privacy can be a critical factor in preventing the acceptance of new innovative technology especially in challenging environments such as the criminal justice system. Erosion of privacy happens through either deliberate or inadvertent surveillance. Since Bentham's original liberal project in the 1900s, a literature and a whole study area around theories of surveillance has developed. Increasingly this general body of work has focussed on the role of information technology as a vehicle for surveillance activity. Despite an abundance of knowledge, a uni ed view of key surveillance concepts that is useful to designers of information systems in preventing or reducing unintended surveillance remains elusive. This paper contributes a conceptual model that synthesises the gamut of surveillance theories as a rst step to a theory building e ort for use by Information Systems professionals. The model is evaluated using a design science research paradigm using data from both examples of surveillance and a recently completed research project that developed technology for the UK youth justice system.",
              "pageNumber": 71,
              "isPageNumberRoman": false
            },
            {
              "id": "1FFUkoVP1QvolbyQifQmUV",
              "type": "authorPaper",
              "text": "Competence-Confidence Gap: A Threat to Female Developers' Contribution on GitHub",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/42E4u7nqMTEXx7aNqWt2ao/5AnfXp47j7QWL1W5yQMac8.pdf",
              "extraLocations": [],
              "authorNames": "Zhendong Wang (University of California, Irvine), Yi Wang (Rochester Institute of Technology), David Redmiles (University of California, Irvine)",
              "abstract": "On GitHub, contributing to a new project is crucial for a developer to gain personal growth and maximize impact in the community. It is known that female developers are often hesitant to explore the opportunities to contribute to new projects even when they possess the competence to make valuable contributions. Drawing from the literature of the competence-confidence gap, we develop a fresh explanation for this phenomenon. We validate the theoretical explanation through an empirical study using GitHub's historical data. In this study, we identify all female developers ranking in top 5,000 GitHub users. Using the Granger Causality Test, we find that, for the majority of identified female developers, initiating a pull request to a new repository is \"Granger\" caused by the quick increase of followers in the preceding couple of weeks. For most male developers, our observations show that their new pull requests have no relationship with the dynamics of follower numbers. The results indicate that the competence-confidence gap is a threat to female developers' contribution on GitHub. The research suggests that helping female developers to overcome the competence-confidence gap is critical for encouraging female's contribution open source development, as well as growing their reputations and impacts in the community.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Competence-Confidence Gap: A Threat to Female Developers' Contribution on GitHub 1518121779157 Zhendong Wang University of California, Irvine zhendow@uci.edu Yi Wang Rochester Institute of Technology yi.wang@rit.edu David Redmiles University of California, Irvine redmiles@ics.uci.edu Female Developers Competence-Confidence Gap Granger Casuality GitHub On GitHub, contributing to a new project is crucial for a developer to gain personal growth and maximize impact in the community. It is known that female developers are often hesitant to explore the opportunities to contribute to new projects even when they possess the competence to make valuable contributions. Drawing from the literature of the competence-confidence gap, we develop a fresh explanation for this phenomenon. We validate the theoretical explanation through an empirical study using GitHub's historical data. In this study, we identify all female developers ranking in top 5,000 GitHub users. Using the Granger Causality Test, we find that, for the majority of identified female developers, initiating a pull request to a new repository is \"Granger\" caused by the quick increase of followers in the preceding couple of weeks. For most male developers, our observations show that their new pull requests have no relationship with the dynamics of follower numbers. The results indicate that the competence-confidence gap is a threat to female developers' contribution on GitHub. The research suggests that helping female developers to overcome the competence-confidence gap is critical for encouraging female's contribution open source development, as well as growing their reputations and impacts in the community.",
              "pageNumber": 81,
              "isPageNumberRoman": false
            },
            {
              "id": "29BkPCxtgxt3oy1Rzr5X51",
              "type": "authorPaper",
              "text": "Digital Ecclesia: Towards an Online Direct-Democracy Framework",
              "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6M31FF5UQim1FkKMBVcvNp/1ziXArtAC8fJVE4o6UnCxx.pdf",
              "extraLocations": [],
              "authorNames": "Dionysis Athanasopoulos (Victoria University of Wellington)",
              "abstract": "Citizens envision the transition from the representative democracy to the online direct democracy. Inspired by the ancient Athenians' direct democracy, we propose an initial version of the framework Digital Ecclesia. We model the Digital Ecclesia as a social network that offers dynamic and large-scale reachability of citizens. Citizens are dynamically notified to participate and vote on discussion topics of new working groups. To address scalability and privacy challenges, the architecture of the Digital Ecclesia is distributed, i.e. each node runs a local program with its own storage that executes the voting procedure in parallel with other nodes. Nodes communicate to each other via exchanging encrypted messages in a scalable manner. We model the voting procedure as a non-cooperative game and we specify an algorithm for employing the voting game in a distributed fashion. Finally, we conduct the preliminary evaluation of the algorithm on a corpus of real-world votes.",
              "searchText": "2018 ACM/IEEE 40th International Conference on Software Engineering: Software Engineering in Society ICSE-SEIS 2018 Digital Ecclesia: Towards an Online Direct-Democracy Framework 1518389353610 Dionysis Athanasopoulos Victoria University of Wellington dionysis.athanasopoulos@ecs.vuw.ac.nz Distributed message-passing model game theory scalability Citizens envision the transition from the representative democracy to the online direct democracy. Inspired by the ancient Athenians' direct democracy, we propose an initial version of the framework Digital Ecclesia. We model the Digital Ecclesia as a social network that offers dynamic and large-scale reachability of citizens. Citizens are dynamically notified to participate and vote on discussion topics of new working groups. To address scalability and privacy challenges, the architecture of the Digital Ecclesia is distributed, i.e. each node runs a local program with its own storage that executes the voting procedure in parallel with other nodes. Nodes communicate to each other via exchanging encrypted messages in a scalable manner. We model the voting procedure as a non-cooperative game and we specify an algorithm for employing the voting game in a distributed fashion. Finally, we conduct the preliminary evaluation of the algorithm on a corpus of real-world votes.",
              "pageNumber": 91,
              "isPageNumberRoman": false
            }
          ],
          "pageNumber": "",
          "isPageNumberRoman": false
        }
      ]
    }
  ],
  "authors": [
    {
      "author": {
        "givenName": "Raja Ben",
        "surname": "Abdessalem"
      },
      "authorName": "Abdessalem, Raja Ben",
      "articleRefs": [
        {
          "pageNumber": 1016,
          "articleName": "Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/VwB38GE70VKZwyWn3vYpD/2vNhnZhaJwrULtleN0eIAX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Negarsadat",
        "surname": "Abolhassani"
      },
      "authorName": "Abolhassani, Negarsadat",
      "articleRefs": [
        {
          "pageNumber": 140,
          "articleName": "Automated Repair of Mobile Friendly Problems in Web Pages",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6AsOqvoJNpU0u12eBMc4m9/23Ce40gydrYlLzkd7LB4it.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rui",
        "surname": "Abreu"
      },
      "authorName": "Abreu, Rui",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Poster: A Qualitative Reasoning Approach to Spectrum-Based Fault Localization",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2h6LH9L5MS3wsT4Q4V1wAI/6erzsSt4H2Rd37rbKcp06x.pdf"
        },
        {
          "pageNumber": 400,
          "articleName": "Poster: Measuring the Energy Footprint of Mobile Testing Frameworks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4HNfKbEgki6GpTrNlMKiXX/4Z92r470jWnT8EFS5QPFcT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniel",
        "surname": "Aceituna"
      },
      "authorName": "Aceituna, Daniel",
      "articleRefs": [
        {
          "pageNumber": 910,
          "articleName": "A Combinatorial Approach for Exposing Off-Nominal Behaviors",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1niPYcBs9KMjWLu6UZNJfB/2u0THsBx1px4D7wndMcz96.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mathieu",
        "surname": "Acher"
      },
      "authorName": "Acher, Mathieu",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "Poster: Multimorphic Testing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/uzXACjp9SwFasi2pVULVp/4Acd9HUX23SsFtwgf1MOHh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Silvia T.",
        "surname": "Acuña"
      },
      "authorName": "Acuña, Silvia T.",
      "articleRefs": [
        {
          "pageNumber": 232,
          "articleName": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nabil",
        "surname": "Adam"
      },
      "authorName": "Adam, Nabil",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bram",
        "surname": "Adams"
      },
      "authorName": "Adams, Bram",
      "articleRefs": [
        {
          "pageNumber": 705,
          "articleName": "Do Programmers Work at Night or During the Weekend?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3PZI2iH7OZcqmfOhovoPWi/4jMoJeCniCPfvSDteaaNux.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ayesha",
        "surname": "Afzal"
      },
      "authorName": "Afzal, Ayesha",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Amritanshu",
        "surname": "Agrawal"
      },
      "authorName": "Agrawal, Amritanshu",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/mM2flyVIs1e0wGU98L8VQ/xU4OW2h5F9cUBJIgIMkYY.pdf"
        },
        {
          "pageNumber": 306,
          "articleName": "What is the Connection Between Issues, Bugs, and Enhancements?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf"
        },
        {
          "pageNumber": 1050,
          "articleName": "Is \"Better Data\" Better Than \"Better Data Miners\"?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hzCUfPHZDYwOVdpeABHj9/5kDwErSTWTzzBsrepPdBwv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nazareno",
        "surname": "Aguirre"
      },
      "authorName": "Aguirre, Nazareno",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Manzoor",
        "surname": "Ahmad"
      },
      "authorName": "Ahmad, Manzoor",
      "articleRefs": [
        {
          "pageNumber": 368,
          "articleName": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Syed",
        "surname": "Ahmed"
      },
      "authorName": "Ahmed, Syed",
      "articleRefs": [
        {
          "pageNumber": 206,
          "articleName": "Poster: Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7MLLCasUAOaMfVBTbfYztV/3klSThcA5OaZugEDIiq481.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Umair Z.",
        "surname": "Ahmed"
      },
      "authorName": "Ahmed, Umair Z.",
      "articleRefs": [
        {
          "pageNumber": 78,
          "articleName": "Compilation Error Repair: For the Student Programs, From the Student Programs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shinyoung",
        "surname": "Ahn"
      },
      "authorName": "Ahn, Shinyoung",
      "articleRefs": [
        {
          "pageNumber": 191,
          "articleName": "Poster: A Novel Shared Memory Framework for Distributed Deep Learning in High-Performance Computing Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4GBiV7oWzIbIvJix13pn3z/7quQVnDh9et2QZuKi3KF8X.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nemitari",
        "surname": "Ajienka"
      },
      "authorName": "Ajienka, Nemitari",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "[Journal First] An Empirical Study on the Interplay Between Semantic Coupling and Co-change of Software Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4daDPdF3SLwTXzMDDUsn1K/6WppK0TRL3zRRr0ITDSe93.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shoaib",
        "surname": "Akbar"
      },
      "authorName": "Akbar, Shoaib",
      "articleRefs": [
        {
          "pageNumber": 147,
          "articleName": "Poster: Improving Formation of Student Teams: A Clustering Approach",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6OdCnFISWjwpH1KZizzaXP/2kocifGfEnvPAE8UATEbgY.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ahmad",
        "surname": "Akhtar"
      },
      "authorName": "Akhtar, Ahmad",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eman",
        "surname": "Aldakheel"
      },
      "authorName": "Aldakheel, Eman",
      "articleRefs": [
        {
          "pageNumber": 512,
          "articleName": "Deadlock Detector and Solver (DDS)",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4LhwjjNo4lCDQtbPpFD5FB/7moreI11zxtiZIHNWYU0EH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gustavo",
        "surname": "Alexandre"
      },
      "authorName": "Alexandre, Gustavo",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Poster: PBL Planner Toolkit: A Canvas-Based Tool for Planning PBL in Software Engineering Education",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/15IAOS4OM0MqkTTIVni2qx/6QEzzL7DSYKJYAOVdmf40C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Karim",
        "surname": "Ali"
      },
      "authorName": "Ali, Karim",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shaukat",
        "surname": "Ali"
      },
      "authorName": "Ali, Shaukat",
      "articleRefs": [
        {
          "pageNumber": 1243,
          "articleName": "[Journal First] Automated Refactoring of OCL Constraints with Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7cJGdYhKy3K17vTHSANryU/39zsgbNVg02BjEkeFH5d3S.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Muhammad",
        "surname": "Ali Babar"
      },
      "authorName": "Ali Babar, Muhammad",
      "articleRefs": [
        {
          "pageNumber": 1207,
          "articleName": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Saba",
        "surname": "Alimadadi"
      },
      "authorName": "Alimadadi, Saba",
      "articleRefs": [
        {
          "pageNumber": 776,
          "articleName": "Inferring Hierarchical Motifs from Execution Traces",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TTXoZtYTdhZLsqHykC3ZK/3TvbLeZaB2ApWjzhC0Nfly.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fahed",
        "surname": "Alkhabbas"
      },
      "authorName": "Alkhabbas, Fahed",
      "articleRefs": [
        {
          "pageNumber": 448,
          "articleName": "An Approach to Engineer and Realize Emergent Configurations in the Internet of Things",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2B0sfqIDyxpMbt669xKL1h/1xasZ4y5RwS7fT5k0X7je5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Meghan",
        "surname": "Allen"
      },
      "authorName": "Allen, Meghan",
      "articleRefs": [
        {
          "pageNumber": 31,
          "articleName": "Dimensions of Experientialism for Software Engineering Education",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/605U6RSfff0jOaGLn2b2pi/6Exq3LcKAqn1jIVxLN55aJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Luis",
        "surname": "Alonso"
      },
      "authorName": "Alonso, Luis",
      "articleRefs": [
        {
          "pageNumber": 199,
          "articleName": "Poster: Analysis of Requirements Quality Evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Oka6DtRrIRdQoPXKe3Y2t/1Sod1yVld1RpM3H1H2IQs3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dalal",
        "surname": "Alrajeh"
      },
      "authorName": "Alrajeh, Dalal",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bilal",
        "surname": "Amir"
      },
      "authorName": "Amir, Bilal",
      "articleRefs": [
        {
          "pageNumber": 344,
          "articleName": "Poster: There is no Random Sampling in Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5msns8eXuL9pIbElcgfmgG/6uDGJK7nkoo5B3rnrF4pIV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Haley",
        "surname": "Anderson"
      },
      "authorName": "Anderson, Haley",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Artur",
        "surname": "Andrzejak"
      },
      "authorName": "Andrzejak, Artur",
      "articleRefs": [
        {
          "pageNumber": 410,
          "articleName": "Poster: Memory and Resource Leak Defects in Java Projects: An Empirical Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2f9wrt7uGagtPEL8BMtuH/6fG2npcpWprcKQHHzpzUwr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mauricio",
        "surname": "Aniche"
      },
      "authorName": "Aniche, Mauricio",
      "articleRefs": [
        {
          "pageNumber": 561,
          "articleName": "Understanding Developers' Needs on Deprecation as a Language Feature",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2P1QIz0vZHnpdIEQ9etDfn/70WC3YCsckq6uPXtWKXnDs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maurício",
        "surname": "Aniche"
      },
      "authorName": "Aniche, Maurício",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5SLpOxrOC7MRElPGBMwNp4/5cFXN3dt0iFNy5h7oQMqXT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Preethu Rose",
        "surname": "Anish"
      },
      "authorName": "Anish, Preethu Rose",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Resolving Ambiguities in Regulations: Towards Achieving the Kohlbergian Stage of Principled Morality",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/69icpikVftpm7I1bG2Rw90/5etwQxKickKUsDOy6kRsul.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Craig",
        "surname": "Anslow"
      },
      "authorName": "Anslow, Craig",
      "articleRefs": [
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pauline",
        "surname": "Anthonysamy"
      },
      "authorName": "Anthonysamy, Pauline",
      "articleRefs": [
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pablo Oliveira",
        "surname": "Antonino de Assis"
      },
      "authorName": "Antonino de Assis, Pablo Oliveira",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Giuliano",
        "surname": "Antoniol"
      },
      "authorName": "Antoniol, Giuliano",
      "articleRefs": [
        {
          "pageNumber": 59,
          "articleName": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mohd",
        "surname": "Arafat"
      },
      "authorName": "Arafat, Mohd",
      "articleRefs": [
        {
          "pageNumber": 202,
          "articleName": "Poster: Using Consensus to Automatically Infer Post-conditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NFYtBAksKon0AZDQ3kNzF/7glFe6P53311LKbIKeoEJy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Azat",
        "surname": "Aralbay Uulu"
      },
      "authorName": "Aralbay Uulu, Azat",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gustavo",
        "surname": "Arango-Argoty"
      },
      "authorName": "Arango-Argoty, Gustavo",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Secure Coding Practices in Java: Challenges and Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3o2zXw08GLZHHzo4KXdBon/1sIzAZUbSd0wvJ0Yz0jFNw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "João",
        "surname": "Araújo"
      },
      "authorName": "Araújo, João",
      "articleRefs": [
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Francesca",
        "surname": "Arcelli Fontana"
      },
      "authorName": "Arcelli Fontana, Francesca",
      "articleRefs": [
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrea",
        "surname": "Arcuri"
      },
      "authorName": "Arcuri, Andrea",
      "articleRefs": [
        {
          "pageNumber": 1065,
          "articleName": "[Journal First] Journal First Presentation of an Experience Report on Applying Software Testing Academic Results in Industry: We Need Usable Automated Test Generation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1FIQLH1yd9XWgg2hiGZiPf/1ryHdgPhETG0NLG0KYTAeF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Danilo",
        "surname": "Ardagna"
      },
      "authorName": "Ardagna, Danilo",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "[Journal First] Experiences and Challenges in Building a Data Intensive System for Data Migration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2XogMA7rD6MGSKQNdBeJYp/7E58nTNchsf4cLz0RCgWQK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Syed S.",
        "surname": "Arefin"
      },
      "authorName": "Arefin, Syed S.",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jAtRSWcHJcJZLW9lwLKTT/3ZbcW64L99h5TIvUQiBeJI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Muhammad Moiz",
        "surname": "Arif"
      },
      "authorName": "Arif, Muhammad Moiz",
      "articleRefs": [
        {
          "pageNumber": 822,
          "articleName": "[Journal First] Empirical Study on the Discrepancy Between Performance Testing Results from Virtual and Physical Environments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5dzewdYm8fckCzQjpRCjmg/7gDFgjNlZ9YHeIL4bQ4bMr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ameer",
        "surname": "Armaly"
      },
      "authorName": "Armaly, Ameer",
      "articleRefs": [
        {
          "pageNumber": 788,
          "articleName": "[Journal First] A Comparison of Program Comprehension Strategies by Blind and Sighted Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6L8BvympA8qNy2olAr6lux/L085iQAOXSGrvjP6JWaUM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcelo",
        "surname": "Arroyo"
      },
      "authorName": "Arroyo, Marcelo",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Saïd",
        "surname": "Assar"
      },
      "authorName": "Assar, Saïd",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2GtTmXlTVQhcRkpEo1qoQM/3BK0YgK2oP3ZJ3spCM5BS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nour",
        "surname": "Assy"
      },
      "authorName": "Assy, Nour",
      "articleRefs": [
        {
          "pageNumber": 234,
          "articleName": "Poster: A General Framework to Detect Behavioral Design Patterns",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CjHMRsDPvdBv98cJPU652/4D0D7LcRdgrFg9kjvsA6lG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hernán",
        "surname": "Astudillo"
      },
      "authorName": "Astudillo, Hernán",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Poster: Exploration of Academic and Industrial Evidence about Architectural Tactics and Patterns in Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/TLOslOwt6ZiwpMbu04hsL/BNRxGvN7me9B2jeqY2cNm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Abigail",
        "surname": "Atchison"
      },
      "authorName": "Atchison, Abigail",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dionysis",
        "surname": "Athanasopoulos"
      },
      "authorName": "Athanasopoulos, Dionysis",
      "articleRefs": [
        {
          "pageNumber": 91,
          "articleName": "Digital Ecclesia: Towards an Online Direct-Democracy Framework",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6M31FF5UQim1FkKMBVcvNp/1ziXArtAC8fJVE4o6UnCxx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Joop",
        "surname": "Aué"
      },
      "authorName": "Aué, Joop",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5SLpOxrOC7MRElPGBMwNp4/5cFXN3dt0iFNy5h7oQMqXT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Richard",
        "surname": "Avelar"
      },
      "authorName": "Avelar, Richard",
      "articleRefs": [
        {
          "pageNumber": 212,
          "articleName": "Poster: Protecting Remote Controlling Apps of Smart-Home-Oriented IOT Devices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7wSpD2mtPyz82leCYulmFK/9ndFVMlu3Sf5saqySGQN5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Payas",
        "surname": "Awadhutkar"
      },
      "authorName": "Awadhutkar, Payas",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "COMB: Computing Relevant Program Behaviors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Oshrat",
        "surname": "Ayalon"
      },
      "authorName": "Ayalon, Oshrat",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fatma Basak",
        "surname": "Aydemir"
      },
      "authorName": "Aydemir, Fatma Basak",
      "articleRefs": [
        {
          "pageNumber": 228,
          "articleName": "Poster: Ethics-Aware Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6W8FQPiYViBDN0kL9GhuFL/42ectUCk4oiAxSpzYKdsHh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Muhammad Sohaib",
        "surname": "Ayub"
      },
      "authorName": "Ayub, Muhammad Sohaib",
      "articleRefs": [
        {
          "pageNumber": 177,
          "articleName": "Poster: Efficiently Finding Minimal Failing Input in MapReduce Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5BTJs1t7NpwCEatzcHw2gJ/2mc635qKuBjXNwI4Hkwm8d.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Umberto",
        "surname": "Azadi"
      },
      "authorName": "Azadi, Umberto",
      "articleRefs": [
        {
          "pageNumber": 288,
          "articleName": "Poster: Machine Learning Based Code Smell Detection Through WekaNose",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2gDaQr1ksB8ODkMYxzryZz/5wYT53VZ6GfJZXciRk1zCw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Muqsit",
        "surname": "Azeem"
      },
      "authorName": "Azeem, Muqsit",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Generalizing Specific-Instance Interpolation Proofs with SyGuS",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6O8wrhX2O9cvQjAmWGmMqK/dS8C4iWQN1NmsD2aISsDI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alberto",
        "surname": "Bacchelli"
      },
      "authorName": "Bacchelli, Alberto",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Modern Code Review: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf"
        },
        {
          "pageNumber": 561,
          "articleName": "Understanding Developers' Needs on Deprecation as a Language Feature",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2P1QIz0vZHnpdIEQ9etDfn/70WC3YCsckq6uPXtWKXnDs.pdf"
        },
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jonathan",
        "surname": "Bachrach"
      },
      "authorName": "Bachrach, Jonathan",
      "articleRefs": [
        {
          "pageNumber": 549,
          "articleName": "Efficient Sampling of SAT Solutions for Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2fyL1Vd11RDdXakS4SXepo/4LVpbk5KkDNS1ZKZjpyWq5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Doo-Hwan",
        "surname": "Bae"
      },
      "authorName": "Bae, Doo-Hwan",
      "articleRefs": [
        {
          "pageNumber": 537,
          "articleName": "Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/53KVBZlCxSM8SKMrWZTReW/5SVStngTUruEo7SDPWMIhR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcos",
        "surname": "Baez"
      },
      "authorName": "Baez, Marcos",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "Agile Development for Vulnerable Populations: Lessons Learned and Recommendations",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/4vVEkUWJgiIATBNw59KzXa/1wabQ7wZRXCzAhEzzMMyi5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hamid",
        "surname": "Bagheri"
      },
      "authorName": "Bagheri, Hamid",
      "articleRefs": [
        {
          "pageNumber": 846,
          "articleName": "A Temporal Permission Analysis and Enforcement Framework for Android",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mehdi",
        "surname": "Bagherzadeh"
      },
      "authorName": "Bagherzadeh, Mehdi",
      "articleRefs": [
        {
          "pageNumber": 206,
          "articleName": "Poster: Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7MLLCasUAOaMfVBTbfYztV/3klSThcA5OaZugEDIiq481.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mojtaba",
        "surname": "Bagherzadeh"
      },
      "authorName": "Bagherzadeh, Mojtaba",
      "articleRefs": [
        {
          "pageNumber": 267,
          "articleName": "[Journal First] Analyzing a Decade of Linux System Calls",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3KxPueAJM16I029lwLaxWK/3ygzgkL0Nj7pWHNPX3Spik.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiaoying",
        "surname": "Bai"
      },
      "authorName": "Bai, Xiaoying",
      "articleRefs": [
        {
          "pageNumber": 58,
          "articleName": "Continuous Delivery of Personalized Assessment and Feedback in Agile Software Engineering Projects",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ztuOBdGuPzPaaZ5ZxbGjy/7Bjf67pa1UxMHWufh4okAy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mira",
        "surname": "Balaban"
      },
      "authorName": "Balaban, Mira",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Software Engineering Lab - an Essential Component of a Software Engineering Curriculum",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ptyke5Ujj8onvnHjCVVPG/6rVK664qnM9Emso3vbuo0M.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bartlomiej",
        "surname": "Balcerzak"
      },
      "authorName": "Balcerzak, Bartlomiej",
      "articleRefs": [
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arod",
        "surname": "Balissa"
      },
      "authorName": "Balissa, Arod",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Ball"
      },
      "authorName": "Ball, Thomas",
      "articleRefs": [
        {
          "pageNumber": 552,
          "articleName": "Multi-platform Computing for Physical Devices via MakeCode and CODAL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ot68K3aKE7CQfcrmRVKlR/jsk9AWtBkZikr0gw8xmBk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nick",
        "surname": "Baltsen"
      },
      "authorName": "Baltsen, Nick",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kunal",
        "surname": "Banerjee"
      },
      "authorName": "Banerjee, Kunal",
      "articleRefs": [
        {
          "pageNumber": 175,
          "articleName": "Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6aRyn8avZSYSSHnfRPc9Q4/15RozMp8Mi2r6JDsctFnqA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Elisa",
        "surname": "Baniassad"
      },
      "authorName": "Baniassad, Elisa",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "Making the Liskov Substitution Principle Happy and Sad",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7sFqL5kqLFeYrq0VDIofeA/3SkOhugw3u15AiiCFvwywy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Herman",
        "surname": "Banken"
      },
      "authorName": "Banken, Herman",
      "articleRefs": [
        {
          "pageNumber": 752,
          "articleName": "Debugging Data Flows in Reactive Programs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/26QEHcXcpHFGmR9nd5fSPW/57Rpui1pbPGVNJ0KqbEOcB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lingfeng",
        "surname": "Bao"
      },
      "authorName": "Bao, Lingfeng",
      "articleRefs": [
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mohamad",
        "surname": "Barbar"
      },
      "authorName": "Barbar, Mohamad",
      "articleRefs": [
        {
          "pageNumber": 195,
          "articleName": "Poster: Live Path Control Flow Integrity",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/66rLvMbNUR2ntPLR7czmnx/5iReip9NsLrMgb7VJztdM8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Caio",
        "surname": "Barbosa"
      },
      "authorName": "Barbosa, Caio",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Simone",
        "surname": "Barbosa"
      },
      "authorName": "Barbosa, Simone",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sébastien",
        "surname": "Bardin"
      },
      "authorName": "Bardin, Sébastien",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ravinder",
        "surname": "Barn"
      },
      "authorName": "Barn, Ravinder",
      "articleRefs": [
        {
          "pageNumber": 71,
          "articleName": "Towards a Unified Conceptual Model for Surveillance Theories: \"We Shall Meet in the Place Where There is no Darkness\" - 1984, George Orwell",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/20y7t4eueufhr1eP4eNGPi/4mL8XsAM9N3XHllWNOFWVD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Barnett"
      },
      "authorName": "Barnett, Michael",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7coDDNB5gFaIi3yM57kNPD/11bmVU627jwxwAbd5Hc27n.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jed",
        "surname": "Barson"
      },
      "authorName": "Barson, Jed",
      "articleRefs": [
        {
          "pageNumber": 319,
          "articleName": "Poster: A Recommender System for Developer Onboarding",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6v6lwqxrCTDmoe8tmGqzBa/27FhEqUbQa1fXoWqFqHZHl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hamid Abdul",
        "surname": "Basit"
      },
      "authorName": "Basit, Hamid Abdul",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Julian",
        "surname": "Bass"
      },
      "authorName": "Bass, Julian",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Richard",
        "surname": "Bassett"
      },
      "authorName": "Bassett, Richard",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Don",
        "surname": "Batory"
      },
      "authorName": "Batory, Don",
      "articleRefs": [
        {
          "pageNumber": 233,
          "articleName": "Towards Refactoring-Aware Regression Test Selection",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BrWrDMhElZLM98cH2EedZ/6wu4To3mrpKod0nsChTY6L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Benoit",
        "surname": "Baudry"
      },
      "authorName": "Baudry, Benoit",
      "articleRefs": [
        {
          "pageNumber": 29,
          "articleName": "Images of Code: Lossy Compression for Native Instructions",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4O33wTClUcK5dLf9D2ytLQ/7vjaqiOp3476mtH6LPlGdm.pdf"
        },
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bernhard",
        "surname": "Bauer"
      },
      "authorName": "Bauer, Bernhard",
      "articleRefs": [
        {
          "pageNumber": 374,
          "articleName": "Poster: Evaluating Project Compliance During EA Planning: A Model-Based Semi Automatic Method for Enterprise Architecture Planning",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jAph7dsbdQ5TEnLRwf3nC/5WW6OHv3kMU1cPYEtplONF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gabriele",
        "surname": "Bavota"
      },
      "authorName": "Bavota, Gabriele",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shahab",
        "surname": "Bayati"
      },
      "authorName": "Bayati, Shahab",
      "articleRefs": [
        {
          "pageNumber": 224,
          "articleName": "Poster: Understanding Newcomers Success in Open Source Community",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1vEY6gn8gZNvwOStgfHegX/13c4ewsBH6lkcmQnTnT4HD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sean",
        "surname": "Bayley"
      },
      "authorName": "Bayley, Sean",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "Dronology: An Incubator for Cyber-Physical Systems Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/60Bj5IUfIQNUqonqo6EFmt/79AKWLxdXte7sWSbVlkcwS.pdf"
        },
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Olga",
        "surname": "Baysal"
      },
      "authorName": "Baysal, Olga",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christoph",
        "surname": "Becker"
      },
      "authorName": "Becker, Christoph",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Steffen",
        "surname": "Becker"
      },
      "authorName": "Becker, Steffen",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sarah",
        "surname": "Beecham"
      },
      "authorName": "Beecham, Sarah",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrew",
        "surname": "Begel"
      },
      "authorName": "Begel, Andrew",
      "articleRefs": [
        {
          "pageNumber": 191,
          "articleName": "A Study of the Organizational Dynamics of Software Teams",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5gNECKysiAKSNV7IxUGaay/2VTsVJPZtHSofCGoLJHNhU.pdf"
        },
        {
          "pageNumber": 585,
          "articleName": "[Journal First] Data Scientists in Software Teams: State of the Art and Challenges",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47NY96sCKYhfY6lLApaAdS/UjTg5agZVWapuv8BiuO4t.pdf"
        },
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Farnaz",
        "surname": "Behrang"
      },
      "authorName": "Behrang, Farnaz",
      "articleRefs": [
        {
          "pageNumber": 384,
          "articleName": "Poster: Automated Test Migration for Mobile Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tal5Beeg8SDPTo3co0jm4/27yyURsFhJ5y7Rm3wTmCip.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Benjamin",
        "surname": "Behringer"
      },
      "authorName": "Behringer, Benjamin",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mahnaz",
        "surname": "Behroozi"
      },
      "authorName": "Behroozi, Mahnaz",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jonathan",
        "surname": "Bell"
      },
      "authorName": "Bell, Jonathan",
      "articleRefs": [
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Moritz",
        "surname": "Beller"
      },
      "authorName": "Beller, Moritz",
      "articleRefs": [
        {
          "pageNumber": 503,
          "articleName": "Toward an Empirical Theory of Feedback-Driven Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6QgvimQvGSMHm543W6rBya/4hYF4BqDuA3HHAL8O9GmGV.pdf"
        },
        {
          "pageNumber": 572,
          "articleName": "On the Dichotomy of Debugging Behavior Among Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/xP54rozvutqKTsorAW4JU/7Y1r5jMBEpcFZDC2Ip9iV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ayse Basar",
        "surname": "Bener"
      },
      "authorName": "Bener, Ayse Basar",
      "articleRefs": [
        {
          "pageNumber": 700,
          "articleName": "[Journal First] On the Use of Hidden Markov Model to Predict the Time to Fix Bugs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4cSxEsEH079Uzvt1ewbxGs/2pB5Js1Y9qRj6SNwMZQQHH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Amel",
        "surname": "Bennaceur"
      },
      "authorName": "Bennaceur, Amel",
      "articleRefs": [
        {
          "pageNumber": 548,
          "articleName": "Machine Learning for Software Engineering: Models, Methods, and Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68mZt2BRUQO2z4mysF42zv/3BBCZzcXIipNq8ElKPyNZb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marian",
        "surname": "Benner-Wickner"
      },
      "authorName": "Benner-Wickner, Marian",
      "articleRefs": [
        {
          "pageNumber": 159,
          "articleName": "Poster: Situation-Based E-Learning in Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kwabena Ebo",
        "surname": "Bennin"
      },
      "authorName": "Bennin, Kwabena Ebo",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christina",
        "surname": "Berardi"
      },
      "authorName": "Berardi, Christina",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bianca",
        "surname": "Bergande"
      },
      "authorName": "Bergande, Bianca",
      "articleRefs": [
        {
          "pageNumber": 135,
          "articleName": "Poster: When Students Meet Developers: Are Barcamps a Format for Interactive Software Engineering Education?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7pmHRPui8ftbVkNWGHxFcd/4K7iypcNJzmAqWICM06eac.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexandre",
        "surname": "Bergel"
      },
      "authorName": "Bergel, Alexandre",
      "articleRefs": [
        {
          "pageNumber": 1090,
          "articleName": "The Road to Live Programming: Insights from the Practice",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5kWabRxvKSbOrbfpQqtqMw/5X6aZ0m8fIIZBmOuIJogyI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thorsten",
        "surname": "Berger"
      },
      "authorName": "Berger, Thorsten",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        },
        {
          "pageNumber": 434,
          "articleName": "Poster: Property Specification Patterns for Robotic Missions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Carlos",
        "surname": "Bernal-Cárdenas"
      },
      "authorName": "Bernal-Cárdenas, Carlos",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 165,
          "articleName": "Automated Reporting of GUI Design Violations for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73vOGjBkf23NHodSgD3DR2/1OWvuIr0ODMO3SiUdEDKEV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Antonia",
        "surname": "Bertolino"
      },
      "authorName": "Bertolino, Antonia",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        },
        {
          "pageNumber": 222,
          "articleName": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ivan",
        "surname": "Beschastnikh"
      },
      "authorName": "Beschastnikh, Ivan",
      "articleRefs": [
        {
          "pageNumber": 1149,
          "articleName": "Inferring and Asserting Distributed System Invariants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/24lb1U1vGXVTQ9ilBi3gLD/5c5Zch9tqgfvr3747kdOg6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Natalie",
        "surname": "Best"
      },
      "authorName": "Best, Natalie",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefanie",
        "surname": "Betz"
      },
      "authorName": "Betz, Stefanie",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dirk",
        "surname": "Beyer"
      },
      "authorName": "Beyer, Dirk",
      "articleRefs": [
        {
          "pageNumber": 1182,
          "articleName": "Reducer-Based Construction of Conditional Verifiers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6mfhtixgiQVyhDPMCYId3V/7DUx0uAdd4fytOgP2RvFf5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cor-Paul",
        "surname": "Bezemer"
      },
      "authorName": "Bezemer, Cor-Paul",
      "articleRefs": [
        {
          "pageNumber": 164,
          "articleName": "[Journal First] Studying the Dialogue Between Users and Developers of Free Apps in the Google Play Store",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5DvXCVhNZmmS4ZOChxQpkT/3YJxPVzOETe0xHdSpDBS9Z.pdf"
        },
        {
          "pageNumber": 267,
          "articleName": "[Journal First] Analyzing a Decade of Linux System Calls",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3KxPueAJM16I029lwLaxWK/3ygzgkL0Nj7pWHNPX3Spik.pdf"
        },
        {
          "pageNumber": 480,
          "articleName": "[Journal First] An Empirical Study of Early Access Games on the Steam Platform",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6KvsuI65yZCa9wUUD3UekZ/4mHfpuzr4RGZSA12LoRp5r.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sahil",
        "surname": "Bhatia"
      },
      "authorName": "Bhatia, Sahil",
      "articleRefs": [
        {
          "pageNumber": 60,
          "articleName": "Neuro-Symbolic Program Corrector for Introductory Programming Assignments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3ff3TXG0zUEgira53neRYx/4vw21DgkSxUSQYWz4NjvaQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ana Carla",
        "surname": "Bibiano"
      },
      "authorName": "Bibiano, Ana Carla",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Robert",
        "surname": "Biddle"
      },
      "authorName": "Biddle, Robert",
      "articleRefs": [
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Binkley"
      },
      "authorName": "Binkley, David",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christian",
        "surname": "Bird"
      },
      "authorName": "Bird, Christian",
      "articleRefs": [
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Birnhack"
      },
      "authorName": "Birnhack, Michael",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Judith",
        "surname": "Bishop"
      },
      "authorName": "Bishop, Judith",
      "articleRefs": [
        {
          "pageNumber": 552,
          "articleName": "Multi-platform Computing for Physical Devices via MakeCode and CODAL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ot68K3aKE7CQfcrmRVKlR/jsk9AWtBkZikr0gw8xmBk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tegawendé",
        "surname": "Bissyandé"
      },
      "authorName": "Bissyandé, Tegawendé",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Poster: Predicting the Fault Revelation Utility of Mutants",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/42QsecgC6WhEpnjE0Q8yxp/3hghmlVpOkcbn1KqnwEInF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tegawendé F.",
        "surname": "Bissyandé"
      },
      "authorName": "Bissyandé, Tegawendé F.",
      "articleRefs": [
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        },
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gordon",
        "surname": "Blair"
      },
      "authorName": "Blair, Gordon",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dale",
        "surname": "Blue"
      },
      "authorName": "Blue, Dale",
      "articleRefs": [
        {
          "pageNumber": 144,
          "articleName": "Proactive and Pervasive Combinatorial Testing",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eric",
        "surname": "Bodden"
      },
      "authorName": "Bodden, Eric",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Self-Adaptive Static Analysis",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1gSz9MfSQhkps7eUcuRDeR/S8b0IXIkWsFEoKSFNF5yu.pdf"
        },
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        },
        {
          "pageNumber": 550,
          "articleName": "State of the Systems Security",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16NkHqyJbfZD6kRjwn0A0P/2F2WQynAsV39OuGf2ZOphJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Barry",
        "surname": "Boehm"
      },
      "authorName": "Boehm, Barry",
      "articleRefs": [
        {
          "pageNumber": 278,
          "articleName": "Poster: UMLx: A UML Diagram Analytic Tool for Software Management Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4J6eUemJdAkVFMc1trnmXS/01fxxunGDjXR3fUdQxcuQB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ivan",
        "surname": "Bogicevic"
      },
      "authorName": "Bogicevic, Ivan",
      "articleRefs": [
        {
          "pageNumber": 242,
          "articleName": "Poster: Communication in Open-Source Projects–End of the E-mail Era?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1j4w2owFLsJWGemRCe3RPJ/4ohDY2rD3K4zRwV3ou34JL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcel",
        "surname": "Böhme"
      },
      "authorName": "Böhme, Marcel",
      "articleRefs": [
        {
          "pageNumber": 24,
          "articleName": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mitra",
        "surname": "Bokaei Hosseini"
      },
      "authorName": "Bokaei Hosseini, Mitra",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matthias",
        "surname": "Book"
      },
      "authorName": "Book, Matthias",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "A Data Decomposition Method for Stepwise Migration of Complex Legacy Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3O1Ktk2tXxpTHy1ufdypxO/4EhNANlLNIYSkF2FDJHDAs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Markus",
        "surname": "Borg"
      },
      "authorName": "Borg, Markus",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2GtTmXlTVQhcRkpEo1qoQM/3BK0YgK2oP3ZJ3spCM5BS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Neil",
        "surname": "Borle"
      },
      "authorName": "Borle, Neil",
      "articleRefs": [
        {
          "pageNumber": 1062,
          "articleName": "[Journal First] Analyzing the Effects of Test Driven Development in GitHub",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7E87zq66ELDArjurWiTGlC/7pQU2PsyQiLteaW3D5kgMw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kristopher",
        "surname": "Born"
      },
      "authorName": "Born, Kristopher",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Valeria",
        "surname": "Borsotti"
      },
      "authorName": "Borsotti, Valeria",
      "articleRefs": [
        {
          "pageNumber": 146,
          "articleName": "SIGSOFT Distinguished Paper - Barriers to Gender Diversity in Software Development Education: Actionable Insights from a Danish Case Study",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AJhTrUssN0WJPtCcbwJHK/6l3xdI8rwGcAb2T1oMgJnG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christian",
        "surname": "Bosshard"
      },
      "authorName": "Bosshard, Christian",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fabienne",
        "surname": "Boyer"
      },
      "authorName": "Boyer, Fabienne",
      "articleRefs": [
        {
          "pageNumber": 392,
          "articleName": "Poster: A Declarative Approach for Updating Distributed Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NuEmP8ZsSnvKNvNyTrrlD/1nPmlCZWlN2oGC90OpEUxG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nick",
        "surname": "Bradley"
      },
      "authorName": "Bradley, Nick",
      "articleRefs": [
        {
          "pageNumber": 993,
          "articleName": "Context-Aware Conversational Developer Assistants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1XKrnlNgYAXbi9HEtIyOPn/7I9QtgsXIQ77QNhvWlsTtx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pietro",
        "surname": "Braione"
      },
      "authorName": "Braione, Pietro",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eric",
        "surname": "Braude"
      },
      "authorName": "Braude, Eric",
      "articleRefs": [
        {
          "pageNumber": 310,
          "articleName": "Poster: Incremental UML for Agile Development with PREXEL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/67nL4n4nFlAVswPrj0c9Rp/4pVEMTRsBYCVepnOlHjnER.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Travis D.",
        "surname": "Breaux"
      },
      "authorName": "Breaux, Travis D.",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tegan",
        "surname": "Brennan"
      },
      "authorName": "Brennan, Tegan",
      "articleRefs": [
        {
          "pageNumber": 424,
          "articleName": "Poster: Symbolic Path Cost Analysis for Side-Channel Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qkGd3UA7CbCn9vt8iHqv0/572IaUvLUJjp18q2vinwmw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tobias",
        "surname": "Brückmann"
      },
      "authorName": "Brückmann, Tobias",
      "articleRefs": [
        {
          "pageNumber": 159,
          "articleName": "Poster: Situation-Based E-Learning in Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bernd",
        "surname": "Bruegge"
      },
      "authorName": "Bruegge, Bernd",
      "articleRefs": [
        {
          "pageNumber": 136,
          "articleName": "Increasing Student Engagement in Higher Education Using a Context-Aware Q&A Teaching Framework",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/70xg6U2NS78MdWNOncB6PJ/1EzW0QC7tyq9nW243YE3yj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jean-Michel",
        "surname": "Bruel"
      },
      "authorName": "Bruel, Jean-Michel",
      "articleRefs": [
        {
          "pageNumber": 368,
          "articleName": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yuriy",
        "surname": "Brun"
      },
      "authorName": "Brun, Yuriy",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "[Journal First] Do Automated Program Repair Techniques Repair Hard and Important Bugs?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TcOrwOTri9qN5sl2VPDmg/1UlHTll3MjB9vsQoBoeZXG.pdf"
        },
        {
          "pageNumber": 262,
          "articleName": "Poster: Making Well-Informed Software Design Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2hjOTnt4IhzP5kLZgw9GKS/4G3hXm7aB71RGA86WZqsVh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Philipp",
        "surname": "Brune"
      },
      "authorName": "Brune, Philipp",
      "articleRefs": [
        {
          "pageNumber": 135,
          "articleName": "Poster: When Students Meet Developers: Are Barcamps a Format for Interactive Software Engineering Education?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7pmHRPui8ftbVkNWGHxFcd/4K7iypcNJzmAqWICM06eac.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Magiel",
        "surname": "Bruntink"
      },
      "authorName": "Bruntink, Magiel",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Enabling Real-Time Feedback in Software Engineering",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf"
        },
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        },
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Amar",
        "surname": "Budhiraja"
      },
      "authorName": "Budhiraja, Amar",
      "articleRefs": [
        {
          "pageNumber": 165,
          "articleName": "Poster: LWE: LDA Refined Word Embeddings for Duplicate Bug Report Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5lV7ZnvLFHqlOrp4Wm0luY/2l08CDTfwQAZGb7v4j5WuX.pdf"
        },
        {
          "pageNumber": 193,
          "articleName": "Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46PCpEiqqzcfuFKFQ071QK/704dXR6jLVH4adAgbPP2i8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nghi D. Q.",
        "surname": "Bui"
      },
      "authorName": "Bui, Nghi D. Q.",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "Hierarchical Learning of Cross-Language Mappings Through Distributed Vector Representations for Code",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/63peqgtl2cqa2Vdl1J8VcL/33ID2f2G6xIYVCyhGCws1B.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tevfik",
        "surname": "Bultan"
      },
      "authorName": "Bultan, Tevfik",
      "articleRefs": [
        {
          "pageNumber": 394,
          "articleName": "Poster: Static Detection of API Call Vulnerabilities in iOS Executables",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/gSu6tRobTq6btbsdFEqcb/SnOv2Ft9uBvbOCkoaGtXE.pdf"
        },
        {
          "pageNumber": 424,
          "articleName": "Poster: Symbolic Path Cost Analysis for Side-Channel Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qkGd3UA7CbCn9vt8iHqv0/572IaUvLUJjp18q2vinwmw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Margaret",
        "surname": "Burnett"
      },
      "authorName": "Burnett, Margaret",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sara",
        "surname": "Busechian"
      },
      "authorName": "Busechian, Sara",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Simon",
        "surname": "Butler"
      },
      "authorName": "Butler, Simon",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jordi",
        "surname": "Cabot"
      },
      "authorName": "Cabot, Jordi",
      "articleRefs": [
        {
          "pageNumber": 3,
          "articleName": "The Role of Foundations in Open Source Projects",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2Fs3L1M4Mm9GxjWCBfpSEU/5dCgP0GVMp8vJhDp3AxQXq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cristian",
        "surname": "Cadar"
      },
      "authorName": "Cadar, Cristian",
      "articleRefs": [
        {
          "pageNumber": 350,
          "articleName": "Chopped Symbolic Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4dB4MqN33HWSe06nX7cqo8/4A2sy5Nn535KnCMdVFvrXE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Haipeng",
        "surname": "Cai"
      },
      "authorName": "Cai, Haipeng",
      "articleRefs": [
        {
          "pageNumber": 350,
          "articleName": "Poster: Towards Sustainable Android Malware Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1CeL0JHsoDlL5AfeYBFXYN/1bjvVxMwUcxmyMegViCmAq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Faris",
        "surname": "Cakaric"
      },
      "authorName": "Cakaric, Faris",
      "articleRefs": [
        {
          "pageNumber": 115,
          "articleName": "Tool-Based Interactive Software Parallelization: A Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6WOIQt9qfOJgDlYDiHswtu/4d3FRvoz63ZHw3qyaofuzP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Antonello",
        "surname": "Calabró"
      },
      "authorName": "Calabró, Antonello",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fabio",
        "surname": "Calefato"
      },
      "authorName": "Calefato, Fabio",
      "articleRefs": [
        {
          "pageNumber": 128,
          "articleName": "[Journal First] Sentiment Polarity Detection for Software Development",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5o2jlVBKgm0WbzNsXeVPrw/70ILFFydFpHbzdIOpU2GFl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Radu",
        "surname": "Calinescu"
      },
      "authorName": "Calinescu, Radu",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "Efficient Parametric Model Checking Using Domain-Specific Modelling Patterns",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/3VKXquAtw3Bsoa1GQ2m1Cn/IwXQwRyRAgcZEgA31O87n.pdf"
        },
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Aylin",
        "surname": "Caliskan"
      },
      "authorName": "Caliskan, Aylin",
      "articleRefs": [
        {
          "pageNumber": 356,
          "articleName": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Clodagh Nic",
        "surname": "Canna"
      },
      "authorName": "Canna, Clodagh Nic",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Javier Luis",
        "surname": "Cánovas Izquierdo"
      },
      "authorName": "Cánovas Izquierdo, Javier Luis",
      "articleRefs": [
        {
          "pageNumber": 3,
          "articleName": "The Role of Foundations in Open Source Projects",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2Fs3L1M4Mm9GxjWCBfpSEU/5dCgP0GVMp8vJhDp3AxQXq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhao",
        "surname": "Cao"
      },
      "authorName": "Cao, Zhao",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "ReGuard: Finding Reentrancy Bugs in Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dFTki9Ml83quzEQotDNy1/3g3bfAaS3Z85gdgD6MnCrF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrea",
        "surname": "Capiluppi"
      },
      "authorName": "Capiluppi, Andrea",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "[Journal First] An Empirical Study on the Interplay Between Semantic Coupling and Co-change of Software Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4daDPdF3SLwTXzMDDUsn1K/6WppK0TRL3zRRr0ITDSe93.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mauro",
        "surname": "Caporuscio"
      },
      "authorName": "Caporuscio, Mauro",
      "articleRefs": [
        {
          "pageNumber": 101,
          "articleName": "CyPhEF: A Model-Driven Engineering Framework for Self-Adaptive Cyber-Physical Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1gNLLFWWKWZtApQjwZyuuj/2HAORC6UYaMnwzI2dA35YZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jessie",
        "surname": "Carbonnel"
      },
      "authorName": "Carbonnel, Jessie",
      "articleRefs": [
        {
          "pageNumber": 304,
          "articleName": "Poster: On Extracting Relevant and Complex Variability Information from Software Descriptions with Pattern Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5qpsBHLVvt6ITKmG4P5Aes/6VeSDOFMGM7oBcQsDZmBjQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Trevor",
        "surname": "Carnahan"
      },
      "authorName": "Carnahan, Trevor",
      "articleRefs": [
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cecilia",
        "surname": "Casanova"
      },
      "authorName": "Casanova, Cecilia",
      "articleRefs": [
        {
          "pageNumber": 98,
          "articleName": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fabio",
        "surname": "Casati"
      },
      "authorName": "Casati, Fabio",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "Agile Development for Vulnerable Populations: Lessons Learned and Recommendations",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/4vVEkUWJgiIATBNw59KzXa/1wabQ7wZRXCzAhEzzMMyi5.pdf"
        },
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jeroen",
        "surname": "Castelein"
      },
      "authorName": "Castelein, Jeroen",
      "articleRefs": [
        {
          "pageNumber": 1220,
          "articleName": "Search-Based Test Data Generation for SQL Queries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4B2Db8L4U7DekUw6RJzAuW/3TzsZt8feqd0zTtvlqNrZD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "John W.",
        "surname": "Castro"
      },
      "authorName": "Castro, John W.",
      "articleRefs": [
        {
          "pageNumber": 232,
          "articleName": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pablo",
        "surname": "Castro"
      },
      "authorName": "Castro, Pablo",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alejandro",
        "surname": "Catala Bolos"
      },
      "authorName": "Catala Bolos, Alejandro",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FOzcRg0BG6NRLGft0111q/ZDCSeD2qsGxWw2YH3ZSLP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gemma",
        "surname": "Catolino"
      },
      "authorName": "Catolino, Gemma",
      "articleRefs": [
        {
          "pageNumber": 450,
          "articleName": "Effort-Oriented Methods and Tools for Software Development and Maintenance for Mobile Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3mvwFyGcBppykuARDF0iq0/7xWee7ahxHpkzGo5w3QJnO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lionel",
        "surname": "C. Briand"
      },
      "authorName": "C. Briand, Lionel",
      "articleRefs": [
        {
          "pageNumber": 1016,
          "articleName": "Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/VwB38GE70VKZwyWn3vYpD/2vNhnZhaJwrULtleN0eIAX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hendrik",
        "surname": "Cech"
      },
      "authorName": "Cech, Hendrik",
      "articleRefs": [
        {
          "pageNumber": 1149,
          "articleName": "Inferring and Asserting Distributed System Invariants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/24lb1U1vGXVTQ9ilBi3gLD/5c5Zch9tqgfvr3747kdOg6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Diego",
        "surname": "Cedrim"
      },
      "authorName": "Cedrim, Diego",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ahmet",
        "surname": "Celik"
      },
      "authorName": "Celik, Ahmet",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "A Regression Proof Selection Tool For Coq",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4d3wTvZAzM1UeluRGK5ggk/73ZV4s78VDohful3g6T0eF.pdf"
        },
        {
          "pageNumber": 233,
          "articleName": "Towards Refactoring-Aware Regression Test Selection",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BrWrDMhElZLM98cH2EedZ/6wu4To3mrpKod0nsChTY6L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pavol",
        "surname": "Cerný"
      },
      "authorName": "Cerný, Pavol",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sooyoung",
        "surname": "Cha"
      },
      "authorName": "Cha, Sooyoung",
      "articleRefs": [
        {
          "pageNumber": 1244,
          "articleName": "Automatically Generating Search Heuristics for Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5k6pWQxBOWJa9S1UiZ2A2n/6sJ0ZusmvQqfPy9dyjzenc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Saikat",
        "surname": "Chakraborty"
      },
      "authorName": "Chakraborty, Saikat",
      "articleRefs": [
        {
          "pageNumber": 335,
          "articleName": "Poster: Which Similarity Metric to Use for Software Documents?: A Study on Information Retrieval Based Software Engineering Tasks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19HqZ3UFdpX1zhMVPO1vf9/2fhtsvR6I1thghxrAC6nB0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bor-Yuh Evan",
        "surname": "Chang"
      },
      "authorName": "Chang, Bor-Yuh Evan",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rafael",
        "surname": "Chanin"
      },
      "authorName": "Chanin, Rafael",
      "articleRefs": [
        {
          "pageNumber": 143,
          "articleName": "Poster: Startup Software Development Education: A Systematic Mapping Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7s17xrOXocOz9TrWmIIgiY/62N7hNPnPuRUIjG4IN62FM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Panagiota",
        "surname": "Chatzipetrou"
      },
      "authorName": "Chatzipetrou, Panagiota",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Swarat",
        "surname": "Chaudhuri"
      },
      "authorName": "Chaudhuri, Swarat",
      "articleRefs": [
        {
          "pageNumber": 338,
          "articleName": "Program Splicing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3GzvLDJDyvhGV814ZqQjMV/5PljSrUUNExRaRT9kY641T.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Franck",
        "surname": "Chauvel"
      },
      "authorName": "Chauvel, Franck",
      "articleRefs": [
        {
          "pageNumber": 97,
          "articleName": "Deep Customization of Multi-tenant SaaS Using Intrusive Microservices",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/21RHGeVqhABQzfCCA9FBCo/4aXCmrOeKegXHqHD0m3lof.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marsha",
        "surname": "Chechik"
      },
      "authorName": "Chechik, Marsha",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "CSlicerCloud: A Web-Based Semantic History Slicing Framework",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7Yn83TiytMgtUpghw9e6M/3Htwf6zDJNCLarJZ9SUyf7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thierry",
        "surname": "Chekam"
      },
      "authorName": "Chekam, Thierry",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Poster: Predicting the Fault Revelation Utility of Mutants",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/42QsecgC6WhEpnjE0Q8yxp/3hghmlVpOkcbn1KqnwEInF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hui",
        "surname": "Chen"
      },
      "authorName": "Chen, Hui",
      "articleRefs": [
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jiachi",
        "surname": "Chen"
      },
      "authorName": "Chen, Jiachi",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Towards Saving Money in Using Smart Contracts",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Junjie",
        "surname": "Chen"
      },
      "authorName": "Chen, Junjie",
      "articleRefs": [
        {
          "pageNumber": 472,
          "articleName": "Learning to Accelerate Compiler Testing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3uK1gDyyScWheR1bC2y6e9/79BSSHLXynlzwtnQRCEfis.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhaofeng",
        "surname": "Chen"
      },
      "authorName": "Chen, Zhaofeng",
      "articleRefs": [
        {
          "pageNumber": 235,
          "articleName": "Protecting Million-User iOS Apps with Obfuscation: Motivations, Pitfalls, and Experience",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6D79uXKxsLFDPmMFKNcRW8/1VBkWnd3mBlkpIkTqvuUqq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Betty",
        "surname": "Cheng"
      },
      "authorName": "Cheng, Betty",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jinghui",
        "surname": "Cheng"
      },
      "authorName": "Cheng, Jinghui",
      "articleRefs": [
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "George",
        "surname": "Chernishev"
      },
      "authorName": "Chernishev, George",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alvin",
        "surname": "Cheung"
      },
      "authorName": "Cheung, Alvin",
      "articleRefs": [
        {
          "pageNumber": 800,
          "articleName": "How not to Structure Your Database-Backed Web Applications: A Study of Performance Bugs in the Wild",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1heAUnsML3vNOxAklvY2o5/5r7WaaxVGeRjbQD2Yx8PMD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shing-Chi",
        "surname": "Cheung"
      },
      "authorName": "Cheung, Shing-Chi",
      "articleRefs": [
        {
          "pageNumber": 266,
          "articleName": "Poster: Synthesizing Relation-Aware Entity Transformation by Examples",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jhHsbkhRZs3nE4hHEzkaf/1kHwgntPO8MQi7UlkHcfEU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Francisco",
        "surname": "Chicano"
      },
      "authorName": "Chicano, Francisco",
      "articleRefs": [
        {
          "pageNumber": 59,
          "articleName": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ram",
        "surname": "Chillarege"
      },
      "authorName": "Chillarege, Ram",
      "articleRefs": [
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ruzanna",
        "surname": "Chitchyan"
      },
      "authorName": "Chitchyan, Ruzanna",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Heetae",
        "surname": "Cho"
      },
      "authorName": "Cho, Heetae",
      "articleRefs": [
        {
          "pageNumber": 187,
          "articleName": "Poster Agile Requirement Traceability Matrix",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3yzEh2WxTzA13GGeKsP7aB/1WEquoO9JMTTJeJVxqVgZv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Morakot",
        "surname": "Choetkiertikul"
      },
      "authorName": "Choetkiertikul, Morakot",
      "articleRefs": [
        {
          "pageNumber": 244,
          "articleName": "Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ADZq6g5I1eGULqO75ycZf/647J63rx8sUzey01F0TAFE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eunjong",
        "surname": "Choi"
      },
      "authorName": "Choi, Eunjong",
      "articleRefs": [
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ramanuj",
        "surname": "Chouksey"
      },
      "authorName": "Chouksey, Ramanuj",
      "articleRefs": [
        {
          "pageNumber": 175,
          "articleName": "Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6aRyn8avZSYSSHnfRPc9Q4/15RozMp8Mi2r6JDsctFnqA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kingsum",
        "surname": "Chow"
      },
      "authorName": "Chow, Kingsum",
      "articleRefs": [
        {
          "pageNumber": 11,
          "articleName": "Java Performance Troubleshooting and Optimization at Alibaba",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6Pki5vDjIRR2hvFp24PCnX/2KpxLLSxNFaXCJ56QTRISU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shafiul Azam",
        "surname": "Chowdhury"
      },
      "authorName": "Chowdhury, Shafiul Azam",
      "articleRefs": [
        {
          "pageNumber": 452,
          "articleName": "Understanding and Improving Cyber-Physical System Models and Development Tools",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JVZTMBQ0Moq4XEPHzCVVd/BO1pk4MXqVy481gt4VcZn.pdf"
        },
        {
          "pageNumber": 506,
          "articleName": "Automatically Finding Bugs in Commercial Cyber-Physical System Development Tool Chains",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5JiheKcasvQTAijbzzIUHH/6R3AwFA3XlkwVU3O0s1ArD.pdf"
        },
        {
          "pageNumber": 981,
          "articleName": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Henrik",
        "surname": "Christoffersen"
      },
      "authorName": "Christoffersen, Henrik",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ravi",
        "surname": "Chugh"
      },
      "authorName": "Chugh, Ravi",
      "articleRefs": [
        {
          "pageNumber": 654,
          "articleName": "Deuce: A Lightweight User Interface for Structured Editing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1Mth4BXOFVTJCjWvB4WHOp/3upLdV7XPhjL0r2C6eiYqe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Luke",
        "surname": "Church"
      },
      "authorName": "Church, Luke",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Modern Code Review: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Paolo",
        "surname": "Ciancarini"
      },
      "authorName": "Ciancarini, Paolo",
      "articleRefs": [
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        },
        {
          "pageNumber": 157,
          "articleName": "Poster: A Conceptual Model for Cooperative Thinking",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/43kOeXPEu4QHTUCpTW99fs/2Ey35xhO4B5q4gXBlj7ifp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Federico",
        "surname": "Ciccozzi"
      },
      "authorName": "Ciccozzi, Federico",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "UniComp: A Semantics-Aware Model Compiler for Optimised Predictable Software",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/hzHwzSfCAh1hC8lk5nnX3/6Q6xNjTCRFx0Jx8aySTZRl.pdf"
        },
        {
          "pageNumber": 45,
          "articleName": "PROMOpedi: A Web-Content Management-Based Encyclopedia of Software Property Models",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/L9r824WbXdkeD6HOUfjkp/1ic6DVpAntnIwbUz0tL4zI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hilary",
        "surname": "Cinis"
      },
      "authorName": "Cinis, Hilary",
      "articleRefs": [
        {
          "pageNumber": 254,
          "articleName": "Improving the Definition of Software Development Projects Through Design Thinking Led Collaboration Workshops",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5ElL7JQ9jCBuLjbXyimkHW/4vWLTNPc3nHqNgUzRDRnV3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jürgen",
        "surname": "Cito"
      },
      "authorName": "Cito, Jürgen",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Adelina",
        "surname": "Ciurumelea"
      },
      "authorName": "Ciurumelea, Adelina",
      "articleRefs": [
        {
          "pageNumber": 317,
          "articleName": "Poster: Automated User Reviews Analyser",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2XVu8NOmDn7F85PC7nf6wG/5FUBTaBu8fe7Ng64ZOwFED.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maëlick",
        "surname": "Claes"
      },
      "authorName": "Claes, Maëlick",
      "articleRefs": [
        {
          "pageNumber": 705,
          "articleName": "Do Programmers Work at Night or During the Weekend?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3PZI2iH7OZcqmfOhovoPWi/4jMoJeCniCPfvSDteaaNux.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lykes",
        "surname": "Claytor"
      },
      "authorName": "Claytor, Lykes",
      "articleRefs": [
        {
          "pageNumber": 404,
          "articleName": "Poster: Understanding and Leveraging Developer Inexpertise",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6Wyfsjr8AM6PGJt2Nw4jsw/1eB4hHPOy8K6gcGnmDJe9T.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jane",
        "surname": "Cleland-Huang"
      },
      "authorName": "Cleland-Huang, Jane",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "Dronology: An Incubator for Cyber-Physical Systems Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/60Bj5IUfIQNUqonqo6EFmt/79AKWLxdXte7sWSbVlkcwS.pdf"
        },
        {
          "pageNumber": 226,
          "articleName": "Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jO5jPbQCODqSGRusrILtr/6qj2A2RoOEd4Jqd6hegqcw.pdf"
        },
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        },
        {
          "pageNumber": 834,
          "articleName": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anthony",
        "surname": "Cleve"
      },
      "authorName": "Cleve, Anthony",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "SQLInspect: A Static Analyzer to Inspect Database Usage in Java Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3bn80m7mgpwTXF5v44mUTQ/1JsowseYkCwbOQpokqj3Ip.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Grigoreta-Sofia",
        "surname": "Cojocar"
      },
      "authorName": "Cojocar, Grigoreta-Sofia",
      "articleRefs": [
        {
          "pageNumber": 169,
          "articleName": "Poster: A Study of Monitoring Crosscutting Concerns Implementation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1aSXQJAPN6sehPZLHqbnaX/xcz8NsFl7YHoVFgXO5Rpa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Cok"
      },
      "authorName": "Cok, David",
      "articleRefs": [
        {
          "pageNumber": 313,
          "articleName": "Poster: An Algorithm and Tool to Infer Practical Postconditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5VIJZqURpbuELiOLsoX5gB/34qnQCM0ECnQSCfKKWDUUj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael L.",
        "surname": "Collard"
      },
      "authorName": "Collard, Michael L.",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Irina Diana",
        "surname": "Coman"
      },
      "authorName": "Coman, Irina Diana",
      "articleRefs": [
        {
          "pageNumber": 129,
          "articleName": "Poster: An Initial Characterization of Bug-Injecting Development Sessions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7nrXDes1AE17dN1F7CYJII/3tpIHuPtxoFOTTsXewXvBN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nelly",
        "surname": "Condori-Fernandez"
      },
      "authorName": "Condori-Fernandez, Nelly",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FOzcRg0BG6NRLGft0111q/ZDCSeD2qsGxWw2YH3ZSLP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Charles",
        "surname": "Consel"
      },
      "authorName": "Consel, Charles",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Assistive Computing: A Human-Centered Approach to Developing Computing Support for Cognition",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/51dPudqO9FxekQWC0DEXSE/2nwQwvhyFdHxu4mt2lRkC3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "James R.",
        "surname": "Cordy"
      },
      "authorName": "Cordy, James R.",
      "articleRefs": [
        {
          "pageNumber": 267,
          "articleName": "[Journal First] Analyzing a Decade of Linux System Calls",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3KxPueAJM16I029lwLaxWK/3ygzgkL0Nj7pWHNPX3Spik.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fulvio",
        "surname": "Corno"
      },
      "authorName": "Corno, Fulvio",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Easing IoT Development for Novice Programmers Through Code Recipes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ZtsyuXJ5vJnjyeaGgkT4s/3Lq6ORQJLOs8ulbEf7E5Mg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "João Lucas",
        "surname": "Correia"
      },
      "authorName": "Correia, João Lucas",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Loïc",
        "surname": "Correnson"
      },
      "authorName": "Correnson, Loïc",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Valerio",
        "surname": "Cosentino"
      },
      "authorName": "Cosentino, Valerio",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Perceval: Software Project Data at Your Will",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/74BfjuU7YgEDIGvOyOw2jn/3kyGXInAHq50ArWx3rxuYp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Diego",
        "surname": "Costa"
      },
      "authorName": "Costa, Diego",
      "articleRefs": [
        {
          "pageNumber": 410,
          "articleName": "Poster: Memory and Resource Leak Defects in Java Projects: An Empirical Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2f9wrt7uGagtPEL8BMtuH/6fG2npcpWprcKQHHzpzUwr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Steve",
        "surname": "Counsell"
      },
      "authorName": "Counsell, Steve",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "[Journal First] An Empirical Study on the Interplay Between Semantic Coupling and Co-change of Software Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4daDPdF3SLwTXzMDDUsn1K/6WppK0TRL3zRRr0ITDSe93.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Carmen",
        "surname": "Coviello"
      },
      "authorName": "Coviello, Carmen",
      "articleRefs": [
        {
          "pageNumber": 306,
          "articleName": "Poster: CUTER: ClUstering-based TEst Suite Reduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1O6c7LMrpvYO3yKdZ6nu8K/3xiITKaOxnIRfZeDY8Cg9l.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michelle",
        "surname": "Craig"
      },
      "authorName": "Craig, Michelle",
      "articleRefs": [
        {
          "pageNumber": 31,
          "articleName": "Dimensions of Experientialism for Software Engineering Education",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/605U6RSfff0jOaGLn2b2pi/6Exq3LcKAqn1jIVxLN55aJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Emilio",
        "surname": "Cruciani"
      },
      "authorName": "Cruciani, Emilio",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Luis",
        "surname": "Cruz"
      },
      "authorName": "Cruz, Luis",
      "articleRefs": [
        {
          "pageNumber": 400,
          "articleName": "Poster: Measuring the Energy Footprint of Mobile Testing Frameworks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4HNfKbEgki6GpTrNlMKiXX/4Z92r470jWnT8EFS5QPFcT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christoph",
        "surname": "Csallner"
      },
      "authorName": "Csallner, Christoph",
      "articleRefs": [
        {
          "pageNumber": 208,
          "articleName": "Poster: Testing Web-Based Applications with the Voice Controlled Accessibility and Testing Tool (VCAT)",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1BWbKsMWVwdQ2PAjZoUJdu/2luGF9KgPFXAdbicSaC4sa.pdf"
        },
        {
          "pageNumber": 981,
          "articleName": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jesús Sánchez",
        "surname": "Cuadrado"
      },
      "authorName": "Cuadrado, Jesús Sánchez",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "AnATLyzer: An Advanced IDE for ATL Model Transformations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6HUyRSJNffENk0hIDslir4/7ztsIy99oUIxCRJRG6B57S.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fabiano",
        "surname": "Dalpiaz"
      },
      "authorName": "Dalpiaz, Fabiano",
      "articleRefs": [
        {
          "pageNumber": 228,
          "articleName": "Poster: Ethics-Aware Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6W8FQPiYViBDN0kL9GhuFL/42ectUCk4oiAxSpzYKdsHh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hoa Khanh",
        "surname": "Dam"
      },
      "authorName": "Dam, Hoa Khanh",
      "articleRefs": [
        {
          "pageNumber": 53,
          "articleName": "Explainable Software Analytics",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/18qTr6yU8gmdGlxPJwuabL/5riZmj2mdJZSyRCz4NRyUd.pdf"
        },
        {
          "pageNumber": 244,
          "articleName": "Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ADZq6g5I1eGULqO75ycZf/647J63rx8sUzey01F0TAFE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kostadin",
        "surname": "Damevski"
      },
      "authorName": "Damevski, Kostadin",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "StackInTheFlow: Behavior-Driven Recommendation System for Stack Overflow Posts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pf4TOr8bllxPRuTqJOtRM/4f96Fkhh4JVitpN6R8aBMb.pdf"
        },
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniela",
        "surname": "Damian"
      },
      "authorName": "Damian, Daniela",
      "articleRefs": [
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Markus",
        "surname": "Damm"
      },
      "authorName": "Damm, Markus",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcelo",
        "surname": "d’Amorim"
      },
      "authorName": "d’Amorim, Marcelo",
      "articleRefs": [
        {
          "pageNumber": 82,
          "articleName": "Enlightened Debugging",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bH8PUknAyuN3l7zJfadY4/5cLNTz1LRtfwrJOW6Zf3Z.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mirko",
        "surname": "D'Angelo"
      },
      "authorName": "D'Angelo, Mirko",
      "articleRefs": [
        {
          "pageNumber": 101,
          "articleName": "CyPhEF: A Model-Driven Engineering Framework for Self-Adaptive Cyber-Physical Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1gNLLFWWKWZtApQjwZyuuj/2HAORC6UYaMnwzI2dA35YZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Benjamin",
        "surname": "Danglot"
      },
      "authorName": "Danglot, Benjamin",
      "articleRefs": [
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Carlos Eduardo",
        "surname": "da Silva"
      },
      "authorName": "da Silva, Carlos Eduardo",
      "articleRefs": [
        {
          "pageNumber": 125,
          "articleName": "Poster: Reengineering Legacy Systems for Supporting SOA: A Case Study on the Brazilian's Secretary of State for Taxation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6ognbNidqaqq0BBZW0gaoA/7t0eGLrdUTUA7WH1OAYAfE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Edwin",
        "surname": "Dauber"
      },
      "authorName": "Dauber, Edwin",
      "articleRefs": [
        {
          "pageNumber": 356,
          "articleName": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Guglielmo",
        "surname": "De Angelis"
      },
      "authorName": "De Angelis, Guglielmo",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael John",
        "surname": "Decker"
      },
      "authorName": "Decker, Michael John",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniel",
        "surname": "DeFreez"
      },
      "authorName": "DeFreez, Daniel",
      "articleRefs": [
        {
          "pageNumber": 430,
          "articleName": "Poster: Path-Based Function Embeddings",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/13uqQQomxpZIToZ2zI454A/4WnK3w1UjpFGbWZ1mk5omc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Renzo",
        "surname": "Degiovanni"
      },
      "authorName": "Degiovanni, Renzo",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Juan",
        "surname": "de Lara"
      },
      "authorName": "de Lara, Juan",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "AnATLyzer: An Advanced IDE for ATL Model Transformations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6HUyRSJNffENk0hIDslir4/7ztsIy99oUIxCRJRG6B57S.pdf"
        },
        {
          "pageNumber": 1136,
          "articleName": "[Journal First] A Posteriori Typing for Model-Driven Engineering: Concepts, Analysis, and Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4mNiUyA6xEXMQZEdZ4zA4z/7zWVDzPltCbrVhrqyYMy19.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jose Luis",
        "surname": "de la Vara"
      },
      "authorName": "de la Vara, Jose Luis",
      "articleRefs": [
        {
          "pageNumber": 199,
          "articleName": "Poster: Analysis of Requirements Quality Evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Oka6DtRrIRdQoPXKe3Y2t/1Sod1yVld1RpM3H1H2IQs3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yan",
        "surname": "de Lima Justino"
      },
      "authorName": "de Lima Justino, Yan",
      "articleRefs": [
        {
          "pageNumber": 125,
          "articleName": "Poster: Reengineering Legacy Systems for Supporting SOA: A Case Study on the Brazilian's Secretary of State for Taxation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6ognbNidqaqq0BBZW0gaoA/7t0eGLrdUTUA7WH1OAYAfE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Robert",
        "surname": "DeLine"
      },
      "authorName": "DeLine, Robert",
      "articleRefs": [
        {
          "pageNumber": 585,
          "articleName": "[Journal First] Data Scientists in Software Teams: State of the Art and Challenges",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47NY96sCKYhfY6lLApaAdS/UjTg5agZVWapuv8BiuO4t.pdf"
        },
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrea",
        "surname": "De Lucia"
      },
      "authorName": "De Lucia, Andrea",
      "articleRefs": [
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rafael",
        "surname": "de Mello"
      },
      "authorName": "de Mello, Rafael",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        },
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Serge",
        "surname": "Demeyer"
      },
      "authorName": "Demeyer, Serge",
      "articleRefs": [
        {
          "pageNumber": 280,
          "articleName": "Poster: Unit Tests and Component Tests do Make a Difference on Fault Localisation Effectiveness",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1RTqhUi6UtbGqyJRHY9JdB/5ZovXpS8VqZDPU3QMSkzrb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Giovanni",
        "surname": "Denaro"
      },
      "authorName": "Denaro, Giovanni",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bowen",
        "surname": "Deng"
      },
      "authorName": "Deng, Bowen",
      "articleRefs": [
        {
          "pageNumber": 388,
          "articleName": "Poster: Learning to Mine Parallel Natural Language/Source Code Corpora from Stack Overflow",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1iZMJRxsjJaTnjtXZEm8ji/3B4yjZqOJryCSNTmEBfRma.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Flávio Moreira",
        "surname": "de Oliveira"
      },
      "authorName": "de Oliveira, Flávio Moreira",
      "articleRefs": [
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Noel",
        "surname": "de Palma"
      },
      "authorName": "de Palma, Noel",
      "articleRefs": [
        {
          "pageNumber": 392,
          "articleName": "Poster: A Declarative Approach for Updating Distributed Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NuEmP8ZsSnvKNvNyTrrlD/1nPmlCZWlN2oGC90OpEUxG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jean-Christophe",
        "surname": "Deprez"
      },
      "authorName": "Deprez, Jean-Christophe",
      "articleRefs": [
        {
          "pageNumber": 213,
          "articleName": "Helping SMEs to Better Develop Software: Experience Report and Challenges Ahead",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1JYfRO9gh0Ithz1d8uyMA1/4ygQwC2bMpXDfZhyLo60s3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Luigi",
        "surname": "De Russis"
      },
      "authorName": "De Russis, Luigi",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Easing IoT Development for Novice Programmers Through Code Recipes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ZtsyuXJ5vJnjyeaGgkT4s/3Lq6ORQJLOs8ulbEf7E5Mg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arie van",
        "surname": "Deursen"
      },
      "authorName": "Deursen, Arie van",
      "articleRefs": [
        {
          "pageNumber": 101,
          "articleName": "Software Ecosystem Call Graph for Dependency Management",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/199DSNOuJy8dk5Lo1tps7o/4uO2C4sysYHwbKheBX1IQH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bart",
        "surname": "de Water"
      },
      "authorName": "de Water, Bart",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Roberto",
        "surname": "Di Cosmo"
      },
      "authorName": "Di Cosmo, Roberto",
      "articleRefs": [
        {
          "pageNumber": 2,
          "articleName": "Software Heritage: Why and How We Collect, Preserve and Share All the Software Source Code",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/7MMxRx2XeqMINwIWWsmplT/4K8m85QOD25MipXvyPliC8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Oscar",
        "surname": "Dieste"
      },
      "authorName": "Dieste, Oscar",
      "articleRefs": [
        {
          "pageNumber": 1195,
          "articleName": "Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4DXjZ1hszyCVhZZvfNLCgj/2h3ZD73wXPhuAjdGHgymnT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Danny",
        "surname": "Dig"
      },
      "authorName": "Dig, Danny",
      "articleRefs": [
        {
          "pageNumber": 483,
          "articleName": "Accurate and Efficient Refactoring Detection in Commit History",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Juergen",
        "surname": "Dingel"
      },
      "authorName": "Dingel, Juergen",
      "articleRefs": [
        {
          "pageNumber": 97,
          "articleName": "MDebugger: A Model-Level Debugger for UML-RT",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5DzlPjxYvM5N8HVBZIru6H/2y8g0siwmm4J7RXAYS1pNA.pdf"
        },
        {
          "pageNumber": 267,
          "articleName": "[Journal First] Analyzing a Decade of Linux System Calls",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3KxPueAJM16I029lwLaxWK/3ygzgkL0Nj7pWHNPX3Spik.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Elisabetta",
        "surname": "Di Nitto"
      },
      "authorName": "Di Nitto, Elisabetta",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "[Journal First] Experiences and Challenges in Building a Data Intensive System for Data Migration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2XogMA7rD6MGSKQNdBeJYp/7E58nTNchsf4cLz0RCgWQK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Massimiliano",
        "surname": "Di Penta"
      },
      "authorName": "Di Penta, Massimiliano",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Davide",
        "surname": "Di Ruscio"
      },
      "authorName": "Di Ruscio, Davide",
      "articleRefs": [
        {
          "pageNumber": 535,
          "articleName": "[Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract]",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/ktxzV8GdMxTKUoO3iqAdi/4ppbixCN5xA3Zv0WUGwaIa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pooja N.",
        "surname": "Dixit"
      },
      "authorName": "Dixit, Pooja N.",
      "articleRefs": [
        {
          "pageNumber": 741,
          "articleName": "ConflictJS: Finding and Understanding Conflicts Between JavaScript Libraries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7twbgTuy2NJmU9AzxtFLxY/3aHDfMIHUsHnzDo5nGLCfY.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hyunsook",
        "surname": "Do"
      },
      "authorName": "Do, Hyunsook",
      "articleRefs": [
        {
          "pageNumber": 910,
          "articleName": "A Combinatorial Approach for Exposing Off-Nominal Behaviors",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1niPYcBs9KMjWLu6UZNJfB/2u0THsBx1px4D7wndMcz96.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Denghui",
        "surname": "Dong"
      },
      "authorName": "Dong, Denghui",
      "articleRefs": [
        {
          "pageNumber": 11,
          "articleName": "Java Performance Troubleshooting and Optimization at Alibaba",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6Pki5vDjIRR2hvFp24PCnX/2KpxLLSxNFaXCJ56QTRISU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wei",
        "surname": "Dong"
      },
      "authorName": "Dong, Wei",
      "articleRefs": [
        {
          "pageNumber": 214,
          "articleName": "Poster: MC/DC Coverage-Oriented Compiler Optimization for Symbolic Execution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19wMK3y6rrPtypHvRfdvIL/7kv13UfiLfkXF2w30TVg5y.pdf"
        },
        {
          "pageNumber": 871,
          "articleName": "Symbolic Verification of Regular Properties",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IJNV2SslZXLkkcU0nrqLc/73G8pFObrprdyJDH04r5wl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ernani César",
        "surname": "Dos Santos"
      },
      "authorName": "Dos Santos, Ernani César",
      "articleRefs": [
        {
          "pageNumber": 418,
          "articleName": "Poster: A Systematic Literature Review to Support the Selection of User Acceptance Testing Techniques",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/28621IjsF5CqlbNGEX1dtM/XW3rQylLODA98aqhrpwRp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Natalia",
        "surname": "Dragan"
      },
      "authorName": "Dragan, Natalia",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Steven",
        "surname": "Drager"
      },
      "authorName": "Drager, Steven",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhenhua",
        "surname": "Duan"
      },
      "authorName": "Duan, Zhenhua",
      "articleRefs": [
        {
          "pageNumber": 250,
          "articleName": "Poster: Accelerating Counterexample Detection in Software Model Checking",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5UUmbqNY2wGzfapYL40Nox/26lJ0QQJIyzqjiZeJ8O16V.pdf"
        },
        {
          "pageNumber": 254,
          "articleName": "Poster: Android Inter-Component Communication Analysis with Intent Revision",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RR4p3lwomIvgSeCNoWo5u/7q9qgHlyY8QpN3vYDt5l6C.pdf"
        },
        {
          "pageNumber": 859,
          "articleName": "RFC-Directed Differential Testing of Certificate Validation in SSL/TLS Implementations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/15kHg7CwgytsDlnTv3z6u2/ZUw4RKFVhfsc0Bb1AsNmQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Leticia",
        "surname": "Duboc"
      },
      "authorName": "Duboc, Leticia",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Santiago",
        "surname": "Dueñas"
      },
      "authorName": "Dueñas, Santiago",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Perceval: Software Project Data at Your Will",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/74BfjuU7YgEDIGvOyOw2jn/3kyGXInAHq50ArWx3rxuYp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rafael",
        "surname": "Dutra"
      },
      "authorName": "Dutra, Rafael",
      "articleRefs": [
        {
          "pageNumber": 549,
          "articleName": "Efficient Sampling of SAT Solutions for Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2fyL1Vd11RDdXakS4SXepo/4LVpbk5KkDNS1ZKZjpyWq5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kartik",
        "surname": "Dutta"
      },
      "authorName": "Dutta, Kartik",
      "articleRefs": [
        {
          "pageNumber": 193,
          "articleName": "Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46PCpEiqqzcfuFKFQ071QK/704dXR6jLVH4adAgbPP2i8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Robert",
        "surname": "Dyer"
      },
      "authorName": "Dyer, Robert",
      "articleRefs": [
        {
          "pageNumber": 202,
          "articleName": "Poster: Using Consensus to Automatically Infer Post-conditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NFYtBAksKon0AZDQ3kNzF/7glFe6P53311LKbIKeoEJy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vasiliki",
        "surname": "Efstathiou"
      },
      "authorName": "Efstathiou, Vasiliki",
      "articleRefs": [
        {
          "pageNumber": 69,
          "articleName": "Code Review Comments: Language Matters",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/165qeNKip9XUqW8VEtQDW0/41SjKvey4HBZGWpDcrBYdh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexander",
        "surname": "Egyed"
      },
      "authorName": "Egyed, Alexander",
      "articleRefs": [
        {
          "pageNumber": 298,
          "articleName": "Poster: An Automated and Instant Discovery of Concrete Repairs for Model Inconsistencies",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ZXDV27yXUaGfVABEbPh4W/6hS0Qqz6BFxUscbdXS9ZJC.pdf"
        },
        {
          "pageNumber": 397,
          "articleName": "Does the Propagation of Artifact Changes Across Tasks Reflect Work Dependencies?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/k7JQInKioHiNAlLceXGcq/4Zizzu8Ywfs4vylMPr16Jt.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Beyza",
        "surname": "Eken"
      },
      "authorName": "Eken, Beyza",
      "articleRefs": [
        {
          "pageNumber": 488,
          "articleName": "Assessing Personalized Software Defect Predictors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/56BI32EtiUjZ28AvsLjlR0/67ejFNZL10171eoNvzwVtG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Abeer",
        "surname": "Elahraf"
      },
      "authorName": "Elahraf, Abeer",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sebastian",
        "surname": "Elbaum"
      },
      "authorName": "Elbaum, Sebastian",
      "articleRefs": [
        {
          "pageNumber": 688,
          "articleName": "Redefining Prioritization: Continuous Prioritization for Continuous Integration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3IKbJCjT6A0XNalPeqtwYx/48mKfZ4yhnkLlYNigdnCns.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lamyaa",
        "surname": "Eloussi"
      },
      "authorName": "Eloussi, Lamyaa",
      "articleRefs": [
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sascha",
        "surname": "El-Sharkawy"
      },
      "authorName": "El-Sharkawy, Sascha",
      "articleRefs": [
        {
          "pageNumber": 73,
          "articleName": "KernelHaven – An Experimentation Workbench for Analyzing Software Product Lines",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1u3wyx5jiA23CCfzXCQ5Pi/34GYtfvoAfVYrBIyxSbmf6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gregor",
        "surname": "Engels"
      },
      "authorName": "Engels, Gregor",
      "articleRefs": [
        {
          "pageNumber": 292,
          "articleName": "Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1AkIwFloW3mkZDApKaVABX/7lyga27SMIeaITaprTqTOu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hakan",
        "surname": "Erdogmus"
      },
      "authorName": "Erdogmus, Hakan",
      "articleRefs": [
        {
          "pageNumber": 68,
          "articleName": "Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/49j2HKsc7xCbCMCQBewE5d/6YasTauDw1E3JGL4Jft3He.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Morgan",
        "surname": "Ericsson"
      },
      "authorName": "Ericsson, Morgan",
      "articleRefs": [
        {
          "pageNumber": 197,
          "articleName": "Poster: Using Repository Data for Driving Software Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7KkMEL4TPzWlaTUD5Aj0Hd/V0s75jWXuVVK6ky99u5wi.pdf"
        },
        {
          "pageNumber": 216,
          "articleName": "Poster: Introducing Quality Models Based on Joint Probabilities",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IJWpRoZ08GOMTcP32lLK7/5HUHC5NmVCLkRPPdOrslsu.pdf"
        },
        {
          "pageNumber": 220,
          "articleName": "Poster: A Changeset-Based Approach to Assess Source Code Density and Developer Efficacy",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Tm0IqbemtTOBG0FpCKG2m/4AcH1Q8EG4SjleFQ38joZ0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael D.",
        "surname": "Ernst"
      },
      "authorName": "Ernst, Michael D.",
      "articleRefs": [
        {
          "pageNumber": 958,
          "articleName": "Generalized Data Structure Synthesis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/42oFsoJ7RHGAgoPbI5dzk5/2V1Gp0VfIP3nDtDc89Gm45.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Laleh",
        "surname": "Eshkevari"
      },
      "authorName": "Eshkevari, Laleh",
      "articleRefs": [
        {
          "pageNumber": 483,
          "articleName": "Accurate and Efficient Refactoring Detection in Commit History",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xavier",
        "surname": "Etchevers"
      },
      "authorName": "Etchevers, Xavier",
      "articleRefs": [
        {
          "pageNumber": 392,
          "articleName": "Poster: A Declarative Approach for Updating Distributed Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NuEmP8ZsSnvKNvNyTrrlD/1nPmlCZWlN2oGC90OpEUxG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shamal",
        "surname": "Faily"
      },
      "authorName": "Faily, Shamal",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "Redesigning an Undergraduate Software Engineering Course for a Large Cohort",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3g39cLGpyUxZGisjnexmtX/Il0Xh2Abc6hhUNSv1d32N.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lingling",
        "surname": "Fan"
      },
      "authorName": "Fan, Lingling",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anter",
        "surname": "Faree"
      },
      "authorName": "Faree, Anter",
      "articleRefs": [
        {
          "pageNumber": 321,
          "articleName": "Poster: Obfuscating Program Control Flow with Intel SGX",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46LvkSkPnBARdnA4scnxeh/1dPQyq74EXz5tkMycRh9Ve.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fausto",
        "surname": "Fasano"
      },
      "authorName": "Fasano, Fausto",
      "articleRefs": [
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Meysam",
        "surname": "Feghhi"
      },
      "authorName": "Feghhi, Meysam",
      "articleRefs": [
        {
          "pageNumber": 1062,
          "articleName": "[Journal First] Analyzing the Effects of Test Driven Development in GitHub",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7E87zq66ELDArjurWiTGlC/7pQU2PsyQiLteaW3D5kgMw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jonas",
        "surname": "Feist"
      },
      "authorName": "Feist, Jonas",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Robert",
        "surname": "Feldt"
      },
      "authorName": "Feldt, Robert",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Generative Secure Design, Defined",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/28Ti47g1XoQkNrxFNkwOEO/6D4SveoetTi1fAdD6ku27b.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chendong",
        "surname": "Feng"
      },
      "authorName": "Feng, Chendong",
      "articleRefs": [
        {
          "pageNumber": 214,
          "articleName": "Poster: MC/DC Coverage-Oriented Compiler Optimization for Symbolic Execution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19wMK3y6rrPtypHvRfdvIL/7kv13UfiLfkXF2w30TVg5y.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wolfram",
        "surname": "Fenske"
      },
      "authorName": "Fenske, Wolfram",
      "articleRefs": [
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eduardo",
        "surname": "Fernandes"
      },
      "authorName": "Fernandes, Eduardo",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alessio",
        "surname": "Ferrari"
      },
      "authorName": "Ferrari, Alessio",
      "articleRefs": [
        {
          "pageNumber": 536,
          "articleName": "Natural Language Requirements Processing: From Research to Practice",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45ZhVVW7fESrCGLd7YOZQq/4SzwhsqsO7Je02vin728Ca.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maria Angela",
        "surname": "Ferrario"
      },
      "authorName": "Ferrario, Maria Angela",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Isabella",
        "surname": "Ferreira"
      },
      "authorName": "Ferreira, Isabella",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Moritz",
        "surname": "Fey"
      },
      "authorName": "Fey, Moritz",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Joe",
        "surname": "Finney"
      },
      "authorName": "Finney, Joe",
      "articleRefs": [
        {
          "pageNumber": 552,
          "articleName": "Multi-platform Computing for Physical Devices via MakeCode and CODAL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ot68K3aKE7CQfcrmRVKlR/jsk9AWtBkZikr0gw8xmBk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cristiano",
        "surname": "Firmani"
      },
      "authorName": "Firmani, Cristiano",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Parminder",
        "surname": "Flora"
      },
      "authorName": "Flora, Parminder",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3cdPpSbZHTPdKRDJmYqHi5/14bRIwemub5Z9iDjUUa7uz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Baldoino",
        "surname": "Fonseca"
      },
      "authorName": "Fonseca, Baldoino",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        },
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Efraín R.",
        "surname": "Fonseca C."
      },
      "authorName": "Fonseca C., Efraín R.",
      "articleRefs": [
        {
          "pageNumber": 1195,
          "articleName": "Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4DXjZ1hszyCVhZZvfNLCgj/2h3ZD73wXPhuAjdGHgymnT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Francesca Arcelli",
        "surname": "Fontana"
      },
      "authorName": "Fontana, Francesca Arcelli",
      "articleRefs": [
        {
          "pageNumber": 288,
          "articleName": "Poster: Machine Learning Based Code Smell Detection Through WekaNose",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2gDaQr1ksB8ODkMYxzryZz/5wYT53VZ6GfJZXciRk1zCw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Denae",
        "surname": "Ford"
      },
      "authorName": "Ford, Denae",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marios",
        "surname": "Fragkoulis"
      },
      "authorName": "Fragkoulis, Marios",
      "articleRefs": [
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ulrik",
        "surname": "Franke"
      },
      "authorName": "Franke, Ulrik",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2GtTmXlTVQhcRkpEo1qoQM/3BK0YgK2oP3ZJ3spCM5BS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mirco",
        "surname": "Franzago"
      },
      "authorName": "Franzago, Mirco",
      "articleRefs": [
        {
          "pageNumber": 535,
          "articleName": "[Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract]",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/ktxzV8GdMxTKUoO3iqAdi/4ppbixCN5xA3Zv0WUGwaIa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sylvain",
        "surname": "Frey"
      },
      "authorName": "Frey, Sylvain",
      "articleRefs": [
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcelo",
        "surname": "Frias"
      },
      "authorName": "Frias, Marcelo",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Fritz"
      },
      "authorName": "Fritz, Thomas",
      "articleRefs": [
        {
          "pageNumber": 993,
          "articleName": "Context-Aware Conversational Developer Assistants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1XKrnlNgYAXbi9HEtIyOPn/7I9QtgsXIQ77QNhvWlsTtx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Davide",
        "surname": "Fucci"
      },
      "authorName": "Fucci, Davide",
      "articleRefs": [
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kenji",
        "surname": "Fujiwara"
      },
      "authorName": "Fujiwara, Kenji",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yoshiaki",
        "surname": "Fukazawa"
      },
      "authorName": "Fukazawa, Yoshiaki",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Julio",
        "surname": "Furtado"
      },
      "authorName": "Furtado, Julio",
      "articleRefs": [
        {
          "pageNumber": 137,
          "articleName": "Poster: A Methodology to Teaching Statistical Process Control for Software Engineers",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5Fxhj66zTRNy8m928UTJtO/trNe4al0qmo7aqHS6SsSt.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Harald C.",
        "surname": "Gall"
      },
      "authorName": "Gall, Harald C.",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        },
        {
          "pageNumber": 317,
          "articleName": "Poster: Automated User Reviews Analyser",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2XVu8NOmDn7F85PC7nf6wG/5FUBTaBu8fe7Ng64ZOwFED.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Micael",
        "surname": "Gallego"
      },
      "authorName": "Gallego, Micael",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matthias",
        "surname": "Galster"
      },
      "authorName": "Galster, Matthias",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Toward Enhancing the Training of Software Engineering Students and Professionals Using Active Video Watching",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/514Lia1cgT3MTvnEb0jjVq/12MwgOxicqOE6tPJIkAvle.pdf"
        },
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jonas",
        "surname": "Gamalielsson"
      },
      "authorName": "Gamalielsson, Jonas",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jun",
        "surname": "Gao"
      },
      "authorName": "Gao, Jun",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Poster: On Vulnerability Evolution in Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nULBBNKVN3vRo4TxBqzfB/2apYrCqhmwvonAhfSbGWJv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ruizhi",
        "surname": "Gao"
      },
      "authorName": "Gao, Ruizhi",
      "articleRefs": [
        {
          "pageNumber": 1064,
          "articleName": "[Journal First] MSeer – An Advanced Technique for Locating Multiple Bugs in Parallel",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2bXorueAudCxlEMsJerqfd/Og0D36M9R4LoKGCDZbP4J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alessandro",
        "surname": "Garcia"
      },
      "authorName": "Garcia, Alessandro",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        },
        {
          "pageNumber": 858,
          "articleName": "[Journal First] Global-Aware Recommendations for Repairing Violations in Exception Handling",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eNWZZMvEzSZ7Kd4fLfQ6B/657yWIupHe5IFrgvcnH8bJ.pdf"
        },
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sergio",
        "surname": "García"
      },
      "authorName": "García, Sergio",
      "articleRefs": [
        {
          "pageNumber": 438,
          "articleName": "Poster: Towards Multi-robot Applications Planning Under Uncertainty",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5OMIq2Xre09PiJrZEN6sZ1/1qIbZQKf2SutDZRTgOpDaJ.pdf"
        },
        {
          "pageNumber": 454,
          "articleName": "Effective Engineering of Multi-robot Software Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3X5JM95s9XLfHIuYNyxBlw/2whdP4qVU48MOqrNa2j6WK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marko",
        "surname": "Gasparic"
      },
      "authorName": "Gasparic, Marko",
      "articleRefs": [
        {
          "pageNumber": 88,
          "articleName": "Improving Integrated Development Environment Commands Knowledge With Recommender Systems",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2vph05WQ3iK9VFCt3gEw5E/2TSyFSTJYXkqwOxmSAyBve.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Siddhant",
        "surname": "Gawsane"
      },
      "authorName": "Gawsane, Siddhant",
      "articleRefs": [
        {
          "pageNumber": 981,
          "articleName": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Luca",
        "surname": "Gazzola"
      },
      "authorName": "Gazzola, Luca",
      "articleRefs": [
        {
          "pageNumber": 1219,
          "articleName": "[Journal First] Automatic Software Repair: A Survey",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ZwRKZQkILQrDf1dYRc6MX/3GxXiKpuG16Y0aONhuJjab.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Edward",
        "surname": "Gehringer"
      },
      "authorName": "Gehringer, Edward",
      "articleRefs": [
        {
          "pageNumber": 40,
          "articleName": "Open-Source Software in Class: Students' Common Mistakes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/Aqs0gf1RPfzilfgb9ZyI3/1l4siOSDqHYjJEhkm195YS.pdf"
        },
        {
          "pageNumber": 147,
          "articleName": "Poster: Improving Formation of Student Teams: A Clustering Approach",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6OdCnFISWjwpH1KZizzaXP/2kocifGfEnvPAE8UATEbgY.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zoltán",
        "surname": "Gera"
      },
      "authorName": "Gera, Zoltán",
      "articleRefs": [
        {
          "pageNumber": 428,
          "articleName": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Simos",
        "surname": "Gerasimou"
      },
      "authorName": "Gerasimou, Simos",
      "articleRefs": [
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lea",
        "surname": "Gerling"
      },
      "authorName": "Gerling, Lea",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Automated Migration Support for Software Product Line Co-evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4CqA1ySu5pLzpR0zG80jCO/3QaPR5SUOtbuxB6z0TOK3S.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniel",
        "surname": "German"
      },
      "authorName": "German, Daniel",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        },
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        },
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rene",
        "surname": "German"
      },
      "authorName": "German, Rene",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Gerndt"
      },
      "authorName": "Gerndt, Michael",
      "articleRefs": [
        {
          "pageNumber": 115,
          "articleName": "Tool-Based Interactive Software Parallelization: A Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6WOIQt9qfOJgDlYDiHswtu/4d3FRvoz63ZHw3qyaofuzP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marco Aurélio",
        "surname": "Gerosa"
      },
      "authorName": "Gerosa, Marco Aurélio",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Almost There: A Study on Quasi-Contributors in Open-Source Software Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1yorvAqsWddHbVWuLi4YZy/6NexNkxSmHQvVZ35CgSXP3.pdf"
        },
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christian",
        "surname": "Gerth"
      },
      "authorName": "Gerth, Christian",
      "articleRefs": [
        {
          "pageNumber": 292,
          "articleName": "Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1AkIwFloW3mkZDApKaVABX/7lyga27SMIeaITaprTqTOu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Smita",
        "surname": "Ghaisas"
      },
      "authorName": "Ghaisas, Smita",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Resolving Ambiguities in Regulations: Towards Achieving the Kohlbergian Stage of Principled Morality",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/69icpikVftpm7I1bG2Rw90/5etwQxKickKUsDOy6kRsul.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mohammadreza",
        "surname": "Ghanavati"
      },
      "authorName": "Ghanavati, Mohammadreza",
      "articleRefs": [
        {
          "pageNumber": 410,
          "articleName": "Poster: Memory and Resource Leak Defects in Java Projects: An Empirical Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2f9wrt7uGagtPEL8BMtuH/6fG2npcpWprcKQHHzpzUwr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Carlo",
        "surname": "Ghezzi"
      },
      "authorName": "Ghezzi, Carlo",
      "articleRefs": [
        {
          "pageNumber": 434,
          "articleName": "Poster: Property Specification Patterns for Robotic Missions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Negar",
        "surname": "Ghorbani"
      },
      "authorName": "Ghorbani, Negar",
      "articleRefs": [
        {
          "pageNumber": 846,
          "articleName": "A Temporal Permission Analysis and Enforcement Framework for Android",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Aditya",
        "surname": "Ghose"
      },
      "authorName": "Ghose, Aditya",
      "articleRefs": [
        {
          "pageNumber": 53,
          "articleName": "Explainable Software Analytics",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/18qTr6yU8gmdGlxPJwuabL/5riZmj2mdJZSyRCz4NRyUd.pdf"
        },
        {
          "pageNumber": 244,
          "articleName": "Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ADZq6g5I1eGULqO75ycZf/647J63rx8sUzey01F0TAFE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Milos",
        "surname": "Gligoric"
      },
      "authorName": "Gligoric, Milos",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "A Regression Proof Selection Tool For Coq",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4d3wTvZAzM1UeluRGK5ggk/73ZV4s78VDohful3g6T0eF.pdf"
        },
        {
          "pageNumber": 233,
          "articleName": "Towards Refactoring-Aware Regression Test Selection",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BrWrDMhElZLM98cH2EedZ/6wu4To3mrpKod0nsChTY6L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Martin",
        "surname": "Glinz"
      },
      "authorName": "Glinz, Martin",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "User Feedback in the App Store: A Cross-Cultural Study",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf"
        },
        {
          "pageNumber": 49,
          "articleName": "GuideGen - A Tool for Keeping Requirements and Acceptance Tests Aligned",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/tiBFuIRCFc0O11vg75g6O/5E7xunX7Xo0JsCChdM9dA0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christophe",
        "surname": "Gnaho"
      },
      "authorName": "Gnaho, Christophe",
      "articleRefs": [
        {
          "pageNumber": 368,
          "articleName": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Godfrey"
      },
      "authorName": "Godfrey, Michael",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mojdeh",
        "surname": "Golagha"
      },
      "authorName": "Golagha, Mojdeh",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Aletheia: A Failure Diagnosis Toolchain",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RuHKRW0D4nCqMWOQR7oTQ/5l0kvbcWGGmPFfiQv1YvL6.pdf"
        },
        {
          "pageNumber": 204,
          "articleName": "Poster: Pairika—A Failure Diagnosis Benchmark for C++ Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/f1ubgK4ymojHoMrnw03rC/3VlpXQf3WB9xHCuvaGO8zz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nicolas",
        "surname": "Gold"
      },
      "authorName": "Gold, Nicolas",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pablo",
        "surname": "Gomez-Abajo"
      },
      "authorName": "Gomez-Abajo, Pablo",
      "articleRefs": [
        {
          "pageNumber": 232,
          "articleName": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yunzhan",
        "surname": "Gong"
      },
      "authorName": "Gong, Yunzhan",
      "articleRefs": [
        {
          "pageNumber": 236,
          "articleName": "Poster: Subsuming Mutation Operators",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/12EuynTWt9AtmaEN1SAUSE/3T1yWN6lEd57lNObJ4B2uT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jesus M.",
        "surname": "Gonzalez-Barahona"
      },
      "authorName": "Gonzalez-Barahona, Jesus M.",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Perceval: Software Project Data at Your Will",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/74BfjuU7YgEDIGvOyOw2jn/3kyGXInAHq50ArWx3rxuYp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matthew",
        "surname": "Gordon"
      },
      "authorName": "Gordon, Matthew",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Toward Enhancing the Training of Software Engineering Students and Professionals Using Active Video Watching",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/514Lia1cgT3MTvnEb0jjVq/12MwgOxicqOE6tPJIkAvle.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tony",
        "surname": "Gorschek"
      },
      "authorName": "Gorschek, Tony",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Francisco",
        "surname": "Gortázar"
      },
      "authorName": "Gortázar, Francisco",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefan",
        "surname": "Götz"
      },
      "authorName": "Götz, Stefan",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Claire Le",
        "surname": " Goues"
      },
      "authorName": "Goues, Claire Le",
      "articleRefs": [
        {
          "pageNumber": 446,
          "articleName": "Poster: BugZoo – A Platform for Studying Software Bugs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45zwa1bRIOh1A6fI6pqtjD/6r2CoIFj6WjZXHtWAgT3hP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Miguel",
        "surname": "Goulão"
      },
      "authorName": "Goulão, Miguel",
      "articleRefs": [
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Georgios",
        "surname": "Gousios"
      },
      "authorName": "Gousios, Georgios",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Enabling Real-Time Feedback in Software Engineering",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf"
        },
        {
          "pageNumber": 101,
          "articleName": "Software Ecosystem Call Graph for Dependency Management",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/199DSNOuJy8dk5Lo1tps7o/4uO2C4sysYHwbKheBX1IQH.pdf"
        },
        {
          "pageNumber": 540,
          "articleName": "How to Analyze Git Repositories with Command Line Tools: We're not in Kansas Anymore",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ez2GftNEYDvJXCwDk6umC/5YKnoCvwDQQN7mGMEmps6W.pdf"
        },
        {
          "pageNumber": 542,
          "articleName": "Big Data Software Analytics with Apache Spark",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Pq1pHhWkuE8B9vxwVjvDS/2EQ0kQL1MCbGUXNIsabNTG.pdf"
        },
        {
          "pageNumber": 752,
          "articleName": "Debugging Data Flows in Reactive Programs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/26QEHcXcpHFGmR9nd5fSPW/57Rpui1pbPGVNJ0KqbEOcB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jens",
        "surname": "Grabowski"
      },
      "authorName": "Grabowski, Jens",
      "articleRefs": [
        {
          "pageNumber": 1063,
          "articleName": "[Journal First] A Comparative Study to Benchmark Cross-Project Defect Prediction Approaches",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4wjQzs7ahFsVXOSxRYBKNq/40Ftiu3aqu6aAzbzpsyyD4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bence",
        "surname": "Graics"
      },
      "authorName": "Graics, Bence",
      "articleRefs": [
        {
          "pageNumber": 113,
          "articleName": "The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2oUedkh05E6LoFEamVXTkw/20ZzJFufxJ3lFczmyQR7IW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Catarina",
        "surname": "Gralha"
      },
      "authorName": "Gralha, Catarina",
      "articleRefs": [
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stewart",
        "surname": "Grant"
      },
      "authorName": "Grant, Stewart",
      "articleRefs": [
        {
          "pageNumber": 1149,
          "articleName": "Inferring and Asserting Distributed System Invariants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/24lb1U1vGXVTQ9ilBi3gLD/5c5Zch9tqgfvr3747kdOg6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniel",
        "surname": "Graziotin"
      },
      "authorName": "Graziotin, Daniel",
      "articleRefs": [
        {
          "pageNumber": 242,
          "articleName": "Poster: Communication in Open-Source Projects–End of the E-mail Era?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1j4w2owFLsJWGemRCe3RPJ/4ohDY2rD3K4zRwV3ou34JL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chase",
        "surname": "Greco"
      },
      "authorName": "Greco, Chase",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "StackInTheFlow: Behavior-Driven Recommendation System for Stack Overflow Posts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pf4TOr8bllxPRuTqJOtRM/4f96Fkhh4JVitpN6R8aBMb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rachel",
        "surname": "Greenstadt"
      },
      "authorName": "Greenstadt, Rachel",
      "articleRefs": [
        {
          "pageNumber": 356,
          "articleName": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Timo",
        "surname": "Greifenberg"
      },
      "authorName": "Greifenberg, Timo",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Russell",
        "surname": "Grenier"
      },
      "authorName": "Grenier, Russell",
      "articleRefs": [
        {
          "pageNumber": 1062,
          "articleName": "[Journal First] Analyzing the Effects of Test Driven Development in GitHub",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7E87zq66ELDArjurWiTGlC/7pQU2PsyQiLteaW3D5kgMw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alex",
        "surname": "Groce"
      },
      "authorName": "Groce, Alex",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Raffaela",
        "surname": "Groner"
      },
      "authorName": "Groner, Raffaela",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Volker",
        "surname": "Gruhn"
      },
      "authorName": "Gruhn, Volker",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "A Data Decomposition Method for Stepwise Migration of Complex Legacy Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3O1Ktk2tXxpTHy1ufdypxO/4EhNANlLNIYSkF2FDJHDAs.pdf"
        },
        {
          "pageNumber": 159,
          "articleName": "Poster: Situation-Based E-Learning in Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf"
        },
        {
          "pageNumber": 704,
          "articleName": "[Journal First] Does Syntax Highlighting Help Programming Novices?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3JFh3A5Bq7RbQ9rmj9ApFQ/61S7AqzTq8KHZfKNCtl9NR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Orna",
        "surname": "Grumberg"
      },
      "authorName": "Grumberg, Orna",
      "articleRefs": [
        {
          "pageNumber": 218,
          "articleName": "Poster: Program Repair that Learns from Mistakes",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5WYshgXWWlCoNftsjI3HqS/3gQhUCRnqq5G6N5jKJapeL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lars",
        "surname": "Grunske"
      },
      "authorName": "Grunske, Lars",
      "articleRefs": [
        {
          "pageNumber": 129,
          "articleName": "Semantic Program Repair Using a Reference Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2ndg0exc1x8lxEFXhKm0g0/1N19faKQEkIWF1UTM7JlA4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ming",
        "surname": "Gu"
      },
      "authorName": "Gu, Ming",
      "articleRefs": [
        {
          "pageNumber": 69,
          "articleName": "Weak-Assert: A Weakness-Oriented Assertion Recommendation Toolkit for Program Analysis",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6wHKrC9nn3wmYB20hFTiuW/5Tl0zuxP7CFvCY4qWXe0ge.pdf"
        },
        {
          "pageNumber": 327,
          "articleName": "Poster: Model-Based Adaptation to Extreme Physical Environments: A Case Study on Mixed-Criticality Industrial Ethernet",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7GtVpgolsvwHY6LHPyhM13/4H225Nz2cYgCYnKtZIi1er.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiaodong",
        "surname": "Gu"
      },
      "authorName": "Gu, Xiaodong",
      "articleRefs": [
        {
          "pageNumber": 933,
          "articleName": "Deep Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6YGOIojlzNINpMgNCiWexy/1XBHyJ8bsQpXg13bh3bS9O.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Esther",
        "surname": "Guerra"
      },
      "authorName": "Guerra, Esther",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "AnATLyzer: An Advanced IDE for ATL Model Transformations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6HUyRSJNffENk0hIDslir4/7ztsIy99oUIxCRJRG6B57S.pdf"
        },
        {
          "pageNumber": 1136,
          "articleName": "[Journal First] A Posteriori Typing for Model-Driven Engineering: Concepts, Analysis, and Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4mNiUyA6xEXMQZEdZ4zA4z/7zWVDzPltCbrVhrqyYMy19.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sumit",
        "surname": "Gulwani"
      },
      "authorName": "Gulwani, Sumit",
      "articleRefs": [
        {
          "pageNumber": 78,
          "articleName": "Compilation Error Repair: For the Student Programs, From the Student Programs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Muhammad Ali",
        "surname": "Gulzar"
      },
      "authorName": "Gulzar, Muhammad Ali",
      "articleRefs": [
        {
          "pageNumber": 509,
          "articleName": "Interactive and Automated Debugging for Big Data Analytics",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/188doY8oxmCjN0EdlE23TZ/5Oc01PAwjhI9a1jBByORdl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jianmei",
        "surname": "Guo"
      },
      "authorName": "Guo, Jianmei",
      "articleRefs": [
        {
          "pageNumber": 11,
          "articleName": "Java Performance Troubleshooting and Optimization at Alibaba",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6Pki5vDjIRR2hvFp24PCnX/2KpxLLSxNFaXCJ56QTRISU.pdf"
        },
        {
          "pageNumber": 1027,
          "articleName": "To Preserve or Not to Preserve Invalid Solutions in Search-Based Software Engineering: A Case Study in Software Product Lines",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eLhDKSnOjZaBnTjUD3mLd/4zL0DqW0XJoJyYVopX6pxS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yuchen",
        "surname": "Guo"
      },
      "authorName": "Guo, Yuchen",
      "articleRefs": [
        {
          "pageNumber": 325,
          "articleName": "Poster: Bridging Effort-Aware Prediction and Strong Classification - A Just-in-Time Software Defect Prediction Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W55obxh9gzemjqfGcWAPj/3f132O9xPg1LX5ixGPIYgu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arushi",
        "surname": "Gupta"
      },
      "authorName": "Gupta, Arushi",
      "articleRefs": [
        {
          "pageNumber": 444,
          "articleName": "Poster: Answering the Requirements Traceability Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54xELw09vUNSoYFjh1AziH/3vdJIWxnVZhNTP9QUA8bWD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Adriana-Mihaela",
        "surname": "Guran"
      },
      "authorName": "Guran, Adriana-Mihaela",
      "articleRefs": [
        {
          "pageNumber": 169,
          "articleName": "Poster: A Study of Monitoring Crosscutting Concerns Implementation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1aSXQJAPN6sehPZLHqbnaX/xcz8NsFl7YHoVFgXO5Rpa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tural",
        "surname": "Gurbanov"
      },
      "authorName": "Gurbanov, Tural",
      "articleRefs": [
        {
          "pageNumber": 88,
          "articleName": "Improving Integrated Development Environment Commands Knowledge With Recommender Systems",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2vph05WQ3iK9VFCt3gEw5E/2TSyFSTJYXkqwOxmSAyBve.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tomas",
        "surname": "Gustavsson"
      },
      "authorName": "Gustavsson, Tomas",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Francisco J.",
        "surname": "Gutierrez"
      },
      "authorName": "Gutierrez, Francisco J.",
      "articleRefs": [
        {
          "pageNumber": 98,
          "articleName": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Guttendorf"
      },
      "authorName": "Guttendorf, David",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Emitza",
        "surname": "Guzman"
      },
      "authorName": "Guzman, Emitza",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "User Feedback in the App Store: A Cross-Cultural Study",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mayy",
        "surname": "Habayeb"
      },
      "authorName": "Habayeb, Mayy",
      "articleRefs": [
        {
          "pageNumber": 700,
          "articleName": "[Journal First] On the Use of Hidden Markov Model to Predict the Time to Fix Bugs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4cSxEsEH079Uzvt1ewbxGs/2pB5Js1Y9qRj6SNwMZQQHH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ibrahim",
        "surname": "Habli"
      },
      "authorName": "Habli, Ibrahim",
      "articleRefs": [
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Irit",
        "surname": "Hadar"
      },
      "authorName": "Hadar, Irit",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tyler",
        "surname": "Haden"
      },
      "authorName": "Haden, Tyler",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "StackInTheFlow: Behavior-Driven Recommendation System for Stack Overflow Posts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pf4TOr8bllxPRuTqJOtRM/4f96Fkhh4JVitpN6R8aBMb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "William G. J.",
        "surname": "Halfond"
      },
      "authorName": "Halfond, William G. J.",
      "articleRefs": [
        {
          "pageNumber": 140,
          "articleName": "Automated Repair of Mobile Friendly Problems in Web Pages",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6AsOqvoJNpU0u12eBMc4m9/23Ce40gydrYlLzkd7LB4it.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mahmoud",
        "surname": "Hammad"
      },
      "authorName": "Hammad, Mahmoud",
      "articleRefs": [
        {
          "pageNumber": 421,
          "articleName": "A Large-Scale Empirical Study on the Effects of Code Obfuscations on Android Apps and Anti-Malware Products",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7f234whcYWFE7F5MkE14fI/2SWs4RmA9Epgmb4okKjMz0.pdf"
        },
        {
          "pageNumber": 497,
          "articleName": "[Journal First] Lightweight, Obfuscation-Resilient Detection and Family Identification of Android Malware",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nEJytH1hn6nJ0tb77mA8t/6GTTGGl8wHMuhMg7g3ja9B.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Imed",
        "surname": "Hammouda"
      },
      "authorName": "Hammouda, Imed",
      "articleRefs": [
        {
          "pageNumber": 398,
          "articleName": "Poster: Towards a Formal API Assessment",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4EuktLE7DiRjvzvyG7KuGH/1qqZgquooeCI3zSxGd3tTx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christoph",
        "surname": "Hannebauer"
      },
      "authorName": "Hannebauer, Christoph",
      "articleRefs": [
        {
          "pageNumber": 704,
          "articleName": "[Journal First] Does Syntax Highlighting Help Programming Novices?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3JFh3A5Bq7RbQ9rmj9ApFQ/61S7AqzTq8KHZfKNCtl9NR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dan",
        "surname": "Hao"
      },
      "authorName": "Hao, Dan",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Context-Aware Patch Generation for Better Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2FydAwOD2o1un1UuWRcZuR/4DiUknL45OPujvaqe5CpDE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jens",
        "surname": "Happe"
      },
      "authorName": "Happe, Jens",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Richard",
        "surname": "Harang"
      },
      "authorName": "Harang, Richard",
      "articleRefs": [
        {
          "pageNumber": 356,
          "articleName": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ahmed E.",
        "surname": "Hassan"
      },
      "authorName": "Hassan, Ahmed E.",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3cdPpSbZHTPdKRDJmYqHi5/14bRIwemub5Z9iDjUUa7uz.pdf"
        },
        {
          "pageNumber": 286,
          "articleName": "An Experience Report on Defect Modelling in Practice: Pitfalls and Challenges",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1XE1Rcu3h9nk31GZtFimCl/5FPku5dJlOtWZkQS6QB4ck.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Foyzul",
        "surname": "Hassan"
      },
      "authorName": "Hassan, Foyzul",
      "articleRefs": [
        {
          "pageNumber": 1078,
          "articleName": "HireBuild: An Automatic Approach to History-Driven Repair of Build Scripts",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4EunJVbQWNAoytXaDKsWQW/vjspQNQozfRX2hXLvcDJ7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wilhelm",
        "surname": "Hasselbring"
      },
      "authorName": "Hasselbring, Wilhelm",
      "articleRefs": [
        {
          "pageNumber": 342,
          "articleName": "Poster: Toward Measuring Software Coupling via Weighted Dynamic Metrics",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41fj03MKzInGka8tUKZp0i/5yOrS7srH4d0FvNS6liBJc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tomer",
        "surname": "Hasson"
      },
      "authorName": "Hasson, Tomer",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pinjia",
        "surname": "He"
      },
      "authorName": "He, Pinjia",
      "articleRefs": [
        {
          "pageNumber": 360,
          "articleName": "Poster: Efficient Blockchain-Based Software Systems via Hierarchical Bucket Tree",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kqs7SQRatS1ve2ystqzZc/1G7CJAIYcAjDhZBKietcio.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrew",
        "surname": "Head"
      },
      "authorName": "Head, Andrew",
      "articleRefs": [
        {
          "pageNumber": 643,
          "articleName": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sarah",
        "surname": "Heckman"
      },
      "authorName": "Heckman, Sarah",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "10+ Years of Teaching Software Engineering with iTrust: The Good, the Bad, and the Ugly",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3EjhI0gr5St4AFs3lVXxnq/1oGHNe0eI3D9HLwWrcK93B.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ville T.",
        "surname": "Heikkilä"
      },
      "authorName": "Heikkilä, Ville T.",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Robert",
        "surname": "Heinrich"
      },
      "authorName": "Heinrich, Robert",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Joseph",
        "surname": "Hejderup"
      },
      "authorName": "Hejderup, Joseph",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Enabling Real-Time Feedback in Software Engineering",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf"
        },
        {
          "pageNumber": 101,
          "articleName": "Software Ecosystem Call Graph for Dependency Management",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/199DSNOuJy8dk5Lo1tps7o/4uO2C4sysYHwbKheBX1IQH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rogardt",
        "surname": "Heldal"
      },
      "authorName": "Heldal, Rogardt",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dominik",
        "surname": "Hellhake"
      },
      "authorName": "Hellhake, Dominik",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Aletheia: A Failure Diagnosis Toolchain",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RuHKRW0D4nCqMWOQR7oTQ/5l0kvbcWGGmPFfiQv1YvL6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hadi",
        "surname": "Hemmati"
      },
      "authorName": "Hemmati, Hadi",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jAtRSWcHJcJZLW9lwLKTT/3ZbcW64L99h5TIvUQiBeJI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Brian",
        "surname": "Hempel"
      },
      "authorName": "Hempel, Brian",
      "articleRefs": [
        {
          "pageNumber": 654,
          "articleName": "Deuce: A Lightweight User Interface for Structured Editing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1Mth4BXOFVTJCjWvB4WHOp/3upLdV7XPhjL0r2C6eiYqe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Steffen",
        "surname": "Herbold"
      },
      "authorName": "Herbold, Steffen",
      "articleRefs": [
        {
          "pageNumber": 1063,
          "articleName": "[Journal First] A Comparative Study to Benchmark Cross-Project Defect Prediction Approaches",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4wjQzs7ahFsVXOSxRYBKNq/40Ftiu3aqu6aAzbzpsyyD4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marc",
        "surname": "Hesenius"
      },
      "authorName": "Hesenius, Marc",
      "articleRefs": [
        {
          "pageNumber": 704,
          "articleName": "[Journal First] Does Syntax Highlighting Help Programming Novices?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3JFh3A5Bq7RbQ9rmj9ApFQ/61S7AqzTq8KHZfKNCtl9NR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Claudia",
        "surname": "Hildebrand"
      },
      "authorName": "Hildebrand, Claudia",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nicolas",
        "surname": "Hili"
      },
      "authorName": "Hili, Nicolas",
      "articleRefs": [
        {
          "pageNumber": 97,
          "articleName": "MDebugger: A Model-Level Debugger for UML-RT",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5DzlPjxYvM5N8HVBZIru6H/2y8g0siwmm4J7RXAYS1pNA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrew",
        "surname": "Hill"
      },
      "authorName": "Hill, Andrew",
      "articleRefs": [
        {
          "pageNumber": 339,
          "articleName": "Poster: Automated Program Repair with Canonical Constraints",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5HuJ0DRe1lVP5flrt0olas/cYoM2zEz7jQb9DOHiHPMV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Charles",
        "surname": "Hill"
      },
      "authorName": "Hill, Charles",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Steffen",
        "surname": "Hillemacher"
      },
      "authorName": "Hillemacher, Steffen",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Hilton"
      },
      "authorName": "Hilton, Michael",
      "articleRefs": [
        {
          "pageNumber": 191,
          "articleName": "A Study of the Organizational Dynamics of Software Teams",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5gNECKysiAKSNV7IxUGaay/2VTsVJPZtHSofCGoLJHNhU.pdf"
        },
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Abram",
        "surname": "Hindle"
      },
      "authorName": "Hindle, Abram",
      "articleRefs": [
        {
          "pageNumber": 1062,
          "articleName": "[Journal First] Analyzing the Effects of Test Driven Development in GitHub",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7E87zq66ELDArjurWiTGlC/7pQU2PsyQiLteaW3D5kgMw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kenji",
        "surname": "Hisazumi"
      },
      "authorName": "Hisazumi, Kenji",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nancy",
        "surname": "Hitschfeld"
      },
      "authorName": "Hitschfeld, Nancy",
      "articleRefs": [
        {
          "pageNumber": 98,
          "articleName": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Douglas",
        "surname": "Hiura Longo"
      },
      "authorName": "Hiura Longo, Douglas",
      "articleRefs": [
        {
          "pageNumber": 418,
          "articleName": "Poster: A Systematic Literature Review to Support the Selection of User Acceptance Testing Techniques",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/28621IjsF5CqlbNGEX1dtM/XW3rQylLODA98aqhrpwRp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Brahim",
        "surname": "Hnich"
      },
      "authorName": "Hnich, Brahim",
      "articleRefs": [
        {
          "pageNumber": 398,
          "articleName": "Poster: Towards a Formal API Assessment",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4EuktLE7DiRjvzvyG7KuGH/1qqZgquooeCI3zSxGd3tTx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mischa",
        "surname": "Höchsmann"
      },
      "authorName": "Höchsmann, Mischa",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Variant Management Solution for Large Scale Software Product Lines",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4J94vc6uZu9C5yPCTynFex/1z41fCXlOqEfSXyXWq6peW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Birgit",
        "surname": "Hofer"
      },
      "authorName": "Hofer, Birgit",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Benjamin",
        "surname": "Holland"
      },
      "authorName": "Holland, Benjamin",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "COMB: Computing Relevant Program Behaviors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Josie",
        "surname": "Holmes"
      },
      "authorName": "Holmes, Josie",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Reid",
        "surname": "Holmes"
      },
      "authorName": "Holmes, Reid",
      "articleRefs": [
        {
          "pageNumber": 31,
          "articleName": "Dimensions of Experientialism for Software Engineering Education",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/605U6RSfff0jOaGLn2b2pi/6Exq3LcKAqn1jIVxLN55aJ.pdf"
        },
        {
          "pageNumber": 993,
          "articleName": "Context-Aware Conversational Developer Assistants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1XKrnlNgYAXbi9HEtIyOPn/7I9QtgsXIQ77QNhvWlsTtx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kiyoshi",
        "surname": "Honda"
      },
      "authorName": "Honda, Kiyoshi",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sebastian",
        "surname": "Hönel"
      },
      "authorName": "Hönel, Sebastian",
      "articleRefs": [
        {
          "pageNumber": 220,
          "articleName": "Poster: A Changeset-Based Approach to Assess Source Code Density and Developer Efficacy",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Tm0IqbemtTOBG0FpCKG2m/4AcH1Q8EG4SjleFQ38joZ0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Seongjoon",
        "surname": "Hong"
      },
      "authorName": "Hong, Seongjoon",
      "articleRefs": [
        {
          "pageNumber": 1244,
          "articleName": "Automatically Generating Search Heuristics for Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5k6pWQxBOWJa9S1UiZ2A2n/6sJ0ZusmvQqfPy9dyjzenc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andre",
        "surname": "Hora"
      },
      "authorName": "Hora, Andre",
      "articleRefs": [
        {
          "pageNumber": 1102,
          "articleName": "Assessing the Threat of Untracked Changes in Software Evolution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jennifer",
        "surname": "Horkhoff"
      },
      "authorName": "Horkhoff, Jennifer",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Generative Secure Design, Defined",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/28Ti47g1XoQkNrxFNkwOEO/6D4SveoetTi1fAdD6ku27b.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Guilherme",
        "surname": "Horta Travassos"
      },
      "authorName": "Horta Travassos, Guilherme",
      "articleRefs": [
        {
          "pageNumber": 1194,
          "articleName": "[Journal First] Challenges and Pitfalls on Surveying Evidence in the Software Engineering Technical Literature: An Exploratory Study with Novices",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eOAQt0CIgL4F5n3HwADCt/4duvB0d69UshSNJsqlMUII.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gábor",
        "surname": "Horváth"
      },
      "authorName": "Horváth, Gábor",
      "articleRefs": [
        {
          "pageNumber": 428,
          "articleName": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Amber",
        "surname": "Horvath"
      },
      "authorName": "Horvath, Amber",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shintaro",
        "surname": "Hosoai"
      },
      "authorName": "Hosoai, Shintaro",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sofija",
        "surname": "Hotomski"
      },
      "authorName": "Hotomski, Sofija",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "GuideGen - A Tool for Keeping Requirements and Acceptance Tests Aligned",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/tiBFuIRCFc0O11vg75g6O/5E7xunX7Xo0JsCChdM9dA0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jenny",
        "surname": "Hotzkow"
      },
      "authorName": "Hotzkow, Jenny",
      "articleRefs": [
        {
          "pageNumber": 370,
          "articleName": "Poster: Efficient GUI Test Generation by Learning from Tests of Other Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Zfi6QHPNFSKTZ6ErDMQO9/6tabCma7zW4FFjzRbx7Jv3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Frank",
        "surname": "Houdek"
      },
      "authorName": "Houdek, Frank",
      "articleRefs": [
        {
          "pageNumber": 131,
          "articleName": "Poster: Challenges with Automotive Test Case Specifications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/22HRkItZGtp9E0KerKRG6U/55RByn2pvzw3VEvvRElf7v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wenying",
        "surname": "Hu"
      },
      "authorName": "Hu, Wenying",
      "articleRefs": [
        {
          "pageNumber": 386,
          "articleName": "Poster: USE: Unified and Split Execution for Exposing Divergences between Versions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6LPcye0HvDGcTC8pmjMow0/53CrwfyS24ctiDhG2v3XKZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhewei",
        "surname": "Hu"
      },
      "authorName": "Hu, Zhewei",
      "articleRefs": [
        {
          "pageNumber": 40,
          "articleName": "Open-Source Software in Class: Students' Common Mistakes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/Aqs0gf1RPfzilfgb9ZyI3/1l4siOSDqHYjJEhkm195YS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jinru",
        "surname": "Hua"
      },
      "authorName": "Hua, Jinru",
      "articleRefs": [
        {
          "pageNumber": 12,
          "articleName": "Towards Practical Program Repair with On-demand Candidate Generation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2E5RW0qgO8jUBND0skhRAJ/2dmZrsD625tVeRcqta1x9.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xin",
        "surname": "Huang"
      },
      "authorName": "Huang, Xin",
      "articleRefs": [
        {
          "pageNumber": 1207,
          "articleName": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhiqiu",
        "surname": "Huang"
      },
      "authorName": "Huang, Zhiqiu",
      "articleRefs": [
        {
          "pageNumber": 264,
          "articleName": "Poster: Runtime Verification of Memory Safety via Source Transformation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Wbn7Rsr2KgwIg0ZjVZVST/4QprgKUvAMwZswtLxX0jf2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marianne",
        "surname": "Huchard"
      },
      "authorName": "Huchard, Marianne",
      "articleRefs": [
        {
          "pageNumber": 304,
          "articleName": "Poster: On Extracting Relevant and Complex Variability Information from Software Descriptions with Pattern Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5qpsBHLVvt6ITKmG4P5Aes/6VeSDOFMGM7oBcQsDZmBjQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jevgenij",
        "surname": "Huebert"
      },
      "authorName": "Huebert, Jevgenij",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Joshua",
        "surname": "Huseman"
      },
      "authorName": "Huseman, Joshua",
      "articleRefs": [
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Casidhe",
        "surname": "Hutchison"
      },
      "authorName": "Hutchison, Casidhe",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Claudia",
        "surname": "Iacob"
      },
      "authorName": "Iacob, Claudia",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "Redesigning an Undergraduate Software Engineering Course for a Large Cohort",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3g39cLGpyUxZGisjnexmtX/Il0Xh2Abc6hhUNSv1d32N.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "M. Usman",
        "surname": "Iftikhar"
      },
      "authorName": "Iftikhar, M. Usman",
      "articleRefs": [
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hiroshi",
        "surname": "Igaki"
      },
      "authorName": "Igaki, Hiroshi",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hajimu",
        "surname": "Iida"
      },
      "authorName": "Iida, Hajimu",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        },
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Makoto",
        "surname": "Imamura"
      },
      "authorName": "Imamura, Makoto",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Katsuro",
        "surname": "Inoue"
      },
      "authorName": "Inoue, Katsuro",
      "articleRefs": [
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nabila",
        "surname": "Ishfaq"
      },
      "authorName": "Ishfaq, Nabila",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Syed",
        "surname": "Islam"
      },
      "authorName": "Islam, Syed",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marko",
        "surname": "Ivankovic"
      },
      "authorName": "Ivankovic, Marko",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "State of Mutation Testing at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4sP3SrfWJU9Db3YuxsmuKI/1Erkod3XBaeGvsAAClBEqS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vladimir",
        "surname": "Ivanov"
      },
      "authorName": "Ivanov, Vladimir",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        },
        {
          "pageNumber": 402,
          "articleName": "Poster: Precooked Developer Dashboards: What to Show and How to Use",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2YzSMhy4hX7dROj5nXlVAm/3cgnIym26ZtWGwA6sgvoZK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Reyhaneh",
        "surname": "Jabbarvand"
      },
      "authorName": "Jabbarvand, Reyhaneh",
      "articleRefs": [
        {
          "pageNumber": 846,
          "articleName": "A Temporal Permission Analysis and Enforcement Framework for Android",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf"
        },
        {
          "pageNumber": 1039,
          "articleName": "Nemo: Multi-criteria Test-Suite Minimization with Integer Nonlinear Programming",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gVQozZZzSv6Yh0cmO8GQb/6R13qIhxIq6zydaKQZnCij.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marie-Christine",
        "surname": "Jakobs"
      },
      "authorName": "Jakobs, Marie-Christine",
      "articleRefs": [
        {
          "pageNumber": 1182,
          "articleName": "Reducer-Based Construction of Conditional Verifiers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6mfhtixgiQVyhDPMCYId3V/7DUx0uAdd4fytOgP2RvFf5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Suman",
        "surname": "Jana"
      },
      "authorName": "Jana, Suman",
      "articleRefs": [
        {
          "pageNumber": 303,
          "articleName": "DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1l8C5zVwRhRYyqHFTOoOUf/7FmCxsCu5eXKr4EvBf6BPz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dietmar",
        "surname": "Jannach"
      },
      "authorName": "Jannach, Dietmar",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ciera",
        "surname": "Jaspan"
      },
      "authorName": "Jaspan, Ciera",
      "articleRefs": [
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dan",
        "surname": "Jelf"
      },
      "authorName": "Jelf, Dan",
      "articleRefs": [
        {
          "pageNumber": 165,
          "articleName": "Automated Reporting of GUI Design Violations for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73vOGjBkf23NHodSgD3DR2/1OWvuIr0ODMO3SiUdEDKEV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "John",
        "surname": "Jenkins"
      },
      "authorName": "Jenkins, John",
      "articleRefs": [
        {
          "pageNumber": 350,
          "articleName": "Poster: Towards Sustainable Android Malware Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1CeL0JHsoDlL5AfeYBFXYN/1bjvVxMwUcxmyMegViCmAq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Serin",
        "surname": "Jeong"
      },
      "authorName": "Jeong, Serin",
      "articleRefs": [
        {
          "pageNumber": 187,
          "articleName": "Poster Agile Requirement Traceability Matrix",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3yzEh2WxTzA13GGeKsP7aB/1WEquoO9JMTTJeJVxqVgZv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chris",
        "surname": "Jermaine"
      },
      "authorName": "Jermaine, Chris",
      "articleRefs": [
        {
          "pageNumber": 338,
          "articleName": "Program Splicing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3GzvLDJDyvhGV814ZqQjMV/5PljSrUUNExRaRT9kY641T.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jean-Marc",
        "surname": "Jézéquel"
      },
      "authorName": "Jézéquel, Jean-Marc",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "Poster: Multimorphic Testing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/uzXACjp9SwFasi2pVULVp/4Acd9HUX23SsFtwgf1MOHh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chao",
        "surname": "Ji"
      },
      "authorName": "Ji, Chao",
      "articleRefs": [
        {
          "pageNumber": 323,
          "articleName": "Poster: Benchmarking Microservice Systems for Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4MPJujC2aLJ54VMGaEtm76/1tKujoNDTv8GyqnEt9T70J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nan",
        "surname": "Jia"
      },
      "authorName": "Jia, Nan",
      "articleRefs": [
        {
          "pageNumber": 260,
          "articleName": "Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3KOAs6b5Ao6dTf4nrU5Z2R/4wShlhH4Ml9nJbkkAnMNpN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "He",
        "surname": "Jiang"
      },
      "authorName": "Jiang, He",
      "articleRefs": [
        {
          "pageNumber": 71,
          "articleName": "Automated Localization for Unreproducible Builds",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Uo99XzE0k6LQDG79lezQk/4lDBvklakctIQ6sXpUiVcn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jie-Hong Roland",
        "surname": "Jiang"
      },
      "authorName": "Jiang, Jie-Hong Roland",
      "articleRefs": [
        {
          "pageNumber": 394,
          "articleName": "Poster: Static Detection of API Call Vulnerabilities in iOS Executables",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/gSu6tRobTq6btbsdFEqcb/SnOv2Ft9uBvbOCkoaGtXE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lingxiao",
        "surname": "Jiang"
      },
      "authorName": "Jiang, Lingxiao",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "Hierarchical Learning of Cross-Language Mappings Through Distributed Vector Representations for Code",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/63peqgtl2cqa2Vdl1J8VcL/33ID2f2G6xIYVCyhGCws1B.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xun",
        "surname": "Jiao"
      },
      "authorName": "Jiao, Xun",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SAFL: Increasing and Accelerating Testing Coverage with Symbolic Execution and Guided Fuzzing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2wQFOHJU5QY1aSNGOj5WlU/69TdWrHG4oqQst002X2U7L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Guoliang",
        "surname": "Jin"
      },
      "authorName": "Jin, Guoliang",
      "articleRefs": [
        {
          "pageNumber": 586,
          "articleName": "Dataflow Tunneling: Mining Inter-Request Data Dependencies for Request-Based Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Uzz3NxpxluiWAcTMOBAcC/7GhgmQEAmFhlEO0HUMJxtg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhi",
        "surname": "Jin"
      },
      "authorName": "Jin, Zhi",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "Poster: QoS-Aware Service Composition Using Blockchain-Based Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/52LmPy7QbAM0aNeB9uYJC2/53SEGmGiNbgYAVNqtV672d.pdf"
        },
        {
          "pageNumber": 440,
          "articleName": "Poster: Companies' Domination in FLOSS Development - An Empirical Study of OpenStack",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qzz37M5aaQHMR84AdL5Ao/6BpbDRR3MKYdAc0gfHratN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiao-Yuan",
        "surname": "Jing"
      },
      "authorName": "Jing, Xiao-Yuan",
      "articleRefs": [
        {
          "pageNumber": 270,
          "articleName": "Poster: Automatically Answering API-Related Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kenneth",
        "surname": "Johnson"
      },
      "authorName": "Johnson, Kenneth",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "Efficient Parametric Model Checking Using Domain-Specific Modelling Patterns",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/3VKXquAtw3Bsoa1GQ2m1Cn/IwXQwRyRAgcZEgA31O87n.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Taylor T.",
        "surname": "Johnson"
      },
      "authorName": "Johnson, Taylor T.",
      "articleRefs": [
        {
          "pageNumber": 981,
          "articleName": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Per",
        "surname": "Jonsson"
      },
      "authorName": "Jonsson, Per",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wouter",
        "surname": "Joosen"
      },
      "authorName": "Joosen, Wouter",
      "articleRefs": [
        {
          "pageNumber": 290,
          "articleName": "Poster: Knowledge-Enriched Security and Privacy Threat Modeling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/37uFOoLUPhndyysBym8s6u/7szAL5XTsN6DNANI1CKW1D.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matthew",
        "surname": "Jorde"
      },
      "authorName": "Jorde, Matthew",
      "articleRefs": [
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sameer",
        "surname": "Joshi"
      },
      "authorName": "Joshi, Sameer",
      "articleRefs": [
        {
          "pageNumber": 210,
          "articleName": "Poster: Leveraging Product Relationships to Generate Candidate Bugs for Duplicate Bug Prediction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3skdQaTH5MfrXjt8sLFamC/01NHC0xsEdaGiQjXDjWADh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ivan",
        "surname": "Jovanovikj"
      },
      "authorName": "Jovanovikj, Ivan",
      "articleRefs": [
        {
          "pageNumber": 292,
          "articleName": "Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1AkIwFloW3mkZDApKaVABX/7lyga27SMIeaITaprTqTOu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Natalia",
        "surname": "Juristo"
      },
      "authorName": "Juristo, Natalia",
      "articleRefs": [
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        },
        {
          "pageNumber": 1195,
          "articleName": "Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4DXjZ1hszyCVhZZvfNLCgj/2h3ZD73wXPhuAjdGHgymnT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "René",
        "surname": "Just"
      },
      "authorName": "Just, René",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "[Journal First] Do Automated Program Repair Techniques Repair Hard and Important Bugs?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TcOrwOTri9qN5sl2VPDmg/1UlHTll3MjB9vsQoBoeZXG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jacob",
        "surname": "Juul"
      },
      "authorName": "Juul, Jacob",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Verena",
        "surname": "Käfer"
      },
      "authorName": "Käfer, Verena",
      "articleRefs": [
        {
          "pageNumber": 242,
          "articleName": "Poster: Communication in Open-Source Projects–End of the E-mail Era?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1j4w2owFLsJWGemRCe3RPJ/4ohDY2rD3K4zRwV3ou34JL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nafiseh",
        "surname": "Kahani"
      },
      "authorName": "Kahani, Nafiseh",
      "articleRefs": [
        {
          "pageNumber": 267,
          "articleName": "[Journal First] Analyzing a Decade of Linux System Calls",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3KxPueAJM16I029lwLaxWK/3ygzgkL0Nj7pWHNPX3Spik.pdf"
        },
        {
          "pageNumber": 515,
          "articleName": "AutoModel: A Domain-Specific Language for Automatic Modeling of Real-Time Embedded Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/ZlHGDtBSalF9VqoSGSVfL/3isRFB1xVFH9k7IIeF7VrG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hermann",
        "surname": "Kaindl"
      },
      "authorName": "Kaindl, Hermann",
      "articleRefs": [
        {
          "pageNumber": 274,
          "articleName": "Poster: Systematic Top-Down Design of Cyber-Physical Models with Integrated Validation and Formal Verification",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/38tlW5CES2zQGPC5Lddm4E/1Pf8cuH3eGelk0cq747NRO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcos",
        "surname": "Kalinowski"
      },
      "authorName": "Kalinowski, Marcos",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pankaj Kumar",
        "surname": "Kalita"
      },
      "authorName": "Kalita, Pankaj Kumar",
      "articleRefs": [
        {
          "pageNumber": 175,
          "articleName": "Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6aRyn8avZSYSSHnfRPc9Q4/15RozMp8Mi2r6JDsctFnqA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eirini",
        "surname": "Kalliamvakou"
      },
      "authorName": "Kalliamvakou, Eirini",
      "articleRefs": [
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jonas",
        "surname": "Kaltenbach"
      },
      "authorName": "Kaltenbach, Jonas",
      "articleRefs": [
        {
          "pageNumber": 136,
          "articleName": "Increasing Student Engagement in Higher Education Using a Context-Aware Q&A Teaching Framework",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/70xg6U2NS78MdWNOncB6PJ/1EzW0QC7tyq9nW243YE3yj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yasutaka",
        "surname": "Kamei"
      },
      "authorName": "Kamei, Yasutaka",
      "articleRefs": [
        {
          "pageNumber": 272,
          "articleName": "Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dipIizZzbMXAiCO02tWVF/2xPcZJ8mMITxw7ZU4W3dQ7.pdf"
        },
        {
          "pageNumber": 560,
          "articleName": "[Journal First] Are Fix-Inducing Changes a Moving Target?: A Longitudinal Case Study of Just-in-Time Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3uRSaEmVCZ8sxcHsoTOQlj/IB9wBk3BHYMYBlqgTMQQj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wei",
        "surname": "Kang"
      },
      "authorName": "Kang, Wei",
      "articleRefs": [
        {
          "pageNumber": 327,
          "articleName": "Poster: Model-Based Adaptation to Extreme Physical Environments: A Case Study on Mixed-Criticality Industrial Ethernet",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7GtVpgolsvwHY6LHPyhM13/4H225Nz2cYgCYnKtZIi1er.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Georgia",
        "surname": "Kapitsaki"
      },
      "authorName": "Kapitsaki, Georgia",
      "articleRefs": [
        {
          "pageNumber": 145,
          "articleName": "Poster: Analyzing the Transactive Memory in Teaching Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2mjQ6u3z5DtWVh8ZGkVecX/2RvFkXZzQGF6RmgO4z2AIM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rüdiger",
        "surname": "Kapitza"
      },
      "authorName": "Kapitza, Rüdiger",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Purushottam",
        "surname": "Kar"
      },
      "authorName": "Kar, Purushottam",
      "articleRefs": [
        {
          "pageNumber": 78,
          "articleName": "Compilation Error Repair: For the Student Programs, From the Student Programs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Karcher"
      },
      "authorName": "Karcher, Thomas",
      "articleRefs": [
        {
          "pageNumber": 436,
          "articleName": "Poster: Autotuning PostgreSQL: A Blueprint for Successful Autotuning of Real-World Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kXPYWE3EQc7SeJd3lthrV/5kU2UcOItB1UnYsqHiveS7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chandan",
        "surname": "Karfa"
      },
      "authorName": "Karfa, Chandan",
      "articleRefs": [
        {
          "pageNumber": 175,
          "articleName": "Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6aRyn8avZSYSSHnfRPc9Q4/15RozMp8Mi2r6JDsctFnqA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Amey",
        "surname": "Karkare"
      },
      "authorName": "Karkare, Amey",
      "articleRefs": [
        {
          "pageNumber": 78,
          "articleName": "Compilation Error Repair: For the Student Programs, From the Student Programs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nagendra Prasad",
        "surname": "Kasaghatta Ramachandra"
      },
      "authorName": "Kasaghatta Ramachandra, Nagendra Prasad",
      "articleRefs": [
        {
          "pageNumber": 208,
          "articleName": "Poster: Testing Web-Based Applications with the Voice Controlled Accessibility and Testing Tool (VCAT)",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1BWbKsMWVwdQ2PAjZoUJdu/2luGF9KgPFXAdbicSaC4sa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christian",
        "surname": "Kästner"
      },
      "authorName": "Kästner, Christian",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        },
        {
          "pageNumber": 179,
          "articleName": "Poster: Forks Insight: Providing an Overview of GitHub Forks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46AuTosEz8iCsma4CNsxzU/6odbstLJrrnGif0gY2Ryfu.pdf"
        },
        {
          "pageNumber": 511,
          "articleName": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5zZif4Y9gORqhqO7eKhhoZ/2NGpYIgnByWOIFiwUyBUr0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Juhnke",
        "surname": "Katharina"
      },
      "authorName": "Katharina, Juhnke",
      "articleRefs": [
        {
          "pageNumber": 131,
          "articleName": "Poster: Challenges with Automotive Test Case Specifications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/22HRkItZGtp9E0KerKRG6U/55RByn2pvzw3VEvvRElf7v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vikrant",
        "surname": "Kaulgud"
      },
      "authorName": "Kaulgud, Vikrant",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "An Immersive Future for Software Engineering — Avenues and Approaches",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1EpjKazCrYQMpJpG57Wp2A/4qzQRZDxVTtuh4cl4S2HuV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Naoki",
        "surname": "Kawashima"
      },
      "authorName": "Kawashima, Naoki",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rick",
        "surname": "Kazman"
      },
      "authorName": "Kazman, Rick",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maria",
        "surname": "Kechagia"
      },
      "authorName": "Kechagia, Maria",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Enabling Real-Time Feedback in Software Engineering",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Timo",
        "surname": "Kehrer"
      },
      "authorName": "Kehrer, Timo",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "ReVision: A Tool for History-Based Model Repair Recommendations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3OBcOwPcuVek9zxGKch3pF/2buxI8VlbB6qYkDaPC7Ly2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tim",
        "surname": "Kelly"
      },
      "authorName": "Kelly, Tim",
      "articleRefs": [
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Udo",
        "surname": "Kelter"
      },
      "authorName": "Kelter, Udo",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "ReVision: A Tool for History-Based Model Repair Recommendations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3OBcOwPcuVek9zxGKch3pF/2buxI8VlbB6qYkDaPC7Ly2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chris",
        "surname": "Kemerer"
      },
      "authorName": "Kemerer, Chris",
      "articleRefs": [
        {
          "pageNumber": 883,
          "articleName": "[Journal First] Integrating Technical Debt Management and Software Quality Management Processes: A Framework and Field Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5VVcsBrL8djdrhDf5ufhWq/5fvSeX2ZAwnPyyIw2IrelG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Changsup",
        "surname": "Keum"
      },
      "authorName": "Keum, Changsup",
      "articleRefs": [
        {
          "pageNumber": 185,
          "articleName": "Poster: Architecture Reconstruction and Evaluation of Blockchain Open Source Platform",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7owgOp2OxfZOt1X2gaHw4F/3vdTLCMmVDAMW0YWJP11fk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jacky",
        "surname": "Keung"
      },
      "authorName": "Keung, Jacky",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Raffi",
        "surname": "Khatchadourian"
      },
      "authorName": "Khatchadourian, Raffi",
      "articleRefs": [
        {
          "pageNumber": 206,
          "articleName": "Poster: Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7MLLCasUAOaMfVBTbfYztV/3klSThcA5OaZugEDIiq481.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Djamel Eddine",
        "surname": "Khelladi"
      },
      "authorName": "Khelladi, Djamel Eddine",
      "articleRefs": [
        {
          "pageNumber": 298,
          "articleName": "Poster: An Automated and Instant Discovery of Concrete Repairs for Model Inconsistencies",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ZXDV27yXUaGfVABEbPh4W/6hS0Qqz6BFxUscbdXS9ZJC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Foutse",
        "surname": "Khomh"
      },
      "authorName": "Khomh, Foutse",
      "articleRefs": [
        {
          "pageNumber": 59,
          "articleName": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sarfraz",
        "surname": "Khurshid"
      },
      "authorName": "Khurshid, Sarfraz",
      "articleRefs": [
        {
          "pageNumber": 12,
          "articleName": "Towards Practical Program Repair with On-demand Candidate Generation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2E5RW0qgO8jUBND0skhRAJ/2dmZrsD625tVeRcqta1x9.pdf"
        },
        {
          "pageNumber": 29,
          "articleName": "MuAlloy: A Mutation Testing Framework for Alloy",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/59E9M3V6eFFIvIOWOXuyIm/6ju1rp9I2F1kBYPo3sV6sE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kisub",
        "surname": "Kim"
      },
      "authorName": "Kim, Kisub",
      "articleRefs": [
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        },
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Miryung",
        "surname": "Kim"
      },
      "authorName": "Kim, Miryung",
      "articleRefs": [
        {
          "pageNumber": 422,
          "articleName": "Poster: Grafter: Transplantation and Differential Testing for Clones",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Dcj5hI5ay5ogwHLf0wwb6/2bpb6bAzfOMffNyv2sJYlw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Irwin",
        "surname": "King"
      },
      "authorName": "King, Irwin",
      "articleRefs": [
        {
          "pageNumber": 48,
          "articleName": "Online App Review Analysis for Identifying Emerging Issues",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/WAXUkTkTbQJUUMnuRmt95/7I5gsduIRWKigNQEA2sexO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Barbara",
        "surname": "Kitchenham"
      },
      "authorName": "Kitchenham, Barbara",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "[Journal First] Effect Sizes and their Variance for AB/BA Crossover Design Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2vbLjCzIIhv5QjDxqXRXg6/4cvS5U8l4xLwOmfEQoV3vI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Heiko",
        "surname": "Klare"
      },
      "authorName": "Klare, Heiko",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Styliani",
        "surname": "Kleanthous"
      },
      "authorName": "Kleanthous, Styliani",
      "articleRefs": [
        {
          "pageNumber": 145,
          "articleName": "Poster: Analyzing the Transactive Memory in Teaching Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2mjQ6u3z5DtWVh8ZGkVecX/2RvFkXZzQGF6RmgO4z2AIM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jacques",
        "surname": "Klein"
      },
      "authorName": "Klein, Jacques",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Poster: On Vulnerability Evolution in Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nULBBNKVN3vRo4TxBqzfB/2apYrCqhmwvonAhfSbGWJv.pdf"
        },
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        },
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Markus",
        "surname": "Kleinschmidt"
      },
      "authorName": "Kleinschmidt, Markus",
      "articleRefs": [
        {
          "pageNumber": 159,
          "articleName": "Poster: Situation-Based E-Learning in Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eriks",
        "surname": "Klotins"
      },
      "authorName": "Klotins, Eriks",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eric",
        "surname": "Knauss"
      },
      "authorName": "Knauss, Eric",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Markus",
        "surname": "Knecht"
      },
      "authorName": "Knecht, Markus",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrea",
        "surname": "Knight"
      },
      "authorName": "Knight, Andrea",
      "articleRefs": [
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        },
        {
          "pageNumber": 643,
          "articleName": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jan",
        "surname": "Knobloch"
      },
      "authorName": "Knobloch, Jan",
      "articleRefs": [
        {
          "pageNumber": 136,
          "articleName": "Increasing Student Engagement in Higher Education Using a Context-Aware Q&A Teaching Framework",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/70xg6U2NS78MdWNOncB6PJ/1EzW0QC7tyq9nW243YE3yj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "In-Young",
        "surname": "Ko"
      },
      "authorName": "Ko, In-Young",
      "articleRefs": [
        {
          "pageNumber": 468,
          "articleName": "Prioritizing Browser Environments for Web Application Test Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1EX24cXorp3idnq1F0su6Q/7Mxb1ZK2acB4XRbw7iHpAC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Patrick",
        "surname": "Koch"
      },
      "authorName": "Koch, Patrick",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pavneet Singh",
        "surname": "Kochhar"
      },
      "authorName": "Kochhar, Pavneet Singh",
      "articleRefs": [
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefan",
        "surname": "Kögel"
      },
      "authorName": "Kögel, Stefan",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pushmeet",
        "surname": "Kohli"
      },
      "authorName": "Kohli, Pushmeet",
      "articleRefs": [
        {
          "pageNumber": 60,
          "articleName": "Neuro-Symbolic Program Corrector for Introductory Programming Assignments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3ff3TXG0zUEgira53neRYx/4vw21DgkSxUSQYWz4NjvaQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pingfan",
        "surname": "Kong"
      },
      "authorName": "Kong, Pingfan",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Poster: On Vulnerability Evolution in Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nULBBNKVN3vRo4TxBqzfB/2apYrCqhmwvonAhfSbGWJv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Oleksii",
        "surname": "Kononenko"
      },
      "authorName": "Kononenko, Oleksii",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wilhelm",
        "surname": "Koop"
      },
      "authorName": "Koop, Wilhelm",
      "articleRefs": [
        {
          "pageNumber": 159,
          "articleName": "Poster: Situation-Based E-Learning in Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Philip",
        "surname": "Koopman"
      },
      "authorName": "Koopman, Philip",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wieslaw",
        "surname": "Kopec"
      },
      "authorName": "Kopec, Wieslaw",
      "articleRefs": [
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nikolai",
        "surname": "Kosmatov"
      },
      "authorName": "Kosmatov, Nikolai",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Suraj",
        "surname": "Kothari"
      },
      "authorName": "Kothari, Suraj",
      "articleRefs": [
        {
          "pageNumber": 544,
          "articleName": "Demystifying Cyber-Physical Malware",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6rR3Oss6Q3R6co8CGNWcxG/70SHos1HRvTtUahcJWu9r7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Suresh",
        "surname": "Kotharti"
      },
      "authorName": "Kotharti, Suresh",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "COMB: Computing Relevant Program Behaviors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Grzegorz",
        "surname": "Kowalik"
      },
      "authorName": "Kowalik, Grzegorz",
      "articleRefs": [
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Heiko",
        "surname": "Koziolek"
      },
      "authorName": "Koziolek, Heiko",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dmitrij",
        "surname": "Koznov"
      },
      "authorName": "Koznov, Dmitrij",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nicholas A.",
        "surname": "Kraft"
      },
      "authorName": "Kraft, Nicholas A.",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        },
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Max",
        "surname": "Kramer"
      },
      "authorName": "Kramer, Max",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Roland",
        "surname": "Kretschmer"
      },
      "authorName": "Kretschmer, Roland",
      "articleRefs": [
        {
          "pageNumber": 298,
          "articleName": "Poster: An Automated and Instant Discovery of Concrete Repairs for Model Inconsistencies",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ZXDV27yXUaGfVABEbPh4W/6hS0Qqz6BFxUscbdXS9ZJC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefan",
        "surname": "Kriebel"
      },
      "authorName": "Kriebel, Stefan",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sebastian",
        "surname": "Krieter"
      },
      "authorName": "Krieter, Sebastian",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        },
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jens",
        "surname": "Krinke"
      },
      "authorName": "Krinke, Jens",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rahul",
        "surname": "Krishna"
      },
      "authorName": "Krishna, Rahul",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/mM2flyVIs1e0wGU98L8VQ/xU4OW2h5F9cUBJIgIMkYY.pdf"
        },
        {
          "pageNumber": 306,
          "articleName": "What is the Connection Between Issues, Bugs, and Enhancements?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Klaus",
        "surname": "Krogmann"
      },
      "authorName": "Krogmann, Klaus",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christian",
        "surname": "Kröher"
      },
      "authorName": "Kröher, Christian",
      "articleRefs": [
        {
          "pageNumber": 73,
          "articleName": "KernelHaven – An Experimentation Workbench for Analyzing Software Product Lines",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1u3wyx5jiA23CCfzXCQ5Pi/34GYtfvoAfVYrBIyxSbmf6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Josiane",
        "surname": "Kroll"
      },
      "authorName": "Kroll, Josiane",
      "articleRefs": [
        {
          "pageNumber": 155,
          "articleName": "Poster: Challenge-Based Learning: A Brazilian Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2l16giaw0MUbxQDUNSTBMV/7CI3uC4gCOKGJlcFqMtVdb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Martin",
        "surname": "Kropp"
      },
      "authorName": "Kropp, Martin",
      "articleRefs": [
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jacob",
        "surname": "Krüger"
      },
      "authorName": "Krüger, Jacob",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        },
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefan",
        "surname": "Krüger"
      },
      "authorName": "Krüger, Stefan",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dániel",
        "surname": "Krupp"
      },
      "authorName": "Krupp, Dániel",
      "articleRefs": [
        {
          "pageNumber": 428,
          "articleName": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Juraj",
        "surname": "Kubelka"
      },
      "authorName": "Kubelka, Juraj",
      "articleRefs": [
        {
          "pageNumber": 1090,
          "articleName": "The Road to Live Programming: Insights from the Practice",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5kWabRxvKSbOrbfpQqtqMw/5X6aZ0m8fIIZBmOuIJogyI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Kuhn"
      },
      "authorName": "Kuhn, Thomas",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pawan",
        "surname": "Kumar"
      },
      "authorName": "Kumar, Pawan",
      "articleRefs": [
        {
          "pageNumber": 78,
          "articleName": "Compilation Error Repair: For the Student Programs, From the Student Programs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Miikka",
        "surname": "Kuutila"
      },
      "authorName": "Kuutila, Miikka",
      "articleRefs": [
        {
          "pageNumber": 705,
          "articleName": "Do Programmers Work at Night or During the Weekend?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3PZI2iH7OZcqmfOhovoPWi/4jMoJeCniCPfvSDteaaNux.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jung-Hyun",
        "surname": "Kwon"
      },
      "authorName": "Kwon, Jung-Hyun",
      "articleRefs": [
        {
          "pageNumber": 468,
          "articleName": "Prioritizing Browser Environments for Web Application Test Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1EX24cXorp3idnq1F0su6Q/7Mxb1ZK2acB4XRbw7iHpAC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Youn",
        "surname": "Kyu Lee"
      },
      "authorName": "Kyu Lee, Youn",
      "articleRefs": [
        {
          "pageNumber": 262,
          "articleName": "Poster: Making Well-Informed Software Design Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2hjOTnt4IhzP5kLZgw9GKS/4G3hXm7aB71RGA86WZqsVh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Katsiaryna",
        "surname": "Labunets"
      },
      "authorName": "Labunets, Katsiaryna",
      "articleRefs": [
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kevin",
        "surname": "Laeufer"
      },
      "authorName": "Laeufer, Kevin",
      "articleRefs": [
        {
          "pageNumber": 549,
          "articleName": "Efficient Sampling of SAT Solutions for Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2fyL1Vd11RDdXakS4SXepo/4LVpbk5KkDNS1ZKZjpyWq5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gulsher",
        "surname": "Laghari"
      },
      "authorName": "Laghari, Gulsher",
      "articleRefs": [
        {
          "pageNumber": 280,
          "articleName": "Poster: Unit Tests and Component Tests do Make a Difference on Fault Localisation Effectiveness",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1RTqhUi6UtbGqyJRHY9JdB/5ZovXpS8VqZDPU3QMSkzrb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Patricia",
        "surname": "Lago"
      },
      "authorName": "Lago, Patricia",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        },
        {
          "pageNumber": 222,
          "articleName": "Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FOzcRg0BG6NRLGft0111q/ZDCSeD2qsGxWw2YH3ZSLP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Leo",
        "surname": "Laine"
      },
      "authorName": "Laine, Leo",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/xLEjBh7hPb5V1LsqUWnRl/4mUPQnhdOLBljWKOk5ULOT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Régine",
        "surname": "Laleau"
      },
      "authorName": "Laleau, Régine",
      "articleRefs": [
        {
          "pageNumber": 368,
          "articleName": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Leen",
        "surname": "Lambers"
      },
      "authorName": "Lambers, Leen",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefan",
        "surname": "Landemoo"
      },
      "authorName": "Landemoo, Stefan",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mathias",
        "surname": "Landhäußer"
      },
      "authorName": "Landhäußer, Mathias",
      "articleRefs": [
        {
          "pageNumber": 436,
          "articleName": "Poster: Autotuning PostgreSQL: A Blueprint for Successful Autotuning of Real-World Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kXPYWE3EQc7SeJd3lthrV/5kU2UcOItB1UnYsqHiveS7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Julien",
        "surname": "Lange"
      },
      "authorName": "Lange, Julien",
      "articleRefs": [
        {
          "pageNumber": 1137,
          "articleName": "A Static Verification Framework for Message Passing in Go Using Behavioural Types",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4qni3QmfOZ1L9eUK9sVGyf/OgbS6Mp1QczsiyDiedExx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Melanie",
        "surname": "Langermeier"
      },
      "authorName": "Langermeier, Melanie",
      "articleRefs": [
        {
          "pageNumber": 374,
          "articleName": "Poster: Evaluating Project Compliance During EA Planning: A Model-Based Semi Automatic Method for Enterprise Architecture Planning",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jAph7dsbdQ5TEnLRwf3nC/5WW6OHv3kMU1cPYEtplONF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Patrick E.",
        "surname": "Lanigan"
      },
      "authorName": "Lanigan, Patrick E.",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Filippo",
        "surname": "Lanubile"
      },
      "authorName": "Lanubile, Filippo",
      "articleRefs": [
        {
          "pageNumber": 128,
          "articleName": "[Journal First] Sentiment Polarity Detection for Software Development",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5o2jlVBKgm0WbzNsXeVPrw/70ILFFydFpHbzdIOpU2GFl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michele",
        "surname": "Lanza"
      },
      "authorName": "Lanza, Michele",
      "articleRefs": [
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Enrique",
        "surname": "Larios Vargas"
      },
      "authorName": "Larios Vargas, Enrique",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Enabling Real-Time Feedback in Software Engineering",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Casper",
        "surname": "Lassenius"
      },
      "authorName": "Lassenius, Casper",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexander",
        "surname": "Lattas"
      },
      "authorName": "Lattas, Alexander",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Echoes from Space: Grouping Commands with Large-Scale Telemetry Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/36OHYwbesYzyrqceW0zbds/6lTJGOwEkmMFQO8CFju22q.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Quang Loc",
        "surname": "Le"
      },
      "authorName": "Le, Quang Loc",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "Poster: Testing Heap-Based Programs with Java StarFinder",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4rzKWBKexbqBTVf4cYq0W1/FEIdNYhXk5CVNrycd5Sf3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xuan-Bach D.",
        "surname": "Le"
      },
      "authorName": "Le, Xuan-Bach D.",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "[Journal First] Overfitting in Semantics-Based Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1iEz1Hydy2R6aGChkPt4yK/3zxjPwJpOMkItKVxLAR3pj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gary T.",
        "surname": "Leavens"
      },
      "authorName": "Leavens, Gary T.",
      "articleRefs": [
        {
          "pageNumber": 313,
          "articleName": "Poster: An Algorithm and Tool to Infer Practical Postconditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5VIJZqURpbuELiOLsoX5gB/34qnQCM0ECnQSCfKKWDUUj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Junhee",
        "surname": "Lee"
      },
      "authorName": "Lee, Junhee",
      "articleRefs": [
        {
          "pageNumber": 1244,
          "articleName": "Automatically Generating Search Heuristics for Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5k6pWQxBOWJa9S1UiZ2A2n/6sJ0ZusmvQqfPy9dyjzenc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Seongmin",
        "surname": "Lee"
      },
      "authorName": "Lee, Seongmin",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Claire",
        "surname": "Le Goues"
      },
      "authorName": "Le Goues, Claire",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Static Automated Program Repair for Heap Properties",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6sdxYBhIZyy7FLj3rFRYpg/7ojSy3fH9UYidjrpNK6WGQ.pdf"
        },
        {
          "pageNumber": 163,
          "articleName": "[Journal First] Overfitting in Semantics-Based Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1iEz1Hydy2R6aGChkPt4yK/3zxjPwJpOMkItKVxLAR3pj.pdf"
        },
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Owolabi",
        "surname": "Legunsen"
      },
      "authorName": "Legunsen, Owolabi",
      "articleRefs": [
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Leich"
      },
      "authorName": "Leich, Thomas",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        },
        {
          "pageNumber": 300,
          "articleName": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf"
        },
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Philipp",
        "surname": "Leitner"
      },
      "authorName": "Leitner, Philipp",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Lemberger"
      },
      "authorName": "Lemberger, Thomas",
      "articleRefs": [
        {
          "pageNumber": 1182,
          "articleName": "Reducer-Based Construction of Conditional Verifiers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6mfhtixgiQVyhDPMCYId3V/7DUx0uAdd4fytOgP2RvFf5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Olaf",
        "surname": "Leßenich"
      },
      "authorName": "Leßenich, Olaf",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Timothy C.",
        "surname": "Lethbridge"
      },
      "authorName": "Lethbridge, Timothy C.",
      "articleRefs": [
        {
          "pageNumber": 149,
          "articleName": "Poster: Are Our Students Engaged in Their Studies? Professional Engagement vs. Study Engagement",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5xtA0uJd6thgqgqjjCW6bY/ywTO3ZzLDFUoUS3EoFZcD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yves",
        "surname": "Le Traon"
      },
      "authorName": "Le Traon, Yves",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Poster: Predicting the Fault Revelation Utility of Mutants",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/42QsecgC6WhEpnjE0Q8yxp/3hghmlVpOkcbn1KqnwEInF.pdf"
        },
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        },
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nicholas V.",
        "surname": "Lewchenko"
      },
      "authorName": "Lewchenko, Nicholas V.",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ming",
        "surname": "Li"
      },
      "authorName": "Li, Ming",
      "articleRefs": [
        {
          "pageNumber": 366,
          "articleName": "Poster: ACONA: Active Online Model Adaptation for Predicting Continuous Integration Build Failures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1NinLYBC32PXucXAwTyz3B/1PJW3gI4n2cBOJYdcrENjL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sanhong",
        "surname": "Li"
      },
      "authorName": "Li, Sanhong",
      "articleRefs": [
        {
          "pageNumber": 11,
          "articleName": "Java Performance Troubleshooting and Optimization at Alibaba",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6Pki5vDjIRR2hvFp24PCnX/2KpxLLSxNFaXCJ56QTRISU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shanshan",
        "surname": "Li"
      },
      "authorName": "Li, Shanshan",
      "articleRefs": [
        {
          "pageNumber": 58,
          "articleName": "Continuous Delivery of Personalized Assessment and Feedback in Agile Software Engineering Projects",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ztuOBdGuPzPaaZ5ZxbGjy/7Bjf67pa1UxMHWufh4okAy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiaoqi",
        "surname": "Li"
      },
      "authorName": "Li, Xiaoqi",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Towards Saving Money in Using Smart Contracts",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yan-Fu",
        "surname": "Li"
      },
      "authorName": "Li, Yan-Fu",
      "articleRefs": [
        {
          "pageNumber": 1231,
          "articleName": "Multi-objective Integer Programming Approaches for Solving Optimal Feature Selection Problem: A New Perspective on Multi-objective Optimization Problems in SBSE",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1TtVOsFS1qq7UEalN0m3JG/3XBHStq8A8ko8AbWNPERaX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marius",
        "surname": "Liaaen"
      },
      "authorName": "Liaaen, Marius",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Practical Selective Regression Testing with Effective Redundancy in Interleaved Tests",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5pilYClpXUQa77Kg5Y9986/5aQxPj9Migxn3tGsUQVA7h.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hongliang",
        "surname": "Liang"
      },
      "authorName": "Liang, Hongliang",
      "articleRefs": [
        {
          "pageNumber": 386,
          "articleName": "Poster: USE: Unified and Split Execution for Exposing Divergences between Versions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6LPcye0HvDGcTC8pmjMow0/53CrwfyS24ctiDhG2v3XKZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jingjing",
        "surname": "Liang"
      },
      "authorName": "Liang, Jingjing",
      "articleRefs": [
        {
          "pageNumber": 688,
          "articleName": "Redefining Prioritization: Continuous Prioritization for Continuous Integration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3IKbJCjT6A0XNalPeqtwYx/48mKfZ4yhnkLlYNigdnCns.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bin",
        "surname": "Lin"
      },
      "authorName": "Lin, Bin",
      "articleRefs": [
        {
          "pageNumber": 492,
          "articleName": "Crowdsourced Software Development and Maintenance",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6YipsPizLvhNMfP0ZApmdR/7tziaWqEES1nb0PuCtqOhp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chung-Ling",
        "surname": "Lin"
      },
      "authorName": "Lin, Chung-Ling",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jun-Wei",
        "surname": "Lin"
      },
      "authorName": "Lin, Jun-Wei",
      "articleRefs": [
        {
          "pageNumber": 1039,
          "articleName": "Nemo: Multi-criteria Test-Suite Minimization with Integer Nonlinear Programming",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gVQozZZzSv6Yh0cmO8GQb/6R13qIhxIq6zydaKQZnCij.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mario",
        "surname": "Linares-Vásquez"
      },
      "authorName": "Linares-Vásquez, Mario",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Johan",
        "surname": "Lindberg"
      },
      "authorName": "Lindberg, Johan",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/xLEjBh7hPb5V1LsqUWnRl/4mUPQnhdOLBljWKOk5ULOT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Erik",
        "surname": "Linstead"
      },
      "authorName": "Linstead, Erik",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xinyuan",
        "surname": "Liu"
      },
      "authorName": "Liu, Xinyuan",
      "articleRefs": [
        {
          "pageNumber": 789,
          "articleName": "Identifying Patch Correctness in Test-Based Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11zxitYXACvMuqaLV1rFPF/1DtebWtKrtzfb6ply0HQ69.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xuanzhe",
        "surname": "Liu"
      },
      "authorName": "Liu, Xuanzhe",
      "articleRefs": [
        {
          "pageNumber": 134,
          "articleName": "A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1THX06dkdc4p9NK74CQDK6/4cihGy6VmWGDisS2sZqFnJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xue",
        "surname": "Liu"
      },
      "authorName": "Liu, Xue",
      "articleRefs": [
        {
          "pageNumber": 329,
          "articleName": "Poster: Efficient and Deterministic Replay for Web-Enabled Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/36kMCRGJIHLtaSXi0e2KSp/44hgs6obxhBufX2ufcNbQX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Giovanni",
        "surname": "Liva"
      },
      "authorName": "Liva, Giovanni",
      "articleRefs": [
        {
          "pageNumber": 468,
          "articleName": "Automatic Verification of Time Behavior of Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4j6XzJGjLowqu92qYj6YFf/2xaVLob5LP2L7186xha31d.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lucrecia",
        "surname": "Llerena"
      },
      "authorName": "Llerena, Lucrecia",
      "articleRefs": [
        {
          "pageNumber": 232,
          "articleName": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Lo"
      },
      "authorName": "Lo, David",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/18twSkKM4nZSiq4Z1PnB2P/5eXj8AdFfloU2dchJUeYi9.pdf"
        },
        {
          "pageNumber": 163,
          "articleName": "[Journal First] Overfitting in Semantics-Based Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1iEz1Hydy2R6aGChkPt4yK/3zxjPwJpOMkItKVxLAR3pj.pdf"
        },
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        },
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maikel",
        "surname": "Lobbezoo"
      },
      "authorName": "Lobbezoo, Maikel",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5SLpOxrOC7MRElPGBMwNp4/5cFXN3dt0iFNy5h7oQMqXT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Howard W.",
        "surname": "Loewen"
      },
      "authorName": "Loewen, Howard W.",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jAtRSWcHJcJZLW9lwLKTT/3ZbcW64L99h5TIvUQiBeJI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Calvin",
        "surname": "Loncaric"
      },
      "authorName": "Loncaric, Calvin",
      "articleRefs": [
        {
          "pageNumber": 958,
          "articleName": "Generalized Data Structure Synthesis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/42oFsoJ7RHGAgoPbI5dzk5/2V1Gp0VfIP3nDtDc89Gm45.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Erik",
        "surname": "Lönroth"
      },
      "authorName": "Lönroth, Erik",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fernando",
        "surname": "López de la Mora"
      },
      "authorName": "López de la Mora, Fernando",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Which Library Should I Use?: A Metric-Based Comparison of Software Libraries",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7tvenWpQiRYIQUZxjDtYA1/6oJRf6G9ZAFW05DP8p42aj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Welf",
        "surname": "Löwe"
      },
      "authorName": "Löwe, Welf",
      "articleRefs": [
        {
          "pageNumber": 216,
          "articleName": "Poster: Introducing Quality Models Based on Joint Probabilities",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IJWpRoZ08GOMTcP32lLK7/5HUHC5NmVCLkRPPdOrslsu.pdf"
        },
        {
          "pageNumber": 220,
          "articleName": "Poster: A Changeset-Based Approach to Assess Source Code Density and Developer Efficacy",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Tm0IqbemtTOBG0FpCKG2m/4AcH1Q8EG4SjleFQ38joZ0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hong",
        "surname": "Lu"
      },
      "authorName": "Lu, Hong",
      "articleRefs": [
        {
          "pageNumber": 1243,
          "articleName": "[Journal First] Automated Refactoring of OCL Constraints with Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7cJGdYhKy3K17vTHSANryU/39zsgbNVg02BjEkeFH5d3S.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hualin",
        "surname": "Lu"
      },
      "authorName": "Lu, Hualin",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Justin",
        "surname": "Lubin"
      },
      "authorName": "Lubin, Justin",
      "articleRefs": [
        {
          "pageNumber": 654,
          "articleName": "Deuce: A Lightweight User Interface for Structured Editing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1Mth4BXOFVTJCjWvB4WHOp/3upLdV7XPhjL0r2C6eiYqe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Carlos",
        "surname": "Lucena"
      },
      "authorName": "Lucena, Carlos",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dmitry",
        "surname": "Luciv"
      },
      "authorName": "Luciv, Dmitry",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christoph",
        "surname": "Luckeneder"
      },
      "authorName": "Luckeneder, Christoph",
      "articleRefs": [
        {
          "pageNumber": 274,
          "articleName": "Poster: Systematic Top-Down Design of Cyber-Physical Models with Integrated Validation and Formal Verification",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/38tlW5CES2zQGPC5Lddm4E/1Pf8cuH3eGelk0cq747NRO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alison",
        "surname": "Lui"
      },
      "authorName": "Lui, Alison",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Björn",
        "surname": "Lundell"
      },
      "authorName": "Lundell, Björn",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiaonan",
        "surname": "Luo"
      },
      "authorName": "Luo, Xiaonan",
      "articleRefs": [
        {
          "pageNumber": 260,
          "articleName": "Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3KOAs6b5Ao6dTf4nrU5Z2R/4wShlhH4Ml9nJbkkAnMNpN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiapu",
        "surname": "Luo"
      },
      "authorName": "Luo, Xiapu",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Towards Saving Money in Using Smart Contracts",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf"
        },
        {
          "pageNumber": 134,
          "articleName": "A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1THX06dkdc4p9NK74CQDK6/4cihGy6VmWGDisS2sZqFnJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Robyn",
        "surname": "Lutz"
      },
      "authorName": "Lutz, Robyn",
      "articleRefs": [
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yingjun",
        "surname": "Lyu"
      },
      "authorName": "Lyu, Yingjun",
      "articleRefs": [
        {
          "pageNumber": 176,
          "articleName": "Leveraging Program Analysis to Reduce User-Perceived Latency in Mobile Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6XtxxPyOjmBnzbOjfZogqQ/5iHlEbl6OqBrzktFcC7my4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shiqing",
        "surname": "Ma"
      },
      "authorName": "Ma, Shiqing",
      "articleRefs": [
        {
          "pageNumber": 1171,
          "articleName": "Debugging with Intelligence via Probabilistic Inference",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7CYIpqNdfDVuty6nF4sCz0/4NS9ycJ4Imp4FkgVouytF1.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yuxing",
        "surname": "Ma"
      },
      "authorName": "Ma, Yuxing",
      "articleRefs": [
        {
          "pageNumber": 458,
          "articleName": "Constructing Supply Chains in Open Source Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/237l8BpJ5Mk8si9rFnzmfM/33F0J8UY3SH7YZCjfED42Y.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kaushik",
        "surname": "Madala"
      },
      "authorName": "Madala, Kaushik",
      "articleRefs": [
        {
          "pageNumber": 910,
          "articleName": "A Combinatorial Approach for Exposing Off-Nominal Behaviors",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1niPYcBs9KMjWLu6UZNJfB/2u0THsBx1px4D7wndMcz96.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Patrick",
        "surname": "Mäder"
      },
      "authorName": "Mäder, Patrick",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Poster: Use of Trace Link Types in Issue Tracking Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3LodwIy3T6TyziM519l2zg/6ZxSLctP0rebQAl9A0LZAZ.pdf"
        },
        {
          "pageNumber": 834,
          "articleName": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gregory",
        "surname": "Madey"
      },
      "authorName": "Madey, Gregory",
      "articleRefs": [
        {
          "pageNumber": 226,
          "articleName": "Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jO5jPbQCODqSGRusrILtr/6qj2A2RoOEd4Jqd6hegqcw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lech",
        "surname": "Madeyski"
      },
      "authorName": "Madeyski, Lech",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "[Journal First] Effect Sizes and their Variance for AB/BA Crossover Design Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2vbLjCzIIhv5QjDxqXRXg6/4cvS5U8l4xLwOmfEQoV3vI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kumar",
        "surname": "Madhukar"
      },
      "authorName": "Madhukar, Kumar",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Generalizing Specific-Instance Interpolation Proofs with SyGuS",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6O8wrhX2O9cvQjAmWGmMqK/dS8C4iWQN1NmsD2aISsDI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anders",
        "surname": "Magnusson"
      },
      "authorName": "Magnusson, Anders",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/xLEjBh7hPb5V1LsqUWnRl/4mUPQnhdOLBljWKOk5ULOT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sonal",
        "surname": "Mahajan"
      },
      "authorName": "Mahajan, Sonal",
      "articleRefs": [
        {
          "pageNumber": 140,
          "articleName": "Automated Repair of Mobile Friendly Problems in Web Pages",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6AsOqvoJNpU0u12eBMc4m9/23Ce40gydrYlLzkd7LB4it.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anja M.",
        "surname": "Maier"
      },
      "authorName": "Maier, Anja M.",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Federico",
        "surname": "Maiorano"
      },
      "authorName": "Maiorano, Federico",
      "articleRefs": [
        {
          "pageNumber": 128,
          "articleName": "[Journal First] Sentiment Polarity Detection for Software Development",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5o2jlVBKgm0WbzNsXeVPrw/70ILFFydFpHbzdIOpU2GFl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "István",
        "surname": "Majzik"
      },
      "authorName": "Majzik, István",
      "articleRefs": [
        {
          "pageNumber": 113,
          "articleName": "The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2oUedkh05E6LoFEamVXTkw/20ZzJFufxJ3lFczmyQR7IW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Erina",
        "surname": "Makihara"
      },
      "authorName": "Makihara, Erina",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ivano",
        "surname": "Malavolta"
      },
      "authorName": "Malavolta, Ivano",
      "articleRefs": [
        {
          "pageNumber": 535,
          "articleName": "[Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract]",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/ktxzV8GdMxTKUoO3iqAdi/4ppbixCN5xA3Zv0WUGwaIa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sam",
        "surname": "Malek"
      },
      "authorName": "Malek, Sam",
      "articleRefs": [
        {
          "pageNumber": 421,
          "articleName": "A Large-Scale Empirical Study on the Effects of Code Obfuscations on Android Apps and Anti-Malware Products",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7f234whcYWFE7F5MkE14fI/2SWs4RmA9Epgmb4okKjMz0.pdf"
        },
        {
          "pageNumber": 497,
          "articleName": "[Journal First] Lightweight, Obfuscation-Resilient Detection and Family Identification of Android Malware",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nEJytH1hn6nJ0tb77mA8t/6GTTGGl8wHMuhMg7g3ja9B.pdf"
        },
        {
          "pageNumber": 846,
          "articleName": "A Temporal Permission Analysis and Enforcement Framework for Android",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf"
        },
        {
          "pageNumber": 1039,
          "articleName": "Nemo: Multi-criteria Test-Suite Minimization with Integer Nonlinear Programming",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gVQozZZzSv6Yh0cmO8GQb/6R13qIhxIq6zydaKQZnCij.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jonathan I.",
        "surname": "Maletic"
      },
      "authorName": "Maletic, Jonathan I.",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matin",
        "surname": "Mansouri"
      },
      "authorName": "Mansouri, Matin",
      "articleRefs": [
        {
          "pageNumber": 483,
          "articleName": "Accurate and Efficient Refactoring Detection in Commit History",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mika",
        "surname": "Mäntylä"
      },
      "authorName": "Mäntylä, Mika",
      "articleRefs": [
        {
          "pageNumber": 705,
          "articleName": "Do Programmers Work at Night or During the Weekend?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3PZI2iH7OZcqmfOhovoPWi/4jMoJeCniCPfvSDteaaNux.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bing",
        "surname": "Mao"
      },
      "authorName": "Mao, Bing",
      "articleRefs": [
        {
          "pageNumber": 238,
          "articleName": "Poster: Detecting Missing Checks for Identifying Insufficient Attack Protections",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68lea68Xffx9ofe7BySvM/206boRxPqYpHOPA2UsxYIq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jakeline",
        "surname": "Marcos-Abed"
      },
      "authorName": "Marcos-Abed, Jakeline",
      "articleRefs": [
        {
          "pageNumber": 139,
          "articleName": "Poster: A Matrix for Analyzing Projects in Software Engineering Courses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4taJKQS2iQrYX5FylSDq4Y/1yXNyF4Ikm9Om5ZLve3Qqw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michaël",
        "surname": "Marcozzi"
      },
      "authorName": "Marcozzi, Michaël",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrian",
        "surname": "Marcus"
      },
      "authorName": "Marcus, Andrian",
      "articleRefs": [
        {
          "pageNumber": 530,
          "articleName": "Automatic Software Summarization: The State of the Art",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54CdjHMEEvZOX7240tsnI0/pD8iZ5Q7JF5mIlQD0vxUc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sabrina",
        "surname": "Marczak"
      },
      "authorName": "Marczak, Sabrina",
      "articleRefs": [
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Leonardo",
        "surname": "Mariani"
      },
      "authorName": "Mariani, Leonardo",
      "articleRefs": [
        {
          "pageNumber": 280,
          "articleName": "Augusto: Exploiting Popular Functionalities for the Generation of Semantic GUI Tests with Oracles",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4Bj4eXTd2JJsTSOvwfGyU3/3tjKiQP53XxdoUXP3NwW84.pdf"
        },
        {
          "pageNumber": 1219,
          "articleName": "[Journal First] Automatic Software Repair: A Survey",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ZwRKZQkILQrDf1dYRc6MX/3GxXiKpuG16Y0aONhuJjab.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dusica",
        "surname": "Marijan"
      },
      "authorName": "Marijan, Dusica",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Practical Selective Regression Testing with Effective Redundancy in Interleaved Tests",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5pilYClpXUQa77Kg5Y9986/5aQxPj9Migxn3tGsUQVA7h.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Darko",
        "surname": "Marinov"
      },
      "authorName": "Marinov, Darko",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf"
        },
        {
          "pageNumber": 49,
          "articleName": "Mining Container Image Repositories for Software Configuration and Beyond",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4wlZKfwOLMVMe3mCqFtWP1/6EIw9CKjiQiNIPFziN2DRW.pdf"
        },
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matthias",
        "surname": "Markthaler"
      },
      "authorName": "Markthaler, Matthias",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gastón",
        "surname": "Márquez"
      },
      "authorName": "Márquez, Gastón",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Poster: Exploration of Academic and Industrial Evidence about Architectural Tactics and Patterns in Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/TLOslOwt6ZiwpMbu04hsL/BNRxGvN7me9B2jeqY2cNm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andreas",
        "surname": "Martens"
      },
      "authorName": "Martens, Andreas",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "A Data Decomposition Method for Stepwise Migration of Complex Legacy Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3O1Ktk2tXxpTHy1ufdypxO/4EhNANlLNIYSkF2FDJHDAs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexandra",
        "surname": "Martinez"
      },
      "authorName": "Martinez, Alexandra",
      "articleRefs": [
        {
          "pageNumber": 108,
          "articleName": "Use of JiTT in a Graduate Software Testing Course: An Experience Report",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7KI9xFrlptWhB1WS8sHiEe/2ipWZAAMbfjOAgdYm5JLyp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fabio",
        "surname": "Massacci"
      },
      "authorName": "Massacci, Fabio",
      "articleRefs": [
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jobson",
        "surname": "Massollar"
      },
      "authorName": "Massollar, Jobson",
      "articleRefs": [
        {
          "pageNumber": 1194,
          "articleName": "[Journal First] Challenges and Pitfalls on Surveying Evidence in the Software Engineering Technical Literature: An Exploratory Study with Novices",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eOAQt0CIgL4F5n3HwADCt/4duvB0d69UshSNJsqlMUII.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jon",
        "surname": "Mathews"
      },
      "authorName": "Mathews, Jon",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "COMB: Computing Relevant Program Behaviors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Akira",
        "surname": "Matsuzaki"
      },
      "authorName": "Matsuzaki, Akira",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrea",
        "surname": "Mattavelli"
      },
      "authorName": "Mattavelli, Andrea",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf"
        },
        {
          "pageNumber": 350,
          "articleName": "Chopped Symbolic Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4dB4MqN33HWSe06nX7cqo8/4A2sy5Nn535KnCMdVFvrXE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tichy",
        "surname": "Matthias"
      },
      "authorName": "Matthias, Tichy",
      "articleRefs": [
        {
          "pageNumber": 131,
          "articleName": "Poster: Challenges with Automotive Test Case Specifications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/22HRkItZGtp9E0KerKRG6U/55RByn2pvzw3VEvvRElf7v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anders",
        "surname": "Mattsson"
      },
      "authorName": "Mattsson, Anders",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christoph",
        "surname": "Mayr-Dorn"
      },
      "authorName": "Mayr-Dorn, Christoph",
      "articleRefs": [
        {
          "pageNumber": 397,
          "articleName": "Does the Propagation of Artifact Changes Across Tasks Reflect Work Dependencies?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/k7JQInKioHiNAlLceXGcq/4Zizzu8Ywfs4vylMPr16Jt.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Davood",
        "surname": "Mazinanian"
      },
      "authorName": "Mazinanian, Davood",
      "articleRefs": [
        {
          "pageNumber": 483,
          "articleName": "Accurate and Efficient Refactoring Detection in Commit History",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Genc",
        "surname": "Mazlami"
      },
      "authorName": "Mazlami, Genc",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shane",
        "surname": "McIntosh"
      },
      "authorName": "McIntosh, Shane",
      "articleRefs": [
        {
          "pageNumber": 560,
          "articleName": "[Journal First] Are Fix-Inducing Changes a Moving Target?: A Longitudinal Case Study of Just-in-Time Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3uRSaEmVCZ8sxcHsoTOQlj/IB9wBk3BHYMYBlqgTMQQj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Collin",
        "surname": "McMillan"
      },
      "authorName": "McMillan, Collin",
      "articleRefs": [
        {
          "pageNumber": 788,
          "articleName": "[Journal First] A Comparison of Program Comprehension Strategies by Blind and Sighted Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6L8BvympA8qNy2olAr6lux/L085iQAOXSGrvjP6JWaUM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Phil",
        "surname": "McMinn"
      },
      "authorName": "McMinn, Phil",
      "articleRefs": [
        {
          "pageNumber": 140,
          "articleName": "Automated Repair of Mobile Friendly Problems in Web Pages",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6AsOqvoJNpU0u12eBMc4m9/23Ce40gydrYlLzkd7LB4it.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sergey",
        "surname": "Mechtaev"
      },
      "authorName": "Mechtaev, Sergey",
      "articleRefs": [
        {
          "pageNumber": 24,
          "articleName": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf"
        },
        {
          "pageNumber": 129,
          "articleName": "Semantic Program Repair Using a Reference Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2ndg0exc1x8lxEFXhKm0g0/1N19faKQEkIWF1UTM7JlA4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nenad",
        "surname": "Medvidovic"
      },
      "authorName": "Medvidovic, Nenad",
      "articleRefs": [
        {
          "pageNumber": 53,
          "articleName": "EVA: A Tool for Visualizing Software Architectural Evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/XqdAJt5foJjAS6rm5WZXo/5DWH80u2EkVBTZfxOPvVG3.pdf"
        },
        {
          "pageNumber": 176,
          "articleName": "Leveraging Program Analysis to Reduce User-Perceived Latency in Mobile Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6XtxxPyOjmBnzbOjfZogqQ/5iHlEbl6OqBrzktFcC7my4.pdf"
        },
        {
          "pageNumber": 262,
          "articleName": "Poster: Making Well-Informed Software Design Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2hjOTnt4IhzP5kLZgw9GKS/4G3hXm7aB71RGA86WZqsVh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rohit",
        "surname": "Mehra"
      },
      "authorName": "Mehra, Rohit",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "An Immersive Future for Software Engineering — Avenues and Approaches",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1EpjKazCrYQMpJpG57Wp2A/4qzQRZDxVTtuh4cl4S2HuV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sidharth",
        "surname": "Mehra"
      },
      "authorName": "Mehra, Sidharth",
      "articleRefs": [
        {
          "pageNumber": 981,
          "articleName": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andreas",
        "surname": "Meier"
      },
      "authorName": "Meier, Andreas",
      "articleRefs": [
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shawn",
        "surname": "Meier"
      },
      "authorName": "Meier, Shawn",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Erik",
        "surname": "Meijer"
      },
      "authorName": "Meijer, Erik",
      "articleRefs": [
        {
          "pageNumber": 752,
          "articleName": "Debugging Data Flows in Reactive Programs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/26QEHcXcpHFGmR9nd5fSPW/57Rpui1pbPGVNJ0KqbEOcB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Karl",
        "surname": "Meinke"
      },
      "authorName": "Meinke, Karl",
      "articleRefs": [
        {
          "pageNumber": 548,
          "articleName": "Machine Learning for Software Engineering: Models, Methods, and Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68mZt2BRUQO2z4mysF42zv/3BBCZzcXIipNq8ElKPyNZb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Melski"
      },
      "authorName": "Melski, David",
      "articleRefs": [
        {
          "pageNumber": 338,
          "articleName": "Program Splicing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3GzvLDJDyvhGV814ZqQjMV/5PljSrUUNExRaRT9kY641T.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fabiana Freitas",
        "surname": "Mendes"
      },
      "authorName": "Mendes, Fabiana Freitas",
      "articleRefs": [
        {
          "pageNumber": 460,
          "articleName": "The Relationship between Personality and Value-Based Decision-Making",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4kVeFAH3CN7teUDfgXVWB6/728jptONMstNKZFbgqiYsa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christopher",
        "surname": "Mendez"
      },
      "authorName": "Mendez, Christopher",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Guozhu",
        "surname": "Meng"
      },
      "authorName": "Meng, Guozhu",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        },
        {
          "pageNumber": 665,
          "articleName": "From UI Design Image to GUI Skeleton: A Neural Machine Translator to Bootstrap Mobile GUI Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JXA3aEoFlChCTeObvRL5D/4SROMnxHfcqnH3f5jpBxW6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Claudio",
        "surname": "Menghi"
      },
      "authorName": "Menghi, Claudio",
      "articleRefs": [
        {
          "pageNumber": 434,
          "articleName": "Poster: Property Specification Patterns for Robotic Missions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf"
        },
        {
          "pageNumber": 438,
          "articleName": "Poster: Towards Multi-robot Applications Planning Under Uncertainty",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5OMIq2Xre09PiJrZEN6sZ1/1qIbZQKf2SutDZRTgOpDaJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Solomon",
        "surname": "Mensah"
      },
      "authorName": "Mensah, Solomon",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tim",
        "surname": "Menzies"
      },
      "authorName": "Menzies, Tim",
      "articleRefs": [
        {
          "pageNumber": 1050,
          "articleName": "Is \"Better Data\" Better Than \"Better Data Miners\"?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hzCUfPHZDYwOVdpeABHj9/5kDwErSTWTzzBsrepPdBwv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Timothy",
        "surname": "Menzies"
      },
      "authorName": "Menzies, Timothy",
      "articleRefs": [
        {
          "pageNumber": 306,
          "articleName": "What is the Connection Between Issues, Bugs, and Enhancements?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ali",
        "surname": "Mesbah"
      },
      "authorName": "Mesbah, Ali",
      "articleRefs": [
        {
          "pageNumber": 210,
          "articleName": "Fine-Grained Test Minimization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7FekvzG72MbQMYKnwN6pXO/34ooDIrCIylSUp9k6oGIrB.pdf"
        },
        {
          "pageNumber": 776,
          "articleName": "Inferring Hierarchical Motifs from Execution Traces",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TTXoZtYTdhZLsqHykC3ZK/3TvbLeZaB2ApWjzhC0Nfly.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Angelo",
        "surname": "Messina"
      },
      "authorName": "Messina, Angelo",
      "articleRefs": [
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "André N.",
        "surname": "Meyer"
      },
      "authorName": "Meyer, André N.",
      "articleRefs": [
        {
          "pageNumber": 480,
          "articleName": "Fostering Software Developers' Productivity at Work Through Self-Monitoring and Goal-Setting",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/sko7a5nTLsy1Aru1aeJYf/3QR0YadN1XxbNVWdQ8wIwU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Weikai",
        "surname": "Miao"
      },
      "authorName": "Miao, Weikai",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniela",
        "surname": "Micucci"
      },
      "authorName": "Micucci, Daniela",
      "articleRefs": [
        {
          "pageNumber": 1219,
          "articleName": "[Journal First] Automatic Software Repair: A Survey",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ZwRKZQkILQrDf1dYRc6MX/3GxXiKpuG16Y0aONhuJjab.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mehdi",
        "surname": "Mirakhorli"
      },
      "authorName": "Mirakhorli, Mehdi",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        },
        {
          "pageNumber": 117,
          "articleName": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Breno",
        "surname": "Miranda"
      },
      "authorName": "Miranda, Breno",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andriy",
        "surname": "Miranskyy"
      },
      "authorName": "Miranskyy, Andriy",
      "articleRefs": [
        {
          "pageNumber": 700,
          "articleName": "[Journal First] On the Use of Hidden Markov Model to Predict the Time to Fix Bugs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4cSxEsEH079Uzvt1ewbxGs/2pB5Js1Y9qRj6SNwMZQQHH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcello",
        "surname": "Missiroli"
      },
      "authorName": "Missiroli, Marcello",
      "articleRefs": [
        {
          "pageNumber": 157,
          "articleName": "Poster: A Conceptual Model for Cooperative Thinking",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/43kOeXPEu4QHTUCpTW99fs/2Ey35xhO4B5q4gXBlj7ifp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Antonija",
        "surname": "Mitrovic"
      },
      "authorName": "Mitrovic, Antonija",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Toward Enhancing the Training of Software Engineering Students and Professionals Using Active Video Watching",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/514Lia1cgT3MTvnEb0jjVq/12MwgOxicqOE6tPJIkAvle.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lennart",
        "surname": "Mittag"
      },
      "authorName": "Mittag, Lennart",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Aletheia: A Failure Diagnosis Toolchain",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RuHKRW0D4nCqMWOQR7oTQ/5l0kvbcWGGmPFfiQv1YvL6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Masafumi",
        "surname": "Miwa"
      },
      "authorName": "Miwa, Masafumi",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mahyar Tourchi",
        "surname": "Moghaddam"
      },
      "authorName": "Moghaddam, Mahyar Tourchi",
      "articleRefs": [
        {
          "pageNumber": 462,
          "articleName": "IoT-Based Urban Security Models",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6YXYYzNnctK574hnuer103/3W8gSBvWz8G90IbmMvAMw4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Soumik",
        "surname": "Mohian"
      },
      "authorName": "Mohian, Soumik",
      "articleRefs": [
        {
          "pageNumber": 981,
          "articleName": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vince",
        "surname": "Molnár"
      },
      "authorName": "Molnár, Vince",
      "articleRefs": [
        {
          "pageNumber": 113,
          "articleName": "The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2oUedkh05E6LoFEamVXTkw/20ZzJFufxJ3lFczmyQR7IW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Akito",
        "surname": "Monden"
      },
      "authorName": "Monden, Akito",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Martin",
        "surname": "Monperrus"
      },
      "authorName": "Monperrus, Martin",
      "articleRefs": [
        {
          "pageNumber": 95,
          "articleName": "How to Design a Program Repair Bot? Insights from the Repairnator Project",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1ExIKnJipGMFZO7lPRAngF/2DiGXRSudrFpQa60hIp2VD.pdf"
        },
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ian",
        "surname": "Moore"
      },
      "authorName": "Moore, Ian",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rodrigo",
        "surname": "Morales"
      },
      "authorName": "Morales, Rodrigo",
      "articleRefs": [
        {
          "pageNumber": 59,
          "articleName": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kevin",
        "surname": "Moran"
      },
      "authorName": "Moran, Kevin",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 165,
          "articleName": "Automated Reporting of GUI Design Violations for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73vOGjBkf23NHodSgD3DR2/1OWvuIr0ODMO3SiUdEDKEV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Laura",
        "surname": "Moreno"
      },
      "authorName": "Moreno, Laura",
      "articleRefs": [
        {
          "pageNumber": 530,
          "articleName": "Automatic Software Summarization: The State of the Art",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54CdjHMEEvZOX7240tsnI0/pD8iZ5Q7JF5mIlQD0vxUc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andreas",
        "surname": "Morgenstern"
      },
      "authorName": "Morgenstern, Andreas",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Patrick",
        "surname": "Morrison"
      },
      "authorName": "Morrison, Patrick",
      "articleRefs": [
        {
          "pageNumber": 426,
          "articleName": "Poster: Identifying Security Issues in Software Development: Are Keywords Enough?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6gBAdmDKYhyHsm7KCt99cN/4hTlGNOOjkp6Hde2uwrpbn.pdf"
        },
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Manish",
        "surname": "Motwani"
      },
      "authorName": "Motwani, Manish",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "[Journal First] Do Automated Program Repair Techniques Repair Hard and Important Bugs?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TcOrwOTri9qN5sl2VPDmg/1UlHTll3MjB9vsQoBoeZXG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sergio",
        "surname": "Mover"
      },
      "authorName": "Mover, Sergio",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Henry",
        "surname": "Muccini"
      },
      "authorName": "Muccini, Henry",
      "articleRefs": [
        {
          "pageNumber": 535,
          "articleName": "[Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract]",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/ktxzV8GdMxTKUoO3iqAdi/4ppbixCN5xA3Zv0WUGwaIa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mukelabai",
        "surname": "Mukelabai"
      },
      "authorName": "Mukelabai, Mukelabai",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thorsten",
        "surname": "Müller"
      },
      "authorName": "Müller, Thorsten",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nuthan",
        "surname": "Munaiah"
      },
      "authorName": "Munaiah, Nuthan",
      "articleRefs": [
        {
          "pageNumber": 464,
          "articleName": "Assisted Discovery of Software Vulnerabilities",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6CuAT993NY8oMGLP3ilI8g/4P6xSdtDZgs45l6Ma2p3rZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daiki",
        "surname": "Muramoto"
      },
      "authorName": "Muramoto, Daiki",
      "articleRefs": [
        {
          "pageNumber": 272,
          "articleName": "Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dipIizZzbMXAiCO02tWVF/2xPcZJ8mMITxw7ZU4W3dQ7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hokuto",
        "surname": "Muraoka"
      },
      "authorName": "Muraoka, Hokuto",
      "articleRefs": [
        {
          "pageNumber": 272,
          "articleName": "Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dipIizZzbMXAiCO02tWVF/2xPcZJ8mMITxw7ZU4W3dQ7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Emerson",
        "surname": "Murphy-Hill"
      },
      "authorName": "Murphy-Hill, Emerson",
      "articleRefs": [
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        },
        {
          "pageNumber": 643,
          "articleName": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Syed Shariyar",
        "surname": "Murtaza"
      },
      "authorName": "Murtaza, Syed Shariyar",
      "articleRefs": [
        {
          "pageNumber": 700,
          "articleName": "[Journal First] On the Use of Hidden Markov Model to Predict the Time to Fix Bugs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4cSxEsEH079Uzvt1ewbxGs/2pB5Js1Y9qRj6SNwMZQQHH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Madan",
        "surname": "Musuvathi"
      },
      "authorName": "Musuvathi, Madan",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7coDDNB5gFaIi3yM57kNPD/11bmVU627jwxwAbd5Hc27n.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Todd",
        "surname": "Mytkowicz"
      },
      "authorName": "Mytkowicz, Todd",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7coDDNB5gFaIi3yM57kNPD/11bmVU627jwxwAbd5Hc27n.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sarah",
        "surname": "Nadi"
      },
      "authorName": "Nadi, Sarah",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Which Library Should I Use?: A Metric-Based Comparison of Software Libraries",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7tvenWpQiRYIQUZxjDtYA1/6oJRf6G9ZAFW05DP8p42aj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Meiyappan",
        "surname": "Nagappan"
      },
      "authorName": "Nagappan, Meiyappan",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf"
        },
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "András Szabolcs",
        "surname": "Nagy"
      },
      "authorName": "Nagy, András Szabolcs",
      "articleRefs": [
        {
          "pageNumber": 969,
          "articleName": "A Graph Solver for the Automated Generation of Consistent Domain-Specific Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6eq1ZquQwyvOqG174Q7zcO/4GkhGJCKWGFeeRD8zmyZ6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Csaba",
        "surname": "Nagy"
      },
      "authorName": "Nagy, Csaba",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "SQLInspect: A Static Analyzer to Inspect Database Usage in Java Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3bn80m7mgpwTXF5v44mUTQ/1JsowseYkCwbOQpokqj3Ip.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hiroyuki",
        "surname": "Nakamura"
      },
      "authorName": "Nakamura, Hiroyuki",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jaechang",
        "surname": "Nam"
      },
      "authorName": "Nam, Jaechang",
      "articleRefs": [
        {
          "pageNumber": 315,
          "articleName": "Poster: Designing Bug Detection Rules for Fewer False Alarms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1UPJvjP8ppzant4gtBI7mS/6oFZLatXk1lynNL1b8OV0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Isao",
        "surname": "Nanba"
      },
      "authorName": "Nanba, Isao",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "Elixir: An Automated Repair Tool for Java Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1uVaDsZ3LRs5lLyw2BLVOQ/2PKRfkKFJZy3RSZOpjabc2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Annalisa",
        "surname": "Napolitano"
      },
      "authorName": "Napolitano, Annalisa",
      "articleRefs": [
        {
          "pageNumber": 101,
          "articleName": "CyPhEF: A Model-Driven Engineering Framework for Self-Adaptive Cyber-Physical Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1gNLLFWWKWZtApQjwZyuuj/2HAORC6UYaMnwzI2dA35YZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Syad Asad",
        "surname": "Naqvi"
      },
      "authorName": "Naqvi, Syad Asad",
      "articleRefs": [
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mohamed",
        "surname": "Nasser"
      },
      "authorName": "Nasser, Mohamed",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3cdPpSbZHTPdKRDJmYqHi5/14bRIwemub5Z9iDjUUa7uz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Muhammad",
        "surname": "Nawaz"
      },
      "authorName": "Nawaz, Muhammad",
      "articleRefs": [
        {
          "pageNumber": 346,
          "articleName": "Poster: Efficient Iterative Deepening for Bounded Exhaustive Generation of Complex Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2JMd1LQkrxt0JBD11w0lFv/4rzjrCWAMhM1MRAmRp3Kg5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Iulian",
        "surname": "Neamtiu"
      },
      "authorName": "Neamtiu, Iulian",
      "articleRefs": [
        {
          "pageNumber": 728,
          "articleName": "Self-Hiding Behavior in Android Apps: Detection and Characterization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/39EtsVbEnvoJFUJzXaNfZd/1AQQQyk7kMtppqX7fIsDeH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Clémentine",
        "surname": "Nebut"
      },
      "authorName": "Nebut, Clémentine",
      "articleRefs": [
        {
          "pageNumber": 304,
          "articleName": "Poster: On Extracting Relevant and Complex Variability Information from Software Descriptions with Pattern Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5qpsBHLVvt6ITKmG4P5Aes/6VeSDOFMGM7oBcQsDZmBjQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "George",
        "surname": "Necul"
      },
      "authorName": "Necul, George",
      "articleRefs": [
        {
          "pageNumber": 445,
          "articleName": "DetReduce: Minimizing Android GUI Test Suites for Regression Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/65qbeRBREN0W4K0rpvhsnv/1pNi1RIt2umVAlWTxVJIml.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shiva",
        "surname": "Nejati"
      },
      "authorName": "Nejati, Shiva",
      "articleRefs": [
        {
          "pageNumber": 1016,
          "articleName": "Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/VwB38GE70VKZwyWn3vYpD/2vNhnZhaJwrULtleN0eIAX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Graham",
        "surname": "Neubig"
      },
      "authorName": "Neubig, Graham",
      "articleRefs": [
        {
          "pageNumber": 388,
          "articleName": "Poster: Learning to Mine Parallel Natural Language/Source Code Corpora from Stack Overflow",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1iZMJRxsjJaTnjtXZEm8ji/3B4yjZqOJryCSNTmEBfRma.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christian D.",
        "surname": "Newman"
      },
      "authorName": "Newman, Christian D.",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nicholas",
        "surname": "Ng"
      },
      "authorName": "Ng, Nicholas",
      "articleRefs": [
        {
          "pageNumber": 1137,
          "articleName": "A Static Verification Framework for Message Passing in Go Using Behavioural Types",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4qni3QmfOZ1L9eUK9sVGyf/OgbS6Mp1QczsiyDiedExx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hoan A",
        "surname": "Nguyen"
      },
      "authorName": "Nguyen, Hoan A",
      "articleRefs": [
        {
          "pageNumber": 412,
          "articleName": "Poster: Hybrid Traversal: Efficient Source Code Analysis at Scale",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2NPcU40Nlwn2KbCodc68JA/7pV86Vfe0PMckYKjDeVlRT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tien",
        "surname": "Nguyen"
      },
      "authorName": "Nguyen, Tien",
      "articleRefs": [
        {
          "pageNumber": 632,
          "articleName": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tung",
        "surname": "Nguyen"
      },
      "authorName": "Nguyen, Tung",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Deep Learning UI Design Patterns of Mobile Apps",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/69IMKxOq8MkgR0RQk5pkhq/6mwRgrVk2jUBuGBSoq81Rt.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ansong",
        "surname": "Ni"
      },
      "authorName": "Ni, Ansong",
      "articleRefs": [
        {
          "pageNumber": 366,
          "articleName": "Poster: ACONA: Active Online Model Adaptation for Predicting Continuous Integration Build Failures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1NinLYBC32PXucXAwTyz3B/1PJW3gI4n2cBOJYdcrENjL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rainer",
        "surname": "Niedermayr"
      },
      "authorName": "Niedermayr, Rainer",
      "articleRefs": [
        {
          "pageNumber": 390,
          "articleName": "Poster: Identification of Methods with Low Fault Risk",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JGgODCZWzCpd0zz1oZSYU/2SjNf69oXbXjcLDFxghEKS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Radoslaw",
        "surname": "Nielek"
      },
      "authorName": "Nielek, Radoslaw",
      "articleRefs": [
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gaorong",
        "surname": "Ning"
      },
      "authorName": "Ning, Gaorong",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jianwei",
        "surname": "Niu"
      },
      "authorName": "Niu, Jianwei",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nan",
        "surname": "Niu"
      },
      "authorName": "Niu, Nan",
      "articleRefs": [
        {
          "pageNumber": 444,
          "articleName": "Poster: Answering the Requirements Traceability Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54xELw09vUNSoYFjh1AziH/3vdJIWxnVZhNTP9QUA8bWD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "John",
        "surname": "Noll"
      },
      "authorName": "Noll, John",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yannic",
        "surname": "Noller"
      },
      "authorName": "Noller, Yannic",
      "articleRefs": [
        {
          "pageNumber": 129,
          "articleName": "Semantic Program Repair Using a Reference Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2ndg0exc1x8lxEFXhKm0g0/1N19faKQEkIWF1UTM7JlA4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nicole",
        "surname": "Novielli"
      },
      "authorName": "Novielli, Nicole",
      "articleRefs": [
        {
          "pageNumber": 128,
          "articleName": "[Journal First] Sentiment Polarity Detection for Software Development",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5o2jlVBKgm0WbzNsXeVPrw/70ILFFydFpHbzdIOpU2GFl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gabriel",
        "surname": "Nunes"
      },
      "authorName": "Nunes, Gabriel",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bashar",
        "surname": "Nuseibeh"
      },
      "authorName": "Nuseibeh, Bashar",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jan",
        "surname": "Nygard"
      },
      "authorName": "Nygard, Jan",
      "articleRefs": [
        {
          "pageNumber": 1243,
          "articleName": "[Journal First] Automated Refactoring of OCL Constraints with Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7cJGdYhKy3K17vTHSANryU/39zsgbNVg02BjEkeFH5d3S.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Martín",
        "surname": "Ochoa"
      },
      "authorName": "Ochoa, Martín",
      "articleRefs": [
        {
          "pageNumber": 215,
          "articleName": "Static Analysis of Context Leaks in Android Applications",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jHnDZvs2fqlaFrFCxfUpX/1b1KkOf8jkZyi9FJDlxPt7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nobuhiko",
        "surname": "Ogura"
      },
      "authorName": "Ogura, Nobuhiko",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hakjoo",
        "surname": "Oh"
      },
      "authorName": "Oh, Hakjoo",
      "articleRefs": [
        {
          "pageNumber": 1244,
          "articleName": "Automatically Generating Search Heuristics for Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5k6pWQxBOWJa9S1UiZ2A2n/6sJ0ZusmvQqfPy9dyjzenc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Manuel",
        "surname": "Ohrndorf"
      },
      "authorName": "Ohrndorf, Manuel",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "ReVision: A Tool for History-Based Model Repair Recommendations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3OBcOwPcuVek9zxGKch3pF/2buxI8VlbB6qYkDaPC7Ly2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Willian",
        "surname": "Oizumi"
      },
      "authorName": "Oizumi, Willian",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Luís",
        "surname": "Oliveira"
      },
      "authorName": "Oliveira, Luís",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "User Feedback in the App Store: A Cross-Cultural Study",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Roberto",
        "surname": "Oliveira"
      },
      "authorName": "Oliveira, Roberto",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sandro",
        "surname": "Oliveira"
      },
      "authorName": "Oliveira, Sandro",
      "articleRefs": [
        {
          "pageNumber": 137,
          "articleName": "Poster: A Methodology to Teaching Statistical Process Control for Software Engineers",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5Fxhj66zTRNy8m928UTJtO/trNe4al0qmo7aqHS6SsSt.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rocco",
        "surname": "Oliveto"
      },
      "authorName": "Oliveto, Rocco",
      "articleRefs": [
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        },
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Olsson"
      },
      "authorName": "Olsson, Thomas",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2GtTmXlTVQhcRkpEo1qoQM/3BK0YgK2oP3ZJ3spCM5BS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tobias",
        "surname": "Olsson"
      },
      "authorName": "Olsson, Tobias",
      "articleRefs": [
        {
          "pageNumber": 197,
          "articleName": "Poster: Using Repository Data for Driving Software Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7KkMEL4TPzWlaTUD5Aj0Hd/V0s75jWXuVVK6ky99u5wi.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alessandro",
        "surname": "Orso"
      },
      "authorName": "Orso, Alessandro",
      "articleRefs": [
        {
          "pageNumber": 82,
          "articleName": "Enlightened Debugging",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bH8PUknAyuN3l7zJfadY4/5cLNTz1LRtfwrJOW6Zf3Z.pdf"
        },
        {
          "pageNumber": 384,
          "articleName": "Poster: Automated Test Migration for Mobile Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tal5Beeg8SDPTo3co0jm4/27yyURsFhJ5y7Rm3wTmCip.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Philipp",
        "surname": "Orth"
      },
      "authorName": "Orth, Philipp",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Felipe",
        "surname": "Osses"
      },
      "authorName": "Osses, Felipe",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Poster: Exploration of Academic and Industrial Evidence about Architectural Tactics and Patterns in Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/TLOslOwt6ZiwpMbu04hsL/BNRxGvN7me9B2jeqY2cNm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tosin Daniel",
        "surname": "Oyetoyan"
      },
      "authorName": "Oyetoyan, Tosin Daniel",
      "articleRefs": [
        {
          "pageNumber": 426,
          "articleName": "Poster: Identifying Security Issues in Software Development: Are Keywords Enough?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6gBAdmDKYhyHsm7KCt99cN/4hTlGNOOjkp6Hde2uwrpbn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Izzet Gokhan",
        "surname": "Ozbilgin"
      },
      "authorName": "Ozbilgin, Izzet Gokhan",
      "articleRefs": [
        {
          "pageNumber": 68,
          "articleName": "Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/49j2HKsc7xCbCMCQBewE5d/6YasTauDw1E3JGL4Jft3He.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maria",
        "surname": "Paasivaara"
      },
      "authorName": "Paasivaara, Maria",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Federica",
        "surname": "Paci"
      },
      "authorName": "Paci, Federica",
      "articleRefs": [
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hema Susmita",
        "surname": "Padala"
      },
      "authorName": "Padala, Hema Susmita",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rodrigo",
        "surname": "Paes"
      },
      "authorName": "Paes, Rodrigo",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Karl",
        "surname": "Palmskog"
      },
      "authorName": "Palmskog, Karl",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "A Regression Proof Selection Tool For Coq",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4d3wTvZAzM1UeluRGK5ggk/73ZV4s78VDohful3g6T0eF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fabio",
        "surname": "Palomba"
      },
      "authorName": "Palomba, Fabio",
      "articleRefs": [
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jochen",
        "surname": "Palz"
      },
      "authorName": "Palz, Jochen",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rahul",
        "surname": "Pandita"
      },
      "authorName": "Pandita, Rahul",
      "articleRefs": [
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Annibale",
        "surname": "Panichella"
      },
      "authorName": "Panichella, Annibale",
      "articleRefs": [
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        },
        {
          "pageNumber": 1220,
          "articleName": "Search-Based Test Data Generation for SQL Queries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4B2Db8L4U7DekUw6RJzAuW/3TzsZt8feqd0zTtvlqNrZD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sebastiano",
        "surname": "Panichella"
      },
      "authorName": "Panichella, Sebastiano",
      "articleRefs": [
        {
          "pageNumber": 317,
          "articleName": "Poster: Automated User Reviews Analyser",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2XVu8NOmDn7F85PC7nf6wG/5FUBTaBu8fe7Ng64ZOwFED.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mike",
        "surname": "Papadakis"
      },
      "authorName": "Papadakis, Mike",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Poster: Predicting the Fault Revelation Utility of Mutants",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/42QsecgC6WhEpnjE0Q8yxp/3hghmlVpOkcbn1KqnwEInF.pdf"
        },
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        },
        {
          "pageNumber": 537,
          "articleName": "Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/53KVBZlCxSM8SKMrWZTReW/5SVStngTUruEo7SDPWMIhR.pdf"
        },
        {
          "pageNumber": 884,
          "articleName": "[Journal First] Understanding the Factors for Fast Answers in Technical Q&A Websites: An Empirical Study of Four Stack Exchange Websites",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gXwmxc37m3Zs7S7KAHn9L/15wH8DdvqszwuqgTZmAuHG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Efi",
        "surname": "Papatheocharous"
      },
      "authorName": "Papatheocharous, Efi",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "PROMOpedi: A Web-Content Management-Based Encyclopedia of Software Property Models",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/L9r824WbXdkeD6HOUfjkp/1ic6DVpAntnIwbUz0tL4zI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "José A.",
        "surname": "Parejo"
      },
      "authorName": "Parejo, José A.",
      "articleRefs": [
        {
          "pageNumber": 882,
          "articleName": "[Journal First] Metamorphic Testing of RESTful Web APIs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2LyedqPxjqMs5M0a7ONlmb/7dHldjNf2ey5gxorIcbznJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chris",
        "surname": "Parnin"
      },
      "authorName": "Parnin, Chris",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christopher",
        "surname": "Parnin"
      },
      "authorName": "Parnin, Christopher",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "10+ Years of Teaching Software Engineering with iTrust: The Good, the Bad, and the Ugly",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3EjhI0gr5St4AFs3lVXxnq/1oGHNe0eI3D9HLwWrcK93B.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eugenio",
        "surname": "Parra"
      },
      "authorName": "Parra, Eugenio",
      "articleRefs": [
        {
          "pageNumber": 199,
          "articleName": "Poster: Analysis of Requirements Quality Evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Oka6DtRrIRdQoPXKe3Y2t/1Sod1yVld1RpM3H1H2IQs3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Corina",
        "surname": "Pasareanu"
      },
      "authorName": "Pasareanu, Corina",
      "articleRefs": [
        {
          "pageNumber": 339,
          "articleName": "Poster: Automated Program Repair with Canonical Constraints",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5HuJ0DRe1lVP5flrt0olas/cYoM2zEz7jQb9DOHiHPMV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Liliana",
        "surname": "Pasquale"
      },
      "authorName": "Pasquale, Liliana",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Norbert",
        "surname": "Pataki"
      },
      "authorName": "Pataki, Norbert",
      "articleRefs": [
        {
          "pageNumber": 428,
          "articleName": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Colin",
        "surname": "Paterson"
      },
      "authorName": "Paterson, Colin",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "Efficient Parametric Model Checking Using Domain-Specific Modelling Patterns",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/3VKXquAtw3Bsoa1GQ2m1Cn/IwXQwRyRAgcZEgA31O87n.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nupoor",
        "surname": "Patil"
      },
      "authorName": "Patil, Nupoor",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jibesh",
        "surname": "Patra"
      },
      "authorName": "Patra, Jibesh",
      "articleRefs": [
        {
          "pageNumber": 741,
          "articleName": "ConflictJS: Finding and Understanding Conflicts Between JavaScript Libraries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7twbgTuy2NJmU9AzxtFLxY/3aHDfMIHUsHnzDo5nGLCfY.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Karthik",
        "surname": "Pattabiraman"
      },
      "authorName": "Pattabiraman, Karthik",
      "articleRefs": [
        {
          "pageNumber": 776,
          "articleName": "Inferring Hierarchical Motifs from Execution Traces",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TTXoZtYTdhZLsqHykC3ZK/3TvbLeZaB2ApWjzhC0Nfly.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Claudia",
        "surname": "Peersman"
      },
      "authorName": "Peersman, Claudia",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dan",
        "surname": "Pei"
      },
      "authorName": "Pei, Dan",
      "articleRefs": [
        {
          "pageNumber": 58,
          "articleName": "Continuous Delivery of Personalized Assessment and Feedback in Agile Software Engineering Projects",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ztuOBdGuPzPaaZ5ZxbGjy/7Bjf67pa1UxMHWufh4okAy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kexin",
        "surname": "Pei"
      },
      "authorName": "Pei, Kexin",
      "articleRefs": [
        {
          "pageNumber": 303,
          "articleName": "DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1l8C5zVwRhRYyqHFTOoOUf/7FmCxsCu5eXKr4EvBf6BPz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Norman",
        "surname": "Peitek"
      },
      "authorName": "Peitek, Norman",
      "articleRefs": [
        {
          "pageNumber": 496,
          "articleName": "A Neuro-Cognitive Perspective of Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3i9dCcUyc9C48XPlNzhoOn/6EbUeXNHs6F2GkD1mkfUeK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hila",
        "surname": "Peleg"
      },
      "authorName": "Peleg, Hila",
      "articleRefs": [
        {
          "pageNumber": 1114,
          "articleName": "Programming Not Only by Example",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4OSJhkaFu096tUteSJdWJs/2hPIFheVxQOKQ5wEo4hSMx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Patrizio",
        "surname": "Pelliccione"
      },
      "authorName": "Pelliccione, Patrizio",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        },
        {
          "pageNumber": 434,
          "articleName": "Poster: Property Specification Patterns for Robotic Missions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf"
        },
        {
          "pageNumber": 438,
          "articleName": "Poster: Towards Multi-robot Applications Planning Under Uncertainty",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5OMIq2Xre09PiJrZEN6sZ1/1qIbZQKf2SutDZRTgOpDaJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vanessa",
        "surname": "Peña-Araya"
      },
      "authorName": "Peña-Araya, Vanessa",
      "articleRefs": [
        {
          "pageNumber": 98,
          "articleName": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xin",
        "surname": "Peng"
      },
      "authorName": "Peng, Xin",
      "articleRefs": [
        {
          "pageNumber": 323,
          "articleName": "Poster: Benchmarking Microservice Systems for Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4MPJujC2aLJ54VMGaEtm76/1tKujoNDTv8GyqnEt9T70J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Birgit",
        "surname": "Penzenstadler"
      },
      "authorName": "Penzenstadler, Birgit",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexandre",
        "surname": "Perez"
      },
      "authorName": "Perez, Alexandre",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Poster: A Qualitative Reasoning Approach to Spectrum-Based Fault Localization",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2h6LH9L5MS3wsT4Q4V1wAI/6erzsSt4H2Rd37rbKcp06x.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Goran",
        "surname": "Petrovic"
      },
      "authorName": "Petrovic, Goran",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "State of Mutation Testing at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4sP3SrfWJU9Db3YuxsmuKI/1Erkod3XBaeGvsAAClBEqS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mauro",
        "surname": "Pezzè"
      },
      "authorName": "Pezzè, Mauro",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf"
        },
        {
          "pageNumber": 280,
          "articleName": "Augusto: Exploiting Popular Functionalities for the Generation of Semantic GUI Tests with Oracles",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4Bj4eXTd2JJsTSOvwfGyU3/3tjKiQP53XxdoUXP3NwW84.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hung",
        "surname": "Pham"
      },
      "authorName": "Pham, Hung",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Deep Learning UI Design Patterns of Mobile Apps",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/69IMKxOq8MkgR0RQk5pkhq/6mwRgrVk2jUBuGBSoq81Rt.pdf"
        },
        {
          "pageNumber": 282,
          "articleName": "Poster: Recommending Exception Handling Patterns with ExAssist",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16FlGsREidqMynDpFiYKFV/4Wi4EHT113dBDrGRhyGTgj.pdf"
        },
        {
          "pageNumber": 284,
          "articleName": "Poster: ALPACA-Advanced Linguistic Pattern and Concept Analysis Framework for Software Engineering Corpora",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3aiLuwdP6akPBEGDrggWiZ/6ZElMdHQPHtE9H09hFTb2O.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hung",
        "surname": "Phan"
      },
      "authorName": "Phan, Hung",
      "articleRefs": [
        {
          "pageNumber": 632,
          "articleName": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Quoc-Sang",
        "surname": "Phan"
      },
      "authorName": "Phan, Quoc-Sang",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "Poster: Testing Heap-Based Programs with Java StarFinder",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4rzKWBKexbqBTVf4cYq0W1/FEIdNYhXk5CVNrycd5Sf3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Passakorn",
        "surname": "Phannachitta"
      },
      "authorName": "Phannachitta, Passakorn",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christopher",
        "surname": "Pietsch"
      },
      "authorName": "Pietsch, Christopher",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "ReVision: A Tool for History-Based Model Repair Recommendations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3OBcOwPcuVek9zxGKch3pF/2buxI8VlbB6qYkDaPC7Ly2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gustavo",
        "surname": "Pinto"
      },
      "authorName": "Pinto, Gustavo",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Almost There: A Study on Quasi-Contributors in Open-Source Software Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1yorvAqsWddHbVWuLi4YZy/6NexNkxSmHQvVZ35CgSXP3.pdf"
        },
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maria",
        "surname": "Pinto-Albuquerque"
      },
      "authorName": "Pinto-Albuquerque, Maria",
      "articleRefs": [
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marco",
        "surname": "Pistoia"
      },
      "authorName": "Pistoia, Marco",
      "articleRefs": [
        {
          "pageNumber": 258,
          "articleName": "Poster: Automatically Solving NP-Complete Problems on a Quantum Computer",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Cjz29SFL9KIkUGCi9NXdB/4KuMecZrQh8gLcNjWrZf9w.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sanjay",
        "surname": "Podder"
      },
      "authorName": "Podder, Sanjay",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "An Immersive Future for Software Engineering — Avenues and Approaches",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1EpjKazCrYQMpJpG57Wp2A/4qzQRZDxVTtuh4cl4S2HuV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Richard",
        "surname": "Pohl"
      },
      "authorName": "Pohl, Richard",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Variant Management Solution for Large Scale Software Product Lines",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4J94vc6uZu9C5yPCTynFex/1z41fCXlOqEfSXyXWq6peW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lori",
        "surname": "Pollock"
      },
      "authorName": "Pollock, Lori",
      "articleRefs": [
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Leandro",
        "surname": "Pompermaier"
      },
      "authorName": "Pompermaier, Leandro",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        },
        {
          "pageNumber": 143,
          "articleName": "Poster: Startup Software Development Education: A Systematic Mapping Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7s17xrOXocOz9TrWmIIgiY/62N7hNPnPuRUIjG4IN62FM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christophe",
        "surname": "Ponsard"
      },
      "authorName": "Ponsard, Christophe",
      "articleRefs": [
        {
          "pageNumber": 213,
          "articleName": "Helping SMEs to Better Develop Software: Experience Report and Challenges Ahead",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1JYfRO9gh0Ithz1d8uyMA1/4ygQwC2bMpXDfZhyLo60s3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Germán",
        "surname": "Poo-Caamaño"
      },
      "authorName": "Poo-Caamaño, Germán",
      "articleRefs": [
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jari",
        "surname": "Porras"
      },
      "authorName": "Porras, Jari",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Denys",
        "surname": "Poshyvanyk"
      },
      "authorName": "Poshyvanyk, Denys",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 165,
          "articleName": "Automated Reporting of GUI Design Violations for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73vOGjBkf23NHodSgD3DR2/1OWvuIr0ODMO3SiUdEDKEV.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Pradel"
      },
      "authorName": "Pradel, Michael",
      "articleRefs": [
        {
          "pageNumber": 741,
          "articleName": "ConflictJS: Finding and Understanding Conflicts Between JavaScript Libraries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7twbgTuy2NJmU9AzxtFLxY/3aHDfMIHUsHnzDo5nGLCfY.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mukul",
        "surname": "Prasad"
      },
      "authorName": "Prasad, Mukul",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "Elixir: An Automated Repair Tool for Java Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1uVaDsZ3LRs5lLyw2BLVOQ/2PKRfkKFJZy3RSZOpjabc2.pdf"
        },
        {
          "pageNumber": 384,
          "articleName": "EnMobile: Entity-Based Characterization and Analysis of Mobile Malware",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Z7koA2jFooE8hHRKnmcU8/6vKkdMpZxRA1eH4TYnCsvA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexander",
        "surname": "Pretschner"
      },
      "authorName": "Pretschner, Alexander",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Aletheia: A Failure Diagnosis Toolchain",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RuHKRW0D4nCqMWOQR7oTQ/5l0kvbcWGGmPFfiQv1YvL6.pdf"
        },
        {
          "pageNumber": 204,
          "articleName": "Poster: Pairika—A Failure Diagnosis Benchmark for C++ Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/f1ubgK4ymojHoMrnw03rC/3VlpXQf3WB9xHCuvaGO8zz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Philippe",
        "surname": "Preux"
      },
      "authorName": "Preux, Philippe",
      "articleRefs": [
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Virgile",
        "surname": "Prevosto"
      },
      "authorName": "Prevosto, Virgile",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rafael",
        "surname": "Prikladnicki"
      },
      "authorName": "Prikladnicki, Rafael",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        },
        {
          "pageNumber": 143,
          "articleName": "Poster: Startup Software Development Education: A Systematic Mapping Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7s17xrOXocOz9TrWmIIgiY/62N7hNPnPuRUIjG4IN62FM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Geguang",
        "surname": "Pu"
      },
      "authorName": "Pu, Geguang",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        },
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhengwei",
        "surname": "Qi"
      },
      "authorName": "Qi, Zhengwei",
      "articleRefs": [
        {
          "pageNumber": 329,
          "articleName": "Poster: Efficient and Deterministic Replay for Web-Enabled Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/36kMCRGJIHLtaSXi0e2KSp/44hgs6obxhBufX2ufcNbQX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ju",
        "surname": "Qian"
      },
      "authorName": "Qian, Ju",
      "articleRefs": [
        {
          "pageNumber": 264,
          "articleName": "Poster: Runtime Verification of Memory Safety via Source Transformation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Wbn7Rsr2KgwIg0ZjVZVST/4QprgKUvAMwZswtLxX0jf2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shengchao",
        "surname": "Qin"
      },
      "authorName": "Qin, Shengchao",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "Poster: Testing Heap-Based Programs with Java StarFinder",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4rzKWBKexbqBTVf4cYq0W1/FEIdNYhXk5CVNrycd5Sf3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xue",
        "surname": "Qin"
      },
      "authorName": "Qin, Xue",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lisa Nguyen",
        "surname": "Quang Do"
      },
      "authorName": "Quang Do, Lisa Nguyen",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arjun",
        "surname": "Radhakrishna"
      },
      "authorName": "Radhakrishna, Arjun",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Akond",
        "surname": "Rahman"
      },
      "authorName": "Rahman, Akond",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/mM2flyVIs1e0wGU98L8VQ/xU4OW2h5F9cUBJIgIMkYY.pdf"
        },
        {
          "pageNumber": 306,
          "articleName": "What is the Connection Between Issues, Bugs, and Enhancements?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf"
        },
        {
          "pageNumber": 414,
          "articleName": "Poster: Defect Prediction Metrics for Infrastructure as Code Scripts in DevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6z0ElYo6kCuhP8EM07S76I/7w6jX8zdDuiJ9pLqb3q0NC.pdf"
        },
        {
          "pageNumber": 476,
          "articleName": "Characteristics of Defective Infrastructure as Code Scripts in DevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qQwqPKXmLrzPlie0owrAE/yV0y2PkH9og3ffZ5iR9RA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Abu Mohammed",
        "surname": "Raisuddin"
      },
      "authorName": "Raisuddin, Abu Mohammed",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Aletheia: A Failure Diagnosis Toolchain",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RuHKRW0D4nCqMWOQR7oTQ/5l0kvbcWGGmPFfiQv1YvL6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ajitha",
        "surname": "Rajan"
      },
      "authorName": "Rajan, Ajitha",
      "articleRefs": [
        {
          "pageNumber": 442,
          "articleName": "Poster: Reordering Tests for Faster Test Suite Execution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7oVX1R77LaoVJNTHrsYtBM/3tK6Om3mgGpegy1wHzDDa6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hridesh",
        "surname": "Rajan"
      },
      "authorName": "Rajan, Hridesh",
      "articleRefs": [
        {
          "pageNumber": 620,
          "articleName": "Collective Program Analysis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1YWeiRVFEvw8IOF1AlKGcG/4IZyDB4ZYAHK9x1p2oaznN.pdf"
        },
        {
          "pageNumber": 886,
          "articleName": "Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eEvTc6qHbldivQpa5eYeD/5IW1xFsfcWW8UXnTSd983J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Paul",
        "surname": "Ralph"
      },
      "authorName": "Ralph, Paul",
      "articleRefs": [
        {
          "pageNumber": 116,
          "articleName": "Re-imagining a Course in Software Project Management",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/lMzeYRFCLK5hr8vXsQJVt/dDnKXUBMiBVrNSMfHyRRS.pdf"
        },
        {
          "pageNumber": 344,
          "articleName": "Poster: There is no Random Sampling in Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5msns8eXuL9pIbElcgfmgG/6uDGJK7nkoo5B3rnrF4pIV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jasmin",
        "surname": "Ramadani"
      },
      "authorName": "Ramadani, Jasmin",
      "articleRefs": [
        {
          "pageNumber": 242,
          "articleName": "Poster: Communication in Open-Source Projects–End of the E-mail Era?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1j4w2owFLsJWGemRCe3RPJ/4ohDY2rD3K4zRwV3ou34JL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Narayan",
        "surname": "Ramasubbu"
      },
      "authorName": "Ramasubbu, Narayan",
      "articleRefs": [
        {
          "pageNumber": 883,
          "articleName": "[Journal First] Integrating Technical Debt Management and Software Quality Management Processes: A Framework and Field Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5VVcsBrL8djdrhDf5ufhWq/5fvSeX2ZAwnPyyIw2IrelG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ramanathan",
        "surname": "Ramu"
      },
      "authorName": "Ramu, Ramanathan",
      "articleRefs": [
        {
          "pageNumber": 412,
          "articleName": "Poster: Hybrid Traversal: Efficient Source Code Analysis at Scale",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2NPcU40Nlwn2KbCodc68JA/7pV86Vfe0PMckYKjDeVlRT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dhananjai",
        "surname": "Rao"
      },
      "authorName": "Rao, Dhananjai",
      "articleRefs": [
        {
          "pageNumber": 331,
          "articleName": "Poster: A Parallel Framework for Ab Initio Transcript-Clustering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ydiO2nKbcfgXXArBnH518/5DI4ZJ2mNLjGkRxnTn0ET1.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Awais",
        "surname": "Rashid"
      },
      "authorName": "Rashid, Awais",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        },
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Rath"
      },
      "authorName": "Rath, Michael",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Poster: Use of Trace Link Types in Issue Tracking Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3LodwIy3T6TyziM519l2zg/6ZxSLctP0rebQAl9A0LZAZ.pdf"
        },
        {
          "pageNumber": 834,
          "articleName": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andreas",
        "surname": "Rau"
      },
      "authorName": "Rau, Andreas",
      "articleRefs": [
        {
          "pageNumber": 370,
          "articleName": "Poster: Efficient GUI Test Generation by Learning from Tests of Other Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Zfi6QHPNFSKTZ6ErDMQO9/6tabCma7zW4FFjzRbx7Jv3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Affan",
        "surname": "Rauf"
      },
      "authorName": "Rauf, Affan",
      "articleRefs": [
        {
          "pageNumber": 346,
          "articleName": "Poster: Efficient Iterative Deepening for Bounded Exhaustive Generation of Complex Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2JMd1LQkrxt0JBD11w0lFv/4rzjrCWAMhM1MRAmRp3Kg5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Baishakhi",
        "surname": "Ray"
      },
      "authorName": "Ray, Baishakhi",
      "articleRefs": [
        {
          "pageNumber": 303,
          "articleName": "DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1l8C5zVwRhRYyqHFTOoOUf/7FmCxsCu5eXKr4EvBf6BPz.pdf"
        },
        {
          "pageNumber": 319,
          "articleName": "Poster: A Recommender System for Developer Onboarding",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6v6lwqxrCTDmoe8tmGqzBa/27FhEqUbQa1fXoWqFqHZHl.pdf"
        },
        {
          "pageNumber": 335,
          "articleName": "Poster: Which Similarity Metric to Use for Software Documents?: A Study on Information Retrieval Based Software Engineering Tasks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19HqZ3UFdpX1zhMVPO1vf9/2fhtsvR6I1thghxrAC6nB0.pdf"
        },
        {
          "pageNumber": 354,
          "articleName": "Poster: Searching for High-Performing Software Configurations with Metaheuristic Algorithms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5mMXju4wwLk0g8GAptV8Au/7lw0QtTNg1xCcFEjGunpFy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Orna",
        "surname": "Raz"
      },
      "authorName": "Raz, Orna",
      "articleRefs": [
        {
          "pageNumber": 144,
          "articleName": "Proactive and Pervasive Combinatorial Testing",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mohammad Abdur",
        "surname": "Razzak"
      },
      "authorName": "Razzak, Mohammad Abdur",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sascha",
        "surname": "Rechenberger"
      },
      "authorName": "Rechenberger, Sascha",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Raghu",
        "surname": "Reddy"
      },
      "authorName": "Reddy, Raghu",
      "articleRefs": [
        {
          "pageNumber": 165,
          "articleName": "Poster: LWE: LDA Refined Word Embeddings for Duplicate Bug Report Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5lV7ZnvLFHqlOrp4Wm0luY/2l08CDTfwQAZGb7v4j5WuX.pdf"
        },
        {
          "pageNumber": 193,
          "articleName": "Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46PCpEiqqzcfuFKFQ071QK/704dXR6jLVH4adAgbPP2i8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Redmiles"
      },
      "authorName": "Redmiles, David",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Competence-Confidence Gap: A Threat to Female Developers' Contribution on GitHub",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/42E4u7nqMTEXx7aNqWt2ao/5AnfXp47j7QWL1W5yQMac8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Inayat",
        "surname": "Rehman"
      },
      "authorName": "Rehman, Inayat",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anastasia",
        "surname": "Reinhardt"
      },
      "authorName": "Reinhardt, Anastasia",
      "articleRefs": [
        {
          "pageNumber": 886,
          "articleName": "Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eEvTc6qHbldivQpa5eYeD/5IW1xFsfcWW8UXnTSd983J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Luyao",
        "surname": "Ren"
      },
      "authorName": "Ren, Luyao",
      "articleRefs": [
        {
          "pageNumber": 179,
          "articleName": "Poster: Forks Insight: Providing an Overview of GitHub Forks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46AuTosEz8iCsma4CNsxzU/6odbstLJrrnGif0gY2Ryfu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhilei",
        "surname": "Ren"
      },
      "authorName": "Ren, Zhilei",
      "articleRefs": [
        {
          "pageNumber": 71,
          "articleName": "Automated Localization for Unreproducible Builds",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Uo99XzE0k6LQDG79lezQk/4lDBvklakctIQ6sXpUiVcn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jacob",
        "surname": "Rendall"
      },
      "authorName": "Rendall, Jacob",
      "articleRefs": [
        {
          "pageNumber": 834,
          "articleName": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ralf",
        "surname": "Reussner"
      },
      "authorName": "Reussner, Ralf",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rolando P.",
        "surname": "Reyes Ch."
      },
      "authorName": "Reyes Ch., Rolando P.",
      "articleRefs": [
        {
          "pageNumber": 1195,
          "articleName": "Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4DXjZ1hszyCVhZZvfNLCgj/2h3ZD73wXPhuAjdGHgymnT.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Francesco",
        "surname": "Ricci"
      },
      "authorName": "Ricci, Francesco",
      "articleRefs": [
        {
          "pageNumber": 88,
          "articleName": "Improving Integrated Development Environment Commands Knowledge With Recommender Systems",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2vph05WQ3iK9VFCt3gEw5E/2TSyFSTJYXkqwOxmSAyBve.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Johannes",
        "surname": "Richenhagen"
      },
      "authorName": "Richenhagen, Johannes",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Niklas",
        "surname": "Rickö"
      },
      "authorName": "Rickö, Niklas",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Noam",
        "surname": "Rinetzky"
      },
      "authorName": "Rinetzky, Noam",
      "articleRefs": [
        {
          "pageNumber": 350,
          "articleName": "Chopped Symbolic Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4dB4MqN33HWSe06nX7cqo8/4A2sy5Nn535KnCMdVFvrXE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stamatia",
        "surname": "Rizou"
      },
      "authorName": "Rizou, Stamatia",
      "articleRefs": [
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Romain",
        "surname": "Robbes"
      },
      "authorName": "Robbes, Romain",
      "articleRefs": [
        {
          "pageNumber": 1090,
          "articleName": "The Road to Live Programming: Insights from the Practice",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5kWabRxvKSbOrbfpQqtqMw/5X6aZ0m8fIIZBmOuIJogyI.pdf"
        },
        {
          "pageNumber": 1102,
          "articleName": "Assessing the Threat of Untracked Changes in Software Evolution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gregorio",
        "surname": "Robles"
      },
      "authorName": "Robles, Gregorio",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Perceval: Software Project Data at Your Will",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/74BfjuU7YgEDIGvOyOw2jn/3kyGXInAHq50ArWx3rxuYp.pdf"
        },
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Paige",
        "surname": "Rodeghero"
      },
      "authorName": "Rodeghero, Paige",
      "articleRefs": [
        {
          "pageNumber": 788,
          "articleName": "[Journal First] A Comparison of Program Comprehension Strategies by Blind and Sighted Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6L8BvympA8qNy2olAr6lux/L085iQAOXSGrvjP6JWaUM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nancy",
        "surname": "Rodriguez"
      },
      "authorName": "Rodriguez, Nancy",
      "articleRefs": [
        {
          "pageNumber": 232,
          "articleName": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcelino",
        "surname": "Rodriguez-Cancio"
      },
      "authorName": "Rodriguez-Cancio, Marcelino",
      "articleRefs": [
        {
          "pageNumber": 29,
          "articleName": "Images of Code: Lossy Compression for Native Instructions",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4O33wTClUcK5dLf9D2ytLQ/7vjaqiOp3476mtH6LPlGdm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alan",
        "surname": "Rogers"
      },
      "authorName": "Rogers, Alan",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        },
        {
          "pageNumber": 402,
          "articleName": "Poster: Precooked Developer Dashboards: What to Show and How to Use",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2YzSMhy4hX7dROj5nXlVAm/3cgnIym26ZtWGwA6sgvoZK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tobias",
        "surname": "Röhm"
      },
      "authorName": "Röhm, Tobias",
      "articleRefs": [
        {
          "pageNumber": 390,
          "articleName": "Poster: Identification of Methods with Low Fault Risk",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JGgODCZWzCpd0zz1oZSYU/2SjNf69oXbXjcLDFxghEKS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Simone",
        "surname": "Romano"
      },
      "authorName": "Romano, Simone",
      "articleRefs": [
        {
          "pageNumber": 306,
          "articleName": "Poster: CUTER: ClUstering-based TEst Suite Reduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1O6c7LMrpvYO3yKdZ6nu8K/3xiITKaOxnIRfZeDY8Cg9l.pdf"
        },
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Konstantin",
        "surname": "Romanovsky"
      },
      "authorName": "Romanovsky, Konstantin",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bill",
        "surname": "Roscoe"
      },
      "authorName": "Roscoe, Bill",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "ReGuard: Finding Reentrancy Bugs in Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dFTki9Ml83quzEQotDNy1/3g3bfAaS3Z85gdgD6MnCrF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tresa",
        "surname": "Rose"
      },
      "authorName": "Rose, Tresa",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bat-Chen",
        "surname": "Rothenberg"
      },
      "authorName": "Rothenberg, Bat-Chen",
      "articleRefs": [
        {
          "pageNumber": 218,
          "articleName": "Poster: Program Repair that Learns from Mistakes",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5WYshgXWWlCoNftsjI3HqS/3gQhUCRnqq5G6N5jKJapeL.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gregg",
        "surname": "Rothermel"
      },
      "authorName": "Rothermel, Gregg",
      "articleRefs": [
        {
          "pageNumber": 468,
          "articleName": "Prioritizing Browser Environments for Web Application Test Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1EX24cXorp3idnq1F0su6Q/7Mxb1ZK2acB4XRbw7iHpAC.pdf"
        },
        {
          "pageNumber": 688,
          "articleName": "Redefining Prioritization: Continuous Prioritization for Continuous Integration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3IKbJCjT6A0XNalPeqtwYx/48mKfZ4yhnkLlYNigdnCns.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chanchal K.",
        "surname": "Roy"
      },
      "authorName": "Roy, Chanchal K.",
      "articleRefs": [
        {
          "pageNumber": 352,
          "articleName": "Poster: Fast, Scalable and User-Guided Clone Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tlEXpx1a2fBZq5UdWixg5/5nSIZOFNviBk5nb6x9vIle.pdf"
        },
        {
          "pageNumber": 1066,
          "articleName": "CCAligner: A Token Based Large-Gap Clone Detector",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nE35nG7ocrp4CRl34yq3L/6OCIeXs66z0Os8X3bVIjTD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Abhik",
        "surname": "Roychoudhury"
      },
      "authorName": "Roychoudhury, Abhik",
      "articleRefs": [
        {
          "pageNumber": 24,
          "articleName": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf"
        },
        {
          "pageNumber": 129,
          "articleName": "Semantic Program Repair Using a Reference Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2ndg0exc1x8lxEFXhKm0g0/1N19faKQEkIWF1UTM7JlA4.pdf"
        },
        {
          "pageNumber": 187,
          "articleName": "Repairing Crashes in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11SgkKwQHmFo9IUg9YcyHZ/221qL68Sp1f0tYoxd9WFxU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Julia",
        "surname": "Rubin"
      },
      "authorName": "Rubin, Julia",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "CSlicerCloud: A Web-Based Semantic History Slicing Framework",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7Yn83TiytMgtUpghw9e6M/3Htwf6zDJNCLarJZ9SUyf7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cindy",
        "surname": "Rubio-González"
      },
      "authorName": "Rubio-González, Cindy",
      "articleRefs": [
        {
          "pageNumber": 430,
          "articleName": "Poster: Path-Based Function Embeddings",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/13uqQQomxpZIToZ2zI454A/4WnK3w1UjpFGbWZ1mk5omc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eric",
        "surname": "Ruiz"
      },
      "authorName": "Ruiz, Eric",
      "articleRefs": [
        {
          "pageNumber": 212,
          "articleName": "Poster: Protecting Remote Controlling Apps of Smart-Home-Oriented IOT Devices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7wSpD2mtPyz82leCYulmFK/9ndFVMlu3Sf5saqySGQN5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcelo",
        "surname": "Ruiz"
      },
      "authorName": "Ruiz, Marcelo",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Antonio",
        "surname": "Ruiz-Cortés"
      },
      "authorName": "Ruiz-Cortés, Antonio",
      "articleRefs": [
        {
          "pageNumber": 882,
          "articleName": "[Journal First] Metamorphic Testing of RESTful Web APIs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2LyedqPxjqMs5M0a7ONlmb/7dHldjNf2ey5gxorIcbznJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bernhard",
        "surname": "Rumpe"
      },
      "authorName": "Rumpe, Bernhard",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Samuel",
        "surname": "Rund"
      },
      "authorName": "Rund, Samuel",
      "articleRefs": [
        {
          "pageNumber": 226,
          "articleName": "Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jO5jPbQCODqSGRusrILtr/6qj2A2RoOEd4Jqd6hegqcw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniel",
        "surname": "Russo"
      },
      "authorName": "Russo, Daniel",
      "articleRefs": [
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        },
        {
          "pageNumber": 157,
          "articleName": "Poster: A Conceptual Model for Cooperative Thinking",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/43kOeXPEu4QHTUCpTW99fs/2Ey35xhO4B5q4gXBlj7ifp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gunter",
        "surname": "Saake"
      },
      "authorName": "Saake, Gunter",
      "articleRefs": [
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        },
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rubén",
        "surname": "Saborido"
      },
      "authorName": "Saborido, Rubén",
      "articleRefs": [
        {
          "pageNumber": 59,
          "articleName": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alireza",
        "surname": "Sadeghi"
      },
      "authorName": "Sadeghi, Alireza",
      "articleRefs": [
        {
          "pageNumber": 846,
          "articleName": "A Temporal Permission Analysis and Enforcement Framework for Android",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Caitlin",
        "surname": "Sadowski"
      },
      "authorName": "Sadowski, Caitlin",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Modern Code Review: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf"
        },
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        },
        {
          "pageNumber": 643,
          "articleName": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Juan Pablo",
        "surname": "Sáenz"
      },
      "authorName": "Sáenz, Juan Pablo",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Easing IoT Development for Novice Programmers Through Code Recipes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ZtsyuXJ5vJnjyeaGgkT4s/3Lq6ORQJLOs8ulbEf7E5Mg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Seemanta",
        "surname": "Saha"
      },
      "authorName": "Saha, Seemanta",
      "articleRefs": [
        {
          "pageNumber": 424,
          "articleName": "Poster: Symbolic Path Cost Analysis for Side-Channel Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qkGd3UA7CbCn9vt8iHqv0/572IaUvLUJjp18q2vinwmw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wasim",
        "surname": "Said"
      },
      "authorName": "Said, Wasim",
      "articleRefs": [
        {
          "pageNumber": 484,
          "articleName": "Interactive Model Mining from Embedded Legacy Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1cfwipvkgIwd5Lm6KKokhq/5X2aqxuZ9LRYaoi1QZdvT4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Abhishek",
        "surname": "Sainani"
      },
      "authorName": "Sainani, Abhishek",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Resolving Ambiguities in Regulations: Towards Achieving the Kohlbergian Stage of Principled Morality",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/69icpikVftpm7I1bG2Rw90/5etwQxKickKUsDOy6kRsul.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hitesh",
        "surname": "Sajnani"
      },
      "authorName": "Sajnani, Hitesh",
      "articleRefs": [
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Afonso",
        "surname": "Sales"
      },
      "authorName": "Sales, Afonso",
      "articleRefs": [
        {
          "pageNumber": 143,
          "articleName": "Poster: Startup Software Development Education: A Systematic Mapping Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7s17xrOXocOz9TrWmIIgiY/62N7hNPnPuRUIjG4IN62FM.pdf"
        },
        {
          "pageNumber": 155,
          "articleName": "Poster: Challenge-Based Learning: A Brazilian Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2l16giaw0MUbxQDUNSTBMV/7CI3uC4gCOKGJlcFqMtVdb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Karin Samira",
        "surname": "Salman"
      },
      "authorName": "Salman, Karin Samira",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Faiza",
        "surname": "Samreen"
      },
      "authorName": "Samreen, Faiza",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Raina",
        "surname": "Samuel"
      },
      "authorName": "Samuel, Raina",
      "articleRefs": [
        {
          "pageNumber": 728,
          "articleName": "Self-Hiding Behavior in Android Apps: Detection and Characterization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/39EtsVbEnvoJFUJzXaNfZd/1AQQQyk7kMtppqX7fIsDeH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sandhya",
        "surname": "Sankaranarayanan"
      },
      "authorName": "Sankaranarayanan, Sandhya",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "[Journal First] Do Automated Program Repair Techniques Repair Hard and Important Bugs?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TcOrwOTri9qN5sl2VPDmg/1UlHTll3MjB9vsQoBoeZXG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Filipe",
        "surname": "Santos"
      },
      "authorName": "Santos, Filipe",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anita",
        "surname": "Sarma"
      },
      "authorName": "Sarma, Anita",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vasily A.",
        "surname": "Sartakov"
      },
      "authorName": "Sartakov, Vasily A.",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ryosuke",
        "surname": "Sato"
      },
      "authorName": "Sato, Ryosuke",
      "articleRefs": [
        {
          "pageNumber": 272,
          "articleName": "Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dipIizZzbMXAiCO02tWVF/2xPcZJ8mMITxw7ZU4W3dQ7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Juha",
        "surname": "Savolainen"
      },
      "authorName": "Savolainen, Juha",
      "articleRefs": [
        {
          "pageNumber": 444,
          "articleName": "Poster: Answering the Requirements Traceability Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54xELw09vUNSoYFjh1AziH/3vdJIWxnVZhNTP9QUA8bWD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anand Ashok",
        "surname": "Sawant"
      },
      "authorName": "Sawant, Anand Ashok",
      "articleRefs": [
        {
          "pageNumber": 561,
          "articleName": "Understanding Developers' Needs on Deprecation as a Language Feature",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2P1QIz0vZHnpdIEQ9etDfn/70WC3YCsckq6uPXtWKXnDs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mojdeh",
        "surname": "Sayari Nejad"
      },
      "authorName": "Sayari Nejad, Mojdeh",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "Poster: Assurance Cases for Scientific Computing Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ry3rQd3HdBw1019rH4hy0/5UCpbcH3AAnGNkxQVVCZVm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Riccardo",
        "surname": "Scandariato"
      },
      "authorName": "Scandariato, Riccardo",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Generative Secure Design, Defined",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/28Ti47g1XoQkNrxFNkwOEO/6D4SveoetTi1fAdD6ku27b.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Giuseppe",
        "surname": "Scanniello"
      },
      "authorName": "Scanniello, Giuseppe",
      "articleRefs": [
        {
          "pageNumber": 306,
          "articleName": "Poster: CUTER: ClUstering-based TEst Suite Reduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1O6c7LMrpvYO3yKdZ6nu8K/3xiITKaOxnIRfZeDY8Cg9l.pdf"
        },
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marco",
        "surname": "Scavuzzo"
      },
      "authorName": "Scavuzzo, Marco",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "[Journal First] Experiences and Challenges in Building a Data Intensive System for Data Migration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2XogMA7rD6MGSKQNdBeJYp/7E58nTNchsf4cLz0RCgWQK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Konstantin",
        "surname": "Schekotihin"
      },
      "authorName": "Schekotihin, Konstantin",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Klaus",
        "surname": "Schmid"
      },
      "authorName": "Schmid, Klaus",
      "articleRefs": [
        {
          "pageNumber": 73,
          "articleName": "KernelHaven – An Experimentation Workbench for Analyzing Software Product Lines",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1u3wyx5jiA23CCfzXCQ5Pi/34GYtfvoAfVYrBIyxSbmf6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcelo",
        "surname": "Schmitt Laser"
      },
      "authorName": "Schmitt Laser, Marcelo",
      "articleRefs": [
        {
          "pageNumber": 176,
          "articleName": "Leveraging Program Analysis to Reduce User-Perceived Latency in Mobile Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6XtxxPyOjmBnzbOjfZogqQ/5iHlEbl6OqBrzktFcC7my4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Schmitz"
      },
      "authorName": "Schmitz, Thomas",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Henning",
        "surname": "Schnoor"
      },
      "authorName": "Schnoor, Henning",
      "articleRefs": [
        {
          "pageNumber": 342,
          "articleName": "Poster: Toward Measuring Software Coupling via Weighted Dynamic Metrics",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41fj03MKzInGka8tUKZp0i/5yOrS7srH4d0FvNS6liBJc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Reimar",
        "surname": "Schröter"
      },
      "authorName": "Schröter, Reimar",
      "articleRefs": [
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tobias",
        "surname": "Schuele"
      },
      "authorName": "Schuele, Tobias",
      "articleRefs": [
        {
          "pageNumber": 115,
          "articleName": "Tool-Based Interactive Software Parallelization: A Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6WOIQt9qfOJgDlYDiHswtu/4d3FRvoz63ZHw3qyaofuzP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dirk",
        "surname": "Schulz"
      },
      "authorName": "Schulz, Dirk",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christoph",
        "surname": "Schulze"
      },
      "authorName": "Schulze, Christoph",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sandro",
        "surname": "Schulze"
      },
      "authorName": "Schulze, Sandro",
      "articleRefs": [
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Simon",
        "surname": "Schwichtenberg"
      },
      "authorName": "Schwichtenberg, Simon",
      "articleRefs": [
        {
          "pageNumber": 292,
          "articleName": "Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1AkIwFloW3mkZDApKaVABX/7lyga27SMIeaITaprTqTOu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Janos",
        "surname": "Seboek"
      },
      "authorName": "Seboek, Janos",
      "articleRefs": [
        {
          "pageNumber": 410,
          "articleName": "Poster: Memory and Resource Leak Defects in Java Projects: An Empirical Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2f9wrt7uGagtPEL8BMtuH/6fG2npcpWprcKQHHzpzUwr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Seekatz"
      },
      "authorName": "Seekatz, David",
      "articleRefs": [
        {
          "pageNumber": 97,
          "articleName": "MDebugger: A Model-Level Debugger for UML-RT",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5DzlPjxYvM5N8HVBZIru6H/2y8g0siwmm4J7RXAYS1pNA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sergio",
        "surname": "Segura"
      },
      "authorName": "Segura, Sergio",
      "articleRefs": [
        {
          "pageNumber": 538,
          "articleName": "Metamorphic Testing 20 Years Later: A Hands-on Introduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2t0NMGURSnuIg1cFBefkVh/1SMaE5CZb1A4BX4uKBxyBR.pdf"
        },
        {
          "pageNumber": 882,
          "articleName": "[Journal First] Metamorphic Testing of RESTful Web APIs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2LyedqPxjqMs5M0a7ONlmb/7dHldjNf2ey5gxorIcbznJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lionel",
        "surname": "Seinturier"
      },
      "authorName": "Seinturier, Lionel",
      "articleRefs": [
        {
          "pageNumber": 95,
          "articleName": "How to Design a Program Repair Bot? Insights from the Repairnator Project",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1ExIKnJipGMFZO7lPRAngF/2DiGXRSudrFpQa60hIp2VD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marija",
        "surname": "Selakovic"
      },
      "authorName": "Selakovic, Marija",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7coDDNB5gFaIi3yM57kNPD/11bmVU627jwxwAbd5Hc27n.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Oszkár",
        "surname": "Semeráth"
      },
      "authorName": "Semeráth, Oszkár",
      "articleRefs": [
        {
          "pageNumber": 969,
          "articleName": "A Graph Solver for the Automated Generation of Consistent Domain-Specific Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6eq1ZquQwyvOqG174Q7zcO/4GkhGJCKWGFeeRD8zmyZ6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Koushik",
        "surname": "Sen"
      },
      "authorName": "Sen, Koushik",
      "articleRefs": [
        {
          "pageNumber": 445,
          "articleName": "DetReduce: Minimizing Android GUI Test Suites for Regression Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/65qbeRBREN0W4K0rpvhsnv/1pNi1RIt2umVAlWTxVJIml.pdf"
        },
        {
          "pageNumber": 549,
          "articleName": "Efficient Sampling of SAT Solutions for Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2fyL1Vd11RDdXakS4SXepo/4LVpbk5KkDNS1ZKZjpyWq5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Séverine",
        "surname": "Sentilles"
      },
      "authorName": "Sentilles, Séverine",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "PROMOpedi: A Web-Content Management-Based Encyclopedia of Software Property Models",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/L9r824WbXdkeD6HOUfjkp/1ic6DVpAntnIwbUz0tL4zI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexander",
        "surname": "Serebrenik"
      },
      "authorName": "Serebrenik, Alexander",
      "articleRefs": [
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Francisco",
        "surname": "Servant"
      },
      "authorName": "Servant, Francisco",
      "articleRefs": [
        {
          "pageNumber": 404,
          "articleName": "Poster: Understanding and Leveraging Developer Inexpertise",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6Wyfsjr8AM6PGJt2Nw4jsw/1eB4hHPOy8K6gcGnmDJe9T.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Norbert",
        "surname": "Seyff"
      },
      "authorName": "Seyff, Norbert",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Basit",
        "surname": "Shafiq"
      },
      "authorName": "Shafiq, Basit",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arman",
        "surname": "Shahbazian"
      },
      "authorName": "Shahbazian, Arman",
      "articleRefs": [
        {
          "pageNumber": 262,
          "articleName": "Poster: Making Well-Informed Software Design Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2hjOTnt4IhzP5kLZgw9GKS/4G3hXm7aB71RGA86WZqsVh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shafay",
        "surname": "Shamail"
      },
      "authorName": "Shamail, Shafay",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhiyong",
        "surname": "Shan"
      },
      "authorName": "Shan, Zhiyong",
      "articleRefs": [
        {
          "pageNumber": 728,
          "articleName": "Self-Hiding Behavior in Android Apps: Detection and Characterization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/39EtsVbEnvoJFUJzXaNfZd/1AQQQyk7kMtppqX7fIsDeH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Weiyi",
        "surname": "Shang"
      },
      "authorName": "Shang, Weiyi",
      "articleRefs": [
        {
          "pageNumber": 822,
          "articleName": "[Journal First] Empirical Study on the Discrepancy Between Performance Testing Results from Virtual and Physical Environments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5dzewdYm8fckCzQjpRCjmg/7gDFgjNlZ9YHeIL4bQ4bMr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tushar",
        "surname": "Sharma"
      },
      "authorName": "Sharma, Tushar",
      "articleRefs": [
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        },
        {
          "pageNumber": 546,
          "articleName": "Detecting and Managing Code Smells: Research and Practice",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/549ytWjXRLllNI0BsiStTv/2umET2tBXamvFcvHU4QGiu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vibhu Saujanya",
        "surname": "Sharma"
      },
      "authorName": "Sharma, Vibhu Saujanya",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "An Immersive Future for Software Engineering — Avenues and Approaches",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1EpjKazCrYQMpJpG57Wp2A/4qzQRZDxVTtuh4cl4S2HuV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wuwei",
        "surname": "Shen"
      },
      "authorName": "Shen, Wuwei",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf"
        },
        {
          "pageNumber": 386,
          "articleName": "Poster: USE: Unified and Split Execution for Exposing Divergences between Versions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6LPcye0HvDGcTC8pmjMow0/53CrwfyS24ctiDhG2v3XKZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bin",
        "surname": "Sheng"
      },
      "authorName": "Sheng, Bin",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "Poster: Deciding Weak Monitorability for Runtime Verification",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Jgn0A6nOj7QIfUc0036qu/2CRsqRAoRBHJxOF6hJzYqb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David C.",
        "surname": "Shepherd"
      },
      "authorName": "Shepherd, David C.",
      "articleRefs": [
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Martin",
        "surname": "Shepperd"
      },
      "authorName": "Shepperd, Martin",
      "articleRefs": [
        {
          "pageNumber": 73,
          "articleName": "Replication Studies Considered Harmful",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4fllez1Ua1MOYwjGmK5ZM2/3T97HCGwX1OLqQdgf9iabB.pdf"
        },
        {
          "pageNumber": 325,
          "articleName": "Poster: Bridging Effort-Aware Prediction and Strong Classification - A Just-in-Time Software Defect Prediction Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W55obxh9gzemjqfGcWAPj/3f132O9xPg1LX5ixGPIYgu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sofia",
        "surname": "Sherman"
      },
      "authorName": "Sherman, Sofia",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "August",
        "surname": "Shi"
      },
      "authorName": "Shi, August",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kai",
        "surname": "Shi"
      },
      "authorName": "Shi, Kai",
      "articleRefs": [
        {
          "pageNumber": 1027,
          "articleName": "To Preserve or Not to Preserve Invalid Solutions in Search-Based Software Engineering: A Case Study in Software Product Lines",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eLhDKSnOjZaBnTjUD3mLd/4zL0DqW0XJoJyYVopX6pxS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Emad",
        "surname": "Shihab"
      },
      "authorName": "Shihab, Emad",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/18twSkKM4nZSiq4Z1PnB2P/5eXj8AdFfloU2dchJUeYi9.pdf"
        },
        {
          "pageNumber": 822,
          "articleName": "[Journal First] Empirical Study on the Discrepancy Between Performance Testing Results from Virtual and Physical Environments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5dzewdYm8fckCzQjpRCjmg/7gDFgjNlZ9YHeIL4bQ4bMr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Donghwan",
        "surname": "Shin"
      },
      "authorName": "Shin, Donghwan",
      "articleRefs": [
        {
          "pageNumber": 537,
          "articleName": "Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/53KVBZlCxSM8SKMrWZTReW/5SVStngTUruEo7SDPWMIhR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sharon",
        "surname": "Shoham"
      },
      "authorName": "Shoham, Sharon",
      "articleRefs": [
        {
          "pageNumber": 1114,
          "articleName": "Programming Not Only by Example",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4OSJhkaFu096tUteSJdWJs/2hPIFheVxQOKQ5wEo4hSMx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Manish",
        "surname": "Shrivastava"
      },
      "authorName": "Shrivastava, Manish",
      "articleRefs": [
        {
          "pageNumber": 165,
          "articleName": "Poster: LWE: LDA Refined Word Embeddings for Duplicate Bug Report Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5lV7ZnvLFHqlOrp4Wm0luY/2l08CDTfwQAZGb7v4j5WuX.pdf"
        },
        {
          "pageNumber": 193,
          "articleName": "Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46PCpEiqqzcfuFKFQ071QK/704dXR6jLVH4adAgbPP2i8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "David",
        "surname": "Shriver"
      },
      "authorName": "Shriver, David",
      "articleRefs": [
        {
          "pageNumber": 173,
          "articleName": "Poster: Toward the Development of Richer Properties for Recommender Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/65d36y1ximdoYo8LpVBti1/2sFLx6z7FWcIg5eKrdfbm4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Junaid Haroon",
        "surname": "Siddiqui"
      },
      "authorName": "Siddiqui, Junaid Haroon",
      "articleRefs": [
        {
          "pageNumber": 177,
          "articleName": "Poster: Efficiently Finding Minimal Failing Input in MapReduce Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5BTJs1t7NpwCEatzcHw2gJ/2mc635qKuBjXNwI4Hkwm8d.pdf"
        },
        {
          "pageNumber": 346,
          "articleName": "Poster: Efficient Iterative Deepening for Bounded Exhaustive Generation of Complex Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2JMd1LQkrxt0JBD11w0lFv/4rzjrCWAMhM1MRAmRp3Kg5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Janet",
        "surname": "Siegmund"
      },
      "authorName": "Siegmund, Janet",
      "articleRefs": [
        {
          "pageNumber": 300,
          "articleName": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alberto",
        "surname": "Sillitti"
      },
      "authorName": "Sillitti, Alberto",
      "articleRefs": [
        {
          "pageNumber": 129,
          "articleName": "Poster: An Initial Characterization of Bug-Injecting Development Sessions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7nrXDes1AE17dN1F7CYJII/3tpIHuPtxoFOTTsXewXvBN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Danilo",
        "surname": "Silva"
      },
      "authorName": "Silva, Danilo",
      "articleRefs": [
        {
          "pageNumber": 1102,
          "articleName": "Assessing the Threat of Untracked Changes in Software Evolution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "William",
        "surname": "Simm"
      },
      "authorName": "Simm, William",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jocelyn",
        "surname": "Simmonds"
      },
      "authorName": "Simmonds, Jocelyn",
      "articleRefs": [
        {
          "pageNumber": 98,
          "articleName": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Logan",
        "surname": "Simpson"
      },
      "authorName": "Simpson, Logan",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rishabh",
        "surname": "Singh"
      },
      "authorName": "Singh, Rishabh",
      "articleRefs": [
        {
          "pageNumber": 60,
          "articleName": "Neuro-Symbolic Program Corrector for Introductory Programming Assignments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3ff3TXG0zUEgira53neRYx/4vw21DgkSxUSQYWz4NjvaQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "John L.",
        "surname": "Singleton"
      },
      "authorName": "Singleton, John L.",
      "articleRefs": [
        {
          "pageNumber": 313,
          "articleName": "Poster: An Algorithm and Tool to Infer Practical Postconditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5VIJZqURpbuELiOLsoX5gB/34qnQCM0ECnQSCfKKWDUUj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Laurens",
        "surname": "Sion"
      },
      "authorName": "Sion, Laurens",
      "articleRefs": [
        {
          "pageNumber": 290,
          "articleName": "Poster: Knowledge-Enriched Security and Privacy Threat Modeling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/37uFOoLUPhndyysBym8s6u/7szAL5XTsN6DNANI1CKW1D.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michal",
        "surname": "Sipko"
      },
      "authorName": "Sipko, Michal",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Modern Code Review: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ilyas",
        "surname": "Sirazitdinov"
      },
      "authorName": "Sirazitdinov, Ilyas",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Raphael",
        "surname": "Sirres"
      },
      "authorName": "Sirres, Raphael",
      "articleRefs": [
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lingyun",
        "surname": "Situ"
      },
      "authorName": "Situ, Lingyun",
      "articleRefs": [
        {
          "pageNumber": 238,
          "articleName": "Poster: Detecting Missing Checks for Identifying Insufficient Attack Protections",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68lea68Xffx9ofe7BySvM/206boRxPqYpHOPA2UsxYIq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Johan",
        "surname": "Sjöberg"
      },
      "authorName": "Sjöberg, Johan",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rocky",
        "surname": "Slavin"
      },
      "authorName": "Slavin, Rocky",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Edward",
        "surname": "Smith"
      },
      "authorName": "Smith, Edward",
      "articleRefs": [
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Spencer",
        "surname": "Smith"
      },
      "authorName": "Smith, Spencer",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "Poster: Assurance Cases for Scientific Computing Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ry3rQd3HdBw1019rH4hy0/5UCpbcH3AAnGNkxQVVCZVm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Larissa Rocha",
        "surname": "Soares"
      },
      "authorName": "Soares, Larissa Rocha",
      "articleRefs": [
        {
          "pageNumber": 500,
          "articleName": "VarXplorer: Reasoning About Feature Interactions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IEIAqCPJEDZTj1hipt8Hg/bO9BZd0LDQfVqKQs9J25A.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexander",
        "surname": "Sobran"
      },
      "authorName": "Sobran, Alexander",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/mM2flyVIs1e0wGU98L8VQ/xU4OW2h5F9cUBJIgIMkYY.pdf"
        },
        {
          "pageNumber": 306,
          "articleName": "What is the Connection Between Issues, Bugs, and Enhancements?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Emma",
        "surname": "Söderberg"
      },
      "authorName": "Söderberg, Emma",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Modern Code Review: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arnor",
        "surname": "Solberg"
      },
      "authorName": "Solberg, Arnor",
      "articleRefs": [
        {
          "pageNumber": 97,
          "articleName": "Deep Customization of Multi-tenant SaaS Using Intrusive Microservices",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/21RHGeVqhABQzfCCA9FBCo/4aXCmrOeKegXHqHD0m3lof.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mozhan",
        "surname": "Soltani"
      },
      "authorName": "Soltani, Mozhan",
      "articleRefs": [
        {
          "pageNumber": 1220,
          "articleName": "Search-Based Test Data Generation for SQL Queries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4B2Db8L4U7DekUw6RJzAuW/3TzsZt8feqd0zTtvlqNrZD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hui",
        "surname": "Song"
      },
      "authorName": "Song, Hui",
      "articleRefs": [
        {
          "pageNumber": 97,
          "articleName": "Deep Customization of Multi-tenant SaaS Using Intrusive Microservices",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/21RHGeVqhABQzfCCA9FBCo/4aXCmrOeKegXHqHD0m3lof.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiaoyu",
        "surname": "Song"
      },
      "authorName": "Song, Xiaoyu",
      "articleRefs": [
        {
          "pageNumber": 69,
          "articleName": "Weak-Assert: A Weakness-Oriented Assertion Recommendation Toolkit for Program Analysis",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6wHKrC9nn3wmYB20hFTiuW/5Tl0zuxP7CFvCY4qWXe0ge.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yang",
        "surname": "Song"
      },
      "authorName": "Song, Yang",
      "articleRefs": [
        {
          "pageNumber": 40,
          "articleName": "Open-Source Software in Class: Students' Common Mistakes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/Aqs0gf1RPfzilfgb9ZyI3/1l4siOSDqHYjJEhkm195YS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cecilia",
        "surname": "Sotomayor"
      },
      "authorName": "Sotomayor, Cecilia",
      "articleRefs": [
        {
          "pageNumber": 98,
          "articleName": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Leonardo",
        "surname": "Sousa"
      },
      "authorName": "Sousa, Leonardo",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Davide",
        "surname": "Spadini"
      },
      "authorName": "Spadini, Davide",
      "articleRefs": [
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Diomidis",
        "surname": "Spinellis"
      },
      "authorName": "Spinellis, Diomidis",
      "articleRefs": [
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        },
        {
          "pageNumber": 69,
          "articleName": "Code Review Comments: Language Matters",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/165qeNKip9XUqW8VEtQDW0/41SjKvey4HBZGWpDcrBYdh.pdf"
        },
        {
          "pageNumber": 105,
          "articleName": "Echoes from Space: Grouping Commands with Large-Scale Telemetry Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/36OHYwbesYzyrqceW0zbds/6lTJGOwEkmMFQO8CFju22q.pdf"
        },
        {
          "pageNumber": 540,
          "articleName": "How to Analyze Git Repositories with Command Line Tools: We're not in Kansas Anymore",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ez2GftNEYDvJXCwDk6umC/5YKnoCvwDQQN7mGMEmps6W.pdf"
        },
        {
          "pageNumber": 572,
          "articleName": "On the Dichotomy of Debugging Behavior Among Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/xP54rozvutqKTsorAW4JU/7Y1r5jMBEpcFZDC2Ip9iV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Niels",
        "surname": "Spruit"
      },
      "authorName": "Spruit, Niels",
      "articleRefs": [
        {
          "pageNumber": 572,
          "articleName": "On the Dichotomy of Debugging Behavior Among Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/xP54rozvutqKTsorAW4JU/7Y1r5jMBEpcFZDC2Ip9iV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Krishna Chaitanya",
        "surname": "Sripada"
      },
      "authorName": "Sripada, Krishna Chaitanya",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jonathan",
        "surname": "Stallings"
      },
      "authorName": "Stallings, Jonathan",
      "articleRefs": [
        {
          "pageNumber": 414,
          "articleName": "Poster: Defect Prediction Metrics for Infrastructure as Code Scripts in DevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6z0ElYo6kCuhP8EM07S76I/7w6jX8zdDuiJ9pLqb3q0NC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefan",
        "surname": "Stanciulescu"
      },
      "authorName": "Stanciulescu, Stefan",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jan-Philipp",
        "surname": "Steghöfer"
      },
      "authorName": "Steghöfer, Jan-Philipp",
      "articleRefs": [
        {
          "pageNumber": 126,
          "articleName": "Providing a Baseline in Software Process Improvement Education with Lego Scrum Simulations",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/53i20BMExum14PymS4u5O6/6mZV0bO3jDs6KpRTVHgpFw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Stegmaier"
      },
      "authorName": "Stegmaier, Michael",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zoe",
        "surname": "Steine-Hanson"
      },
      "authorName": "Steine-Hanson, Zoe",
      "articleRefs": [
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yves",
        "surname": "Steiner"
      },
      "authorName": "Steiner, Yves",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "User Feedback in the App Store: A Cross-Cultural Study",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Igor",
        "surname": "Steinmacher"
      },
      "authorName": "Steinmacher, Igor",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Almost There: A Study on Quasi-Contributors in Open-Source Software Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1yorvAqsWddHbVWuLi4YZy/6NexNkxSmHQvVZ35CgSXP3.pdf"
        },
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Susan",
        "surname": "Stepney"
      },
      "authorName": "Stepney, Susan",
      "articleRefs": [
        {
          "pageNumber": 446,
          "articleName": "Poster: BugZoo – A Platform for Studying Software Bugs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45zwa1bRIOh1A6fI6pqtjD/6r2CoIFj6WjZXHtWAgT3hP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jamie",
        "surname": "Stevenson"
      },
      "authorName": "Stevenson, Jamie",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "Inheritance Usage Patterns in Open-Source Systems",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7Jy5sWOqNS24NkSHFaTSEU/4OwDDeOZbvShYQOhNvgfpH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Stifter"
      },
      "authorName": "Stifter, Thomas",
      "articleRefs": [
        {
          "pageNumber": 1016,
          "articleName": "Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/VwB38GE70VKZwyWn3vYpD/2vNhnZhaJwrULtleN0eIAX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrea",
        "surname": "Stocco"
      },
      "authorName": "Stocco, Andrea",
      "articleRefs": [
        {
          "pageNumber": 210,
          "articleName": "Fine-Grained Test Minimization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7FekvzG72MbQMYKnwN6pXO/34ooDIrCIylSUp9k6oGIrB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Walter",
        "surname": "Stocker"
      },
      "authorName": "Stocker, Walter",
      "articleRefs": [
        {
          "pageNumber": 211,
          "articleName": "From Agile to Continuous Development in the Healthcare Domain - Lessons Learned",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3YlVLNOvFU48vJCEI4Ofa8/6zIGIsUB4ZxPfDRQZPjui1.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kathryn",
        "surname": "Stolee"
      },
      "authorName": "Stolee, Kathryn",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "10+ Years of Teaching Software Engineering with iTrust: The Good, the Bad, and the Ugly",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3EjhI0gr5St4AFs3lVXxnq/1oGHNe0eI3D9HLwWrcK93B.pdf"
        },
        {
          "pageNumber": 339,
          "articleName": "Poster: Automated Program Repair with Canonical Constraints",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5HuJ0DRe1lVP5flrt0olas/cYoM2zEz7jQb9DOHiHPMV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Margaret-Anne",
        "surname": "Storey"
      },
      "authorName": "Storey, Margaret-Anne",
      "articleRefs": [
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        },
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Harald",
        "surname": "Störrle"
      },
      "authorName": "Störrle, Harald",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Panagiotis",
        "surname": "Stratis"
      },
      "authorName": "Stratis, Panagiotis",
      "articleRefs": [
        {
          "pageNumber": 442,
          "articleName": "Poster: Reordering Tests for Faster Test Suite Execution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7oVX1R77LaoVJNTHrsYtBM/3tK6Om3mgGpegy1wHzDDa6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eleni",
        "surname": "Stroulia"
      },
      "authorName": "Stroulia, Eleni",
      "articleRefs": [
        {
          "pageNumber": 1062,
          "articleName": "[Journal First] Analyzing the Effects of Test Driven Development in GitHub",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7E87zq66ELDArjurWiTGlC/7pQU2PsyQiLteaW3D5kgMw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniel",
        "surname": "Strüber"
      },
      "authorName": "Strüber, Daniel",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arnon",
        "surname": "Sturm"
      },
      "authorName": "Sturm, Arnon",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Software Engineering Lab - an Essential Component of a Software Engineering Curriculum",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ptyke5Ujj8onvnHjCVVPG/6rVK664qnM9Emso3vbuo0M.pdf"
        },
        {
          "pageNumber": 149,
          "articleName": "Poster: Are Our Students Engaged in Their Studies? Professional Engagement vs. Study Engagement",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5xtA0uJd6thgqgqjjCW6bY/ywTO3ZzLDFUoUS3EoFZcD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cuicui",
        "surname": "Su"
      },
      "authorName": "Su, Cuicui",
      "articleRefs": [
        {
          "pageNumber": 321,
          "articleName": "Poster: Obfuscating Program Control Flow with Intel SGX",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46LvkSkPnBARdnA4scnxeh/1dPQyq74EXz5tkMycRh9Ve.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ting",
        "surname": "Su"
      },
      "authorName": "Su, Ting",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        },
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        },
        {
          "pageNumber": 665,
          "articleName": "From UI Design Image to GUI Skeleton: A Neural Machine Translator to Bootstrap Mobile GUI Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JXA3aEoFlChCTeObvRL5D/4SROMnxHfcqnH3f5jpBxW6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pranav",
        "surname": "Subramaniam"
      },
      "authorName": "Subramaniam, Pranav",
      "articleRefs": [
        {
          "pageNumber": 800,
          "articleName": "How not to Structure Your Database-Backed Web Applications: A Study of Performance Bugs in the Wild",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1heAUnsML3vNOxAklvY2o5/5r7WaaxVGeRjbQD2Yx8PMD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Giancarlo",
        "surname": "Succi"
      },
      "authorName": "Succi, Giancarlo",
      "articleRefs": [
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        },
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        },
        {
          "pageNumber": 129,
          "articleName": "Poster: An Initial Characterization of Bug-Injecting Development Sessions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7nrXDes1AE17dN1F7CYJII/3tpIHuPtxoFOTTsXewXvBN.pdf"
        },
        {
          "pageNumber": 402,
          "articleName": "Poster: Precooked Developer Dashboards: What to Show and How to Use",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2YzSMhy4hX7dROj5nXlVAm/3cgnIym26ZtWGwA6sgvoZK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yulei",
        "surname": "Sui"
      },
      "authorName": "Sui, Yulei",
      "articleRefs": [
        {
          "pageNumber": 195,
          "articleName": "Poster: Live Path Control Flow Integrity",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/66rLvMbNUR2ntPLR7czmnx/5iReip9NsLrMgb7VJztdM8.pdf"
        },
        {
          "pageNumber": 327,
          "articleName": "Spatio-Temporal Context Reduction: A Pointer-Analysis-Based Static Approach for Detecting Use-After-Free Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BH1zWphsTffq4XQps07wg/5yHiAA3ajLarfEkXKmgne7.pdf"
        },
        {
          "pageNumber": 598,
          "articleName": "Launch-Mode-Aware Context-Sensitive Activity Transition Analysis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7bwDE4dip5GdlJ7qdGkqCb/3FhNZoNCmobGEDVZfHkbdb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kevin",
        "surname": "Sullivan"
      },
      "authorName": "Sullivan, Kevin",
      "articleRefs": [
        {
          "pageNumber": 354,
          "articleName": "Poster: Searching for High-Performing Software Configurations with Metaheuristic Algorithms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5mMXju4wwLk0g8GAptV8Au/7lw0QtTNg1xCcFEjGunpFy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chengnian",
        "surname": "Sun"
      },
      "authorName": "Sun, Chengnian",
      "articleRefs": [
        {
          "pageNumber": 361,
          "articleName": "Perses: Syntax-Guided Program Reduction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7EGalavwAIiq3Xl1qGd5XK/4fupulIFoGpbHOylSj3kFV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hailong",
        "surname": "Sun"
      },
      "authorName": "Sun, Hailong",
      "articleRefs": [
        {
          "pageNumber": 294,
          "articleName": "Poster: Semantically Enhanced Tag Recommendation for Software CQAs via Deep Learning",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7F1H2tgvwjlUwCU4NrnV3R/HRx9bqSyEdwNU1LCisZbN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jun",
        "surname": "Sun"
      },
      "authorName": "Sun, Jun",
      "articleRefs": [
        {
          "pageNumber": 215,
          "articleName": "Static Analysis of Context Leaks in Android Applications",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jHnDZvs2fqlaFrFCxfUpX/1b1KkOf8jkZyi9FJDlxPt7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Takayoshi",
        "surname": "Suzuki"
      },
      "authorName": "Suzuki, Takayoshi",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jeffrey",
        "surname": "Svajlenko"
      },
      "authorName": "Svajlenko, Jeffrey",
      "articleRefs": [
        {
          "pageNumber": 352,
          "articleName": "Poster: Fast, Scalable and User-Guided Clone Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tlEXpx1a2fBZq5UdWixg5/5nSIZOFNviBk5nb6x9vIle.pdf"
        },
        {
          "pageNumber": 1066,
          "articleName": "CCAligner: A Token Based Large-Gap Clone Detector",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nE35nG7ocrp4CRl34yq3L/6OCIeXs66z0Os8X3bVIjTD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stanislaw",
        "surname": "Swierc"
      },
      "authorName": "Swierc, Stanislaw",
      "articleRefs": [
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Péter",
        "surname": "Szécsi"
      },
      "authorName": "Szécsi, Péter",
      "articleRefs": [
        {
          "pageNumber": 428,
          "articleName": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gerolamo",
        "surname": "Taccogna"
      },
      "authorName": "Taccogna, Gerolamo",
      "articleRefs": [
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Gabriele",
        "surname": "Taentzer"
      },
      "authorName": "Taentzer, Gabriele",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Masahiro",
        "surname": "Taga"
      },
      "authorName": "Taga, Masahiro",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Kuniharu",
        "surname": "Takayama"
      },
      "authorName": "Takayama, Kuniharu",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "Elixir: An Automated Repair Tool for Java Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1uVaDsZ3LRs5lLyw2BLVOQ/2PKRfkKFJZy3RSZOpjabc2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Damian A.",
        "surname": "Tamburri"
      },
      "authorName": "Tamburri, Damian A.",
      "articleRefs": [
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ahmed",
        "surname": "Tamrawi"
      },
      "authorName": "Tamrawi, Ahmed",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "COMB: Computing Relevant Program Behaviors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shin Hwei",
        "surname": "Tan"
      },
      "authorName": "Tan, Shin Hwei",
      "articleRefs": [
        {
          "pageNumber": 24,
          "articleName": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf"
        },
        {
          "pageNumber": 187,
          "articleName": "Repairing Crashes in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11SgkKwQHmFo9IUg9YcyHZ/221qL68Sp1f0tYoxd9WFxU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xin",
        "surname": "Tan"
      },
      "authorName": "Tan, Xin",
      "articleRefs": [
        {
          "pageNumber": 440,
          "articleName": "Poster: Companies' Domination in FLOSS Development - An Empirical Study of OpenStack",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qzz37M5aaQHMR84AdL5Ao/6BpbDRR3MKYdAc0gfHratN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Antony",
        "surname": "Tang"
      },
      "authorName": "Tang, Antony",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chong",
        "surname": "Tang"
      },
      "authorName": "Tang, Chong",
      "articleRefs": [
        {
          "pageNumber": 354,
          "articleName": "Poster: Searching for High-Performing Software Configurations with Metaheuristic Algorithms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5mMXju4wwLk0g8GAptV8Au/7lw0QtTNg1xCcFEjGunpFy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chakkrit",
        "surname": "Tantithamthavorn"
      },
      "authorName": "Tantithamthavorn, Chakkrit",
      "articleRefs": [
        {
          "pageNumber": 164,
          "articleName": "[Journal First] Studying the Dialogue Between Users and Developers of Free Apps in the Google Play Store",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5DvXCVhNZmmS4ZOChxQpkT/3YJxPVzOETe0xHdSpDBS9Z.pdf"
        },
        {
          "pageNumber": 286,
          "articleName": "An Experience Report on Defect Modelling in Practice: Pitfalls and Challenges",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1XE1Rcu3h9nk31GZtFimCl/5FPku5dJlOtWZkQS6QB4ck.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xinxiu",
        "surname": "Tao"
      },
      "authorName": "Tao, Xinxiu",
      "articleRefs": [
        {
          "pageNumber": 392,
          "articleName": "Poster: A Declarative Approach for Updating Distributed Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NuEmP8ZsSnvKNvNyTrrlD/1nPmlCZWlN2oGC90OpEUxG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Paul",
        "surname": "Temple"
      },
      "authorName": "Temple, Paul",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "Poster: Multimorphic Testing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/uzXACjp9SwFasi2pVULVp/4Acd9HUX23SsFtwgf1MOHh.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrey",
        "surname": "Terekhov"
      },
      "authorName": "Terekhov, Andrey",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Aditya",
        "surname": "Thakur"
      },
      "authorName": "Thakur, Aditya",
      "articleRefs": [
        {
          "pageNumber": 430,
          "articleName": "Poster: Path-Based Function Embeddings",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/13uqQQomxpZIToZ2zI454A/4WnK3w1UjpFGbWZ1mk5omc.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dennis",
        "surname": "Theisen"
      },
      "authorName": "Theisen, Dennis",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matthew",
        "surname": "Thornton"
      },
      "authorName": "Thornton, Matthew",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Thüm"
      },
      "authorName": "Thüm, Thomas",
      "articleRefs": [
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ferdian",
        "surname": "Thung"
      },
      "authorName": "Thung, Ferdian",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "[Journal First] Overfitting in Semantics-Based Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1iEz1Hydy2R6aGChkPt4yK/3zxjPwJpOMkItKVxLAR3pj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cong",
        "surname": "Tian"
      },
      "authorName": "Tian, Cong",
      "articleRefs": [
        {
          "pageNumber": 859,
          "articleName": "RFC-Directed Differential Testing of Certificate Validation in SSL/TLS Implementations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/15kHg7CwgytsDlnTv3z6u2/ZUw4RKFVhfsc0Bb1AsNmQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yanfei",
        "surname": "Tian"
      },
      "authorName": "Tian, Yanfei",
      "articleRefs": [
        {
          "pageNumber": 294,
          "articleName": "Poster: Semantically Enhanced Tag Recommendation for Software CQAs via Deep Learning",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7F1H2tgvwjlUwCU4NrnV3R/HRx9bqSyEdwNU1LCisZbN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Matthias",
        "surname": "Tichy"
      },
      "authorName": "Tichy, Matthias",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christopher Steven",
        "surname": "Timperley"
      },
      "authorName": "Timperley, Christopher Steven",
      "articleRefs": [
        {
          "pageNumber": 446,
          "articleName": "Poster: BugZoo – A Platform for Studying Software Bugs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45zwa1bRIOh1A6fI6pqtjD/6r2CoIFj6WjZXHtWAgT3hP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christian",
        "surname": "Tischer"
      },
      "authorName": "Tischer, Christian",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Variant Management Solution for Large Scale Software Product Lines",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4J94vc6uZu9C5yPCTynFex/1z41fCXlOqEfSXyXWq6peW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eran",
        "surname": "Toch"
      },
      "authorName": "Toch, Eran",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Flavio",
        "surname": "Toffalini"
      },
      "authorName": "Toffalini, Flavio",
      "articleRefs": [
        {
          "pageNumber": 215,
          "articleName": "Static Analysis of Context Leaks in Android Applications",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jHnDZvs2fqlaFrFCxfUpX/1b1KkOf8jkZyi9FJDlxPt7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Susumu",
        "surname": "Tokumoto"
      },
      "authorName": "Tokumoto, Susumu",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "Elixir: An Automated Repair Tool for Java Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1uVaDsZ3LRs5lLyw2BLVOQ/2PKRfkKFJZy3RSZOpjabc2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mihaela Todorova",
        "surname": "Tomova"
      },
      "authorName": "Tomova, Mihaela Todorova",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Poster: Use of Trace Link Types in Issue Tracking Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3LodwIy3T6TyziM519l2zg/6ZxSLctP0rebQAl9A0LZAZ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bernardo",
        "surname": "Toninho"
      },
      "authorName": "Toninho, Bernardo",
      "articleRefs": [
        {
          "pageNumber": 1137,
          "articleName": "A Static Verification Framework for Message Passing in Go Using Behavioural Types",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4qni3QmfOZ1L9eUK9sVGyf/OgbS6Mp1QczsiyDiedExx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Emina",
        "surname": "Torlak"
      },
      "authorName": "Torlak, Emina",
      "articleRefs": [
        {
          "pageNumber": 958,
          "articleName": "Generalized Data Structure Synthesis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/42oFsoJ7RHGAgoPbI5dzk5/2V1Gp0VfIP3nDtDc89Gm45.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexander",
        "surname": "Tormasov"
      },
      "authorName": "Tormasov, Alexander",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Egbert",
        "surname": "Touw"
      },
      "authorName": "Touw, Egbert",
      "articleRefs": [
        {
          "pageNumber": 127,
          "articleName": "Poster: Results from Multi-faceted Software Reliability Assessment Studies",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7DoBigqLYo5qCiOodZKTcz/6q4ZddNK9hg9IsUoTQjVpQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dave",
        "surname": "Towey"
      },
      "authorName": "Towey, Dave",
      "articleRefs": [
        {
          "pageNumber": 246,
          "articleName": "Poster: An Experimental Analysis of Fault Detection Capabilities of Covering Array Constructors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1LPlzWg0tHBZcuzmWldSvI/1WM1Gk3gKbTdWVYozOBdR6.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ngoc",
        "surname": "Tran"
      },
      "authorName": "Tran, Ngoc",
      "articleRefs": [
        {
          "pageNumber": 632,
          "articleName": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Truyen",
        "surname": "Tran"
      },
      "authorName": "Tran, Truyen",
      "articleRefs": [
        {
          "pageNumber": 53,
          "articleName": "Explainable Software Analytics",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/18qTr6yU8gmdGlxPJwuabL/5riZmj2mdJZSyRCz4NRyUd.pdf"
        },
        {
          "pageNumber": 244,
          "articleName": "Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ADZq6g5I1eGULqO75ycZf/647J63rx8sUzey01F0TAFE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alexander",
        "surname": "Trautsch"
      },
      "authorName": "Trautsch, Alexander",
      "articleRefs": [
        {
          "pageNumber": 1063,
          "articleName": "[Journal First] A Comparative Study to Benchmark Cross-Project Defect Prediction Approaches",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4wjQzs7ahFsVXOSxRYBKNq/40Ftiu3aqu6aAzbzpsyyD4.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christoph",
        "surname": "Treude"
      },
      "authorName": "Treude, Christoph",
      "articleRefs": [
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nirnaya",
        "surname": "Tripathi"
      },
      "authorName": "Tripathi, Nirnaya",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Asher",
        "surname": "Trockman"
      },
      "authorName": "Trockman, Asher",
      "articleRefs": [
        {
          "pageNumber": 511,
          "articleName": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5zZif4Y9gORqhqO7eKhhoZ/2NGpYIgnByWOIFiwUyBUr0.pdf"
        },
        {
          "pageNumber": 524,
          "articleName": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1ZsiNGW1FlIUiebl2YFpnq/4si1YHUkd9yFqd1PBG1WLV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Javier",
        "surname": "Troya"
      },
      "authorName": "Troya, Javier",
      "articleRefs": [
        {
          "pageNumber": 882,
          "articleName": "[Journal First] Metamorphic Testing of RESTful Web APIs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2LyedqPxjqMs5M0a7ONlmb/7dHldjNf2ey5gxorIcbznJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Linh",
        "surname": "Truong"
      },
      "authorName": "Truong, Linh",
      "articleRefs": [
        {
          "pageNumber": 632,
          "articleName": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nikolaos",
        "surname": "Tsantalis"
      },
      "authorName": "Tsantalis, Nikolaos",
      "articleRefs": [
        {
          "pageNumber": 483,
          "articleName": "Accurate and Efficient Refactoring Detection in Commit History",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christos",
        "surname": "Tsigkanos"
      },
      "authorName": "Tsigkanos, Christos",
      "articleRefs": [
        {
          "pageNumber": 434,
          "articleName": "Poster: Property Specification Patterns for Robotic Missions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michele",
        "surname": "Tufano"
      },
      "authorName": "Tufano, Michele",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jana",
        "surname": "Tumova"
      },
      "authorName": "Tumova, Jana",
      "articleRefs": [
        {
          "pageNumber": 438,
          "articleName": "Poster: Towards Multi-robot Applications Planning Under Uncertainty",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5OMIq2Xre09PiJrZEN6sZ1/1qIbZQKf2SutDZRTgOpDaJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thein",
        "surname": "Tun"
      },
      "authorName": "Tun, Thein",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Burak",
        "surname": "Turhan"
      },
      "authorName": "Turhan, Burak",
      "articleRefs": [
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eray",
        "surname": "Tuzun"
      },
      "authorName": "Tuzun, Eray",
      "articleRefs": [
        {
          "pageNumber": 68,
          "articleName": "Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/49j2HKsc7xCbCMCQBewE5d/6YasTauDw1E3JGL4Jft3He.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rachel",
        "surname": "Tzoref-Brill"
      },
      "authorName": "Tzoref-Brill, Rachel",
      "articleRefs": [
        {
          "pageNumber": 144,
          "articleName": "Proactive and Pervasive Combinatorial Testing",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Naoyasu",
        "surname": "Ubayashi"
      },
      "authorName": "Ubayashi, Naoyasu",
      "articleRefs": [
        {
          "pageNumber": 272,
          "articleName": "Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dipIizZzbMXAiCO02tWVF/2xPcZJ8mMITxw7ZU4W3dQ7.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anderson",
        "surname": "Uchôa"
      },
      "authorName": "Uchôa, Anderson",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Maria",
        "surname": "Ulan"
      },
      "authorName": "Ulan, Maria",
      "articleRefs": [
        {
          "pageNumber": 216,
          "articleName": "Poster: Introducing Quality Models Based on Joint Probabilities",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IJWpRoZ08GOMTcP32lLK7/5HUHC5NmVCLkRPPdOrslsu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Unterkalmsteiner"
      },
      "authorName": "Unterkalmsteiner, Michael",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ganesha",
        "surname": "Upadhyaya"
      },
      "authorName": "Upadhyaya, Ganesha",
      "articleRefs": [
        {
          "pageNumber": 412,
          "articleName": "Poster: Hybrid Traversal: Efficient Source Code Analysis at Scale",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2NPcU40Nlwn2KbCodc68JA/7pV86Vfe0PMckYKjDeVlRT.pdf"
        },
        {
          "pageNumber": 620,
          "articleName": "Collective Program Analysis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1YWeiRVFEvw8IOF1AlKGcG/4IZyDB4ZYAHK9x1p2oaznN.pdf"
        },
        {
          "pageNumber": 886,
          "articleName": "Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eEvTc6qHbldivQpa5eYeD/5IW1xFsfcWW8UXnTSd983J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Simon",
        "surname": "Urli"
      },
      "authorName": "Urli, Simon",
      "articleRefs": [
        {
          "pageNumber": 95,
          "articleName": "How to Design a Program Repair Bot? Insights from the Repairnator Project",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1ExIKnJipGMFZO7lPRAngF/2DiGXRSudrFpQa60hIp2VD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arash",
        "surname": "Vahabzadeh"
      },
      "authorName": "Vahabzadeh, Arash",
      "articleRefs": [
        {
          "pageNumber": 210,
          "articleName": "Fine-Grained Test Minimization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7FekvzG72MbQMYKnwN6pXO/34ooDIrCIylSUp9k6oGIrB.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jaideep",
        "surname": "Vaidya"
      },
      "authorName": "Vaidya, Jaideep",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marco Tulio",
        "surname": "Valente"
      },
      "authorName": "Valente, Marco Tulio",
      "articleRefs": [
        {
          "pageNumber": 1102,
          "articleName": "Assessing the Threat of Untracked Changes in Software Evolution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wil M.P",
        "surname": "van der Aalst"
      },
      "authorName": "van der Aalst, Wil M.P",
      "articleRefs": [
        {
          "pageNumber": 234,
          "articleName": "Poster: A General Framework to Detect Behavioral Design Patterns",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CjHMRsDPvdBv98cJPU652/4D0D7LcRdgrFg9kjvsA6lG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rob",
        "surname": "van der Valk"
      },
      "authorName": "van der Valk, Rob",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Arie",
        "surname": "van Deursen"
      },
      "authorName": "van Deursen, Arie",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5SLpOxrOC7MRElPGBMwNp4/5cFXN3dt0iFNy5h7oQMqXT.pdf"
        },
        {
          "pageNumber": 561,
          "articleName": "Understanding Developers' Needs on Deprecation as a Language Feature",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2P1QIz0vZHnpdIEQ9etDfn/70WC3YCsckq6uPXtWKXnDs.pdf"
        },
        {
          "pageNumber": 1220,
          "articleName": "Search-Based Test Data Generation for SQL Queries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4B2Db8L4U7DekUw6RJzAuW/3TzsZt8feqd0zTtvlqNrZD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Boudewijn",
        "surname": "van Dongen"
      },
      "authorName": "van Dongen, Boudewijn",
      "articleRefs": [
        {
          "pageNumber": 234,
          "articleName": "Poster: A General Framework to Detect Behavioral Design Patterns",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CjHMRsDPvdBv98cJPU652/4D0D7LcRdgrFg9kjvsA6lG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jari",
        "surname": "Vanhanen"
      },
      "authorName": "Vanhanen, Jari",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dimitri",
        "surname": "Van Landuyt"
      },
      "authorName": "Van Landuyt, Dimitri",
      "articleRefs": [
        {
          "pageNumber": 290,
          "articleName": "Poster: Knowledge-Enriched Security and Privacy Threat Modeling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/37uFOoLUPhndyysBym8s6u/7szAL5XTsN6DNANI1CKW1D.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jason",
        "surname": "Van Schooneveld"
      },
      "authorName": "Van Schooneveld, Jason",
      "articleRefs": [
        {
          "pageNumber": 310,
          "articleName": "Poster: Incremental UML for Agile Development with PREXEL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/67nL4n4nFlAVswPrj0c9Rp/4pVEMTRsBYCVepnOlHjnER.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Rijnard",
        "surname": "van Tonder"
      },
      "authorName": "van Tonder, Rijnard",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Static Automated Program Repair for Heap Properties",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6sdxYBhIZyy7FLj3rFRYpg/7ojSy3fH9UYidjrpNK6WGQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dániel",
        "surname": "Varró"
      },
      "authorName": "Varró, Dániel",
      "articleRefs": [
        {
          "pageNumber": 113,
          "articleName": "The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2oUedkh05E6LoFEamVXTkw/20ZzJFufxJ3lFczmyQR7IW.pdf"
        },
        {
          "pageNumber": 969,
          "articleName": "A Graph Solver for the Automated Generation of Consistent Domain-Specific Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6eq1ZquQwyvOqG174Q7zcO/4GkhGJCKWGFeeRD8zmyZ6C.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Bogdan",
        "surname": "Vasilescu"
      },
      "authorName": "Vasilescu, Bogdan",
      "articleRefs": [
        {
          "pageNumber": 388,
          "articleName": "Poster: Learning to Mine Parallel Natural Language/Source Code Corpora from Stack Overflow",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1iZMJRxsjJaTnjtXZEm8ji/3B4yjZqOJryCSNTmEBfRma.pdf"
        },
        {
          "pageNumber": 511,
          "articleName": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5zZif4Y9gORqhqO7eKhhoZ/2NGpYIgnByWOIFiwUyBUr0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Sira",
        "surname": "Vegas"
      },
      "authorName": "Vegas, Sira",
      "articleRefs": [
        {
          "pageNumber": 534,
          "articleName": "Analyzing Software Engineering Experiments: Everything You Always Wanted to Know but Were Afraid to Ask",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jEtcrihLMyv2tOdNL64Qa/1xcUJfLdb0AwoiSDBB60Fa.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Christopher",
        "surname": "Vendome"
      },
      "authorName": "Vendome, Christopher",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "R.",
        "surname": "Venkatesh"
      },
      "authorName": "Venkatesh, R.",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Generalizing Specific-Instance Interpolation Proofs with SyGuS",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6O8wrhX2O9cvQjAmWGmMqK/dS8C4iWQN1NmsD2aISsDI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Colin C.",
        "surname": "Venters"
      },
      "authorName": "Venters, Colin C.",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Roberto",
        "surname": "Verdecchia"
      },
      "authorName": "Verdecchia, Roberto",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Talita",
        "surname": "Vieira Ribeiro"
      },
      "authorName": "Vieira Ribeiro, Talita",
      "articleRefs": [
        {
          "pageNumber": 1194,
          "articleName": "[Journal First] Challenges and Pitfalls on Surveying Evidence in the Software Engineering Technical Literature: An Exploratory Study with Novices",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eOAQt0CIgL4F5n3HwADCt/4duvB0d69UshSNJsqlMUII.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Vierhauser"
      },
      "authorName": "Vierhauser, Michael",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "Dronology: An Incubator for Cyber-Physical Systems Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/60Bj5IUfIQNUqonqo6EFmt/79AKWLxdXte7sWSbVlkcwS.pdf"
        },
        {
          "pageNumber": 226,
          "articleName": "Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jO5jPbQCODqSGRusrILtr/6qj2A2RoOEd4Jqd6hegqcw.pdf"
        },
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Patrícia",
        "surname": "Vilain"
      },
      "authorName": "Vilain, Patrícia",
      "articleRefs": [
        {
          "pageNumber": 418,
          "articleName": "Poster: A Systematic Literature Review to Support the Selection of User Acceptance Testing Techniques",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/28621IjsF5CqlbNGEX1dtM/XW3rQylLODA98aqhrpwRp.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dragos",
        "surname": "Voda"
      },
      "authorName": "Voda, Dragos",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ivonne",
        "surname": "von Nostitz-Wallwitz"
      },
      "authorName": "von Nostitz-Wallwitz, Ivonne",
      "articleRefs": [
        {
          "pageNumber": 300,
          "articleName": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "András",
        "surname": "Vörös"
      },
      "authorName": "Vörös, András",
      "articleRefs": [
        {
          "pageNumber": 113,
          "articleName": "The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2oUedkh05E6LoFEamVXTkw/20ZzJFufxJ3lFczmyQR7IW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Phong",
        "surname": "Vu"
      },
      "authorName": "Vu, Phong",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Deep Learning UI Design Patterns of Mobile Apps",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/69IMKxOq8MkgR0RQk5pkhq/6mwRgrVk2jUBuGBSoq81Rt.pdf"
        },
        {
          "pageNumber": 282,
          "articleName": "Poster: Recommending Exception Handling Patterns with ExAssist",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16FlGsREidqMynDpFiYKFV/4Wi4EHT113dBDrGRhyGTgj.pdf"
        },
        {
          "pageNumber": 284,
          "articleName": "Poster: ALPACA-Advanced Linguistic Pattern and Concept Analysis Framework for Software Engineering Corpora",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3aiLuwdP6akPBEGDrggWiZ/6ZElMdHQPHtE9H09hFTb2O.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Laura C.",
        "surname": "Wagner"
      },
      "authorName": "Wagner, Laura C.",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "User Feedback in the App Store: A Cross-Cultural Study",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Michael",
        "surname": "Wagner"
      },
      "authorName": "Wagner, Michael",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Stefan",
        "surname": "Wagner"
      },
      "authorName": "Wagner, Stefan",
      "articleRefs": [
        {
          "pageNumber": 242,
          "articleName": "Poster: Communication in Open-Source Projects–End of the E-mail Era?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1j4w2owFLsJWGemRCe3RPJ/4ohDY2rD3K4zRwV3ou34JL.pdf"
        },
        {
          "pageNumber": 286,
          "articleName": "Poster: Combining STPA and BDD for Safety Analysis and Verification in Agile Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1XIsPKkwVZJO7pFEOdJQ1f/7HWY5r2C5Dq79jXhcZUpKM.pdf"
        },
        {
          "pageNumber": 390,
          "articleName": "Poster: Identification of Methods with Low Fault Risk",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JGgODCZWzCpd0zz1oZSYU/2SjNf69oXbXjcLDFxghEKS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ken",
        "surname": "Wallace"
      },
      "authorName": "Wallace, Ken",
      "articleRefs": [
        {
          "pageNumber": 43,
          "articleName": "Mind the Gap: Can and Should Software Engineering Data Sharing Become a Path of Less Resistance?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/20Kc1uOIkbe0dfcoVIjuY7/3zjdBx6uh7Dz8E5XCvaOTo.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hai",
        "surname": "Wan"
      },
      "authorName": "Wan, Hai",
      "articleRefs": [
        {
          "pageNumber": 327,
          "articleName": "Poster: Model-Based Adaptation to Extreme Physical Environments: A Case Study on Mixed-Criticality Industrial Ethernet",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7GtVpgolsvwHY6LHPyhM13/4H225Nz2cYgCYnKtZIi1er.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pengcheng",
        "surname": "Wang"
      },
      "authorName": "Wang, Pengcheng",
      "articleRefs": [
        {
          "pageNumber": 1066,
          "articleName": "CCAligner: A Token Based Large-Gap Clone Detector",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nE35nG7ocrp4CRl34yq3L/6OCIeXs66z0Os8X3bVIjTD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wentao",
        "surname": "Wang"
      },
      "authorName": "Wang, Wentao",
      "articleRefs": [
        {
          "pageNumber": 444,
          "articleName": "Poster: Answering the Requirements Traceability Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54xELw09vUNSoYFjh1AziH/3vdJIWxnVZhNTP9QUA8bWD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yang",
        "surname": "Wang"
      },
      "authorName": "Wang, Yang",
      "articleRefs": [
        {
          "pageNumber": 266,
          "articleName": "On Groupthink in Safety Analysis: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7xH12ng5nhE1pzBYmO3hAS/3SP75ETZJqdrFybInn4XMI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yi",
        "surname": "Wang"
      },
      "authorName": "Wang, Yi",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Competence-Confidence Gap: A Threat to Female Developers' Contribution on GitHub",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/42E4u7nqMTEXx7aNqWt2ao/5AnfXp47j7QWL1W5yQMac8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hironori",
        "surname": "Washizaki"
      },
      "authorName": "Washizaki, Hironori",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andrzej",
        "surname": "Wasowski"
      },
      "authorName": "Wasowski, Andrzej",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anthony",
        "surname": "Wasserman"
      },
      "authorName": "Wasserman, Anthony",
      "articleRefs": [
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Alan",
        "surname": "Wassyng"
      },
      "authorName": "Wassyng, Alan",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "Poster: Assurance Cases for Scientific Computing Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ry3rQd3HdBw1019rH4hy0/5UCpbcH3AAnGNkxQVVCZVm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Harumi",
        "surname": "Watanabe"
      },
      "authorName": "Watanabe, Harumi",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yasuhiro",
        "surname": "Watanabe"
      },
      "authorName": "Watanabe, Yasuhiro",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Heike",
        "surname": "Wehrheim"
      },
      "authorName": "Wehrheim, Heike",
      "articleRefs": [
        {
          "pageNumber": 1182,
          "articleName": "Reducer-Based Construction of Conditional Verifiers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6mfhtixgiQVyhDPMCYId3V/7DUx0uAdd4fytOgP2RvFf5.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ou",
        "surname": "Wei"
      },
      "authorName": "Wei, Ou",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "Poster: Deciding Weak Monitorability for Runtime Verification",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Jgn0A6nOj7QIfUc0036qu/2CRsqRAoRBHJxOF6hJzYqb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tao",
        "surname": "Wei"
      },
      "authorName": "Wei, Tao",
      "articleRefs": [
        {
          "pageNumber": 26,
          "articleName": "Software Protection on the Go: A Large-Scale Empirical Study on Mobile App Obfuscation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2EdfBsXkJwNigFBTvo9BLV/4xu36PAZ7PYx3sUV1mpEWS.pdf"
        },
        {
          "pageNumber": 235,
          "articleName": "Protecting Million-User iOS Apps with Obfuscation: Motivations, Pitfalls, and Experience",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6D79uXKxsLFDPmMFKNcRW8/1VBkWnd3mBlkpIkTqvuUqq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nico",
        "surname": "Weichbrodt"
      },
      "authorName": "Weichbrodt, Nico",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ming",
        "surname": "Wen"
      },
      "authorName": "Wen, Ming",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Context-Aware Patch Generation for Better Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2FydAwOD2o1un1UuWRcZuR/4DiUknL45OPujvaqe5CpDE.pdf"
        },
        {
          "pageNumber": 536,
          "articleName": "[Journal First] ChangeLocator: Locate Crash-Inducing Changes Based on Crash Reports",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6UNHbzVwmZVSsRWnuhsdWp/2bRMUsVOinygp3ZsKkc26P.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Dominik",
        "surname": "Werle"
      },
      "authorName": "Werle, Dominik",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Danny",
        "surname": "Weyns"
      },
      "authorName": "Weyns, Danny",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        },
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jules",
        "surname": "White"
      },
      "authorName": "White, Jules",
      "articleRefs": [
        {
          "pageNumber": 29,
          "articleName": "Images of Code: Lossy Compression for Native Instructions",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4O33wTClUcK5dLf9D2ytLQ/7vjaqiOp3476mtH6LPlGdm.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jon",
        "surname": "Whittle"
      },
      "authorName": "Whittle, Jon",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jens",
        "surname": "Wiemann"
      },
      "authorName": "Wiemann, Jens",
      "articleRefs": [
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Adam",
        "surname": "Wierzbicki"
      },
      "authorName": "Wierzbicki, Adam",
      "articleRefs": [
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Igor",
        "surname": "Wiese"
      },
      "authorName": "Wiese, Igor",
      "articleRefs": [
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andreas",
        "surname": "Wilhelm"
      },
      "authorName": "Wilhelm, Andreas",
      "articleRefs": [
        {
          "pageNumber": 115,
          "articleName": "Tool-Based Interactive Software Parallelization: A Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6WOIQt9qfOJgDlYDiHswtu/4d3FRvoz63ZHw3qyaofuzP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Laurie",
        "surname": "Williams"
      },
      "authorName": "Williams, Laurie",
      "articleRefs": [
        {
          "pageNumber": 414,
          "articleName": "Poster: Defect Prediction Metrics for Infrastructure as Code Scripts in DevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6z0ElYo6kCuhP8EM07S76I/7w6jX8zdDuiJ9pLqb3q0NC.pdf"
        },
        {
          "pageNumber": 426,
          "articleName": "Poster: Identifying Security Issues in Software Development: Are Keywords Enough?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6gBAdmDKYhyHsm7KCt99cN/4hTlGNOOjkp6Hde2uwrpbn.pdf"
        },
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Anna",
        "surname": "Wingkvist"
      },
      "authorName": "Wingkvist, Anna",
      "articleRefs": [
        {
          "pageNumber": 197,
          "articleName": "Poster: Using Repository Data for Driving Software Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7KkMEL4TPzWlaTUD5Aj0Hd/V0s75jWXuVVK6ky99u5wi.pdf"
        },
        {
          "pageNumber": 216,
          "articleName": "Poster: Introducing Quality Models Based on Joint Probabilities",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IJWpRoZ08GOMTcP32lLK7/5HUHC5NmVCLkRPPdOrslsu.pdf"
        },
        {
          "pageNumber": 220,
          "articleName": "Poster: A Changeset-Based Approach to Assess Source Code Density and Developer Efficacy",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Tm0IqbemtTOBG0FpCKG2m/4AcH1Q8EG4SjleFQ38joZ0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Collin",
        "surname": "Winter"
      },
      "authorName": "Winter, Collin",
      "articleRefs": [
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Philipp",
        "surname": "Wohlgemuth"
      },
      "authorName": "Wohlgemuth, Philipp",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Variant Management Solution for Large Scale Software Product Lines",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4J94vc6uZu9C5yPCTynFex/1z41fCXlOqEfSXyXWq6peW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Paul",
        "surname": "Wojciak"
      },
      "authorName": "Wojciak, Paul",
      "articleRefs": [
        {
          "pageNumber": 144,
          "articleName": "Proactive and Pervasive Combinatorial Testing",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "W. Eric",
        "surname": "Wong"
      },
      "authorName": "Wong, W. Eric",
      "articleRefs": [
        {
          "pageNumber": 1064,
          "articleName": "[Journal First] MSeer – An Advanced Technique for Locating Multiple Bugs in Parallel",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2bXorueAudCxlEMsJerqfd/Og0D36M9R4LoKGCDZbP4J.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Murray",
        "surname": "Wood"
      },
      "authorName": "Wood, Murray",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "Inheritance Usage Patterns in Open-Source Systems",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7Jy5sWOqNS24NkSHFaTSEU/4OwDDeOZbvShYQOhNvgfpH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andreas",
        "surname": "Wortmann"
      },
      "authorName": "Wortmann, Andreas",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Franz",
        "surname": "Wotawa"
      },
      "authorName": "Wotawa, Franz",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Di",
        "surname": "Wu"
      },
      "authorName": "Wu, Di",
      "articleRefs": [
        {
          "pageNumber": 270,
          "articleName": "Poster: Automatically Answering API-Related Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ke",
        "surname": "Wu"
      },
      "authorName": "Wu, Ke",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yanzhao",
        "surname": "Wu"
      },
      "authorName": "Wu, Yanzhao",
      "articleRefs": [
        {
          "pageNumber": 1066,
          "articleName": "CCAligner: A Token Based Large-Gap Clone Detector",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nE35nG7ocrp4CRl34yq3L/6OCIeXs66z0Os8X3bVIjTD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Janet",
        "surname": "Wyngaard"
      },
      "authorName": "Wyngaard, Janet",
      "articleRefs": [
        {
          "pageNumber": 226,
          "articleName": "Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jO5jPbQCODqSGRusrILtr/6qj2A2RoOEd4Jqd6hegqcw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yuan",
        "surname": "Xi"
      },
      "authorName": "Xi, Yuan",
      "articleRefs": [
        {
          "pageNumber": 315,
          "articleName": "Poster: Designing Bug Detection Rules for Fewer False Alarms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1UPJvjP8ppzant4gtBI7mS/6oFZLatXk1lynNL1b8OV0u.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mingyuan",
        "surname": "Xia"
      },
      "authorName": "Xia, Mingyuan",
      "articleRefs": [
        {
          "pageNumber": 329,
          "articleName": "Poster: Efficient and Deterministic Replay for Web-Enabled Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/36kMCRGJIHLtaSXi0e2KSp/44hgs6obxhBufX2ufcNbQX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xin",
        "surname": "Xia"
      },
      "authorName": "Xia, Xin",
      "articleRefs": [
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lu",
        "surname": "Xiao"
      },
      "authorName": "Xiao, Lu",
      "articleRefs": [
        {
          "pageNumber": 358,
          "articleName": "Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nkFZGabFmQT9XjbZsafGM/6RhqzwQooNR2K4lpXABN0Z.pdf"
        },
        {
          "pageNumber": 811,
          "articleName": "Speedoo: Prioritizing Performance Optimization Opportunities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1n3EHZ69Ja5of7qLpXnL86/5IDS4UmAOw5scrzvbU1Gyb.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fenfang",
        "surname": "Xie"
      },
      "authorName": "Xie, Fenfang",
      "articleRefs": [
        {
          "pageNumber": 362,
          "articleName": "Poster: Group Preference Based API Recommendation via Heterogeneous Information Network",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IC5E4GtEfoXUYedszQWOU/dzEEtMPWqCEdK6XcvtGnj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tao",
        "surname": "Xie"
      },
      "authorName": "Xie, Tao",
      "articleRefs": [
        {
          "pageNumber": 384,
          "articleName": "EnMobile: Entity-Based Characterization and Analysis of Mobile Malware",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Z7koA2jFooE8hHRKnmcU8/6vKkdMpZxRA1eH4TYnCsvA.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhenchang",
        "surname": "Xing"
      },
      "authorName": "Xing, Zhenchang",
      "articleRefs": [
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 665,
          "articleName": "From UI Design Image to GUI Skeleton: A Neural Machine Translator to Bootstrap Mobile GUI Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JXA3aEoFlChCTeObvRL5D/4SROMnxHfcqnH3f5jpBxW6.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wandi",
        "surname": "Xiong"
      },
      "authorName": "Xiong, Wandi",
      "articleRefs": [
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yingfei",
        "surname": "Xiong"
      },
      "authorName": "Xiong, Yingfei",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        },
        {
          "pageNumber": 789,
          "articleName": "Identifying Patch Correctness in Test-Based Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11zxitYXACvMuqaLV1rFPF/1DtebWtKrtzfb6ply0HQ69.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tianyin",
        "surname": "Xu"
      },
      "authorName": "Xu, Tianyin",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "Mining Container Image Repositories for Software Configuration and Beyond",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4wlZKfwOLMVMe3mCqFtWP1/6EIw9CKjiQiNIPFziN2DRW.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xinyi",
        "surname": "Xu"
      },
      "authorName": "Xu, Xinyi",
      "articleRefs": [
        {
          "pageNumber": 358,
          "articleName": "Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nkFZGabFmQT9XjbZsafGM/6RhqzwQooNR2K4lpXABN0Z.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhaogui",
        "surname": "Xu"
      },
      "authorName": "Xu, Zhaogui",
      "articleRefs": [
        {
          "pageNumber": 1171,
          "articleName": "Debugging with Intelligence via Probabilistic Inference",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7CYIpqNdfDVuty6nF4sCz0/4NS9ycJ4Imp4FkgVouytF1.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jifeng",
        "surname": "Xuan"
      },
      "authorName": "Xuan, Jifeng",
      "articleRefs": [
        {
          "pageNumber": 71,
          "articleName": "Automated Localization for Unreproducible Builds",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Uo99XzE0k6LQDG79lezQk/4lDBvklakctIQ6sXpUiVcn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jinyun",
        "surname": "Xue"
      },
      "authorName": "Xue, Jinyun",
      "articleRefs": [
        {
          "pageNumber": 230,
          "articleName": "Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/X0glNBWe9bFHLqk18sHr8/3C06tjBbRFMPTLiNNoEii.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yinxing",
        "surname": "Xue"
      },
      "authorName": "Xue, Yinxing",
      "articleRefs": [
        {
          "pageNumber": 1231,
          "articleName": "Multi-objective Integer Programming Approaches for Solving Optimal Feature Selection Problem: A New Perspective on Multi-objective Optimization Problems in SBSE",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1TtVOsFS1qq7UEalN0m3JG/3XBHStq8A8ko8AbWNPERaX.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Eran",
        "surname": "Yahav"
      },
      "authorName": "Yahav, Eran",
      "articleRefs": [
        {
          "pageNumber": 1114,
          "articleName": "Programming Not Only by Example",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4OSJhkaFu096tUteSJdWJs/2hPIFheVxQOKQ5wEo4hSMx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cai",
        "surname": "Yan"
      },
      "authorName": "Yan, Cai",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Cong",
        "surname": "Yan"
      },
      "authorName": "Yan, Cong",
      "articleRefs": [
        {
          "pageNumber": 800,
          "articleName": "How not to Structure Your Database-Backed Web Applications: A Study of Performance Bugs in the Wild",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1heAUnsML3vNOxAklvY2o5/5r7WaaxVGeRjbQD2Yx8PMD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yichen",
        "surname": "Yan"
      },
      "authorName": "Yan, Yichen",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vanya",
        "surname": "Yaneva"
      },
      "authorName": "Yaneva, Vanya",
      "articleRefs": [
        {
          "pageNumber": 521,
          "articleName": "Compiler-Assisted Test Acceleration Using GPUs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4JzQjbNq4YEiNUbSnl9yg1/1QTjJ6wJGAyVTQDVxzM2Fu.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Song",
        "surname": "Yang"
      },
      "authorName": "Yang, Song",
      "articleRefs": [
        {
          "pageNumber": 1207,
          "articleName": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ye",
        "surname": "Yang"
      },
      "authorName": "Yang, Ye",
      "articleRefs": [
        {
          "pageNumber": 358,
          "articleName": "Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nkFZGabFmQT9XjbZsafGM/6RhqzwQooNR2K4lpXABN0Z.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Danfeng (Daphne)",
        "surname": "Yao"
      },
      "authorName": "Yao, Danfeng (Daphne)",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Secure Coding Practices in Java: Challenges and Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3o2zXw08GLZHHzo4KXdBon/1sIzAZUbSd0wvJ0Yz0jFNw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xin",
        "surname": "Yao"
      },
      "authorName": "Yao, Xin",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "A Critical Review of \"A Practical Guide to Select Quality Indicators for Assessing Pareto-Based Search Algorithms in Search-Based Software Engineering\": Essay on Quality Indicator Selection for SBSE",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6UAPfFBg43xIyqHtpkPyPH/5XsmxGGTBk7EC4UT2514rP.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yinbo",
        "surname": "Yao"
      },
      "authorName": "Yao, Yinbo",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Deming",
        "surname": "Ye"
      },
      "authorName": "Ye, Deming",
      "articleRefs": [
        {
          "pageNumber": 58,
          "articleName": "Continuous Delivery of Personalized Assessment and Feedback in Agile Software Engineering Projects",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ztuOBdGuPzPaaZ5ZxbGjy/7Bjf67pa1UxMHWufh4okAy.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jooyong",
        "surname": "Yi"
      },
      "authorName": "Yi, Jooyong",
      "articleRefs": [
        {
          "pageNumber": 24,
          "articleName": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf"
        },
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        },
        {
          "pageNumber": 402,
          "articleName": "Poster: Precooked Developer Dashboards: What to Show and How to Use",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2YzSMhy4hX7dROj5nXlVAm/3cgnIym26ZtWGwA6sgvoZK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fangxi",
        "surname": "Yin"
      },
      "authorName": "Yin, Fangxi",
      "articleRefs": [
        {
          "pageNumber": 11,
          "articleName": "Java Performance Troubleshooting and Optimization at Alibaba",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6Pki5vDjIRR2hvFp24PCnX/2KpxLLSxNFaXCJ56QTRISU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Pengcheng",
        "surname": "Yin"
      },
      "authorName": "Yin, Pengcheng",
      "articleRefs": [
        {
          "pageNumber": 388,
          "articleName": "Poster: Learning to Mine Parallel Natural Language/Source Code Corpora from Stack Overflow",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1iZMJRxsjJaTnjtXZEm8ji/3B4yjZqOJryCSNTmEBfRma.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiong",
        "surname": "Yingfei"
      },
      "authorName": "Yingfei, Xiong",
      "articleRefs": [
        {
          "pageNumber": 260,
          "articleName": "Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3KOAs6b5Ao6dTf4nrU5Z2R/4wShlhH4Ml9nJbkkAnMNpN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shin",
        "surname": "Yoo"
      },
      "authorName": "Yoo, Shin",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        },
        {
          "pageNumber": 537,
          "articleName": "Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/53KVBZlCxSM8SKMrWZTReW/5SVStngTUruEo7SDPWMIhR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Nobuko",
        "surname": "Yoshida"
      },
      "authorName": "Yoshida, Nobuko",
      "articleRefs": [
        {
          "pageNumber": 1137,
          "articleName": "A Static Verification Framework for Message Passing in Go Using Behavioural Types",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4qni3QmfOZ1L9eUK9sVGyf/OgbS6Mp1QczsiyDiedExx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Norihiro",
        "surname": "Yoshida"
      },
      "authorName": "Yoshida, Norihiro",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Paul",
        "surname": "Young"
      },
      "authorName": "Young, Paul",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Koen",
        "surname": "Yskout"
      },
      "authorName": "Yskout, Koen",
      "articleRefs": [
        {
          "pageNumber": 290,
          "articleName": "Poster: Knowledge-Enriched Security and Privacy Threat Modeling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/37uFOoLUPhndyysBym8s6u/7szAL5XTsN6DNANI1CKW1D.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hengbiao",
        "surname": "Yu"
      },
      "authorName": "Yu, Hengbiao",
      "articleRefs": [
        {
          "pageNumber": 527,
          "articleName": "Combining Symbolic Execution and Model Checking to Verify MPI Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/71r3uEpj8w9w85mn05wLgG/41PZQTwzxIZljqdsgu08rA.pdf"
        },
        {
          "pageNumber": 871,
          "articleName": "Symbolic Verification of Regular Properties",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IJNV2SslZXLkkcU0nrqLc/73G8pFObrprdyJDH04r5wl.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhongxing",
        "surname": "Yu"
      },
      "authorName": "Yu, Zhongxing",
      "articleRefs": [
        {
          "pageNumber": 95,
          "articleName": "How to Design a Program Repair Bot? Insights from the Repairnator Project",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1ExIKnJipGMFZO7lPRAngF/2DiGXRSudrFpQa60hIp2VD.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Weizhao",
        "surname": "Yuan"
      },
      "authorName": "Yuan, Weizhao",
      "articleRefs": [
        {
          "pageNumber": 364,
          "articleName": "Poster: LibraryGuru: API Recommendation for Android Developers",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nswA2eQYvB2VMATIABT5R/5WNNsPhJ5Pl6hxbqipDB1f.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tao",
        "surname": "Yue"
      },
      "authorName": "Yue, Tao",
      "articleRefs": [
        {
          "pageNumber": 1243,
          "articleName": "[Journal First] Automated Refactoring of OCL Constraints with Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7cJGdYhKy3K17vTHSANryU/39zsgbNVg02BjEkeFH5d3S.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Tifany",
        "surname": "Yung"
      },
      "authorName": "Yung, Tifany",
      "articleRefs": [
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andy",
        "surname": "Zaidman"
      },
      "authorName": "Zaidman, Andy",
      "articleRefs": [
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        },
        {
          "pageNumber": 572,
          "articleName": "On the Dichotomy of Debugging Behavior Among Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/xP54rozvutqKTsorAW4JU/7Y1r5jMBEpcFZDC2Ip9iV.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marcel",
        "surname": "Zalmanovici"
      },
      "authorName": "Zalmanovici, Marcel",
      "articleRefs": [
        {
          "pageNumber": 144,
          "articleName": "Proactive and Pervasive Combinatorial Testing",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Fiorella",
        "surname": "Zampetti"
      },
      "authorName": "Zampetti, Fiorella",
      "articleRefs": [
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Marco",
        "surname": "Zanoni"
      },
      "authorName": "Zanoni, Marco",
      "articleRefs": [
        {
          "pageNumber": 288,
          "articleName": "Poster: Machine Learning Based Code Smell Detection Through WekaNose",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2gDaQr1ksB8ODkMYxzryZz/5wYT53VZ6GfJZXciRk1zCw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Andreas",
        "surname": "Zeller"
      },
      "authorName": "Zeller, Andreas",
      "articleRefs": [
        {
          "pageNumber": 370,
          "articleName": "Poster: Efficient GUI Test Generation by Learning from Tests of Other Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Zfi6QHPNFSKTZ6ErDMQO9/6tabCma7zW4FFjzRbx7Jv3.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Muhan",
        "surname": "Zeng"
      },
      "authorName": "Zeng, Muhan",
      "articleRefs": [
        {
          "pageNumber": 789,
          "articleName": "Identifying Patch Correctness in Test-Based Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11zxitYXACvMuqaLV1rFPF/1DtebWtKrtzfb6ply0HQ69.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Amir",
        "surname": "Zghidi"
      },
      "authorName": "Zghidi, Amir",
      "articleRefs": [
        {
          "pageNumber": 398,
          "articleName": "Poster: Towards a Formal API Assessment",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4EuktLE7DiRjvzvyG7KuGH/1qqZgquooeCI3zSxGd3tTx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Ying",
        "surname": "Zhan"
      },
      "authorName": "Zhan, Ying",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "Poster: QoS-Aware Service Composition Using Blockchain-Based Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/52LmPy7QbAM0aNeB9uYJC2/53SEGmGiNbgYAVNqtV672d.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chengyu",
        "surname": "Zhang"
      },
      "authorName": "Zhang, Chengyu",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "He",
        "surname": "Zhang"
      },
      "authorName": "Zhang, He",
      "articleRefs": [
        {
          "pageNumber": 1207,
          "articleName": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xiaosong",
        "surname": "Zhang"
      },
      "authorName": "Zhang, Xiaosong",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Towards Saving Money in Using Smart Contracts",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Yuxia",
        "surname": "Zhang"
      },
      "authorName": "Zhang, Yuxia",
      "articleRefs": [
        {
          "pageNumber": 440,
          "articleName": "Poster: Companies' Domination in FLOSS Development - An Empirical Study of OpenStack",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qzz37M5aaQHMR84AdL5Ao/6BpbDRR3MKYdAc0gfHratN.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Jing",
        "surname": "Zhao"
      },
      "authorName": "Zhao, Jing",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Liang",
        "surname": "Zhao"
      },
      "authorName": "Zhao, Liang",
      "articleRefs": [
        {
          "pageNumber": 859,
          "articleName": "RFC-Directed Differential Testing of Certificate Validation in SSL/TLS Implementations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/15kHg7CwgytsDlnTv3z6u2/ZUw4RKFVhfsc0Bb1AsNmQ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Peilin",
        "surname": "Zheng"
      },
      "authorName": "Zheng, Peilin",
      "articleRefs": [
        {
          "pageNumber": 360,
          "articleName": "Poster: Efficient Blockchain-Based Software Systems via Hierarchical Bucket Tree",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kqs7SQRatS1ve2ystqzZc/1G7CJAIYcAjDhZBKietcio.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zibin",
        "surname": "Zheng"
      },
      "authorName": "Zheng, Zibin",
      "articleRefs": [
        {
          "pageNumber": 134,
          "articleName": "A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1THX06dkdc4p9NK74CQDK6/4cihGy6VmWGDisS2sZqFnJ.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hao",
        "surname": "Zhong"
      },
      "authorName": "Zhong, Hao",
      "articleRefs": [
        {
          "pageNumber": 885,
          "articleName": "[Journal First] Towards Reusing Hints from Past Fixes: An Exploratory Study on Thousands of Real Samples",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/40hy9tlXTmRgfderpGDdg6/3ne6Pkg9Hj4fJLRwiT7QKS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hanru",
        "surname": "Zhou"
      },
      "authorName": "Zhou, Hanru",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Hao",
        "surname": "Zhou"
      },
      "authorName": "Zhou, Hao",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Towards Saving Money in Using Smart Contracts",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Xin",
        "surname": "Zhou"
      },
      "authorName": "Zhou, Xin",
      "articleRefs": [
        {
          "pageNumber": 1207,
          "articleName": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Zhi Quan",
        "surname": "Zhou"
      },
      "authorName": "Zhou, Zhi Quan",
      "articleRefs": [
        {
          "pageNumber": 538,
          "articleName": "Metamorphic Testing 20 Years Later: A Hands-on Introduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2t0NMGURSnuIg1cFBefkVh/1SMaE5CZb1A4BX4uKBxyBR.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Chen",
        "surname": "Zhu"
      },
      "authorName": "Zhu, Chen",
      "articleRefs": [
        {
          "pageNumber": 270,
          "articleName": "Poster: Automatically Answering API-Related Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Shuofei",
        "surname": "Zhu"
      },
      "authorName": "Zhu, Shuofei",
      "articleRefs": [
        {
          "pageNumber": 1171,
          "articleName": "Debugging with Intelligence via Probabilistic Inference",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7CYIpqNdfDVuty6nF4sCz0/4NS9ycJ4Imp4FkgVouytF1.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Wenjie",
        "surname": "Zhuang"
      },
      "authorName": "Zhuang, Wenjie",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Secure Coding Practices in Java: Challenges and Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3o2zXw08GLZHHzo4KXdBon/1sIzAZUbSd0wvJ0Yz0jFNw.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Lu",
        "surname": "Zi"
      },
      "authorName": "Zi, Lu",
      "articleRefs": [
        {
          "pageNumber": 270,
          "articleName": "Poster: Automatically Answering API-Related Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Constantin",
        "surname": "Ziesche"
      },
      "authorName": "Ziesche, Constantin",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Peter",
        "surname": "Zimmerer"
      },
      "authorName": "Zimmerer, Peter",
      "articleRefs": [
        {
          "pageNumber": 532,
          "articleName": "Strategy for Continuous Testing in iDevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1z1MaPpKJOumLTpr9cFqOs/4SgR50gt6y5PtxiOnmlH5g.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Thomas",
        "surname": "Zimmermann"
      },
      "authorName": "Zimmermann, Thomas",
      "articleRefs": [
        {
          "pageNumber": 585,
          "articleName": "[Journal First] Data Scientists in Software Teams: State of the Art and Challenges",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47NY96sCKYhfY6lLApaAdS/UjTg5agZVWapuv8BiuO4t.pdf"
        },
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Milda",
        "surname": "Zizyte"
      },
      "authorName": "Zizyte, Milda",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Vasili",
        "surname": "Zorin"
      },
      "authorName": "Zorin, Vasili",
      "articleRefs": [
        {
          "pageNumber": 402,
          "articleName": "Poster: Precooked Developer Dashboards: What to Show and How to Use",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2YzSMhy4hX7dROj5nXlVAm/3cgnIym26ZtWGwA6sgvoZK.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Liang",
        "surname": "Zou"
      },
      "authorName": "Zou, Liang",
      "articleRefs": [
        {
          "pageNumber": 238,
          "articleName": "Poster: Detecting Missing Checks for Identifying Insufficient Attack Protections",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68lea68Xffx9ofe7BySvM/206boRxPqYpHOPA2UsxYIq.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Daniele",
        "surname": "Zuddas"
      },
      "authorName": "Zuddas, Daniele",
      "articleRefs": [
        {
          "pageNumber": 280,
          "articleName": "Augusto: Exploiting Popular Functionalities for the Generation of Semantic GUI Tests with Oracles",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4Bj4eXTd2JJsTSOvwfGyU3/3tjKiQP53XxdoUXP3NwW84.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Damien",
        "surname": "Zufferey"
      },
      "authorName": "Zufferey, Damien",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "author": {
        "givenName": "Mei",
        "surname": "Zuo"
      },
      "authorName": "Zuo, Mei",
      "articleRefs": [
        {
          "pageNumber": 270,
          "articleName": "Poster: Automatically Answering API-Related Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf"
        }
      ]
    }
  ],
  "affiliations": [
    {
      "affiliation": "A-2 A/S",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "affiliation": "Aalto University",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf"
        }
      ]
    },
    {
      "affiliation": "Aalto University & IT University of Copenhagen",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "How Does Participating in a Capstone Project with Industrial Customers Affect Student Attitudes?",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/KvRIBmBYPuVMi0BKYmkll/onrSzGc38k6jub63OAiNJ.pdf"
        }
      ]
    },
    {
      "affiliation": "AAU Klagenfurt",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "affiliation": "ABB Corporate Research",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        },
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "affiliation": "ABB Corporate Research Center Germany",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "affiliation": "ABB Inc.",
      "articleRefs": [
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "affiliation": "Accenture Labs",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "An Immersive Future for Software Engineering — Avenues and Approaches",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1EpjKazCrYQMpJpG57Wp2A/4qzQRZDxVTtuh4cl4S2HuV.pdf"
        }
      ]
    },
    {
      "affiliation": "adesso AG",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "A Data Decomposition Method for Stepwise Migration of Complex Legacy Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3O1Ktk2tXxpTHy1ufdypxO/4EhNANlLNIYSkF2FDJHDAs.pdf"
        }
      ]
    },
    {
      "affiliation": "Adyen B.V.",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5SLpOxrOC7MRElPGBMwNp4/5cFXN3dt0iFNy5h7oQMqXT.pdf"
        }
      ]
    },
    {
      "affiliation": "Air Force Research Laboratory",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf"
        }
      ]
    },
    {
      "affiliation": "Alibaba Group",
      "articleRefs": [
        {
          "pageNumber": 11,
          "articleName": "Java Performance Troubleshooting and Optimization at Alibaba",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6Pki5vDjIRR2hvFp24PCnX/2KpxLLSxNFaXCJ56QTRISU.pdf"
        },
        {
          "pageNumber": 1027,
          "articleName": "To Preserve or Not to Preserve Invalid Solutions in Search-Based Software Engineering: A Case Study in Software Product Lines",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eLhDKSnOjZaBnTjUD3mLd/4zL0DqW0XJoJyYVopX6pxS.pdf"
        }
      ]
    },
    {
      "affiliation": "Alpen-Adria Universität",
      "articleRefs": [
        {
          "pageNumber": 468,
          "articleName": "Automatic Verification of Time Behavior of Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4j6XzJGjLowqu92qYj6YFf/2xaVLob5LP2L7186xha31d.pdf"
        }
      ]
    },
    {
      "affiliation": "Altran Netherlands B.V.",
      "articleRefs": [
        {
          "pageNumber": 127,
          "articleName": "Poster: Results from Multi-faceted Software Reliability Assessment Studies",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7DoBigqLYo5qCiOodZKTcz/6q4ZddNK9hg9IsUoTQjVpQ.pdf"
        }
      ]
    },
    {
      "affiliation": "Athens University of Economics and Business",
      "articleRefs": [
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        },
        {
          "pageNumber": 69,
          "articleName": "Code Review Comments: Language Matters",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/165qeNKip9XUqW8VEtQDW0/41SjKvey4HBZGWpDcrBYdh.pdf"
        },
        {
          "pageNumber": 105,
          "articleName": "Echoes from Space: Grouping Commands with Large-Scale Telemetry Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/36OHYwbesYzyrqceW0zbds/6lTJGOwEkmMFQO8CFju22q.pdf"
        },
        {
          "pageNumber": 540,
          "articleName": "How to Analyze Git Repositories with Command Line Tools: We're not in Kansas Anymore",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ez2GftNEYDvJXCwDk6umC/5YKnoCvwDQQN7mGMEmps6W.pdf"
        },
        {
          "pageNumber": 546,
          "articleName": "Detecting and Managing Code Smells: Research and Practice",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/549ytWjXRLllNI0BsiStTv/2umET2tBXamvFcvHU4QGiu.pdf"
        },
        {
          "pageNumber": 572,
          "articleName": "On the Dichotomy of Debugging Behavior Among Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/xP54rozvutqKTsorAW4JU/7Y1r5jMBEpcFZDC2Ip9iV.pdf"
        }
      ]
    },
    {
      "affiliation": "Auburn University",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Deep Learning UI Design Patterns of Mobile Apps",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/69IMKxOq8MkgR0RQk5pkhq/6mwRgrVk2jUBuGBSoq81Rt.pdf"
        },
        {
          "pageNumber": 282,
          "articleName": "Poster: Recommending Exception Handling Patterns with ExAssist",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16FlGsREidqMynDpFiYKFV/4Wi4EHT113dBDrGRhyGTgj.pdf"
        },
        {
          "pageNumber": 284,
          "articleName": "Poster: ALPACA-Advanced Linguistic Pattern and Concept Analysis Framework for Software Engineering Corpora",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3aiLuwdP6akPBEGDrggWiZ/6ZElMdHQPHtE9H09hFTb2O.pdf"
        }
      ]
    },
    {
      "affiliation": "Auckland University of Technology",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "Efficient Parametric Model Checking Using Domain-Specific Modelling Patterns",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/3VKXquAtw3Bsoa1GQ2m1Cn/IwXQwRyRAgcZEgA31O87n.pdf"
        }
      ]
    },
    {
      "affiliation": "Australian National University",
      "articleRefs": [
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 665,
          "articleName": "From UI Design Image to GUI Skeleton: A Neural Machine Translator to Bootstrap Mobile GUI Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JXA3aEoFlChCTeObvRL5D/4SROMnxHfcqnH3f5jpBxW6.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        }
      ]
    },
    {
      "affiliation": "avenyou GmbH",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "affiliation": "Babes-Bolyai University",
      "articleRefs": [
        {
          "pageNumber": 169,
          "articleName": "Poster: A Study of Monitoring Crosscutting Concerns Implementation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1aSXQJAPN6sehPZLHqbnaX/xcz8NsFl7YHoVFgXO5Rpa.pdf"
        }
      ]
    },
    {
      "affiliation": "BAE Systems",
      "articleRefs": [
        {
          "pageNumber": 43,
          "articleName": "Mind the Gap: Can and Should Software Engineering Data Sharing Become a Path of Less Resistance?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/20Kc1uOIkbe0dfcoVIjuY7/3zjdBx6uh7Dz8E5XCvaOTo.pdf"
        }
      ]
    },
    {
      "affiliation": "Baidu X-Lab",
      "articleRefs": [
        {
          "pageNumber": 26,
          "articleName": "Software Protection on the Go: A Large-Scale Empirical Study on Mobile App Obfuscation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2EdfBsXkJwNigFBTvo9BLV/4xu36PAZ7PYx3sUV1mpEWS.pdf"
        },
        {
          "pageNumber": 235,
          "articleName": "Protecting Million-User iOS Apps with Obfuscation: Motivations, Pitfalls, and Experience",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6D79uXKxsLFDPmMFKNcRW8/1VBkWnd3mBlkpIkTqvuUqq.pdf"
        }
      ]
    },
    {
      "affiliation": "Beihang University",
      "articleRefs": [
        {
          "pageNumber": 294,
          "articleName": "Poster: Semantically Enhanced Tag Recommendation for Software CQAs via Deep Learning",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7F1H2tgvwjlUwCU4NrnV3R/HRx9bqSyEdwNU1LCisZbN.pdf"
        }
      ]
    },
    {
      "affiliation": "Beijing University of Posts and Telecommunications",
      "articleRefs": [
        {
          "pageNumber": 358,
          "articleName": "Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nkFZGabFmQT9XjbZsafGM/6RhqzwQooNR2K4lpXABN0Z.pdf"
        },
        {
          "pageNumber": 386,
          "articleName": "Poster: USE: Unified and Split Execution for Exposing Divergences between Versions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6LPcye0HvDGcTC8pmjMow0/53CrwfyS24ctiDhG2v3XKZ.pdf"
        }
      ]
    },
    {
      "affiliation": "Ben-Gurion University of the Negev",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Software Engineering Lab - an Essential Component of a Software Engineering Curriculum",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ptyke5Ujj8onvnHjCVVPG/6rVK664qnM9Emso3vbuo0M.pdf"
        }
      ]
    },
    {
      "affiliation": "Ben Gurion University of the Negev",
      "articleRefs": [
        {
          "pageNumber": 149,
          "articleName": "Poster: Are Our Students Engaged in Their Studies? Professional Engagement vs. Study Engagement",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5xtA0uJd6thgqgqjjCW6bY/ywTO3ZzLDFUoUS3EoFZcD.pdf"
        }
      ]
    },
    {
      "affiliation": "Bilkent University and Havelsan",
      "articleRefs": [
        {
          "pageNumber": 68,
          "articleName": "Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/49j2HKsc7xCbCMCQBewE5d/6YasTauDw1E3JGL4Jft3He.pdf"
        }
      ]
    },
    {
      "affiliation": "Bitergia",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Perceval: Software Project Data at Your Will",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/74BfjuU7YgEDIGvOyOw2jn/3kyGXInAHq50ArWx3rxuYp.pdf"
        }
      ]
    },
    {
      "affiliation": "BlackBerry",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3cdPpSbZHTPdKRDJmYqHi5/14bRIwemub5Z9iDjUUa7uz.pdf"
        }
      ]
    },
    {
      "affiliation": "Blekinge Institue of Technology",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "affiliation": "Blekinge Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "affiliation": "BMW Group",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "affiliation": "Bordeaux Institute of Technology / Inria",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Assistive Computing: A Human-Centered Approach to Developing Computing Support for Cognition",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/51dPudqO9FxekQWC0DEXSE/2nwQwvhyFdHxu4mt2lRkC3.pdf"
        }
      ]
    },
    {
      "affiliation": "Boston University",
      "articleRefs": [
        {
          "pageNumber": 310,
          "articleName": "Poster: Incremental UML for Agile Development with PREXEL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/67nL4n4nFlAVswPrj0c9Rp/4pVEMTRsBYCVepnOlHjnER.pdf"
        }
      ]
    },
    {
      "affiliation": "Bournemouth University",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "Redesigning an Undergraduate Software Engineering Course for a Large Cohort",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3g39cLGpyUxZGisjnexmtX/Il0Xh2Abc6hhUNSv1d32N.pdf"
        }
      ]
    },
    {
      "affiliation": "Bowling Green State University",
      "articleRefs": [
        {
          "pageNumber": 202,
          "articleName": "Poster: Using Consensus to Automatically Infer Post-conditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NFYtBAksKon0AZDQ3kNzF/7glFe6P53311LKbIKeoEJy.pdf"
        },
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "affiliation": "Brooklyn College",
      "articleRefs": [
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "affiliation": "Brunel University London",
      "articleRefs": [
        {
          "pageNumber": 73,
          "articleName": "Replication Studies Considered Harmful",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4fllez1Ua1MOYwjGmK5ZM2/3T97HCGwX1OLqQdgf9iabB.pdf"
        },
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        },
        {
          "pageNumber": 325,
          "articleName": "Poster: Bridging Effort-Aware Prediction and Strong Classification - A Just-in-Time Software Defect Prediction Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W55obxh9gzemjqfGcWAPj/3f132O9xPg1LX5ixGPIYgu.pdf"
        },
        {
          "pageNumber": 432,
          "articleName": "[Journal First] An Empirical Study on the Interplay Between Semantic Coupling and Co-change of Software Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4daDPdF3SLwTXzMDDUsn1K/6WppK0TRL3zRRr0ITDSe93.pdf"
        }
      ]
    },
    {
      "affiliation": "California State University Long Beach",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "affiliation": "CampusLab GmbH",
      "articleRefs": [
        {
          "pageNumber": 159,
          "articleName": "Poster: Situation-Based E-Learning in Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf"
        }
      ]
    },
    {
      "affiliation": "Cancer Registry of Norway",
      "articleRefs": [
        {
          "pageNumber": 1243,
          "articleName": "[Journal First] Automated Refactoring of OCL Constraints with Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7cJGdYhKy3K17vTHSANryU/39zsgbNVg02BjEkeFH5d3S.pdf"
        }
      ]
    },
    {
      "affiliation": "Carleton University",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        },
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    },
    {
      "affiliation": "Carnegie Mellon University",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf"
        },
        {
          "pageNumber": 68,
          "articleName": "Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/49j2HKsc7xCbCMCQBewE5d/6YasTauDw1E3JGL4Jft3He.pdf"
        },
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        },
        {
          "pageNumber": 151,
          "articleName": "Static Automated Program Repair for Heap Properties",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6sdxYBhIZyy7FLj3rFRYpg/7ojSy3fH9UYidjrpNK6WGQ.pdf"
        },
        {
          "pageNumber": 163,
          "articleName": "[Journal First] Overfitting in Semantics-Based Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1iEz1Hydy2R6aGChkPt4yK/3zxjPwJpOMkItKVxLAR3pj.pdf"
        },
        {
          "pageNumber": 179,
          "articleName": "Poster: Forks Insight: Providing an Overview of GitHub Forks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46AuTosEz8iCsma4CNsxzU/6odbstLJrrnGif0gY2Ryfu.pdf"
        },
        {
          "pageNumber": 191,
          "articleName": "A Study of the Organizational Dynamics of Software Teams",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5gNECKysiAKSNV7IxUGaay/2VTsVJPZtHSofCGoLJHNhU.pdf"
        },
        {
          "pageNumber": 276,
          "articleName": "Robustness Testing of Autonomy Software",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/42IAEdbx40Pusm5f8tirYU/3eS4qS3mmsyJYoo5L77JVj.pdf"
        },
        {
          "pageNumber": 388,
          "articleName": "Poster: Learning to Mine Parallel Natural Language/Source Code Corpora from Stack Overflow",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1iZMJRxsjJaTnjtXZEm8ji/3B4yjZqOJryCSNTmEBfRma.pdf"
        },
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        },
        {
          "pageNumber": 446,
          "articleName": "Poster: BugZoo – A Platform for Studying Software Bugs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45zwa1bRIOh1A6fI6pqtjD/6r2CoIFj6WjZXHtWAgT3hP.pdf"
        },
        {
          "pageNumber": 511,
          "articleName": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5zZif4Y9gORqhqO7eKhhoZ/2NGpYIgnByWOIFiwUyBUr0.pdf"
        },
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "affiliation": "Carnegie Mellon University CyLab and NASA Ames",
      "articleRefs": [
        {
          "pageNumber": 339,
          "articleName": "Poster: Automated Program Repair with Canonical Constraints",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5HuJ0DRe1lVP5flrt0olas/cYoM2zEz7jQb9DOHiHPMV.pdf"
        }
      ]
    },
    {
      "affiliation": "Case Western Reserve University",
      "articleRefs": [
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        }
      ]
    },
    {
      "affiliation": "CEA",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        }
      ]
    },
    {
      "affiliation": "Central South University",
      "articleRefs": [
        {
          "pageNumber": 141,
          "articleName": "Poster: Continuous Inspection in the Classroom: Improving Students' Programming Quality with Social Coding Methods",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6UKNljf5nlt1ncD2ve9GH6/3WwTc5xDdJ3iD9BZuxAakg.pdf"
        }
      ]
    },
    {
      "affiliation": "CESAR School",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Poster: PBL Planner Toolkit: A Canvas-Based Tool for Planning PBL in Software Engineering Education",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/15IAOS4OM0MqkTTIVni2qx/6QEzzL7DSYKJYAOVdmf40C.pdf"
        }
      ]
    },
    {
      "affiliation": "CES Lab",
      "articleRefs": [
        {
          "pageNumber": 398,
          "articleName": "Poster: Towards a Formal API Assessment",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4EuktLE7DiRjvzvyG7KuGH/1qqZgquooeCI3zSxGd3tTx.pdf"
        }
      ]
    },
    {
      "affiliation": "CETIC Research Centre",
      "articleRefs": [
        {
          "pageNumber": 213,
          "articleName": "Helping SMEs to Better Develop Software: Experience Report and Challenges Ahead",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1JYfRO9gh0Ithz1d8uyMA1/4ygQwC2bMpXDfZhyLo60s3.pdf"
        }
      ]
    },
    {
      "affiliation": "Chalmers ",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Generative Secure Design, Defined",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/28Ti47g1XoQkNrxFNkwOEO/6D4SveoetTi1fAdD6ku27b.pdf"
        },
        {
          "pageNumber": 126,
          "articleName": "Providing a Baseline in Software Process Improvement Education with Lego Scrum Simulations",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/53i20BMExum14PymS4u5O6/6mZV0bO3jDs6KpRTVHgpFw.pdf"
        },
        {
          "pageNumber": 434,
          "articleName": "Poster: Property Specification Patterns for Robotic Missions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf"
        },
        {
          "pageNumber": 438,
          "articleName": "Poster: Towards Multi-robot Applications Planning Under Uncertainty",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5OMIq2Xre09PiJrZEN6sZ1/1qIbZQKf2SutDZRTgOpDaJ.pdf"
        }
      ]
    },
    {
      "affiliation": "Chalmers and University of Gothenburg",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "affiliation": "Chalmers and University of Gothenburg Sweden",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "affiliation": "Chalmers University of Gothenburg",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "affiliation": "Chalmers University of Technology",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        }
      ]
    },
    {
      "affiliation": "Change Vision",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "affiliation": "Chapman University",
      "articleRefs": [
        {
          "pageNumber": 183,
          "articleName": "Poster: A Topic Analysis of the R Programming Language",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1IScUalIjq4PRsTasjpyXq/4BVxrY4kh8HL5rzwHFHlKR.pdf"
        }
      ]
    },
    {
      "affiliation": "Chiang Mai University",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "affiliation": "Chieftin Lab",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "ReGuard: Finding Reentrancy Bugs in Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dFTki9Ml83quzEQotDNy1/3g3bfAaS3Z85gdgD6MnCrF.pdf"
        }
      ]
    },
    {
      "affiliation": "Chillarege",
      "articleRefs": [
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        }
      ]
    },
    {
      "affiliation": "Chinese Academy of Sciences",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        }
      ]
    },
    {
      "affiliation": "Chongqing University",
      "articleRefs": [
        {
          "pageNumber": 319,
          "articleName": "Poster: A Recommender System for Developer Onboarding",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6v6lwqxrCTDmoe8tmGqzBa/27FhEqUbQa1fXoWqFqHZHl.pdf"
        }
      ]
    },
    {
      "affiliation": "Chung-Ang Univ.",
      "articleRefs": [
        {
          "pageNumber": 191,
          "articleName": "Poster: A Novel Shared Memory Framework for Distributed Deep Learning in High-Performance Computing Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4GBiV7oWzIbIvJix13pn3z/7quQVnDh9et2QZuKi3KF8X.pdf"
        }
      ]
    },
    {
      "affiliation": "Chung-Ang University",
      "articleRefs": [
        {
          "pageNumber": 185,
          "articleName": "Poster: Architecture Reconstruction and Evaluation of Blockchain Open Source Platform",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7owgOp2OxfZOt1X2gaHw4F/3vdTLCMmVDAMW0YWJP11fk.pdf"
        }
      ]
    },
    {
      "affiliation": "CIn-UFPE",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Poster: PBL Planner Toolkit: A Canvas-Based Tool for Planning PBL in Software Engineering Education",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/15IAOS4OM0MqkTTIVni2qx/6QEzzL7DSYKJYAOVdmf40C.pdf"
        }
      ]
    },
    {
      "affiliation": "Cisco Systems",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Practical Selective Regression Testing with Effective Redundancy in Interleaved Tests",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5pilYClpXUQa77Kg5Y9986/5aQxPj9Migxn3tGsUQVA7h.pdf"
        }
      ]
    },
    {
      "affiliation": "City University of Hong Kong",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "affiliation": "City University of New York",
      "articleRefs": [
        {
          "pageNumber": 206,
          "articleName": "Poster: Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7MLLCasUAOaMfVBTbfYztV/3klSThcA5OaZugEDIiq481.pdf"
        }
      ]
    },
    {
      "affiliation": "CNR-IASI",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        }
      ]
    },
    {
      "affiliation": "CNR-ISTI",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        },
        {
          "pageNumber": 536,
          "articleName": "Natural Language Requirements Processing: From Research to Practice",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45ZhVVW7fESrCGLd7YOZQq/4SzwhsqsO7Je02vin728Ca.pdf"
        }
      ]
    },
    {
      "affiliation": "College of William & Mary",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 165,
          "articleName": "Automated Reporting of GUI Design Violations for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73vOGjBkf23NHodSgD3DR2/1OWvuIr0ODMO3SiUdEDKEV.pdf"
        }
      ]
    },
    {
      "affiliation": "Colorado State University",
      "articleRefs": [
        {
          "pageNumber": 530,
          "articleName": "Automatic Software Summarization: The State of the Art",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54CdjHMEEvZOX7240tsnI0/pD8iZ5Q7JF5mIlQD0vxUc.pdf"
        }
      ]
    },
    {
      "affiliation": "Columbia University",
      "articleRefs": [
        {
          "pageNumber": 303,
          "articleName": "DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1l8C5zVwRhRYyqHFTOoOUf/7FmCxsCu5eXKr4EvBf6BPz.pdf"
        }
      ]
    },
    {
      "affiliation": "Combitech AB",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "Concordia University",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3cdPpSbZHTPdKRDJmYqHi5/14bRIwemub5Z9iDjUUa7uz.pdf"
        },
        {
          "pageNumber": 9,
          "articleName": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/18twSkKM4nZSiq4Z1PnB2P/5eXj8AdFfloU2dchJUeYi9.pdf"
        },
        {
          "pageNumber": 483,
          "articleName": "Accurate and Efficient Refactoring Detection in Commit History",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf"
        },
        {
          "pageNumber": 822,
          "articleName": "[Journal First] Empirical Study on the Discrepancy Between Performance Testing Results from Virtual and Physical Environments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5dzewdYm8fckCzQjpRCjmg/7gDFgjNlZ9YHeIL4bQ4bMr.pdf"
        },
        {
          "pageNumber": 884,
          "articleName": "[Journal First] Understanding the Factors for Fast Answers in Technical Q&A Websites: An Empirical Study of Four Stack Exchange Websites",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gXwmxc37m3Zs7S7KAHn9L/15wH8DdvqszwuqgTZmAuHG.pdf"
        }
      ]
    },
    {
      "affiliation": "CQSE GmbH",
      "articleRefs": [
        {
          "pageNumber": 390,
          "articleName": "Poster: Identification of Methods with Low Fault Risk",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JGgODCZWzCpd0zz1oZSYU/2SjNf69oXbXjcLDFxghEKS.pdf"
        }
      ]
    },
    {
      "affiliation": "CSIRO/Data61",
      "articleRefs": [
        {
          "pageNumber": 195,
          "articleName": "Poster: Live Path Control Flow Integrity",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/66rLvMbNUR2ntPLR7czmnx/5iReip9NsLrMgb7VJztdM8.pdf"
        }
      ]
    },
    {
      "affiliation": "Daimler AG",
      "articleRefs": [
        {
          "pageNumber": 131,
          "articleName": "Poster: Challenges with Automotive Test Case Specifications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/22HRkItZGtp9E0KerKRG6U/55RByn2pvzw3VEvvRElf7v.pdf"
        }
      ]
    },
    {
      "affiliation": "Dalian University of Technology",
      "articleRefs": [
        {
          "pageNumber": 71,
          "articleName": "Automated Localization for Unreproducible Builds",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Uo99XzE0k6LQDG79lezQk/4lDBvklakctIQ6sXpUiVcn.pdf"
        },
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "affiliation": "Danfoss",
      "articleRefs": [
        {
          "pageNumber": 444,
          "articleName": "Poster: Answering the Requirements Traceability Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54xELw09vUNSoYFjh1AziH/3vdJIWxnVZhNTP9QUA8bWD.pdf"
        }
      ]
    },
    {
      "affiliation": "Data61",
      "articleRefs": [
        {
          "pageNumber": 254,
          "articleName": "Improving the Definition of Software Development Projects Through Design Thinking Led Collaboration Workshops",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5ElL7JQ9jCBuLjbXyimkHW/4vWLTNPc3nHqNgUzRDRnV3.pdf"
        },
        {
          "pageNumber": 327,
          "articleName": "Spatio-Temporal Context Reduction: A Pointer-Analysis-Based Static Approach for Detecting Use-After-Free Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BH1zWphsTffq4XQps07wg/5yHiAA3ajLarfEkXKmgne7.pdf"
        }
      ]
    },
    {
      "affiliation": "Deakin University",
      "articleRefs": [
        {
          "pageNumber": 53,
          "articleName": "Explainable Software Analytics",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/18qTr6yU8gmdGlxPJwuabL/5riZmj2mdJZSyRCz4NRyUd.pdf"
        },
        {
          "pageNumber": 244,
          "articleName": "Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ADZq6g5I1eGULqO75ycZf/647J63rx8sUzey01F0TAFE.pdf"
        }
      ]
    },
    {
      "affiliation": "Delft University of Technology",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "An Exploratory Study on Faults inWeb API Integration in a Large-Scale Payment Company",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5SLpOxrOC7MRElPGBMwNp4/5cFXN3dt0iFNy5h7oQMqXT.pdf"
        },
        {
          "pageNumber": 21,
          "articleName": "Enabling Real-Time Feedback in Software Engineering",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf"
        },
        {
          "pageNumber": 101,
          "articleName": "Software Ecosystem Call Graph for Dependency Management",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/199DSNOuJy8dk5Lo1tps7o/4uO2C4sysYHwbKheBX1IQH.pdf"
        },
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        },
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        },
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        },
        {
          "pageNumber": 503,
          "articleName": "Toward an Empirical Theory of Feedback-Driven Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6QgvimQvGSMHm543W6rBya/4hYF4BqDuA3HHAL8O9GmGV.pdf"
        },
        {
          "pageNumber": 540,
          "articleName": "How to Analyze Git Repositories with Command Line Tools: We're not in Kansas Anymore",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ez2GftNEYDvJXCwDk6umC/5YKnoCvwDQQN7mGMEmps6W.pdf"
        },
        {
          "pageNumber": 542,
          "articleName": "Big Data Software Analytics with Apache Spark",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Pq1pHhWkuE8B9vxwVjvDS/2EQ0kQL1MCbGUXNIsabNTG.pdf"
        },
        {
          "pageNumber": 561,
          "articleName": "Understanding Developers' Needs on Deprecation as a Language Feature",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2P1QIz0vZHnpdIEQ9etDfn/70WC3YCsckq6uPXtWKXnDs.pdf"
        },
        {
          "pageNumber": 572,
          "articleName": "On the Dichotomy of Debugging Behavior Among Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/xP54rozvutqKTsorAW4JU/7Y1r5jMBEpcFZDC2Ip9iV.pdf"
        },
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        },
        {
          "pageNumber": 752,
          "articleName": "Debugging Data Flows in Reactive Programs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/26QEHcXcpHFGmR9nd5fSPW/57Rpui1pbPGVNJ0KqbEOcB.pdf"
        },
        {
          "pageNumber": 1220,
          "articleName": "Search-Based Test Data Generation for SQL Queries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4B2Db8L4U7DekUw6RJzAuW/3TzsZt8feqd0zTtvlqNrZD.pdf"
        }
      ]
    },
    {
      "affiliation": "Delft University of Technology / Software Improvement Group",
      "articleRefs": [
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        }
      ]
    },
    {
      "affiliation": "Department of Electrical and Computer Engineering",
      "articleRefs": [
        {
          "pageNumber": 69,
          "articleName": "Weak-Assert: A Weakness-Oriented Assertion Recommendation Toolkit for Program Analysis",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6wHKrC9nn3wmYB20hFTiuW/5Tl0zuxP7CFvCY4qWXe0ge.pdf"
        }
      ]
    },
    {
      "affiliation": "Devoteam A/S",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "affiliation": "DISI",
      "articleRefs": [
        {
          "pageNumber": 157,
          "articleName": "Poster: A Conceptual Model for Cooperative Thinking",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/43kOeXPEu4QHTUCpTW99fs/2Ey35xhO4B5q4gXBlj7ifp.pdf"
        }
      ]
    },
    {
      "affiliation": "DISTek Integration",
      "articleRefs": [
        {
          "pageNumber": 910,
          "articleName": "A Combinatorial Approach for Exposing Off-Nominal Behaviors",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1niPYcBs9KMjWLu6UZNJfB/2u0THsBx1px4D7wndMcz96.pdf"
        }
      ]
    },
    {
      "affiliation": "Dpto. de Ingeniería Informática",
      "articleRefs": [
        {
          "pageNumber": 232,
          "articleName": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf"
        }
      ]
    },
    {
      "affiliation": "Dpto. de Ingeniería Informática y Cs. de la Computación",
      "articleRefs": [
        {
          "pageNumber": 232,
          "articleName": "Poster: Adoption of the Visual Brainstorming Technique in the Open Source Software Development Process",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Vq5ay7AbqxuicHokI4iud/35J1WLDWxMD3mVZ8Zvaet6.pdf"
        }
      ]
    },
    {
      "affiliation": "Drexel University",
      "articleRefs": [
        {
          "pageNumber": 356,
          "articleName": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf"
        }
      ]
    },
    {
      "affiliation": "East China Normal University",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        },
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        }
      ]
    },
    {
      "affiliation": "East China University of Science and Technology",
      "articleRefs": [
        {
          "pageNumber": 1027,
          "articleName": "To Preserve or Not to Preserve Invalid Solutions in Search-Based Software Engineering: A Case Study in Software Product Lines",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eLhDKSnOjZaBnTjUD3mLd/4zL0DqW0XJoJyYVopX6pxS.pdf"
        }
      ]
    },
    {
      "affiliation": "Edge Hill University",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "[Journal First] An Empirical Study on the Interplay Between Semantic Coupling and Co-change of Software Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4daDPdF3SLwTXzMDDUsn1K/6WppK0TRL3zRRr0ITDSe93.pdf"
        }
      ]
    },
    {
      "affiliation": "Eindhoven University of Technology",
      "articleRefs": [
        {
          "pageNumber": 234,
          "articleName": "Poster: A General Framework to Detect Behavioral Design Patterns",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CjHMRsDPvdBv98cJPU652/4D0D7LcRdgrFg9kjvsA6lG.pdf"
        },
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        }
      ]
    },
    {
      "affiliation": "Electronics and Telecommunications Research Institute",
      "articleRefs": [
        {
          "pageNumber": 185,
          "articleName": "Poster: Architecture Reconstruction and Evaluation of Blockchain Open Source Platform",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7owgOp2OxfZOt1X2gaHw4F/3vdTLCMmVDAMW0YWJP11fk.pdf"
        }
      ]
    },
    {
      "affiliation": "EnSoft Corp",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "COMB: Computing Relevant Program Behaviors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf"
        }
      ]
    },
    {
      "affiliation": "Eötvös Loránd University",
      "articleRefs": [
        {
          "pageNumber": 428,
          "articleName": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf"
        }
      ]
    },
    {
      "affiliation": "ergon Informatik AG",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "affiliation": "Ericsson Ltd.",
      "articleRefs": [
        {
          "pageNumber": 428,
          "articleName": "Poster: Implementation and Evaluation of Cross Translation Unit Symbolic Execution for C Family Languages",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5gQUjXvvd6tINL4N0FCvTK/1iGs3qP5HloEBRU2soT9S6.pdf"
        }
      ]
    },
    {
      "affiliation": "e-Seikatsu Co.",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "affiliation": "Faculty of Informatics",
      "articleRefs": [
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        }
      ]
    },
    {
      "affiliation": "Faculty of Information Technology",
      "articleRefs": [
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "affiliation": "Fault Tolerant Systems Research Group",
      "articleRefs": [
        {
          "pageNumber": 113,
          "articleName": "The Gamma Statechart Composition Framework: Design, Verification and Code Generation for Component-Based Reactive Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2oUedkh05E6LoFEamVXTkw/20ZzJFufxJ3lFczmyQR7IW.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Alagoas",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Bahia",
      "articleRefs": [
        {
          "pageNumber": 500,
          "articleName": "VarXplorer: Reasoning About Feature Interactions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IEIAqCPJEDZTj1hipt8Hg/bO9BZd0LDQfVqKQs9J25A.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Pará",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Almost There: A Study on Quasi-Contributors in Open-Source Software Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1yorvAqsWddHbVWuLi4YZy/6NexNkxSmHQvVZ35CgSXP3.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Pará - Brazil",
      "articleRefs": [
        {
          "pageNumber": 137,
          "articleName": "Poster: A Methodology to Teaching Statistical Process Control for Software Engineers",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5Fxhj66zTRNy8m928UTJtO/trNe4al0qmo7aqHS6SsSt.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Pernambuco",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Rio de Janeiro",
      "articleRefs": [
        {
          "pageNumber": 1194,
          "articleName": "[Journal First] Challenges and Pitfalls on Surveying Evidence in the Software Engineering Technical Literature: An Exploratory Study with Novices",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eOAQt0CIgL4F5n3HwADCt/4duvB0d69UshSNJsqlMUII.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Rio Grande do Norte",
      "articleRefs": [
        {
          "pageNumber": 125,
          "articleName": "Poster: Reengineering Legacy Systems for Supporting SOA: A Case Study on the Brazilian's Secretary of State for Taxation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6ognbNidqaqq0BBZW0gaoA/7t0eGLrdUTUA7WH1OAYAfE.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Santa Catarina",
      "articleRefs": [
        {
          "pageNumber": 418,
          "articleName": "Poster: A Systematic Literature Review to Support the Selection of User Acceptance Testing Techniques",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/28621IjsF5CqlbNGEX1dtM/XW3rQylLODA98aqhrpwRp.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal University of Technology",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Almost There: A Study on Quasi-Contributors in Open-Source Software Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1yorvAqsWddHbVWuLi4YZy/6NexNkxSmHQvVZ35CgSXP3.pdf"
        }
      ]
    },
    {
      "affiliation": "Federal Univesity of Pernambuco",
      "articleRefs": [
        {
          "pageNumber": 82,
          "articleName": "Enlightened Debugging",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bH8PUknAyuN3l7zJfadY4/5cLNTz1LRtfwrJOW6Zf3Z.pdf"
        }
      ]
    },
    {
      "affiliation": "FEV Europe GmbH",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        }
      ]
    },
    {
      "affiliation": "FHNW",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "affiliation": "Findwise AB",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "Fraunhofer IEM",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        }
      ]
    },
    {
      "affiliation": "Fraunhofer Institute IESE",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "affiliation": "Free University of Bozen-Bolzano",
      "articleRefs": [
        {
          "pageNumber": 88,
          "articleName": "Improving Integrated Development Environment Commands Knowledge With Recommender Systems",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2vph05WQ3iK9VFCt3gEw5E/2TSyFSTJYXkqwOxmSAyBve.pdf"
        },
        {
          "pageNumber": 1090,
          "articleName": "The Road to Live Programming: Insights from the Practice",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5kWabRxvKSbOrbfpQqtqMw/5X6aZ0m8fIIZBmOuIJogyI.pdf"
        },
        {
          "pageNumber": 1102,
          "articleName": "Assessing the Threat of Untracked Changes in Software Evolution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf"
        }
      ]
    },
    {
      "affiliation": "Fudan University",
      "articleRefs": [
        {
          "pageNumber": 323,
          "articleName": "Poster: Benchmarking Microservice Systems for Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4MPJujC2aLJ54VMGaEtm76/1tKujoNDTv8GyqnEt9T70J.pdf"
        },
        {
          "pageNumber": 811,
          "articleName": "Speedoo: Prioritizing Performance Optimization Opportunities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1n3EHZ69Ja5of7qLpXnL86/5IDS4UmAOw5scrzvbU1Gyb.pdf"
        }
      ]
    },
    {
      "affiliation": "Fujitsu Laboratories Ltd.",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "Elixir: An Automated Repair Tool for Java Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1uVaDsZ3LRs5lLyw2BLVOQ/2PKRfkKFJZy3RSZOpjabc2.pdf"
        }
      ]
    },
    {
      "affiliation": "Fujitsu Laboratories of America",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "Elixir: An Automated Repair Tool for Java Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1uVaDsZ3LRs5lLyw2BLVOQ/2PKRfkKFJZy3RSZOpjabc2.pdf"
        },
        {
          "pageNumber": 384,
          "articleName": "EnMobile: Entity-Based Characterization and Analysis of Mobile Malware",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Z7koA2jFooE8hHRKnmcU8/6vKkdMpZxRA1eH4TYnCsvA.pdf"
        }
      ]
    },
    {
      "affiliation": "Fujitsu Labs. of America",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "Poster: Testing Heap-Based Programs with Java StarFinder",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4rzKWBKexbqBTVf4cYq0W1/FEIdNYhXk5CVNrycd5Sf3.pdf"
        }
      ]
    },
    {
      "affiliation": "George Fox University",
      "articleRefs": [
        {
          "pageNumber": 886,
          "articleName": "Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eEvTc6qHbldivQpa5eYeD/5IW1xFsfcWW8UXnTSd983J.pdf"
        }
      ]
    },
    {
      "affiliation": "George Mason University",
      "articleRefs": [
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "affiliation": "Georgia Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 82,
          "articleName": "Enlightened Debugging",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bH8PUknAyuN3l7zJfadY4/5cLNTz1LRtfwrJOW6Zf3Z.pdf"
        },
        {
          "pageNumber": 384,
          "articleName": "Poster: Automated Test Migration for Mobile Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tal5Beeg8SDPTo3co0jm4/27yyURsFhJ5y7Rm3wTmCip.pdf"
        }
      ]
    },
    {
      "affiliation": "Google",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "State of Mutation Testing at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4sP3SrfWJU9Db3YuxsmuKI/1Erkod3XBaeGvsAAClBEqS.pdf"
        },
        {
          "pageNumber": 181,
          "articleName": "Modern Code Review: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf"
        },
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        },
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        },
        {
          "pageNumber": 643,
          "articleName": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf"
        }
      ]
    },
    {
      "affiliation": "Google Deepmind",
      "articleRefs": [
        {
          "pageNumber": 60,
          "articleName": "Neuro-Symbolic Program Corrector for Introductory Programming Assignments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3ff3TXG0zUEgira53neRYx/4vw21DgkSxUSQYWz4NjvaQ.pdf"
        }
      ]
    },
    {
      "affiliation": "GrammaTech",
      "articleRefs": [
        {
          "pageNumber": 313,
          "articleName": "Poster: An Algorithm and Tool to Infer Practical Postconditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5VIJZqURpbuELiOLsoX5gB/34qnQCM0ECnQSCfKKWDUUj.pdf"
        }
      ]
    },
    {
      "affiliation": "Grammatech Inc.",
      "articleRefs": [
        {
          "pageNumber": 338,
          "articleName": "Program Splicing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3GzvLDJDyvhGV814ZqQjMV/5PljSrUUNExRaRT9kY641T.pdf"
        }
      ]
    },
    {
      "affiliation": "Gran Sasso Science Institute",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf"
        }
      ]
    },
    {
      "affiliation": "Graz University of Technology",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "affiliation": "Guizhou University of Finance and Economics",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "Poster: QoS-Aware Service Composition Using Blockchain-Based Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/52LmPy7QbAM0aNeB9uYJC2/53SEGmGiNbgYAVNqtV672d.pdf"
        }
      ]
    },
    {
      "affiliation": "Gyeongsang National University",
      "articleRefs": [
        {
          "pageNumber": 187,
          "articleName": "Poster Agile Requirement Traceability Matrix",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3yzEh2WxTzA13GGeKsP7aB/1WEquoO9JMTTJeJVxqVgZv.pdf"
        }
      ]
    },
    {
      "affiliation": "Handong Global University",
      "articleRefs": [
        {
          "pageNumber": 315,
          "articleName": "Poster: Designing Bug Detection Rules for Fewer False Alarms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1UPJvjP8ppzant4gtBI7mS/6oFZLatXk1lynNL1b8OV0u.pdf"
        }
      ]
    },
    {
      "affiliation": "Harbin Engineering University",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "affiliation": "Harbin institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "affiliation": "Harz University and University of Magdeburg",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "affiliation": "Harz University & METOP GmbH",
      "articleRefs": [
        {
          "pageNumber": 300,
          "articleName": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf"
        }
      ]
    },
    {
      "affiliation": "Harz University of Applied Sciences; METOP GmbH",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        }
      ]
    },
    {
      "affiliation": "Harz University of Applied Sciences & METOP GmbH",
      "articleRefs": [
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        }
      ]
    },
    {
      "affiliation": "Harz University of Applied Sciences & Otto-von-Guericke-University",
      "articleRefs": [
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        }
      ]
    },
    {
      "affiliation": "Harz University of Applied Sciences; University of Magdeburg",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        }
      ]
    },
    {
      "affiliation": "Hasso-Plattner-Institut Potsdam",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "affiliation": "Havelsan",
      "articleRefs": [
        {
          "pageNumber": 68,
          "articleName": "Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/49j2HKsc7xCbCMCQBewE5d/6YasTauDw1E3JGL4Jft3He.pdf"
        }
      ]
    },
    {
      "affiliation": "Hebei GEO University",
      "articleRefs": [
        {
          "pageNumber": 260,
          "articleName": "Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3KOAs6b5Ao6dTf4nrU5Z2R/4wShlhH4Ml9nJbkkAnMNpN.pdf"
        }
      ]
    },
    {
      "affiliation": "Heidelberg University",
      "articleRefs": [
        {
          "pageNumber": 410,
          "articleName": "Poster: Memory and Resource Leak Defects in Java Projects: An Empirical Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2f9wrt7uGagtPEL8BMtuH/6fG2npcpWprcKQHHzpzUwr.pdf"
        }
      ]
    },
    {
      "affiliation": "Heinz Nixdorf Institute at Paderborn University & Fraunhofer Institute for Mechatronic Systems Design (IEM)",
      "articleRefs": [
        {
          "pageNumber": 550,
          "articleName": "State of the Systems Security",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16NkHqyJbfZD6kRjwn0A0P/2F2WQynAsV39OuGf2ZOphJ.pdf"
        }
      ]
    },
    {
      "affiliation": "HKUST",
      "articleRefs": [
        {
          "pageNumber": 252,
          "articleName": "Poster: A Novel Variable-centric Fault Localization Technique",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1lBIthnFpQH61GQVNJyHdj/3ze3yC49yx3JeWx3QFXzVr.pdf"
        }
      ]
    },
    {
      "affiliation": "Hochschule Osnabrück",
      "articleRefs": [
        {
          "pageNumber": 292,
          "articleName": "Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1AkIwFloW3mkZDApKaVABX/7lyga27SMIeaITaprTqTOu.pdf"
        }
      ]
    },
    {
      "affiliation": "Hong Kong University of Science and Technology",
      "articleRefs": [
        {
          "pageNumber": 266,
          "articleName": "Poster: Synthesizing Relation-Aware Entity Transformation by Examples",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jhHsbkhRZs3nE4hHEzkaf/1kHwgntPO8MQi7UlkHcfEU.pdf"
        }
      ]
    },
    {
      "affiliation": "Hosei University",
      "articleRefs": [
        {
          "pageNumber": 230,
          "articleName": "Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/X0glNBWe9bFHLqk18sHr8/3C06tjBbRFMPTLiNNoEii.pdf"
        }
      ]
    },
    {
      "affiliation": "htw saar",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Multi-view Editing of Software Product Lines with PEoPL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4Evo9cd4Hv9giBtxzGEBNJ/5ma1FCoHm59NYF3REvckHD.pdf"
        }
      ]
    },
    {
      "affiliation": "Humboldt-University of Berlin",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "ReVision: A Tool for History-Based Model Repair Recommendations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3OBcOwPcuVek9zxGKch3pF/2buxI8VlbB6qYkDaPC7Ly2.pdf"
        }
      ]
    },
    {
      "affiliation": "Humboldt University of Berlin",
      "articleRefs": [
        {
          "pageNumber": 129,
          "articleName": "Semantic Program Repair Using a Reference Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2ndg0exc1x8lxEFXhKm0g0/1N19faKQEkIWF1UTM7JlA4.pdf"
        }
      ]
    },
    {
      "affiliation": "Husqvarna AB",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "IBM",
      "articleRefs": [
        {
          "pageNumber": 144,
          "articleName": "Proactive and Pervasive Combinatorial Testing",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf"
        }
      ]
    },
    {
      "affiliation": "IBM Corp.",
      "articleRefs": [
        {
          "pageNumber": 306,
          "articleName": "What is the Connection Between Issues, Bugs, and Enhancements?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf"
        }
      ]
    },
    {
      "affiliation": "IBM Corp",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/mM2flyVIs1e0wGU98L8VQ/xU4OW2h5F9cUBJIgIMkYY.pdf"
        }
      ]
    },
    {
      "affiliation": "IBM Research",
      "articleRefs": [
        {
          "pageNumber": 144,
          "articleName": "Proactive and Pervasive Combinatorial Testing",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7IK3WDl2yFABYik3v0cTWj/2DOssrlqJOl55pLCMJ6hMR.pdf"
        },
        {
          "pageNumber": 258,
          "articleName": "Poster: Automatically Solving NP-Complete Problems on a Quantum Computer",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Cjz29SFL9KIkUGCi9NXdB/4KuMecZrQh8gLcNjWrZf9w.pdf"
        }
      ]
    },
    {
      "affiliation": "ICREA - UOC",
      "articleRefs": [
        {
          "pageNumber": 3,
          "articleName": "The Role of Foundations in Open Source Projects",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2Fs3L1M4Mm9GxjWCBfpSEU/5dCgP0GVMp8vJhDp3AxQXq.pdf"
        }
      ]
    },
    {
      "affiliation": "ICTT and ISN Laboratory",
      "articleRefs": [
        {
          "pageNumber": 859,
          "articleName": "RFC-Directed Differential Testing of Certificate Validation in SSL/TLS Implementations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/15kHg7CwgytsDlnTv3z6u2/ZUw4RKFVhfsc0Bb1AsNmQ.pdf"
        }
      ]
    },
    {
      "affiliation": "IEE S.A.",
      "articleRefs": [
        {
          "pageNumber": 1016,
          "articleName": "Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/VwB38GE70VKZwyWn3vYpD/2vNhnZhaJwrULtleN0eIAX.pdf"
        }
      ]
    },
    {
      "affiliation": "IIIT-Hyderabad",
      "articleRefs": [
        {
          "pageNumber": 165,
          "articleName": "Poster: LWE: LDA Refined Word Embeddings for Duplicate Bug Report Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5lV7ZnvLFHqlOrp4Wm0luY/2l08CDTfwQAZGb7v4j5WuX.pdf"
        },
        {
          "pageNumber": 193,
          "articleName": "Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46PCpEiqqzcfuFKFQ071QK/704dXR6jLVH4adAgbPP2i8.pdf"
        }
      ]
    },
    {
      "affiliation": "IIT Guwahati",
      "articleRefs": [
        {
          "pageNumber": 175,
          "articleName": "Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6aRyn8avZSYSSHnfRPc9Q4/15RozMp8Mi2r6JDsctFnqA.pdf"
        }
      ]
    },
    {
      "affiliation": "IIT Kanpur",
      "articleRefs": [
        {
          "pageNumber": 78,
          "articleName": "Compilation Error Repair: For the Student Programs, From the Student Programs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf"
        }
      ]
    },
    {
      "affiliation": "Imperial College London",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        },
        {
          "pageNumber": 21,
          "articleName": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf"
        },
        {
          "pageNumber": 105,
          "articleName": "Echoes from Space: Grouping Commands with Large-Scale Telemetry Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/36OHYwbesYzyrqceW0zbds/6lTJGOwEkmMFQO8CFju22q.pdf"
        },
        {
          "pageNumber": 350,
          "articleName": "Chopped Symbolic Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4dB4MqN33HWSe06nX7cqo8/4A2sy5Nn535KnCMdVFvrXE.pdf"
        },
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        },
        {
          "pageNumber": 1137,
          "articleName": "A Static Verification Framework for Message Passing in Go Using Behavioural Types",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4qni3QmfOZ1L9eUK9sVGyf/OgbS6Mp1QczsiyDiedExx.pdf"
        }
      ]
    },
    {
      "affiliation": "IMT Business School",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2GtTmXlTVQhcRkpEo1qoQM/3BK0YgK2oP3ZJ3spCM5BS8.pdf"
        }
      ]
    },
    {
      "affiliation": "IMT School for Advanced Studies",
      "articleRefs": [
        {
          "pageNumber": 101,
          "articleName": "CyPhEF: A Model-Driven Engineering Framework for Self-Adaptive Cyber-Physical Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1gNLLFWWKWZtApQjwZyuuj/2HAORC6UYaMnwzI2dA35YZ.pdf"
        }
      ]
    },
    {
      "affiliation": "Independent Researcher",
      "articleRefs": [
        {
          "pageNumber": 632,
          "articleName": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf"
        }
      ]
    },
    {
      "affiliation": "Innopolis University",
      "articleRefs": [
        {
          "pageNumber": 24,
          "articleName": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf"
        },
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        },
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        },
        {
          "pageNumber": 129,
          "articleName": "Poster: An Initial Characterization of Bug-Injecting Development Sessions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7nrXDes1AE17dN1F7CYJII/3tpIHuPtxoFOTTsXewXvBN.pdf"
        },
        {
          "pageNumber": 402,
          "articleName": "Poster: Precooked Developer Dashboards: What to Show and How to Use",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2YzSMhy4hX7dROj5nXlVAm/3cgnIym26ZtWGwA6sgvoZK.pdf"
        }
      ]
    },
    {
      "affiliation": "Inria Nord-Europe",
      "articleRefs": [
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "affiliation": "Inria Rennes Bretage Atlantique",
      "articleRefs": [
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "affiliation": "Institute of Software",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "affiliation": "Instituto Tecnológico de Buenos Aires and CONICET",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "affiliation": "Instituto Universitario the Lisboa (ISCTE-IUL)",
      "articleRefs": [
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "affiliation": "Intel Labs",
      "articleRefs": [
        {
          "pageNumber": 175,
          "articleName": "Poster: Automatic Detection of Inverse Operations while Avoiding Loop Unrolling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6aRyn8avZSYSSHnfRPc9Q4/15RozMp8Mi2r6JDsctFnqA.pdf"
        }
      ]
    },
    {
      "affiliation": "Interdisciplinary Centre for Security",
      "articleRefs": [
        {
          "pageNumber": 408,
          "articleName": "Poster: Predicting the Fault Revelation Utility of Mutants",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/42QsecgC6WhEpnjE0Q8yxp/3hghmlVpOkcbn1KqnwEInF.pdf"
        }
      ]
    },
    {
      "affiliation": "Iona College",
      "articleRefs": [
        {
          "pageNumber": 233,
          "articleName": "Towards Refactoring-Aware Regression Test Selection",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BrWrDMhElZLM98cH2EedZ/6wu4To3mrpKod0nsChTY6L.pdf"
        }
      ]
    },
    {
      "affiliation": "Iowa State University",
      "articleRefs": [
        {
          "pageNumber": 109,
          "articleName": "COMB: Computing Relevant Program Behaviors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5SZlAWdwfcV9YK5NJFvICX/5sxHTvf0dLNpB5VCFwjeDG.pdf"
        },
        {
          "pageNumber": 167,
          "articleName": "Poster: Inferring API Elements Relevant to an English Query",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CIUBvlM9QN4wbSsCln6t5/4d6HRtxvMOeaXOEvQrgOlj.pdf"
        },
        {
          "pageNumber": 313,
          "articleName": "Poster: An Algorithm and Tool to Infer Practical Postconditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5VIJZqURpbuELiOLsoX5gB/34qnQCM0ECnQSCfKKWDUUj.pdf"
        },
        {
          "pageNumber": 412,
          "articleName": "Poster: Hybrid Traversal: Efficient Source Code Analysis at Scale",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2NPcU40Nlwn2KbCodc68JA/7pV86Vfe0PMckYKjDeVlRT.pdf"
        },
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        },
        {
          "pageNumber": 544,
          "articleName": "Demystifying Cyber-Physical Malware",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6rR3Oss6Q3R6co8CGNWcxG/70SHos1HRvTtUahcJWu9r7.pdf"
        },
        {
          "pageNumber": 620,
          "articleName": "Collective Program Analysis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1YWeiRVFEvw8IOF1AlKGcG/4IZyDB4ZYAHK9x1p2oaznN.pdf"
        },
        {
          "pageNumber": 632,
          "articleName": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf"
        },
        {
          "pageNumber": 886,
          "articleName": "Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eEvTc6qHbldivQpa5eYeD/5IW1xFsfcWW8UXnTSd983J.pdf"
        }
      ]
    },
    {
      "affiliation": "IRIT",
      "articleRefs": [
        {
          "pageNumber": 368,
          "articleName": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf"
        }
      ]
    },
    {
      "affiliation": "IST",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Poster: A Qualitative Reasoning Approach to Spectrum-Based Fault Localization",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2h6LH9L5MS3wsT4Q4V1wAI/6erzsSt4H2Rd37rbKcp06x.pdf"
        }
      ]
    },
    {
      "affiliation": "Istanbul Technical University",
      "articleRefs": [
        {
          "pageNumber": 488,
          "articleName": "Assessing Personalized Software Defect Predictors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/56BI32EtiUjZ28AvsLjlR0/67ejFNZL10171eoNvzwVtG.pdf"
        }
      ]
    },
    {
      "affiliation": "ISTI - CNR",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "FAST Approaches to Scalable Similarity-Based Test Case Prioritization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1thIOn9Ue1Ue7i1RQRrCC9/64TtpGwzpiP3cFRy3Gc4qm.pdf"
        }
      ]
    },
    {
      "affiliation": "itemis AG",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Variant Management Solution for Large Scale Software Product Lines",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4J94vc6uZu9C5yPCTynFex/1z41fCXlOqEfSXyXWq6peW.pdf"
        }
      ]
    },
    {
      "affiliation": "IT University of Copenhagen",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        },
        {
          "pageNumber": 146,
          "articleName": "SIGSOFT Distinguished Paper - Barriers to Gender Diversity in Software Development Education: Actionable Insights from a Danish Case Study",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AJhTrUssN0WJPtCcbwJHK/6l3xdI8rwGcAb2T1oMgJnG.pdf"
        }
      ]
    },
    {
      "affiliation": "JAK",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "Jiangsu University",
      "articleRefs": [
        {
          "pageNumber": 246,
          "articleName": "Poster: An Experimental Analysis of Fault Detection Capabilities of Covering Array Constructors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1LPlzWg0tHBZcuzmWldSvI/1WM1Gk3gKbTdWVYozOBdR6.pdf"
        }
      ]
    },
    {
      "affiliation": "Jiangxi Normal University",
      "articleRefs": [
        {
          "pageNumber": 230,
          "articleName": "Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/X0glNBWe9bFHLqk18sHr8/3C06tjBbRFMPTLiNNoEii.pdf"
        }
      ]
    },
    {
      "affiliation": "Johannes Kepler Universität Linz",
      "articleRefs": [
        {
          "pageNumber": 298,
          "articleName": "Poster: An Automated and Instant Discovery of Concrete Repairs for Model Inconsistencies",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ZXDV27yXUaGfVABEbPh4W/6hS0Qqz6BFxUscbdXS9ZJC.pdf"
        }
      ]
    },
    {
      "affiliation": "Johannes Kepler University",
      "articleRefs": [
        {
          "pageNumber": 397,
          "articleName": "Does the Propagation of Artifact Changes Across Tasks Reflect Work Dependencies?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/k7JQInKioHiNAlLceXGcq/4Zizzu8Ywfs4vylMPr16Jt.pdf"
        }
      ]
    },
    {
      "affiliation": "Johannes Kepler University Linz",
      "articleRefs": [
        {
          "pageNumber": 298,
          "articleName": "Poster: An Automated and Instant Discovery of Concrete Repairs for Model Inconsistencies",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ZXDV27yXUaGfVABEbPh4W/6hS0Qqz6BFxUscbdXS9ZJC.pdf"
        }
      ]
    },
    {
      "affiliation": "KAIST",
      "articleRefs": [
        {
          "pageNumber": 191,
          "articleName": "Poster: A Novel Shared Memory Framework for Distributed Deep Learning in High-Performance Computing Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4GBiV7oWzIbIvJix13pn3z/7quQVnDh9et2QZuKi3KF8X.pdf"
        },
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        },
        {
          "pageNumber": 468,
          "articleName": "Prioritizing Browser Environments for Web Application Test Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1EX24cXorp3idnq1F0su6Q/7Mxb1ZK2acB4XRbw7iHpAC.pdf"
        }
      ]
    },
    {
      "affiliation": "KAIST & ETRI",
      "articleRefs": [
        {
          "pageNumber": 191,
          "articleName": "Poster: A Novel Shared Memory Framework for Distributed Deep Learning in High-Performance Computing Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4GBiV7oWzIbIvJix13pn3z/7quQVnDh9et2QZuKi3KF8X.pdf"
        }
      ]
    },
    {
      "affiliation": "Karlsruhe Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        },
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        },
        {
          "pageNumber": 436,
          "articleName": "Poster: Autotuning PostgreSQL: A Blueprint for Successful Autotuning of Real-World Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kXPYWE3EQc7SeJd3lthrV/5kU2UcOItB1UnYsqHiveS7.pdf"
        }
      ]
    },
    {
      "affiliation": "Katholieke Universiteit Leuven",
      "articleRefs": [
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "affiliation": "Keele University",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "[Journal First] Effect Sizes and their Variance for AB/BA Crossover Design Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2vbLjCzIIhv5QjDxqXRXg6/4cvS5U8l4xLwOmfEQoV3vI.pdf"
        }
      ]
    },
    {
      "affiliation": "Kent State University",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "affiliation": "KHT",
      "articleRefs": [
        {
          "pageNumber": 29,
          "articleName": "Images of Code: Lossy Compression for Native Instructions",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4O33wTClUcK5dLf9D2ytLQ/7vjaqiOp3476mtH6LPlGdm.pdf"
        }
      ]
    },
    {
      "affiliation": "Kiel University",
      "articleRefs": [
        {
          "pageNumber": 342,
          "articleName": "Poster: Toward Measuring Software Coupling via Weighted Dynamic Metrics",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41fj03MKzInGka8tUKZp0i/5yOrS7srH4d0FvNS6liBJc.pdf"
        }
      ]
    },
    {
      "affiliation": "Korea Advanced Institute of Science and Technology",
      "articleRefs": [
        {
          "pageNumber": 185,
          "articleName": "Poster: Architecture Reconstruction and Evaluation of Blockchain Open Source Platform",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7owgOp2OxfZOt1X2gaHw4F/3vdTLCMmVDAMW0YWJP11fk.pdf"
        },
        {
          "pageNumber": 315,
          "articleName": "Precise Concolic Unit Testing of C Programs Using Extended Units and Symbolic Alarm Filtering",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1uzd3hVAOcYCmdupokp9Le/67onPmsxD7mwlYOuhSWoEK.pdf"
        },
        {
          "pageNumber": 537,
          "articleName": "Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/53KVBZlCxSM8SKMrWZTReW/5SVStngTUruEo7SDPWMIhR.pdf"
        }
      ]
    },
    {
      "affiliation": "Korea University",
      "articleRefs": [
        {
          "pageNumber": 1244,
          "articleName": "Automatically Generating Search Heuristics for Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5k6pWQxBOWJa9S1UiZ2A2n/6sJ0ZusmvQqfPy9dyjzenc.pdf"
        }
      ]
    },
    {
      "affiliation": "KTH Royale Institure of Technology",
      "articleRefs": [
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "affiliation": "KTH Royal Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 95,
          "articleName": "How to Design a Program Repair Bot? Insights from the Repairnator Project",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1ExIKnJipGMFZO7lPRAngF/2DiGXRSudrFpQa60hIp2VD.pdf"
        },
        {
          "pageNumber": 438,
          "articleName": "Poster: Towards Multi-robot Applications Planning Under Uncertainty",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5OMIq2Xre09PiJrZEN6sZ1/1qIbZQKf2SutDZRTgOpDaJ.pdf"
        },
        {
          "pageNumber": 548,
          "articleName": "Machine Learning for Software Engineering: Models, Methods, and Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68mZt2BRUQO2z4mysF42zv/3BBCZzcXIipNq8ElKPyNZb.pdf"
        }
      ]
    },
    {
      "affiliation": "KU Leuven",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        },
        {
          "pageNumber": 290,
          "articleName": "Poster: Knowledge-Enriched Security and Privacy Threat Modeling",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/37uFOoLUPhndyysBym8s6u/7szAL5XTsN6DNANI1CKW1D.pdf"
        }
      ]
    },
    {
      "affiliation": "Kyungpook National University",
      "articleRefs": [
        {
          "pageNumber": 315,
          "articleName": "Precise Concolic Unit Testing of C Programs Using Extended Units and Symbolic Alarm Filtering",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1uzd3hVAOcYCmdupokp9Le/67onPmsxD7mwlYOuhSWoEK.pdf"
        }
      ]
    },
    {
      "affiliation": "Kyushu University",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        },
        {
          "pageNumber": 272,
          "articleName": "Poster: Exploring Uncertainty in GitHub OSS Projects: When and How Do Developers Face Uncertainty?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1dipIizZzbMXAiCO02tWVF/2xPcZJ8mMITxw7ZU4W3dQ7.pdf"
        },
        {
          "pageNumber": 560,
          "articleName": "[Journal First] Are Fix-Inducing Changes a Moving Target?: A Longitudinal Case Study of Just-in-Time Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3uRSaEmVCZ8sxcHsoTOQlj/IB9wBk3BHYMYBlqgTMQQj.pdf"
        }
      ]
    },
    {
      "affiliation": "LACL",
      "articleRefs": [
        {
          "pageNumber": 368,
          "articleName": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf"
        }
      ]
    },
    {
      "affiliation": "Lahore University of Management Sciences",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        },
        {
          "pageNumber": 177,
          "articleName": "Poster: Efficiently Finding Minimal Failing Input in MapReduce Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5BTJs1t7NpwCEatzcHw2gJ/2mc635qKuBjXNwI4Hkwm8d.pdf"
        },
        {
          "pageNumber": 346,
          "articleName": "Poster: Efficient Iterative Deepening for Bounded Exhaustive Generation of Complex Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2JMd1LQkrxt0JBD11w0lFv/4rzjrCWAMhM1MRAmRp3Kg5.pdf"
        },
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "affiliation": "Lancaster University",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        },
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        },
        {
          "pageNumber": 552,
          "articleName": "Multi-platform Computing for Physical Devices via MakeCode and CODAL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ot68K3aKE7CQfcrmRVKlR/jsk9AWtBkZikr0gw8xmBk.pdf"
        },
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "affiliation": "Lanzhou University",
      "articleRefs": [
        {
          "pageNumber": 230,
          "articleName": "Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/X0glNBWe9bFHLqk18sHr8/3C06tjBbRFMPTLiNNoEii.pdf"
        }
      ]
    },
    {
      "affiliation": "Lappeenranta University of Technology",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "affiliation": "La Salle - Ramon Llull University",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "affiliation": "Leibniz Institute for Neurobiology",
      "articleRefs": [
        {
          "pageNumber": 496,
          "articleName": "A Neuro-Cognitive Perspective of Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3i9dCcUyc9C48XPlNzhoOn/6EbUeXNHs6F2GkD1mkfUeK.pdf"
        }
      ]
    },
    {
      "affiliation": "Lero - the Irish Software Engineering Research Centre",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "affiliation": "Lero-the Irish Software Research Centre",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "affiliation": "Linnaeus University",
      "articleRefs": [
        {
          "pageNumber": 101,
          "articleName": "CyPhEF: A Model-Driven Engineering Framework for Self-Adaptive Cyber-Physical Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1gNLLFWWKWZtApQjwZyuuj/2HAORC6UYaMnwzI2dA35YZ.pdf"
        },
        {
          "pageNumber": 197,
          "articleName": "Poster: Using Repository Data for Driving Software Architecture",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7KkMEL4TPzWlaTUD5Aj0Hd/V0s75jWXuVVK6ky99u5wi.pdf"
        },
        {
          "pageNumber": 216,
          "articleName": "Poster: Introducing Quality Models Based on Joint Probabilities",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IJWpRoZ08GOMTcP32lLK7/5HUHC5NmVCLkRPPdOrslsu.pdf"
        },
        {
          "pageNumber": 220,
          "articleName": "Poster: A Changeset-Based Approach to Assess Source Code Density and Developer Efficacy",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Tm0IqbemtTOBG0FpCKG2m/4AcH1Q8EG4SjleFQ38joZ0.pdf"
        },
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "affiliation": "LIRMM",
      "articleRefs": [
        {
          "pageNumber": 304,
          "articleName": "Poster: On Extracting Relevant and Complex Variability Information from Software Descriptions with Pattern Structures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5qpsBHLVvt6ITKmG4P5Aes/6VeSDOFMGM7oBcQsDZmBjQ.pdf"
        }
      ]
    },
    {
      "affiliation": "LIUPPA",
      "articleRefs": [
        {
          "pageNumber": 368,
          "articleName": "Poster: How to Handle Environmental Uncertainty in Goal-Based Requirements Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2EdpC0oMhL2m04hQQeEED1/4jyU1mJ1ssXdKKRN2r5Y6m.pdf"
        }
      ]
    },
    {
      "affiliation": "LMU Munich",
      "articleRefs": [
        {
          "pageNumber": 1182,
          "articleName": "Reducer-Based Construction of Conditional Verifiers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6mfhtixgiQVyhDPMCYId3V/7DUx0uAdd4fytOgP2RvFf5.pdf"
        }
      ]
    },
    {
      "affiliation": "LogMeIn",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        }
      ]
    },
    {
      "affiliation": "Loyola University Maryland",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "affiliation": "Mälardalen University",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "UniComp: A Semantics-Aware Model Compiler for Optimised Predictable Software",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/hzHwzSfCAh1hC8lk5nnX3/6Q6xNjTCRFx0Jx8aySTZRl.pdf"
        }
      ]
    },
    {
      "affiliation": "Malmö University",
      "articleRefs": [
        {
          "pageNumber": 448,
          "articleName": "An Approach to Engineer and Realize Emergent Configurations in the Internet of Things",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2B0sfqIDyxpMbt669xKL1h/1xasZ4y5RwS7fT5k0X7je5.pdf"
        }
      ]
    },
    {
      "affiliation": "Max Planck Institute for Software Systems",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "affiliation": "McGill University",
      "articleRefs": [
        {
          "pageNumber": 329,
          "articleName": "Poster: Efficient and Deterministic Replay for Web-Enabled Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/36kMCRGJIHLtaSXi0e2KSp/44hgs6obxhBufX2ufcNbQX.pdf"
        },
        {
          "pageNumber": 560,
          "articleName": "[Journal First] Are Fix-Inducing Changes a Moving Target?: A Longitudinal Case Study of Just-in-Time Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3uRSaEmVCZ8sxcHsoTOQlj/IB9wBk3BHYMYBlqgTMQQj.pdf"
        },
        {
          "pageNumber": 834,
          "articleName": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf"
        },
        {
          "pageNumber": 969,
          "articleName": "A Graph Solver for the Automated Generation of Consistent Domain-Specific Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6eq1ZquQwyvOqG174Q7zcO/4GkhGJCKWGFeeRD8zmyZ6C.pdf"
        }
      ]
    },
    {
      "affiliation": "McMaster University",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "Poster: Assurance Cases for Scientific Computing Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ry3rQd3HdBw1019rH4hy0/5UCpbcH3AAnGNkxQVVCZVm.pdf"
        }
      ]
    },
    {
      "affiliation": "Mediterranean Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 398,
          "articleName": "Poster: Towards a Formal API Assessment",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4EuktLE7DiRjvzvyG7KuGH/1qqZgquooeCI3zSxGd3tTx.pdf"
        }
      ]
    },
    {
      "affiliation": "Miami University",
      "articleRefs": [
        {
          "pageNumber": 331,
          "articleName": "Poster: A Parallel Framework for Ab Initio Transcript-Clustering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3ydiO2nKbcfgXXArBnH518/5DI4ZJ2mNLjGkRxnTn0ET1.pdf"
        }
      ]
    },
    {
      "affiliation": "Michigan State University",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf"
        }
      ]
    },
    {
      "affiliation": "Micropilot Inc",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jAtRSWcHJcJZLW9lwLKTT/3ZbcW64L99h5TIvUQiBeJI.pdf"
        }
      ]
    },
    {
      "affiliation": "Microsoft",
      "articleRefs": [
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        },
        {
          "pageNumber": 165,
          "articleName": "Poster: LWE: LDA Refined Word Embeddings for Duplicate Bug Report Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5lV7ZnvLFHqlOrp4Wm0luY/2l08CDTfwQAZGb7v4j5WuX.pdf"
        },
        {
          "pageNumber": 191,
          "articleName": "A Study of the Organizational Dynamics of Software Teams",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5gNECKysiAKSNV7IxUGaay/2VTsVJPZtHSofCGoLJHNhU.pdf"
        },
        {
          "pageNumber": 193,
          "articleName": "Poster: DWEN: Deep Word Embedding Network for Duplicate Bug Report Detection in Software Repositories",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46PCpEiqqzcfuFKFQ071QK/704dXR6jLVH4adAgbPP2i8.pdf"
        },
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        },
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "affiliation": "Microsoft Corporation",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jAtRSWcHJcJZLW9lwLKTT/3ZbcW64L99h5TIvUQiBeJI.pdf"
        }
      ]
    },
    {
      "affiliation": "Microsoft Research",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7coDDNB5gFaIi3yM57kNPD/11bmVU627jwxwAbd5Hc27n.pdf"
        },
        {
          "pageNumber": 60,
          "articleName": "Neuro-Symbolic Program Corrector for Introductory Programming Assignments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3ff3TXG0zUEgira53neRYx/4vw21DgkSxUSQYWz4NjvaQ.pdf"
        },
        {
          "pageNumber": 78,
          "articleName": "Compilation Error Repair: For the Student Programs, From the Student Programs",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/74a8S3D3a6wsnbt6QRLxYV/77StsrT4omqMtHc0azXCzy.pdf"
        },
        {
          "pageNumber": 552,
          "articleName": "Multi-platform Computing for Physical Devices via MakeCode and CODAL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ot68K3aKE7CQfcrmRVKlR/jsk9AWtBkZikr0gw8xmBk.pdf"
        },
        {
          "pageNumber": 585,
          "articleName": "[Journal First] Data Scientists in Software Teams: State of the Art and Challenges",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47NY96sCKYhfY6lLApaAdS/UjTg5agZVWapuv8BiuO4t.pdf"
        }
      ]
    },
    {
      "affiliation": "Middlesex University",
      "articleRefs": [
        {
          "pageNumber": 71,
          "articleName": "Towards a Unified Conceptual Model for Surveillance Theories: \"We Shall Meet in the Place Where There is no Darkness\" - 1984, George Orwell",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/20y7t4eueufhr1eP4eNGPi/4mL8XsAM9N3XHllWNOFWVD.pdf"
        }
      ]
    },
    {
      "affiliation": "Monash University",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/18twSkKM4nZSiq4Z1PnB2P/5eXj8AdFfloU2dchJUeYi9.pdf"
        },
        {
          "pageNumber": 61,
          "articleName": "SE in ES: Opportunities for Software Engineering and Cloud Computing in Environmental Science",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/5VTp29J3kCYXzMNs8Pp1rO/4pPCPkkIdhvTYUhENpDoxn.pdf"
        },
        {
          "pageNumber": 276,
          "articleName": "Poster: On Vulnerability Evolution in Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nULBBNKVN3vRo4TxBqzfB/2apYrCqhmwvonAhfSbGWJv.pdf"
        },
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        }
      ]
    },
    {
      "affiliation": "MTA-BME Lendület Cyber-Physical Systems Research Group",
      "articleRefs": [
        {
          "pageNumber": 969,
          "articleName": "A Graph Solver for the Automated Generation of Consistent Domain-Specific Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6eq1ZquQwyvOqG174Q7zcO/4GkhGJCKWGFeeRD8zmyZ6C.pdf"
        }
      ]
    },
    {
      "affiliation": "M��lardalen University",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "PROMOpedi: A Web-Content Management-Based Encyclopedia of Software Property Models",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/L9r824WbXdkeD6HOUfjkp/1ic6DVpAntnIwbUz0tL4zI.pdf"
        }
      ]
    },
    {
      "affiliation": "Nagoya University",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "affiliation": "Nanjing University",
      "articleRefs": [
        {
          "pageNumber": 238,
          "articleName": "Poster: Detecting Missing Checks for Identifying Insufficient Attack Protections",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68lea68Xffx9ofe7BySvM/206boRxPqYpHOPA2UsxYIq.pdf"
        },
        {
          "pageNumber": 266,
          "articleName": "Poster: Synthesizing Relation-Aware Entity Transformation by Examples",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jhHsbkhRZs3nE4hHEzkaf/1kHwgntPO8MQi7UlkHcfEU.pdf"
        },
        {
          "pageNumber": 366,
          "articleName": "Poster: ACONA: Active Online Model Adaptation for Predicting Continuous Integration Build Failures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1NinLYBC32PXucXAwTyz3B/1PJW3gI4n2cBOJYdcrENjL.pdf"
        },
        {
          "pageNumber": 811,
          "articleName": "Speedoo: Prioritizing Performance Optimization Opportunities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1n3EHZ69Ja5of7qLpXnL86/5IDS4UmAOw5scrzvbU1Gyb.pdf"
        },
        {
          "pageNumber": 1171,
          "articleName": "Debugging with Intelligence via Probabilistic Inference",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7CYIpqNdfDVuty6nF4sCz0/4NS9ycJ4Imp4FkgVouytF1.pdf"
        },
        {
          "pageNumber": 1207,
          "articleName": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf"
        }
      ]
    },
    {
      "affiliation": "Nanjing University of Aeronautics and Astronautics",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "Poster: Deciding Weak Monitorability for Runtime Verification",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3Jgn0A6nOj7QIfUc0036qu/2CRsqRAoRBHJxOF6hJzYqb.pdf"
        },
        {
          "pageNumber": 189,
          "articleName": "Poster: Beyond Spatial and Temporal Memory Safety",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3dtqvxVBduarjvcMne41Mf/69OUrFqRO6wKT2S0zCaUok.pdf"
        },
        {
          "pageNumber": 264,
          "articleName": "Poster: Runtime Verification of Memory Safety via Source Transformation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Wbn7Rsr2KgwIg0ZjVZVST/4QprgKUvAMwZswtLxX0jf2.pdf"
        }
      ]
    },
    {
      "affiliation": "Nanyang Technological University",
      "articleRefs": [
        {
          "pageNumber": 238,
          "articleName": "Poster: Detecting Missing Checks for Identifying Insufficient Attack Protections",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68lea68Xffx9ofe7BySvM/206boRxPqYpHOPA2UsxYIq.pdf"
        },
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        },
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        },
        {
          "pageNumber": 665,
          "articleName": "From UI Design Image to GUI Skeleton: A Neural Machine Translator to Bootstrap Mobile GUI Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JXA3aEoFlChCTeObvRL5D/4SROMnxHfcqnH3f5jpBxW6.pdf"
        },
        {
          "pageNumber": 811,
          "articleName": "Speedoo: Prioritizing Performance Optimization Opportunities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1n3EHZ69Ja5of7qLpXnL86/5IDS4UmAOw5scrzvbU1Gyb.pdf"
        }
      ]
    },
    {
      "affiliation": "Nara Institute of Science and Technology",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "affiliation": "Nara Institute of Science and Technology (NAIST)",
      "articleRefs": [
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "affiliation": "Nara Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        }
      ]
    },
    {
      "affiliation": "National Chengchi University",
      "articleRefs": [
        {
          "pageNumber": 394,
          "articleName": "Poster: Static Detection of API Call Vulnerabilities in iOS Executables",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/gSu6tRobTq6btbsdFEqcb/SnOv2Ft9uBvbOCkoaGtXE.pdf"
        }
      ]
    },
    {
      "affiliation": "National Engineering Research Center for Enterprise informatization",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SAFL: Increasing and Accelerating Testing Coverage with Symbolic Execution and Guided Fuzzing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2wQFOHJU5QY1aSNGOj5WlU/69TdWrHG4oqQst002X2U7L.pdf"
        }
      ]
    },
    {
      "affiliation": "National Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "affiliation": "National Library of Luxembourg",
      "articleRefs": [
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        }
      ]
    },
    {
      "affiliation": "National Taiwan University",
      "articleRefs": [
        {
          "pageNumber": 394,
          "articleName": "Poster: Static Detection of API Call Vulnerabilities in iOS Executables",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/gSu6tRobTq6btbsdFEqcb/SnOv2Ft9uBvbOCkoaGtXE.pdf"
        }
      ]
    },
    {
      "affiliation": "National Trusted Embedded Software Engineering Technology Research Center",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "SmartUnit: Empirical Evaluations for Automated Unit Testing of Embedded Software in Industry",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3kfbgt33yV7v6LxrVBQ0kP/1o5EmidKhnIDOZa89QBqiU.pdf"
        }
      ]
    },
    {
      "affiliation": "National University of Defense Technology",
      "articleRefs": [
        {
          "pageNumber": 141,
          "articleName": "Poster: Continuous Inspection in the Classroom: Improving Students' Programming Quality with Social Coding Methods",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6UKNljf5nlt1ncD2ve9GH6/3WwTc5xDdJ3iD9BZuxAakg.pdf"
        },
        {
          "pageNumber": 291,
          "articleName": "Towards Optimal Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5RrqD9bEgjcdclSy11URjg/2czbn8hdUhh9LxAyqsDHeh.pdf"
        },
        {
          "pageNumber": 527,
          "articleName": "Combining Symbolic Execution and Model Checking to Verify MPI Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/71r3uEpj8w9w85mn05wLgG/41PZQTwzxIZljqdsgu08rA.pdf"
        }
      ]
    },
    {
      "affiliation": "National University of Defense Technology, Changsha",
      "articleRefs": [
        {
          "pageNumber": 871,
          "articleName": "Symbolic Verification of Regular Properties",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IJNV2SslZXLkkcU0nrqLc/73G8pFObrprdyJDH04r5wl.pdf"
        }
      ]
    },
    {
      "affiliation": "National University of Defense Technology Changsha",
      "articleRefs": [
        {
          "pageNumber": 214,
          "articleName": "Poster: MC/DC Coverage-Oriented Compiler Optimization for Symbolic Execution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19wMK3y6rrPtypHvRfdvIL/7kv13UfiLfkXF2w30TVg5y.pdf"
        }
      ]
    },
    {
      "affiliation": "National University of Singapore",
      "articleRefs": [
        {
          "pageNumber": 24,
          "articleName": "[Journal First] A Correlation Study Between Automated Program Repair and Test-Suite Metrics",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gBFq8WGsy7jyjRaabQTvs/6aZFwDHOIfEdaqaAXgMZHk.pdf"
        },
        {
          "pageNumber": 129,
          "articleName": "Semantic Program Repair Using a Reference Implementation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2ndg0exc1x8lxEFXhKm0g0/1N19faKQEkIWF1UTM7JlA4.pdf"
        },
        {
          "pageNumber": 187,
          "articleName": "Repairing Crashes in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11SgkKwQHmFo9IUg9YcyHZ/221qL68Sp1f0tYoxd9WFxU.pdf"
        },
        {
          "pageNumber": 291,
          "articleName": "Towards Optimal Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5RrqD9bEgjcdclSy11URjg/2czbn8hdUhh9LxAyqsDHeh.pdf"
        }
      ]
    },
    {
      "affiliation": "NC State University",
      "articleRefs": [
        {
          "pageNumber": 225,
          "articleName": "Advantages and Disadvantages of a Monolithic Repository: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1MktiGzVdBzNo5T0kTxG1y/2MFA412skkAVXMuiTas6Rk.pdf"
        },
        {
          "pageNumber": 643,
          "articleName": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf"
        }
      ]
    },
    {
      "affiliation": "Netaji Subhas Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 60,
          "articleName": "Neuro-Symbolic Program Corrector for Introductory Programming Assignments",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3ff3TXG0zUEgira53neRYx/4vw21DgkSxUSQYWz4NjvaQ.pdf"
        }
      ]
    },
    {
      "affiliation": "Neu-Ulm University of Applied Sciences",
      "articleRefs": [
        {
          "pageNumber": 135,
          "articleName": "Poster: When Students Meet Developers: Are Barcamps a Format for Interactive Software Engineering Education?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7pmHRPui8ftbVkNWGHxFcd/4K7iypcNJzmAqWICM06eac.pdf"
        }
      ]
    },
    {
      "affiliation": "New Jersey Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 728,
          "articleName": "Self-Hiding Behavior in Android Apps: Detection and Characterization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/39EtsVbEnvoJFUJzXaNfZd/1AQQQyk7kMtppqX7fIsDeH.pdf"
        }
      ]
    },
    {
      "affiliation": "North Carolina State University",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "10+ Years of Teaching Software Engineering with iTrust: The Good, the Bad, and the Ugly",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3EjhI0gr5St4AFs3lVXxnq/1oGHNe0eI3D9HLwWrcK93B.pdf"
        },
        {
          "pageNumber": 40,
          "articleName": "Open-Source Software in Class: Students' Common Mistakes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/Aqs0gf1RPfzilfgb9ZyI3/1l4siOSDqHYjJEhkm195YS.pdf"
        },
        {
          "pageNumber": 93,
          "articleName": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf"
        },
        {
          "pageNumber": 147,
          "articleName": "Poster: Improving Formation of Student Teams: A Clustering Approach",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6OdCnFISWjwpH1KZizzaXP/2kocifGfEnvPAE8UATEbgY.pdf"
        },
        {
          "pageNumber": 245,
          "articleName": "We Don't Need Another Hero?: The Impact of \"Heroes\" on Software Development",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/mM2flyVIs1e0wGU98L8VQ/xU4OW2h5F9cUBJIgIMkYY.pdf"
        },
        {
          "pageNumber": 306,
          "articleName": "What is the Connection Between Issues, Bugs, and Enhancements?",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3bWvkXPq9i6F9d71i08gCi/2MMajW6DqEMcr7tdsRbrhE.pdf"
        },
        {
          "pageNumber": 339,
          "articleName": "Poster: Automated Program Repair with Canonical Constraints",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5HuJ0DRe1lVP5flrt0olas/cYoM2zEz7jQb9DOHiHPMV.pdf"
        },
        {
          "pageNumber": 414,
          "articleName": "Poster: Defect Prediction Metrics for Infrastructure as Code Scripts in DevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6z0ElYo6kCuhP8EM07S76I/7w6jX8zdDuiJ9pLqb3q0NC.pdf"
        },
        {
          "pageNumber": 426,
          "articleName": "Poster: Identifying Security Issues in Software Development: Are Keywords Enough?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6gBAdmDKYhyHsm7KCt99cN/4hTlGNOOjkp6Hde2uwrpbn.pdf"
        },
        {
          "pageNumber": 476,
          "articleName": "Characteristics of Defective Infrastructure as Code Scripts in DevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qQwqPKXmLrzPlie0owrAE/yV0y2PkH9og3ffZ5iR9RA.pdf"
        },
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        },
        {
          "pageNumber": 586,
          "articleName": "Dataflow Tunneling: Mining Inter-Request Data Dependencies for Request-Based Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Uzz3NxpxluiWAcTMOBAcC/7GhgmQEAmFhlEO0HUMJxtg.pdf"
        },
        {
          "pageNumber": 1050,
          "articleName": "Is \"Better Data\" Better Than \"Better Data Miners\"?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hzCUfPHZDYwOVdpeABHj9/5kDwErSTWTzzBsrepPdBwv.pdf"
        }
      ]
    },
    {
      "affiliation": "Northeastern University",
      "articleRefs": [
        {
          "pageNumber": 776,
          "articleName": "Inferring Hierarchical Motifs from Execution Traces",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TTXoZtYTdhZLsqHykC3ZK/3TvbLeZaB2ApWjzhC0Nfly.pdf"
        }
      ]
    },
    {
      "affiliation": "Northern Arizona University",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf"
        },
        {
          "pageNumber": 256,
          "articleName": "Almost There: A Study on Quasi-Contributors in Open-Source Software Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1yorvAqsWddHbVWuLi4YZy/6NexNkxSmHQvVZ35CgSXP3.pdf"
        },
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "affiliation": "Northwestern Polytechnical University",
      "articleRefs": [
        {
          "pageNumber": 325,
          "articleName": "Poster: Bridging Effort-Aware Prediction and Strong Classification - A Just-in-Time Software Defect Prediction Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W55obxh9gzemjqfGcWAPj/3f132O9xPg1LX5ixGPIYgu.pdf"
        }
      ]
    },
    {
      "affiliation": "Oakland University",
      "articleRefs": [
        {
          "pageNumber": 206,
          "articleName": "Poster: Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7MLLCasUAOaMfVBTbfYztV/3klSThcA5OaZugEDIiq481.pdf"
        }
      ]
    },
    {
      "affiliation": "Ocuco Ltd",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "affiliation": "Okayama University",
      "articleRefs": [
        {
          "pageNumber": 699,
          "articleName": "[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6DpoC5WlULUt8hBNeqAmqV/3IBEJeqmtlBitYTjNHMBvc.pdf"
        }
      ]
    },
    {
      "affiliation": "Oracle Corporation",
      "articleRefs": [
        {
          "pageNumber": 210,
          "articleName": "Poster: Leveraging Product Relationships to Generate Candidate Bugs for Duplicate Bug Prediction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3skdQaTH5MfrXjt8sLFamC/01NHC0xsEdaGiQjXDjWADh.pdf"
        }
      ]
    },
    {
      "affiliation": "Orange Labs",
      "articleRefs": [
        {
          "pageNumber": 392,
          "articleName": "Poster: A Declarative Approach for Updating Distributed Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NuEmP8ZsSnvKNvNyTrrlD/1nPmlCZWlN2oGC90OpEUxG.pdf"
        }
      ]
    },
    {
      "affiliation": "Oregon State University",
      "articleRefs": [
        {
          "pageNumber": 483,
          "articleName": "Accurate and Efficient Refactoring Detection in Commit History",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7ovVwDZjiimcs7UK26jsY5/2NKyJ8O6VKaq4sQAeldzwB.pdf"
        },
        {
          "pageNumber": 1004,
          "articleName": "Open Source Barriers to Entry, Revisited: A Sociotechnical Perspective",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/TyqFP9NffZB5zyCNQNW03/1t7Nt1jDpbSxZQoExa39kC.pdf"
        }
      ]
    },
    {
      "affiliation": "Osaka Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 161,
          "articleName": "Poster: A Multi-year Analysis of Students' Build Errors in Agile Software Development Educational Projects",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/306cKFxNt6pl9TLI9Y5fwM/61ObRsRyDnrukrTgI3LCCN.pdf"
        }
      ]
    },
    {
      "affiliation": "Osaka University",
      "articleRefs": [
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        }
      ]
    },
    {
      "affiliation": "Otto-von-Guericke-University",
      "articleRefs": [
        {
          "pageNumber": 764,
          "articleName": "Do You Remember This Source Code?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6lgyBjN15NmtyBh15ZeLce/4XeLgw9ncgLwJdjPktRRtN.pdf"
        }
      ]
    },
    {
      "affiliation": "Otto-von-Guericke University Magdeburg & Harz University of Applied Sciences Wernigerode",
      "articleRefs": [
        {
          "pageNumber": 518,
          "articleName": "When to Extract Features: Towards a Recommender System",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2fpiKqW0sVzlS68wEP8vBv/2Ftk9xhQEpH2odZA08OMU6.pdf"
        }
      ]
    },
    {
      "affiliation": "Paderborn University",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        },
        {
          "pageNumber": 292,
          "articleName": "Poster: CrossEcore: An Extendible Framework to Use Ecore and OCL Across Platforms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1AkIwFloW3mkZDApKaVABX/7lyga27SMIeaITaprTqTOu.pdf"
        },
        {
          "pageNumber": 1182,
          "articleName": "Reducer-Based Construction of Conditional Verifiers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6mfhtixgiQVyhDPMCYId3V/7DUx0uAdd4fytOgP2RvFf5.pdf"
        }
      ]
    },
    {
      "affiliation": "Paderborn University & Fraunhofer IEM",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Self-Adaptive Static Analysis",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1gSz9MfSQhkps7eUcuRDeR/S8b0IXIkWsFEoKSFNF5yu.pdf"
        },
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        }
      ]
    },
    {
      "affiliation": "Peking University",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Context-Aware Patch Generation for Better Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2FydAwOD2o1un1UuWRcZuR/4DiUknL45OPujvaqe5CpDE.pdf"
        },
        {
          "pageNumber": 65,
          "articleName": "ReGuard: Finding Reentrancy Bugs in Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dFTki9Ml83quzEQotDNy1/3g3bfAaS3Z85gdgD6MnCrF.pdf"
        },
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        },
        {
          "pageNumber": 134,
          "articleName": "A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1THX06dkdc4p9NK74CQDK6/4cihGy6VmWGDisS2sZqFnJ.pdf"
        },
        {
          "pageNumber": 179,
          "articleName": "Poster: Forks Insight: Providing an Overview of GitHub Forks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46AuTosEz8iCsma4CNsxzU/6odbstLJrrnGif0gY2Ryfu.pdf"
        },
        {
          "pageNumber": 260,
          "articleName": "Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3KOAs6b5Ao6dTf4nrU5Z2R/4wShlhH4Ml9nJbkkAnMNpN.pdf"
        },
        {
          "pageNumber": 296,
          "articleName": "Poster: QoS-Aware Service Composition Using Blockchain-Based Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/52LmPy7QbAM0aNeB9uYJC2/53SEGmGiNbgYAVNqtV672d.pdf"
        },
        {
          "pageNumber": 440,
          "articleName": "Poster: Companies' Domination in FLOSS Development - An Empirical Study of OpenStack",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qzz37M5aaQHMR84AdL5Ao/6BpbDRR3MKYdAc0gfHratN.pdf"
        },
        {
          "pageNumber": 472,
          "articleName": "Learning to Accelerate Compiler Testing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3uK1gDyyScWheR1bC2y6e9/79BSSHLXynlzwtnQRCEfis.pdf"
        },
        {
          "pageNumber": 789,
          "articleName": "Identifying Patch Correctness in Test-Based Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11zxitYXACvMuqaLV1rFPF/1DtebWtKrtzfb6ply0HQ69.pdf"
        }
      ]
    },
    {
      "affiliation": "Phase Change Software",
      "articleRefs": [
        {
          "pageNumber": 498,
          "articleName": "[Journal First] Are Vulnerabilities Discovered and Resolved Like Other Defects?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/jK7dC2JyNybfa6ETsENgG/4ECWQFVwIWPQlOuwZ0uinE.pdf"
        }
      ]
    },
    {
      "affiliation": "Polish-Japanese Academy of Information Technology",
      "articleRefs": [
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "affiliation": "Politecnico di Milano",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "[Journal First] Experiences and Challenges in Building a Data Intensive System for Data Migration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2XogMA7rD6MGSKQNdBeJYp/7E58nTNchsf4cLz0RCgWQK.pdf"
        },
        {
          "pageNumber": 434,
          "articleName": "Poster: Property Specification Patterns for Robotic Missions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1GfBKLywvQaQtYfE5FWhfQ/2F6EhgxEclQMJw31IDdbsx.pdf"
        }
      ]
    },
    {
      "affiliation": "Politecnico di Torino",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Easing IoT Development for Novice Programmers Through Code Recipes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ZtsyuXJ5vJnjyeaGgkT4s/3Lq6ORQJLOs8ulbEf7E5Mg.pdf"
        }
      ]
    },
    {
      "affiliation": "Polytechnique Montreal",
      "articleRefs": [
        {
          "pageNumber": 59,
          "articleName": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf"
        },
        {
          "pageNumber": 705,
          "articleName": "Do Programmers Work at Night or During the Weekend?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3PZI2iH7OZcqmfOhovoPWi/4jMoJeCniCPfvSDteaaNux.pdf"
        }
      ]
    },
    {
      "affiliation": "Polythechnique de Montréal",
      "articleRefs": [
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        }
      ]
    },
    {
      "affiliation": "Pontifcal Catholic University of Rio Grande do Sul",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        }
      ]
    },
    {
      "affiliation": "Pontifical Catholic University of Rio de Janeiro",
      "articleRefs": [
        {
          "pageNumber": 406,
          "articleName": "Poster: The Buggy Side of Code Refactoring: Understanding the Relationship Between Refactorings and Bug",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7xA83ICSws20FMqPfv3Mkr/4JYmoWzbAplFG240uQ95Hz.pdf"
        }
      ]
    },
    {
      "affiliation": "Pontifical Catholic University of Rio Grande do Sul",
      "articleRefs": [
        {
          "pageNumber": 176,
          "articleName": "Leveraging Program Analysis to Reduce User-Perceived Latency in Mobile Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6XtxxPyOjmBnzbOjfZogqQ/5iHlEbl6OqBrzktFcC7my4.pdf"
        }
      ]
    },
    {
      "affiliation": "Pontifícia Universidade Catòlica do Rio Grande do Sul",
      "articleRefs": [
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        }
      ]
    },
    {
      "affiliation": "PrimeKey Solutions AB",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "Princeton University",
      "articleRefs": [
        {
          "pageNumber": 356,
          "articleName": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf"
        }
      ]
    },
    {
      "affiliation": "PUC-Rio",
      "articleRefs": [
        {
          "pageNumber": 858,
          "articleName": "[Journal First] Global-Aware Recommendations for Repairing Violations in Exception Handling",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eNWZZMvEzSZ7Kd4fLfQ6B/657yWIupHe5IFrgvcnH8bJ.pdf"
        },
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "affiliation": "PUCRS",
      "articleRefs": [
        {
          "pageNumber": 143,
          "articleName": "Poster: Startup Software Development Education: A Systematic Mapping Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7s17xrOXocOz9TrWmIIgiY/62N7hNPnPuRUIjG4IN62FM.pdf"
        },
        {
          "pageNumber": 155,
          "articleName": "Poster: Challenge-Based Learning: A Brazilian Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2l16giaw0MUbxQDUNSTBMV/7CI3uC4gCOKGJlcFqMtVdb.pdf"
        }
      ]
    },
    {
      "affiliation": "Purdue University",
      "articleRefs": [
        {
          "pageNumber": 1171,
          "articleName": "Debugging with Intelligence via Probabilistic Inference",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7CYIpqNdfDVuty6nF4sCz0/4NS9ycJ4Imp4FkgVouytF1.pdf"
        }
      ]
    },
    {
      "affiliation": "QAware GmbH",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "affiliation": "Queen's University",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Adopting Autonomic Computing Capabilities in Existing Large-Scale Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3cdPpSbZHTPdKRDJmYqHi5/14bRIwemub5Z9iDjUUa7uz.pdf"
        },
        {
          "pageNumber": 97,
          "articleName": "MDebugger: A Model-Level Debugger for UML-RT",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5DzlPjxYvM5N8HVBZIru6H/2y8g0siwmm4J7RXAYS1pNA.pdf"
        },
        {
          "pageNumber": 267,
          "articleName": "[Journal First] Analyzing a Decade of Linux System Calls",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3KxPueAJM16I029lwLaxWK/3ygzgkL0Nj7pWHNPX3Spik.pdf"
        },
        {
          "pageNumber": 286,
          "articleName": "An Experience Report on Defect Modelling in Practice: Pitfalls and Challenges",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1XE1Rcu3h9nk31GZtFimCl/5FPku5dJlOtWZkQS6QB4ck.pdf"
        }
      ]
    },
    {
      "affiliation": "Queen’s University",
      "articleRefs": [
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        }
      ]
    },
    {
      "affiliation": "Queen’s University Kingston",
      "articleRefs": [
        {
          "pageNumber": 515,
          "articleName": "AutoModel: A Domain-Specific Language for Automatic Modeling of Real-Time Embedded Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/ZlHGDtBSalF9VqoSGSVfL/3isRFB1xVFH9k7IIeF7VrG.pdf"
        }
      ]
    },
    {
      "affiliation": "RedBridge AB",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "Rice University",
      "articleRefs": [
        {
          "pageNumber": 338,
          "articleName": "Program Splicing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3GzvLDJDyvhGV814ZqQjMV/5PljSrUUNExRaRT9kY641T.pdf"
        }
      ]
    },
    {
      "affiliation": "RISE SICS",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "PROMOpedi: A Web-Content Management-Based Encyclopedia of Software Property Models",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/L9r824WbXdkeD6HOUfjkp/1ic6DVpAntnIwbUz0tL4zI.pdf"
        }
      ]
    },
    {
      "affiliation": "RISE SICS AB",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Digitalization of Swedish Government Agencies - A Perspective Through the Lens of a Software Development Census",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2GtTmXlTVQhcRkpEo1qoQM/3BK0YgK2oP3ZJ3spCM5BS8.pdf"
        }
      ]
    },
    {
      "affiliation": "Robert Bosch GmbH",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Variant Management Solution for Large Scale Software Product Lines",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4J94vc6uZu9C5yPCTynFex/1z41fCXlOqEfSXyXWq6peW.pdf"
        },
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        },
        {
          "pageNumber": 484,
          "articleName": "Interactive Model Mining from Embedded Legacy Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1cfwipvkgIwd5Lm6KKokhq/5X2aqxuZ9LRYaoi1QZdvT4.pdf"
        }
      ]
    },
    {
      "affiliation": "Rochester Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        },
        {
          "pageNumber": 81,
          "articleName": "Competence-Confidence Gap: A Threat to Female Developers' Contribution on GitHub",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/42E4u7nqMTEXx7aNqWt2ao/5AnfXp47j7QWL1W5yQMac8.pdf"
        },
        {
          "pageNumber": 117,
          "articleName": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf"
        },
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        },
        {
          "pageNumber": 464,
          "articleName": "Assisted Discovery of Software Vulnerabilities",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6CuAT993NY8oMGLP3ilI8g/4P6xSdtDZgs45l6Ma2p3rZ.pdf"
        }
      ]
    },
    {
      "affiliation": "Royal Holloway University",
      "articleRefs": [
        {
          "pageNumber": 71,
          "articleName": "Towards a Unified Conceptual Model for Surveillance Theories: \"We Shall Meet in the Place Where There is no Darkness\" - 1984, George Orwell",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/20y7t4eueufhr1eP4eNGPi/4mL8XsAM9N3XHllWNOFWVD.pdf"
        }
      ]
    },
    {
      "affiliation": "Rutgers University",
      "articleRefs": [
        {
          "pageNumber": 376,
          "articleName": "Poster: ASSEMBLE: A Collaborative Business Process Development Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5vVqxbCBpLuhnkupggMpwW/2JIynIjmSo0wiQrAdUrM5J.pdf"
        }
      ]
    },
    {
      "affiliation": "RWTH Aachen University",
      "articleRefs": [
        {
          "pageNumber": 172,
          "articleName": "Improving Model-Based Testing in Automotive Software Engineering",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/U3JQ6OGwesabLjrKfXJp7/6PsNfZBbziUJrLkFyllFTl.pdf"
        },
        {
          "pageNumber": 234,
          "articleName": "Poster: A General Framework to Detect Behavioral Design Patterns",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CjHMRsDPvdBv98cJPU652/4D0D7LcRdgrFg9kjvsA6lG.pdf"
        }
      ]
    },
    {
      "affiliation": "Ryerson University",
      "articleRefs": [
        {
          "pageNumber": 700,
          "articleName": "[Journal First] On the Use of Hidden Markov Model to Predict the Time to Fix Bugs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4cSxEsEH079Uzvt1ewbxGs/2pB5Js1Y9qRj6SNwMZQQHH.pdf"
        }
      ]
    },
    {
      "affiliation": "Saab IT AB",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "Saarland University",
      "articleRefs": [
        {
          "pageNumber": 370,
          "articleName": "Poster: Efficient GUI Test Generation by Learning from Tests of Other Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Zfi6QHPNFSKTZ6ErDMQO9/6tabCma7zW4FFjzRbx7Jv3.pdf"
        }
      ]
    },
    {
      "affiliation": "SAIL - Queen's University",
      "articleRefs": [
        {
          "pageNumber": 480,
          "articleName": "[Journal First] An Empirical Study of Early Access Games on the Steam Platform",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6KvsuI65yZCa9wUUD3UekZ/4mHfpuzr4RGZSA12LoRp5r.pdf"
        }
      ]
    },
    {
      "affiliation": "SAIL Queen's University",
      "articleRefs": [
        {
          "pageNumber": 884,
          "articleName": "[Journal First] Understanding the Factors for Fast Answers in Technical Q&A Websites: An Empirical Study of Four Stack Exchange Websites",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gXwmxc37m3Zs7S7KAHn9L/15wH8DdvqszwuqgTZmAuHG.pdf"
        }
      ]
    },
    {
      "affiliation": "(SAIL), Queen’s University",
      "articleRefs": [
        {
          "pageNumber": 164,
          "articleName": "[Journal First] Studying the Dialogue Between Users and Developers of Free Apps in the Google Play Store",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5DvXCVhNZmmS4ZOChxQpkT/3YJxPVzOETe0xHdSpDBS9Z.pdf"
        }
      ]
    },
    {
      "affiliation": "Saint Petersburg State University",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "affiliation": "Saint Petersburg State University and LANIT-TERCOM LLC",
      "articleRefs": [
        {
          "pageNumber": 171,
          "articleName": "Poster: Duplicate Finder Toolkit",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dRjJOPktSyvjHM8K9IUfQ/1BL2ncii2vLmMbxH9l6Tch.pdf"
        }
      ]
    },
    {
      "affiliation": "Scania IT AB",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "School of Electrical Engineering and Computing",
      "articleRefs": [
        {
          "pageNumber": 270,
          "articleName": "Poster: Automatically Answering API-Related Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf"
        }
      ]
    },
    {
      "affiliation": "Shanghai Jiao Tong University",
      "articleRefs": [
        {
          "pageNumber": 230,
          "articleName": "Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/X0glNBWe9bFHLqk18sHr8/3C06tjBbRFMPTLiNNoEii.pdf"
        },
        {
          "pageNumber": 329,
          "articleName": "Poster: Efficient and Deterministic Replay for Web-Enabled Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/36kMCRGJIHLtaSXi0e2KSp/44hgs6obxhBufX2ufcNbQX.pdf"
        },
        {
          "pageNumber": 364,
          "articleName": "Poster: LibraryGuru: API Recommendation for Android Developers",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nswA2eQYvB2VMATIABT5R/5WNNsPhJ5Pl6hxbqipDB1f.pdf"
        },
        {
          "pageNumber": 885,
          "articleName": "[Journal First] Towards Reusing Hints from Past Fixes: An Exploratory Study on Thousands of Real Samples",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/40hy9tlXTmRgfderpGDdg6/3ne6Pkg9Hj4fJLRwiT7QKS.pdf"
        }
      ]
    },
    {
      "affiliation": "Shopify Inc.",
      "articleRefs": [
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        }
      ]
    },
    {
      "affiliation": "Siemens AG",
      "articleRefs": [
        {
          "pageNumber": 115,
          "articleName": "Tool-Based Interactive Software Parallelization: A Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6WOIQt9qfOJgDlYDiHswtu/4d3FRvoz63ZHw3qyaofuzP.pdf"
        },
        {
          "pageNumber": 532,
          "articleName": "Strategy for Continuous Testing in iDevOps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1z1MaPpKJOumLTpr9cFqOs/4SgR50gt6y5PtxiOnmlH5g.pdf"
        }
      ]
    },
    {
      "affiliation": "Siemens Healthineers",
      "articleRefs": [
        {
          "pageNumber": 211,
          "articleName": "From Agile to Continuous Development in the Healthcare Domain - Lessons Learned",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3YlVLNOvFU48vJCEI4Ofa8/6zIGIsUB4ZxPfDRQZPjui1.pdf"
        }
      ]
    },
    {
      "affiliation": "Simula",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Practical Selective Regression Testing with Effective Redundancy in Interleaved Tests",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5pilYClpXUQa77Kg5Y9986/5aQxPj9Migxn3tGsUQVA7h.pdf"
        }
      ]
    },
    {
      "affiliation": "Simula Research Laboratory",
      "articleRefs": [
        {
          "pageNumber": 1243,
          "articleName": "[Journal First] Automated Refactoring of OCL Constraints with Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7cJGdYhKy3K17vTHSANryU/39zsgbNVg02BjEkeFH5d3S.pdf"
        }
      ]
    },
    {
      "affiliation": "Singapore Management University",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/18twSkKM4nZSiq4Z1PnB2P/5eXj8AdFfloU2dchJUeYi9.pdf"
        },
        {
          "pageNumber": 33,
          "articleName": "Hierarchical Learning of Cross-Language Mappings Through Distributed Vector Representations for Code",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/63peqgtl2cqa2Vdl1J8VcL/33ID2f2G6xIYVCyhGCws1B.pdf"
        },
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        },
        {
          "pageNumber": 163,
          "articleName": "[Journal First] Overfitting in Semantics-Based Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1iEz1Hydy2R6aGChkPt4yK/3zxjPwJpOMkItKVxLAR3pj.pdf"
        },
        {
          "pageNumber": 364,
          "articleName": "Poster: LibraryGuru: API Recommendation for Android Developers",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nswA2eQYvB2VMATIABT5R/5WNNsPhJ5Pl6hxbqipDB1f.pdf"
        },
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        },
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        }
      ]
    },
    {
      "affiliation": "Singapore University of Technology and Design",
      "articleRefs": [
        {
          "pageNumber": 215,
          "articleName": "Static Analysis of Context Leaks in Android Applications",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jHnDZvs2fqlaFrFCxfUpX/1b1KkOf8jkZyi9FJDlxPt7.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "Poster: Testing Heap-Based Programs with Java StarFinder",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4rzKWBKexbqBTVf4cYq0W1/FEIdNYhXk5CVNrycd5Sf3.pdf"
        },
        {
          "pageNumber": 291,
          "articleName": "Towards Optimal Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5RrqD9bEgjcdclSy11URjg/2czbn8hdUhh9LxAyqsDHeh.pdf"
        },
        {
          "pageNumber": 323,
          "articleName": "Poster: Benchmarking Microservice Systems for Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4MPJujC2aLJ54VMGaEtm76/1tKujoNDTv8GyqnEt9T70J.pdf"
        }
      ]
    },
    {
      "affiliation": "Singular Logic",
      "articleRefs": [
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        }
      ]
    },
    {
      "affiliation": "SINTEF Digital",
      "articleRefs": [
        {
          "pageNumber": 97,
          "articleName": "Deep Customization of Multi-tenant SaaS Using Intrusive Microservices",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/21RHGeVqhABQzfCCA9FBCo/4aXCmrOeKegXHqHD0m3lof.pdf"
        },
        {
          "pageNumber": 426,
          "articleName": "Poster: Identifying Security Issues in Software Development: Are Keywords Enough?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6gBAdmDKYhyHsm7KCt99cN/4hTlGNOOjkp6Hde2uwrpbn.pdf"
        }
      ]
    },
    {
      "affiliation": "SMS group GmbH",
      "articleRefs": [
        {
          "pageNumber": 121,
          "articleName": "Poster: Industrie 4.0 Virtual Automation Bus",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5pYp8nrIrsJfrld5uVYqQr/2OrFMaQUJ134I2ucHbwDnx.pdf"
        }
      ]
    },
    {
      "affiliation": "SnT",
      "articleRefs": [
        {
          "pageNumber": 945,
          "articleName": "[Journal First] Augmenting and Structuring User Queries to Support Efficient Free-Form Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1JrqIocViZsEwmqFYc2ZG8/6di7UZMIN0ghOMa0V1wD4w.pdf"
        },
        {
          "pageNumber": 946,
          "articleName": "FaCoY – A Code-to-Code Search Engine",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/44jENh1HCaI0cMro7SDdXF/XmyjWSAWX4J79bfPyGLmr.pdf"
        }
      ]
    },
    {
      "affiliation": "SnT Centre",
      "articleRefs": [
        {
          "pageNumber": 1016,
          "articleName": "Testing Vision-Based Control Systems Using Learnable Evolutionary Algorithms",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/VwB38GE70VKZwyWn3vYpD/2vNhnZhaJwrULtleN0eIAX.pdf"
        }
      ]
    },
    {
      "affiliation": "Software Heritage, Inria",
      "articleRefs": [
        {
          "pageNumber": 2,
          "articleName": "Software Heritage: Why and How We Collect, Preserve and Share All the Software Source Code",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/7MMxRx2XeqMINwIWWsmplT/4K8m85QOD25MipXvyPliC8.pdf"
        }
      ]
    },
    {
      "affiliation": "Software Improvement Group",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "Enabling Real-Time Feedback in Software Engineering",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1P4e84VisnS1V4s5JFeMDG/6qyItoA37xavNTcfnScGHo.pdf"
        },
        {
          "pageNumber": 55,
          "articleName": "Smelly Relations: Measuring and Understanding Database Schema Quality",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/2hT43PoVNNMAEKGPPxCS5r/1lCAEYDSZx3FWfSHlMOiX9.pdf"
        },
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        }
      ]
    },
    {
      "affiliation": "Sophos",
      "articleRefs": [
        {
          "pageNumber": 356,
          "articleName": "Poster: Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/lTY24X4tLQvcAy9QoyDPY/HGOgCoz5XwWoK1DQokPwP.pdf"
        }
      ]
    },
    {
      "affiliation": "Southern University of Science and Technology",
      "articleRefs": [
        {
          "pageNumber": 187,
          "articleName": "Repairing Crashes in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/11SgkKwQHmFo9IUg9YcyHZ/221qL68Sp1f0tYoxd9WFxU.pdf"
        }
      ]
    },
    {
      "affiliation": "STAKE Lab - University of Molise",
      "articleRefs": [
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        }
      ]
    },
    {
      "affiliation": "State Key Laboratory of Networking and Switching Technology",
      "articleRefs": [
        {
          "pageNumber": 236,
          "articleName": "Poster: Subsuming Mutation Operators",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/12EuynTWt9AtmaEN1SAUSE/3T1yWN6lEd57lNObJ4B2uT.pdf"
        }
      ]
    },
    {
      "affiliation": "State Key Laboratory of Software Engineering",
      "articleRefs": [
        {
          "pageNumber": 270,
          "articleName": "Poster: Automatically Answering API-Related Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5utihuJQigAkQw9XGt72vo/2GQHpwVZXpIKgZhlF4F0aS.pdf"
        }
      ]
    },
    {
      "affiliation": "Stellenbosch University",
      "articleRefs": [
        {
          "pageNumber": 552,
          "articleName": "Multi-platform Computing for Physical Devices via MakeCode and CODAL",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ot68K3aKE7CQfcrmRVKlR/jsk9AWtBkZikr0gw8xmBk.pdf"
        }
      ]
    },
    {
      "affiliation": "Stevens Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 358,
          "articleName": "Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nkFZGabFmQT9XjbZsafGM/6RhqzwQooNR2K4lpXABN0Z.pdf"
        },
        {
          "pageNumber": 811,
          "articleName": "Speedoo: Prioritizing Performance Optimization Opportunities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1n3EHZ69Ja5of7qLpXnL86/5IDS4UmAOw5scrzvbU1Gyb.pdf"
        }
      ]
    },
    {
      "affiliation": "Stiftung Universität Hildesheim",
      "articleRefs": [
        {
          "pageNumber": 456,
          "articleName": "Automated Migration Support for Software Product Line Co-evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4CqA1ySu5pLzpR0zG80jCO/3QaPR5SUOtbuxB6z0TOK3S.pdf"
        }
      ]
    },
    {
      "affiliation": "Sungkyunkwan University",
      "articleRefs": [
        {
          "pageNumber": 248,
          "articleName": "Poster: Are Information Retrieval-Based Bug Localization Techniques Trustworthy?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FEPaJ8VlER0FgFEO0g7E9/6BkafrT9xYPneW0yxpUaYI.pdf"
        },
        {
          "pageNumber": 252,
          "articleName": "Poster: A Novel Variable-centric Fault Localization Technique",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1lBIthnFpQH61GQVNJyHdj/3ze3yC49yx3JeWx3QFXzVr.pdf"
        }
      ]
    },
    {
      "affiliation": "Sun Yat-sen University",
      "articleRefs": [
        {
          "pageNumber": 134,
          "articleName": "A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1THX06dkdc4p9NK74CQDK6/4cihGy6VmWGDisS2sZqFnJ.pdf"
        },
        {
          "pageNumber": 260,
          "articleName": "Poster: Guiding Developers to Make Informative Commenting Decisions in Source Code",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3KOAs6b5Ao6dTf4nrU5Z2R/4wShlhH4Ml9nJbkkAnMNpN.pdf"
        },
        {
          "pageNumber": 360,
          "articleName": "Poster: Efficient Blockchain-Based Software Systems via Hierarchical Bucket Tree",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kqs7SQRatS1ve2ystqzZc/1G7CJAIYcAjDhZBKietcio.pdf"
        },
        {
          "pageNumber": 362,
          "articleName": "Poster: Group Preference Based API Recommendation via Heterogeneous Information Network",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/IC5E4GtEfoXUYedszQWOU/dzEEtMPWqCEdK6XcvtGnj.pdf"
        }
      ]
    },
    {
      "affiliation": "Sur University College",
      "articleRefs": [
        {
          "pageNumber": 344,
          "articleName": "Poster: There is no Random Sampling in Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5msns8eXuL9pIbElcgfmgG/6uDGJK7nkoo5B3rnrF4pIV.pdf"
        }
      ]
    },
    {
      "affiliation": "Swinburne University of Technology",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        },
        {
          "pageNumber": 246,
          "articleName": "Poster: An Experimental Analysis of Fault Detection Capabilities of Covering Array Constructors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1LPlzWg0tHBZcuzmWldSvI/1WM1Gk3gKbTdWVYozOBdR6.pdf"
        }
      ]
    },
    {
      "affiliation": "Tata Research Development and Design Center (TCS Research)",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Resolving Ambiguities in Regulations: Towards Achieving the Kohlbergian Stage of Principled Morality",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/69icpikVftpm7I1bG2Rw90/5etwQxKickKUsDOy6kRsul.pdf"
        }
      ]
    },
    {
      "affiliation": "TCS Research",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "Generalizing Specific-Instance Interpolation Proofs with SyGuS",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6O8wrhX2O9cvQjAmWGmMqK/dS8C4iWQN1NmsD2aISsDI.pdf"
        }
      ]
    },
    {
      "affiliation": "Technical University Ilmenau",
      "articleRefs": [
        {
          "pageNumber": 834,
          "articleName": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf"
        }
      ]
    },
    {
      "affiliation": "Technical University of Denmark",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "Poster: How Do Modelers Read UML Diagrams? Preliminary Results from an Eye-Tracking Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Ygrgdbo8I3WTgFdEttAZ/hlNhrLtYcjy06WFvxVYCf.pdf"
        }
      ]
    },
    {
      "affiliation": "Technical University of Munich",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Aletheia: A Failure Diagnosis Toolchain",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RuHKRW0D4nCqMWOQR7oTQ/5l0kvbcWGGmPFfiQv1YvL6.pdf"
        },
        {
          "pageNumber": 115,
          "articleName": "Tool-Based Interactive Software Parallelization: A Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6WOIQt9qfOJgDlYDiHswtu/4d3FRvoz63ZHw3qyaofuzP.pdf"
        },
        {
          "pageNumber": 136,
          "articleName": "Increasing Student Engagement in Higher Education Using a Context-Aware Q&A Teaching Framework",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/70xg6U2NS78MdWNOncB6PJ/1EzW0QC7tyq9nW243YE3yj.pdf"
        },
        {
          "pageNumber": 204,
          "articleName": "Poster: Pairika—A Failure Diagnosis Benchmark for C++ Programs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/f1ubgK4ymojHoMrnw03rC/3VlpXQf3WB9xHCuvaGO8zz.pdf"
        }
      ]
    },
    {
      "affiliation": "Technion",
      "articleRefs": [
        {
          "pageNumber": 1114,
          "articleName": "Programming Not Only by Example",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4OSJhkaFu096tUteSJdWJs/2hPIFheVxQOKQ5wEo4hSMx.pdf"
        }
      ]
    },
    {
      "affiliation": "Technion - Israel Institute of Technology",
      "articleRefs": [
        {
          "pageNumber": 218,
          "articleName": "Poster: Program Repair that Learns from Mistakes",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5WYshgXWWlCoNftsjI3HqS/3gQhUCRnqq5G6N5jKJapeL.pdf"
        }
      ]
    },
    {
      "affiliation": "Technische Universität Ilmenau",
      "articleRefs": [
        {
          "pageNumber": 181,
          "articleName": "Poster: Use of Trace Link Types in Issue Tracking Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3LodwIy3T6TyziM519l2zg/6ZxSLctP0rebQAl9A0LZAZ.pdf"
        }
      ]
    },
    {
      "affiliation": "Technological University of Paraná (UTFPR)",
      "articleRefs": [
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "affiliation": "Tecnológico de Monterrey.",
      "articleRefs": [
        {
          "pageNumber": 139,
          "articleName": "Poster: A Matrix for Analyzing Projects in Software Engineering Courses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4taJKQS2iQrYX5FylSDq4Y/1yXNyF4Ikm9Om5ZLve3Qqw.pdf"
        }
      ]
    },
    {
      "affiliation": "Teesside University",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "Poster: Testing Heap-Based Programs with Java StarFinder",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4rzKWBKexbqBTVf4cYq0W1/FEIdNYhXk5CVNrycd5Sf3.pdf"
        }
      ]
    },
    {
      "affiliation": "Tel Aviv University",
      "articleRefs": [
        {
          "pageNumber": 350,
          "articleName": "Chopped Symbolic Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4dB4MqN33HWSe06nX7cqo8/4A2sy5Nn535KnCMdVFvrXE.pdf"
        },
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        },
        {
          "pageNumber": 1114,
          "articleName": "Programming Not Only by Example",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4OSJhkaFu096tUteSJdWJs/2hPIFheVxQOKQ5wEo4hSMx.pdf"
        }
      ]
    },
    {
      "affiliation": "Texas A&M University",
      "articleRefs": [
        {
          "pageNumber": 609,
          "articleName": "UFO: Predictive Concurrency Use-After-Free Detection",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7vaMmExpgCAHR0lMMVfalr/3tsMUkD88ozwlPiOx8VtCM.pdf"
        }
      ]
    },
    {
      "affiliation": "The Chinese University of Hong Kong",
      "articleRefs": [
        {
          "pageNumber": 48,
          "articleName": "Online App Review Analysis for Identifying Emerging Issues",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/WAXUkTkTbQJUUMnuRmt95/7I5gsduIRWKigNQEA2sexO.pdf"
        },
        {
          "pageNumber": 360,
          "articleName": "Poster: Efficient Blockchain-Based Software Systems via Hierarchical Bucket Tree",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kqs7SQRatS1ve2ystqzZc/1G7CJAIYcAjDhZBKietcio.pdf"
        }
      ]
    },
    {
      "affiliation": "The College of William and Mary",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        }
      ]
    },
    {
      "affiliation": "The Fourth Academy of CASIC",
      "articleRefs": [
        {
          "pageNumber": 378,
          "articleName": "Poster: A Weight-Based Approach to Combinatorial Test Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2Any45g8iGQxyhmGAQY5Fo/3rQbqsTfU1aEu0JCf4Ad0.pdf"
        }
      ]
    },
    {
      "affiliation": "The Hong Kong Polytechnic University",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Towards Saving Money in Using Smart Contracts",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf"
        },
        {
          "pageNumber": 134,
          "articleName": "A Detailed and Real-Time Performance Monitoring Framework for Blockchain Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1THX06dkdc4p9NK74CQDK6/4cihGy6VmWGDisS2sZqFnJ.pdf"
        }
      ]
    },
    {
      "affiliation": "The Hong Kong University of Science and Technology",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Context-Aware Patch Generation for Better Automated Program Repair",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2FydAwOD2o1un1UuWRcZuR/4DiUknL45OPujvaqe5CpDE.pdf"
        },
        {
          "pageNumber": 536,
          "articleName": "[Journal First] ChangeLocator: Locate Crash-Inducing Changes Based on Crash Reports",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6UNHbzVwmZVSsRWnuhsdWp/2bRMUsVOinygp3ZsKkc26P.pdf"
        },
        {
          "pageNumber": 933,
          "articleName": "Deep Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6YGOIojlzNINpMgNCiWexy/1XBHyJ8bsQpXg13bh3bS9O.pdf"
        }
      ]
    },
    {
      "affiliation": "The Most Serene Republic",
      "articleRefs": [
        {
          "pageNumber": 129,
          "articleName": "Poster: An Initial Characterization of Bug-Injecting Development Sessions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7nrXDes1AE17dN1F7CYJII/3tpIHuPtxoFOTTsXewXvBN.pdf"
        }
      ]
    },
    {
      "affiliation": "The Open University",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        },
        {
          "pageNumber": 548,
          "articleName": "Machine Learning for Software Engineering: Models, Methods, and Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/68mZt2BRUQO2z4mysF42zv/3BBCZzcXIipNq8ElKPyNZb.pdf"
        }
      ]
    },
    {
      "affiliation": "The Open University and Lero – the Irish Software Research Centre",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        }
      ]
    },
    {
      "affiliation": "The Pennsylvania State University",
      "articleRefs": [
        {
          "pageNumber": 26,
          "articleName": "Software Protection on the Go: A Large-Scale Empirical Study on Mobile App Obfuscation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2EdfBsXkJwNigFBTvo9BLV/4xu36PAZ7PYx3sUV1mpEWS.pdf"
        },
        {
          "pageNumber": 235,
          "articleName": "Protecting Million-User iOS Apps with Obfuscation: Motivations, Pitfalls, and Experience",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/6D79uXKxsLFDPmMFKNcRW8/1VBkWnd3mBlkpIkTqvuUqq.pdf"
        }
      ]
    },
    {
      "affiliation": "The REUSE Company",
      "articleRefs": [
        {
          "pageNumber": 199,
          "articleName": "Poster: Analysis of Requirements Quality Evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Oka6DtRrIRdQoPXKe3Y2t/1Sod1yVld1RpM3H1H2IQs3.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Adelaide",
      "articleRefs": [
        {
          "pageNumber": 286,
          "articleName": "An Experience Report on Defect Modelling in Practice: Pitfalls and Challenges",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1XE1Rcu3h9nk31GZtFimCl/5FPku5dJlOtWZkQS6QB4ck.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Adelaide, Australia",
      "articleRefs": [
        {
          "pageNumber": 164,
          "articleName": "[Journal First] Studying the Dialogue Between Users and Developers of Free Apps in the Google Play Store",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5DvXCVhNZmmS4ZOChxQpkT/3YJxPVzOETe0xHdSpDBS9Z.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Akron",
      "articleRefs": [
        {
          "pageNumber": 337,
          "articleName": "Poster: A Taxonomy of how Method Stereotypes Change",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5ae0pDaDuZzKvYglGBJ1m0/3B97JRLHea7E92xQx4TI3L.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Auckland",
      "articleRefs": [
        {
          "pageNumber": 224,
          "articleName": "Poster: Understanding Newcomers Success in Open Source Community",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1vEY6gn8gZNvwOStgfHegX/13c4ewsBH6lkcmQnTnT4HD.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of British Columbia",
      "articleRefs": [
        {
          "pageNumber": 57,
          "articleName": "CSlicerCloud: A Web-Based Semantic History Slicing Framework",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7Yn83TiytMgtUpghw9e6M/3Htwf6zDJNCLarJZ9SUyf7.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Newcastle",
      "articleRefs": [
        {
          "pageNumber": 536,
          "articleName": "[Journal First] ChangeLocator: Locate Crash-Inducing Changes Based on Crash Reports",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6UNHbzVwmZVSsRWnuhsdWp/2bRMUsVOinygp3ZsKkc26P.pdf"
        },
        {
          "pageNumber": 933,
          "articleName": "Deep Code Search",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6YGOIojlzNINpMgNCiWexy/1XBHyJ8bsQpXg13bh3bS9O.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Texas at Arlington",
      "articleRefs": [
        {
          "pageNumber": 452,
          "articleName": "Understanding and Improving Cyber-Physical System Models and Development Tools",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JVZTMBQ0Moq4XEPHzCVVd/BO1pk4MXqVy481gt4VcZn.pdf"
        },
        {
          "pageNumber": 506,
          "articleName": "Automatically Finding Bugs in Commercial Cyber-Physical System Development Tool Chains",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5JiheKcasvQTAijbzzIUHH/6R3AwFA3XlkwVU3O0s1ArD.pdf"
        },
        {
          "pageNumber": 981,
          "articleName": "Automatically Finding Bugs in a Commercial Cyber-Physical System Development Tool Chain With SLforge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6JVF7zrUPqcVi8bmhy9CVm/6iMfwKnu6DPaNGEZTjKBx4.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Texas at Austin",
      "articleRefs": [
        {
          "pageNumber": 12,
          "articleName": "Towards Practical Program Repair with On-demand Candidate Generation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2E5RW0qgO8jUBND0skhRAJ/2dmZrsD625tVeRcqta1x9.pdf"
        },
        {
          "pageNumber": 57,
          "articleName": "CSlicerCloud: A Web-Based Semantic History Slicing Framework",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7Yn83TiytMgtUpghw9e6M/3Htwf6zDJNCLarJZ9SUyf7.pdf"
        },
        {
          "pageNumber": 117,
          "articleName": "A Regression Proof Selection Tool For Coq",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4d3wTvZAzM1UeluRGK5ggk/73ZV4s78VDohful3g6T0eF.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Texas at Dallas",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf"
        },
        {
          "pageNumber": 167,
          "articleName": "Poster: Inferring API Elements Relevant to an English Query",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2CIUBvlM9QN4wbSsCln6t5/4d6HRtxvMOeaXOEvQrgOlj.pdf"
        },
        {
          "pageNumber": 199,
          "articleName": "Hybrid Regression Test Selection",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6zj4BbjPBhIpgTSHRpbCKI/399beym5BlUCGqVFo4jR6U.pdf"
        },
        {
          "pageNumber": 530,
          "articleName": "Automatic Software Summarization: The State of the Art",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54CdjHMEEvZOX7240tsnI0/pD8iZ5Q7JF5mIlQD0vxUc.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Texas at San Antonio",
      "articleRefs": [
        {
          "pageNumber": 1078,
          "articleName": "HireBuild: An Automatic Approach to History-Driven Repair of Build Scripts",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4EunJVbQWNAoytXaDKsWQW/vjspQNQozfRX2hXLvcDJ7.pdf"
        }
      ]
    },
    {
      "affiliation": "The University of Texas San Antonio",
      "articleRefs": [
        {
          "pageNumber": 1078,
          "articleName": "HireBuild: An Automatic Approach to History-Driven Repair of Build Scripts",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4EunJVbQWNAoytXaDKsWQW/vjspQNQozfRX2hXLvcDJ7.pdf"
        }
      ]
    },
    {
      "affiliation": "thingsTHINKING GmbH",
      "articleRefs": [
        {
          "pageNumber": 436,
          "articleName": "Poster: Autotuning PostgreSQL: A Blueprint for Successful Autotuning of Real-World Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1kXPYWE3EQc7SeJd3lthrV/5kU2UcOItB1UnYsqHiveS7.pdf"
        }
      ]
    },
    {
      "affiliation": "Tianjin University",
      "articleRefs": [
        {
          "pageNumber": 230,
          "articleName": "Poster: An Efficient Approach for Verifying Automobile Distributed Application Systems on Timing Property",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/X0glNBWe9bFHLqk18sHr8/3C06tjBbRFMPTLiNNoEii.pdf"
        }
      ]
    },
    {
      "affiliation": "Tokai University",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "affiliation": "Tokushima University",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "affiliation": "Tokyo City University",
      "articleRefs": [
        {
          "pageNumber": 151,
          "articleName": "Poster: Multidisciplinary Skill Assessment for Embedded Software Development Education via a Robot Contest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7A2nDrVmTULiXuXmiKREEe/2xJ7PWoLmyroc5HdLA8FS8.pdf"
        }
      ]
    },
    {
      "affiliation": "Tsinghua University",
      "articleRefs": [
        {
          "pageNumber": 58,
          "articleName": "Continuous Delivery of Personalized Assessment and Feedback in Agile Software Engineering Projects",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/1ztuOBdGuPzPaaZ5ZxbGjy/7Bjf67pa1UxMHWufh4okAy.pdf"
        },
        {
          "pageNumber": 61,
          "articleName": "SAFL: Increasing and Accelerating Testing Coverage with Symbolic Execution and Guided Fuzzing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2wQFOHJU5QY1aSNGOj5WlU/69TdWrHG4oqQst002X2U7L.pdf"
        },
        {
          "pageNumber": 65,
          "articleName": "ReGuard: Finding Reentrancy Bugs in Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2dFTki9Ml83quzEQotDNy1/3g3bfAaS3Z85gdgD6MnCrF.pdf"
        },
        {
          "pageNumber": 69,
          "articleName": "Weak-Assert: A Weakness-Oriented Assertion Recommendation Toolkit for Program Analysis",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6wHKrC9nn3wmYB20hFTiuW/5Tl0zuxP7CFvCY4qWXe0ge.pdf"
        },
        {
          "pageNumber": 327,
          "articleName": "Poster: Model-Based Adaptation to Extreme Physical Environments: A Case Study on Mixed-Criticality Industrial Ethernet",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7GtVpgolsvwHY6LHPyhM13/4H225Nz2cYgCYnKtZIi1er.pdf"
        },
        {
          "pageNumber": 358,
          "articleName": "Poster: Identifying TraIn: A Neglected Form of Socio-Technical Incongruence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4nkFZGabFmQT9XjbZsafGM/6RhqzwQooNR2K4lpXABN0Z.pdf"
        },
        {
          "pageNumber": 1231,
          "articleName": "Multi-objective Integer Programming Approaches for Solving Optimal Feature Selection Problem: A New Perspective on Multi-objective Optimization Problems in SBSE",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1TtVOsFS1qq7UEalN0m3JG/3XBHStq8A8ko8AbWNPERaX.pdf"
        }
      ]
    },
    {
      "affiliation": "TU Braunschweig",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Towards Secure Dynamic Product Lines in the Cloud",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/ddnfY6dULdVmMszdRVtEh/465oI9jBRrrcDPJtKsNI0K.pdf"
        },
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "affiliation": "TU Darmstadt",
      "articleRefs": [
        {
          "pageNumber": 45,
          "articleName": "Cross-Language Optimizations in Big Data Systems: A Case Study of SCOPE",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7coDDNB5gFaIi3yM57kNPD/11bmVU627jwxwAbd5Hc27n.pdf"
        },
        {
          "pageNumber": 741,
          "articleName": "ConflictJS: Finding and Understanding Conflicts Between JavaScript Libraries",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7twbgTuy2NJmU9AzxtFLxY/3aHDfMIHUsHnzDo5nGLCfY.pdf"
        }
      ]
    },
    {
      "affiliation": "TU Dortmund",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "Combining Spreadsheet Smells for Improved Fault Prediction",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6g9m2CB4CQVEmAtW5kqTYM/46Oznw5zUCCF8DBjvV9nvH.pdf"
        }
      ]
    },
    {
      "affiliation": "TU Wien",
      "articleRefs": [
        {
          "pageNumber": 274,
          "articleName": "Poster: Systematic Top-Down Design of Cyber-Physical Models with Integrated Validation and Formal Verification",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/38tlW5CES2zQGPC5Lddm4E/1Pf8cuH3eGelk0cq747NRO.pdf"
        }
      ]
    },
    {
      "affiliation": "UC Berkeley",
      "articleRefs": [
        {
          "pageNumber": 643,
          "articleName": "When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6GLeSY1mgFUzosp40gePzP/319S5NA4vc1l2JnJLFtpTQ.pdf"
        }
      ]
    },
    {
      "affiliation": "UCLA",
      "articleRefs": [
        {
          "pageNumber": 585,
          "articleName": "[Journal First] Data Scientists in Software Teams: State of the Art and Challenges",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47NY96sCKYhfY6lLApaAdS/UjTg5agZVWapuv8BiuO4t.pdf"
        }
      ]
    },
    {
      "affiliation": "UFAL",
      "articleRefs": [
        {
          "pageNumber": 921,
          "articleName": "Identifying Design Problems in the Source Code: A Grounded Theory",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4fybUk1yomyQY29Cyz9UDT/4PO9otkmRYjafyPi2fIP6C.pdf"
        }
      ]
    },
    {
      "affiliation": "UFMG",
      "articleRefs": [
        {
          "pageNumber": 1102,
          "articleName": "Assessing the Threat of Untracked Changes in Software Evolution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf"
        }
      ]
    },
    {
      "affiliation": "UFMS",
      "articleRefs": [
        {
          "pageNumber": 1102,
          "articleName": "Assessing the Threat of Untracked Changes in Software Evolution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/10naT7nJy4yAkYKzRaoDSj/4GmxnoYj90A0sMf272AEqG.pdf"
        }
      ]
    },
    {
      "affiliation": "UFRN",
      "articleRefs": [
        {
          "pageNumber": 858,
          "articleName": "[Journal First] Global-Aware Recommendations for Repairing Violations in Exception Handling",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eNWZZMvEzSZ7Kd4fLfQ6B/657yWIupHe5IFrgvcnH8bJ.pdf"
        }
      ]
    },
    {
      "affiliation": "UGA / LIG",
      "articleRefs": [
        {
          "pageNumber": 392,
          "articleName": "Poster: A Declarative Approach for Updating Distributed Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6NuEmP8ZsSnvKNvNyTrrlD/1nPmlCZWlN2oGC90OpEUxG.pdf"
        }
      ]
    },
    {
      "affiliation": "Ulm University",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7AR1rQIo5AY5AHtnMEwv4A/1SiRVtUZx91IpmQ6JlEKaR.pdf"
        },
        {
          "pageNumber": 131,
          "articleName": "Poster: Challenges with Automotive Test Case Specifications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/22HRkItZGtp9E0KerKRG6U/55RByn2pvzw3VEvvRElf7v.pdf"
        }
      ]
    },
    {
      "affiliation": "Univeristy of Zurich",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "User Feedback in the App Store: A Cross-Cultural Study",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Autónoma de Madrid",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "AnATLyzer: An Advanced IDE for ATL Model Transformations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6HUyRSJNffENk0hIDslir4/7ztsIy99oUIxCRJRG6B57S.pdf"
        },
        {
          "pageNumber": 1136,
          "articleName": "[Journal First] A Posteriori Typing for Model-Driven Engineering: Concepts, Analysis, and Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4mNiUyA6xEXMQZEdZ4zA4z/7zWVDzPltCbrVhrqyYMy19.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Carlos III de Madrid",
      "articleRefs": [
        {
          "pageNumber": 199,
          "articleName": "Poster: Analysis of Requirements Quality Evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/Oka6DtRrIRdQoPXKe3Y2t/1Sod1yVld1RpM3H1H2IQs3.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad de Costa Rica",
      "articleRefs": [
        {
          "pageNumber": 108,
          "articleName": "Use of JiTT in a Graduate Software Testing Course: An Experience Report",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7KI9xFrlptWhB1WS8sHiEe/2ipWZAAMbfjOAgdYm5JLyp.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad de las Fuerzas Armadas ESPE",
      "articleRefs": [
        {
          "pageNumber": 1195,
          "articleName": "Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4DXjZ1hszyCVhZZvfNLCgj/2h3ZD73wXPhuAjdGHgymnT.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad de los Andes",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad de Murcia",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "AnATLyzer: An Advanced IDE for ATL Model Transformations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6HUyRSJNffENk0hIDslir4/7ztsIy99oUIxCRJRG6B57S.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad de Sevilla",
      "articleRefs": [
        {
          "pageNumber": 882,
          "articleName": "[Journal First] Metamorphic Testing of RESTful Web APIs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2LyedqPxjqMs5M0a7ONlmb/7dHldjNf2ey5gxorIcbznJ.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidade da Coruña",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FOzcRg0BG6NRLGft0111q/ZDCSeD2qsGxWw2YH3ZSLP.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidade NOVA de Lisboa",
      "articleRefs": [
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Nacional de Río Cuarto",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Nacional de Río Cuarto and CONICET",
      "articleRefs": [
        {
          "pageNumber": 1125,
          "articleName": "Goal-Conflict Likelihood Assessment Based on Model Counting",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5wUUfEi6QwQHacDt0sz7HH/4ZdwamD9eMH9n7ELNwiGHe.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Politecnica de Madrid",
      "articleRefs": [
        {
          "pageNumber": 534,
          "articleName": "Analyzing Software Engineering Experiments: Everything You Always Wanted to Know but Were Afraid to Ask",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jEtcrihLMyv2tOdNL64Qa/1xcUJfLdb0AwoiSDBB60Fa.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Politécnica de Madrid",
      "articleRefs": [
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        },
        {
          "pageNumber": 1195,
          "articleName": "Statistical Errors in Software Engineering Experiments: A Preliminary Literature Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4DXjZ1hszyCVhZZvfNLCgj/2h3ZD73wXPhuAjdGHgymnT.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Rey Juan Carlos",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Perceval: Software Project Data at Your Will",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/74BfjuU7YgEDIGvOyOw2jn/3kyGXInAHq50ArWx3rxuYp.pdf"
        },
        {
          "pageNumber": 17,
          "articleName": "When the Testing Gets Tough, the Tough Get ElasTest",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6U9g6sYyZ6jr1arMM6nkYa/2yppEuJRf2fbrJmtWiK4s4.pdf"
        },
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        }
      ]
    },
    {
      "affiliation": "Universidad Tecnica Federico Santa Maria",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Poster: Exploration of Academic and Industrial Evidence about Architectural Tactics and Patterns in Microservices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/TLOslOwt6ZiwpMbu04hsL/BNRxGvN7me9B2jeqY2cNm.pdf"
        }
      ]
    },
    {
      "affiliation": "Università degli Studi di Milano Bicocca",
      "articleRefs": [
        {
          "pageNumber": 288,
          "articleName": "Poster: Machine Learning Based Code Smell Detection Through WekaNose",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2gDaQr1ksB8ODkMYxzryZz/5wYT53VZ6GfJZXciRk1zCw.pdf"
        }
      ]
    },
    {
      "affiliation": "Università degli Studi di Milano-Bicocca",
      "articleRefs": [
        {
          "pageNumber": 1219,
          "articleName": "[Journal First] Automatic Software Repair: A Survey",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ZwRKZQkILQrDf1dYRc6MX/3GxXiKpuG16Y0aONhuJjab.pdf"
        }
      ]
    },
    {
      "affiliation": "Università della Svizzera italiana",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        },
        {
          "pageNumber": 492,
          "articleName": "Crowdsourced Software Development and Maintenance",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6YipsPizLvhNMfP0ZApmdR/7tziaWqEES1nb0PuCtqOhp.pdf"
        }
      ]
    },
    {
      "affiliation": "Università della Svizzera italiana (USI)",
      "articleRefs": [
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        }
      ]
    },
    {
      "affiliation": "Universita della Svizzera italiana (USI)",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        }
      ]
    },
    {
      "affiliation": "Universität Koblenz-Landau",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "affiliation": "Universität Marburg",
      "articleRefs": [
        {
          "pageNumber": 716,
          "articleName": "Multi-granular Conflict and Dependency Analysis in Software Engineering Based on Graph Transformation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5qTKMNnKyEqLZWkDcDqJrV/30ss52DmhQgH5i49LPq2tV.pdf"
        }
      ]
    },
    {
      "affiliation": "Universiteit Antwerpen",
      "articleRefs": [
        {
          "pageNumber": 280,
          "articleName": "Poster: Unit Tests and Component Tests do Make a Difference on Fault Localisation Effectiveness",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1RTqhUi6UtbGqyJRHY9JdB/5ZovXpS8VqZDPU3QMSkzrb.pdf"
        }
      ]
    },
    {
      "affiliation": "Université Lille",
      "articleRefs": [
        {
          "pageNumber": 481,
          "articleName": "[Journal First] Correctness Attraction: A Study of Stability of Software Behavior Under Runtime Perturbation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eqOOzQhTFWl1DjBjl5nBy/2MWh15XJDPpGqAoI99V7rp.pdf"
        }
      ]
    },
    {
      "affiliation": "University College Dublin",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        }
      ]
    },
    {
      "affiliation": "University College London",
      "articleRefs": [
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Adelaide",
      "articleRefs": [
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        },
        {
          "pageNumber": 1207,
          "articleName": "Synthesizing Qualitative Research in Software Engineering: A Critical Review",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gP6981YTW6eVM01e6ifWF/7MEqctC3pXKSK3L7LYYuf2.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Alberta",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "Which Library Should I Use?: A Metric-Based Comparison of Software Libraries",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7tvenWpQiRYIQUZxjDtYA1/6oJRf6G9ZAFW05DP8p42aj.pdf"
        },
        {
          "pageNumber": 89,
          "articleName": "VisuFlow: A Debugging Environment for Static Analyses",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/CpmEd7e95YJWosktV3xzW/5zm6PeVlUhOhKFBig1HGef.pdf"
        },
        {
          "pageNumber": 1062,
          "articleName": "[Journal First] Analyzing the Effects of Test Driven Development in GitHub",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7E87zq66ELDArjurWiTGlC/7pQU2PsyQiLteaW3D5kgMw.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Applied Sciences Northwestern Switzerland",
      "articleRefs": [
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Auckland",
      "articleRefs": [
        {
          "pageNumber": 116,
          "articleName": "Re-imagining a Course in Software Project Management",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/lMzeYRFCLK5hr8vXsQJVt/dDnKXUBMiBVrNSMfHyRRS.pdf"
        },
        {
          "pageNumber": 344,
          "articleName": "Poster: There is no Random Sampling in Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5msns8eXuL9pIbElcgfmgG/6uDGJK7nkoo5B3rnrF4pIV.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Augsburg",
      "articleRefs": [
        {
          "pageNumber": 374,
          "articleName": "Poster: Evaluating Project Compliance During EA Planning: A Model-Based Semi Automatic Method for Enterprise Architecture Planning",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jAph7dsbdQ5TEnLRwf3nC/5WW6OHv3kMU1cPYEtplONF.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Bamberg",
      "articleRefs": [
        {
          "pageNumber": 1149,
          "articleName": "Inferring and Asserting Distributed System Invariants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/24lb1U1vGXVTQ9ilBi3gLD/5c5Zch9tqgfvr3747kdOg6.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Bari Aldo Moro",
      "articleRefs": [
        {
          "pageNumber": 128,
          "articleName": "[Journal First] Sentiment Polarity Detection for Software Development",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5o2jlVBKgm0WbzNsXeVPrw/70ILFFydFpHbzdIOpU2GFl.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Basilicata",
      "articleRefs": [
        {
          "pageNumber": 306,
          "articleName": "Poster: CUTER: ClUstering-based TEst Suite Reduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1O6c7LMrpvYO3yKdZ6nu8K/3xiITKaOxnIRfZeDY8Cg9l.pdf"
        },
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Birmingham, UK",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "A Critical Review of \"A Practical Guide to Select Quality Indicators for Assessing Pareto-Based Search Algorithms in Search-Based Software Engineering\": Essay on Quality Indicator Selection for SBSE",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/6UAPfFBg43xIyqHtpkPyPH/5XsmxGGTBk7EC4UT2514rP.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Bologna",
      "articleRefs": [
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Bristol",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "Towards Forensic-Ready Software Systems",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/5FFUv09ihaoEFrgt6JZgnj/4McaebHnvXyRFZho0Bz8ru.pdf"
        },
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        },
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "affiliation": "University of British Columbia",
      "articleRefs": [
        {
          "pageNumber": 17,
          "articleName": "Making the Liskov Substitution Principle Happy and Sad",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/7sFqL5kqLFeYrq0VDIofeA/3SkOhugw3u15AiiCFvwywy.pdf"
        },
        {
          "pageNumber": 31,
          "articleName": "Dimensions of Experientialism for Software Engineering Education",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/605U6RSfff0jOaGLn2b2pi/6Exq3LcKAqn1jIVxLN55aJ.pdf"
        },
        {
          "pageNumber": 210,
          "articleName": "Fine-Grained Test Minimization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7FekvzG72MbQMYKnwN6pXO/34ooDIrCIylSUp9k6oGIrB.pdf"
        },
        {
          "pageNumber": 776,
          "articleName": "Inferring Hierarchical Motifs from Execution Traces",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TTXoZtYTdhZLsqHykC3ZK/3TvbLeZaB2ApWjzhC0Nfly.pdf"
        },
        {
          "pageNumber": 993,
          "articleName": "Context-Aware Conversational Developer Assistants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1XKrnlNgYAXbi9HEtIyOPn/7I9QtgsXIQ77QNhvWlsTtx.pdf"
        },
        {
          "pageNumber": 1149,
          "articleName": "Inferring and Asserting Distributed System Invariants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/24lb1U1vGXVTQ9ilBi3gLD/5c5Zch9tqgfvr3747kdOg6.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Calgary",
      "articleRefs": [
        {
          "pageNumber": 256,
          "articleName": "Evaluating Specification-level MC/DC Criterion in Model-Based Testing of Safety Critical Systems",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3jAtRSWcHJcJZLW9lwLKTT/3ZbcW64L99h5TIvUQiBeJI.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California",
      "articleRefs": [
        {
          "pageNumber": 394,
          "articleName": "Poster: Static Detection of API Call Vulnerabilities in iOS Executables",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/gSu6tRobTq6btbsdFEqcb/SnOv2Ft9uBvbOCkoaGtXE.pdf"
        },
        {
          "pageNumber": 408,
          "articleName": "Large-Scale Analysis of Framework-Specific Exceptions in Android Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7N7hzP95cegusUb83nArJ/aIS9T6GEBhV1llwEs2ywn.pdf"
        },
        {
          "pageNumber": 422,
          "articleName": "Poster: Grafter: Transplantation and Differential Testing for Clones",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1Dcj5hI5ay5ogwHLf0wwb6/2bpb6bAzfOMffNyv2sJYlw.pdf"
        },
        {
          "pageNumber": 430,
          "articleName": "Poster: Path-Based Function Embeddings",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/13uqQQomxpZIToZ2zI454A/4WnK3w1UjpFGbWZ1mk5omc.pdf"
        },
        {
          "pageNumber": 509,
          "articleName": "Interactive and Automated Debugging for Big Data Analytics",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/188doY8oxmCjN0EdlE23TZ/5Oc01PAwjhI9a1jBByORdl.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California, Berkeley",
      "articleRefs": [
        {
          "pageNumber": 445,
          "articleName": "DetReduce: Minimizing Android GUI Test Suites for Regression Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/65qbeRBREN0W4K0rpvhsnv/1pNi1RIt2umVAlWTxVJIml.pdf"
        },
        {
          "pageNumber": 549,
          "articleName": "Efficient Sampling of SAT Solutions for Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2fyL1Vd11RDdXakS4SXepo/4LVpbk5KkDNS1ZKZjpyWq5.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California Davis",
      "articleRefs": [
        {
          "pageNumber": 361,
          "articleName": "Perses: Syntax-Guided Program Reduction",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7EGalavwAIiq3Xl1qGd5XK/4fupulIFoGpbHOylSj3kFV.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California, Davis",
      "articleRefs": [
        {
          "pageNumber": 871,
          "articleName": "Symbolic Verification of Regular Properties",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IJNV2SslZXLkkcU0nrqLc/73G8pFObrprdyJDH04r5wl.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California, Irvine",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Competence-Confidence Gap: A Threat to Female Developers' Contribution on GitHub",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/42E4u7nqMTEXx7aNqWt2ao/5AnfXp47j7QWL1W5yQMac8.pdf"
        },
        {
          "pageNumber": 421,
          "articleName": "A Large-Scale Empirical Study on the Effects of Code Obfuscations on Android Apps and Anti-Malware Products",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7f234whcYWFE7F5MkE14fI/2SWs4RmA9Epgmb4okKjMz0.pdf"
        },
        {
          "pageNumber": 497,
          "articleName": "[Journal First] Lightweight, Obfuscation-Resilient Detection and Family Identification of Android Malware",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nEJytH1hn6nJ0tb77mA8t/6GTTGGl8wHMuhMg7g3ja9B.pdf"
        },
        {
          "pageNumber": 846,
          "articleName": "A Temporal Permission Analysis and Enforcement Framework for Android",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf"
        },
        {
          "pageNumber": 1039,
          "articleName": "Nemo: Multi-criteria Test-Suite Minimization with Integer Nonlinear Programming",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/gVQozZZzSv6Yh0cmO8GQb/6R13qIhxIq6zydaKQZnCij.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California, Los Angeles",
      "articleRefs": [
        {
          "pageNumber": 886,
          "articleName": "Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2eEvTc6qHbldivQpa5eYeD/5IW1xFsfcWW8UXnTSd983J.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California San Diego",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "SAFL: Increasing and Accelerating Testing Coverage with Symbolic Execution and Guided Fuzzing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2wQFOHJU5QY1aSNGOj5WlU/69TdWrHG4oqQst002X2U7L.pdf"
        }
      ]
    },
    {
      "affiliation": "University of California Santa Barbara",
      "articleRefs": [
        {
          "pageNumber": 424,
          "articleName": "Poster: Symbolic Path Cost Analysis for Side-Channel Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6qkGd3UA7CbCn9vt8iHqv0/572IaUvLUJjp18q2vinwmw.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Canterbury",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "Toward Enhancing the Training of Software Engineering Students and Professionals Using Active Video Watching",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/514Lia1cgT3MTvnEb0jjVq/12MwgOxicqOE6tPJIkAvle.pdf"
        },
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Central Florida",
      "articleRefs": [
        {
          "pageNumber": 313,
          "articleName": "Poster: An Algorithm and Tool to Infer Practical Postconditions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5VIJZqURpbuELiOLsoX5gB/34qnQCM0ECnQSCfKKWDUUj.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Chicago",
      "articleRefs": [
        {
          "pageNumber": 654,
          "articleName": "Deuce: A Lightweight User Interface for Structured Editing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1Mth4BXOFVTJCjWvB4WHOp/3upLdV7XPhjL0r2C6eiYqe.pdf"
        },
        {
          "pageNumber": 800,
          "articleName": "How not to Structure Your Database-Backed Web Applications: A Study of Performance Bugs in the Wild",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1heAUnsML3vNOxAklvY2o5/5r7WaaxVGeRjbQD2Yx8PMD.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Chile",
      "articleRefs": [
        {
          "pageNumber": 98,
          "articleName": "Assessing Software Development Skills Among K-6 Learners in a Project-Based Workshop with Scratch",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/2GG9HmlKJUfg2wQhLUSQQp/6sAWCYoeV5FGRsaRsTWPxr.pdf"
        },
        {
          "pageNumber": 1090,
          "articleName": "The Road to Live Programming: Insights from the Practice",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5kWabRxvKSbOrbfpQqtqMw/5X6aZ0m8fIIZBmOuIJogyI.pdf"
        }
      ]
    },
    {
      "affiliation": "University of China",
      "articleRefs": [
        {
          "pageNumber": 296,
          "articleName": "Poster: QoS-Aware Service Composition Using Blockchain-Based Smart Contracts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/52LmPy7QbAM0aNeB9uYJC2/53SEGmGiNbgYAVNqtV672d.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Cincinnati",
      "articleRefs": [
        {
          "pageNumber": 444,
          "articleName": "Poster: Answering the Requirements Traceability Questions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/54xELw09vUNSoYFjh1AziH/3vdJIWxnVZhNTP9QUA8bWD.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Colorado Boulder",
      "articleRefs": [
        {
          "pageNumber": 1160,
          "articleName": "DroidStar: Callback Typestates for Android Classes",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5McRzsc5nUYNHfk2SXKSEI/32i3Ft87x5shpeaIdML1QI.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Cyprus",
      "articleRefs": [
        {
          "pageNumber": 145,
          "articleName": "Poster: Analyzing the Transactive Memory in Teaching Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2mjQ6u3z5DtWVh8ZGkVecX/2RvFkXZzQGF6RmgO4z2AIM.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Delaware",
      "articleRefs": [
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Duisburg-Essen",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "A Data Decomposition Method for Stepwise Migration of Complex Legacy Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3O1Ktk2tXxpTHy1ufdypxO/4EhNANlLNIYSkF2FDJHDAs.pdf"
        },
        {
          "pageNumber": 159,
          "articleName": "Poster: Situation-Based E-Learning in Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7jRt05j0o5Od0mDeFBHkaK/4ATqHME8dRoAxyKBLypSDy.pdf"
        },
        {
          "pageNumber": 704,
          "articleName": "[Journal First] Does Syntax Highlighting Help Programming Novices?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3JFh3A5Bq7RbQ9rmj9ApFQ/61S7AqzTq8KHZfKNCtl9NR.pdf"
        }
      ]
    },
    {
      "affiliation": "University of East London",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        },
        {
          "pageNumber": 302,
          "articleName": "Poster: MOBS: Multi-operator Observation-Based Slicing Using Lexical Approximation of Program Dependence",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W2YoXsdAZlNqftH1b5R6v/718CLuHUzfFsJGQ8O2PwNX.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Edinburgh",
      "articleRefs": [
        {
          "pageNumber": 442,
          "articleName": "Poster: Reordering Tests for Faster Test Suite Execution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7oVX1R77LaoVJNTHrsYtBM/3tK6Om3mgGpegy1wHzDDa6.pdf"
        },
        {
          "pageNumber": 521,
          "articleName": "Compiler-Assisted Test Acceleration Using GPUs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4JzQjbNq4YEiNUbSnl9yg1/1QTjJ6wJGAyVTQDVxzM2Fu.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Electronic Science and Technology of China",
      "articleRefs": [
        {
          "pageNumber": 81,
          "articleName": "Towards Saving Money in Using Smart Contracts",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2pF65IzXsc9ozhlJrMOW1G/4pJmmZgXAWr0XBprfEIc8i.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Evansville",
      "articleRefs": [
        {
          "pageNumber": 511,
          "articleName": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5zZif4Y9gORqhqO7eKhhoZ/2NGpYIgnByWOIFiwUyBUr0.pdf"
        },
        {
          "pageNumber": 524,
          "articleName": "Adding Sparkle to Social Coding: An Empirical Study of Repository Badges in the npm Ecosystem",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1ZsiNGW1FlIUiebl2YFpnq/4si1YHUkd9yFqd1PBG1WLV.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Genoa",
      "articleRefs": [
        {
          "pageNumber": 47,
          "articleName": "Contracting Agile Developments for Mission Critical Systems in the Public Sector",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6l5Z5VA9Xn5VFenXOo0ktm/kUWbaEermBVJcVqxX61u4.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Goettingen",
      "articleRefs": [
        {
          "pageNumber": 1063,
          "articleName": "[Journal First] A Comparative Study to Benchmark Cross-Project Defect Prediction Approaches",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4wjQzs7ahFsVXOSxRYBKNq/40Ftiu3aqu6aAzbzpsyyD4.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Gothenburg",
      "articleRefs": [
        {
          "pageNumber": 1,
          "articleName": "Generative Secure Design, Defined",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/28Ti47g1XoQkNrxFNkwOEO/6D4SveoetTi1fAdD6ku27b.pdf"
        },
        {
          "pageNumber": 454,
          "articleName": "Effective Engineering of Multi-robot Software Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3X5JM95s9XLfHIuYNyxBlw/2whdP4qVU48MOqrNa2j6WK.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Göttingen",
      "articleRefs": [
        {
          "pageNumber": 1063,
          "articleName": "[Journal First] A Comparative Study to Benchmark Cross-Project Defect Prediction Approaches",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4wjQzs7ahFsVXOSxRYBKNq/40Ftiu3aqu6aAzbzpsyyD4.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Haifa",
      "articleRefs": [
        {
          "pageNumber": 396,
          "articleName": "[Journal First] Privacy by Designers: Software Developers' Privacy Mindset",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2hBjOPeEIMxEWCnlAq56ij/7B8QNdyPAWOu4JjZ7WUZyO.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Hamburg",
      "articleRefs": [
        {
          "pageNumber": 308,
          "articleName": "Poster: The Effect of Noise on Requirements Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2GXDRjQku016OranUv5gDv/7MIOHA7WH3C5jO5rtbHEId.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Hawaii",
      "articleRefs": [
        {
          "pageNumber": 77,
          "articleName": "From Craft to Science: The Road Ahead for Empirical Software Engineering Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/7GVihMHlHUqqN3pPyz9sMj/3XqeZ1kULLr4Kvp7fVN1hf.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Hildesheim",
      "articleRefs": [
        {
          "pageNumber": 73,
          "articleName": "KernelHaven – An Experimentation Workbench for Analyzing Software Product Lines",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1u3wyx5jiA23CCfzXCQ5Pi/34GYtfvoAfVYrBIyxSbmf6.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Huddersfield",
      "articleRefs": [
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Iceland",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "A Data Decomposition Method for Stepwise Migration of Complex Legacy Data",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3O1Ktk2tXxpTHy1ufdypxO/4EhNANlLNIYSkF2FDJHDAs.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Illinois at Chicago",
      "articleRefs": [
        {
          "pageNumber": 512,
          "articleName": "Deadlock Detector and Solver (DDS)",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4LhwjjNo4lCDQtbPpFD5FB/7moreI11zxtiZIHNWYU0EH.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Illinois at Urbana–Champaign",
      "articleRefs": [
        {
          "pageNumber": 49,
          "articleName": "Mining Container Image Repositories for Software Configuration and Beyond",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4wlZKfwOLMVMe3mCqFtWP1/6EIw9CKjiQiNIPFziN2DRW.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Illinois at Urbana-Champaign",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "An Extensible, Regular-Expression-Based Tool for Multi-language Mutant Generation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7rQKoQm5i3B5lpgmhWDdJg/5YpuIHv08dMjEa5GXDAw6Z.pdf"
        },
        {
          "pageNumber": 117,
          "articleName": "A Regression Proof Selection Tool For Coq",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4d3wTvZAzM1UeluRGK5ggk/73ZV4s78VDohful3g6T0eF.pdf"
        },
        {
          "pageNumber": 323,
          "articleName": "Poster: Benchmarking Microservice Systems for Software Engineering Research",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4MPJujC2aLJ54VMGaEtm76/1tKujoNDTv8GyqnEt9T70J.pdf"
        },
        {
          "pageNumber": 384,
          "articleName": "EnMobile: Entity-Based Characterization and Analysis of Mobile Malware",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Z7koA2jFooE8hHRKnmcU8/6vKkdMpZxRA1eH4TYnCsvA.pdf"
        },
        {
          "pageNumber": 433,
          "articleName": "DeFlaker: Automatically Detecting Flaky Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6rvg1bqL29iI9tbP7jfuLq/1SHQUpKsedIp5vupGNXqzG.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Illinois, Urbana-Champaign",
      "articleRefs": [
        {
          "pageNumber": 445,
          "articleName": "DetReduce: Minimizing Android GUI Test Suites for Regression Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/65qbeRBREN0W4K0rpvhsnv/1pNi1RIt2umVAlWTxVJIml.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Kent",
      "articleRefs": [
        {
          "pageNumber": 1137,
          "articleName": "A Static Verification Framework for Message Passing in Go Using Behavioural Types",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4qni3QmfOZ1L9eUK9sVGyf/OgbS6Mp1QczsiyDiedExx.pdf"
        }
      ]
    },
    {
      "affiliation": "University of L'Aquila",
      "articleRefs": [
        {
          "pageNumber": 462,
          "articleName": "IoT-Based Urban Security Models",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6YXYYzNnctK574hnuer103/3W8gSBvWz8G90IbmMvAMw4.pdf"
        }
      ]
    },
    {
      "affiliation": "University of L’Aquila, Italy",
      "articleRefs": [
        {
          "pageNumber": 535,
          "articleName": "[Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract]",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/ktxzV8GdMxTKUoO3iqAdi/4ppbixCN5xA3Zv0WUGwaIa.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Lille & Inria Lille",
      "articleRefs": [
        {
          "pageNumber": 95,
          "articleName": "How to Design a Program Repair Bot? Insights from the Repairnator Project",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1ExIKnJipGMFZO7lPRAngF/2DiGXRSudrFpQa60hIp2VD.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Lisbon / INESC-ID",
      "articleRefs": [
        {
          "pageNumber": 400,
          "articleName": "Poster: Measuring the Energy Footprint of Mobile Testing Frameworks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4HNfKbEgki6GpTrNlMKiXX/4Z92r470jWnT8EFS5QPFcT.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Luxembourg",
      "articleRefs": [
        {
          "pageNumber": 276,
          "articleName": "Poster: On Vulnerability Evolution in Android Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nULBBNKVN3vRo4TxBqzfB/2apYrCqhmwvonAhfSbGWJv.pdf"
        },
        {
          "pageNumber": 456,
          "articleName": "Time to Clean Your Test Objectives",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5fSwF2i2gIe8huhUW5PEhe/1qTcnrpG7iNOzFNhTEc1j7.pdf"
        },
        {
          "pageNumber": 537,
          "articleName": "Are Mutation Scores Correlated with Real Fault Detection? A Large Scale Empirical Study on the Relationship Between Mutants and Real Faults",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/53KVBZlCxSM8SKMrWZTReW/5SVStngTUruEo7SDPWMIhR.pdf"
        },
        {
          "pageNumber": 884,
          "articleName": "[Journal First] Understanding the Factors for Fast Answers in Technical Q&A Websites: An Empirical Study of Four Stack Exchange Websites",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5gXwmxc37m3Zs7S7KAHn9L/15wH8DdvqszwuqgTZmAuHG.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Magdeburg",
      "articleRefs": [
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Magdeburg & Harz University",
      "articleRefs": [
        {
          "pageNumber": 300,
          "articleName": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Magdeburg; Harz University of Applied Sciences",
      "articleRefs": [
        {
          "pageNumber": 898,
          "articleName": "Propagating Configuration Decisions with Modal Implication Graphs",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5jquLy4SWVdsXMIyjAqIUi/77t2JqKBm0u3r6X88jBaVO.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Magdeburg & METOP GmbH",
      "articleRefs": [
        {
          "pageNumber": 300,
          "articleName": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Malaga",
      "articleRefs": [
        {
          "pageNumber": 59,
          "articleName": "[Journal First] EARMO: An Energy-Aware Refactoring Approach for Mobile Apps",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ws9assX7YGQVY1Iv9g1M/3mbHfe64JMBu7AeUWMspxF.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Manitoba",
      "articleRefs": [
        {
          "pageNumber": 155,
          "articleName": "Poster: Challenge-Based Learning: A Brazilian Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2l16giaw0MUbxQDUNSTBMV/7CI3uC4gCOKGJlcFqMtVdb.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Massachusetts",
      "articleRefs": [
        {
          "pageNumber": 25,
          "articleName": "[Journal First] Do Automated Program Repair Techniques Repair Hard and Important Bugs?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TcOrwOTri9qN5sl2VPDmg/1UlHTll3MjB9vsQoBoeZXG.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Massachusetts Amherst",
      "articleRefs": [
        {
          "pageNumber": 262,
          "articleName": "Poster: Making Well-Informed Software Design Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2hjOTnt4IhzP5kLZgw9GKS/4G3hXm7aB71RGA86WZqsVh.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Milano-Bicocca",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf"
        },
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        },
        {
          "pageNumber": 280,
          "articleName": "Augusto: Exploiting Popular Functionalities for the Generation of Semantic GUI Tests with Oracles",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4Bj4eXTd2JJsTSOvwfGyU3/3tjKiQP53XxdoUXP3NwW84.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Milano-Bicocca and Università della Svizzera italiana (USI)",
      "articleRefs": [
        {
          "pageNumber": 21,
          "articleName": "SUSHI: A Test Generator for Programs with Complex Structured Inputs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/DnECL9I4oZiYKgvfAsZNu/1vUr0axCr3zGcQKveYwcfj.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Molise",
      "articleRefs": [
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Namur",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "SQLInspect: A Static Analyzer to Inspect Database Usage in Java Applications",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3bn80m7mgpwTXF5v44mUTQ/1JsowseYkCwbOQpokqj3Ip.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Nebraska, Lincoln",
      "articleRefs": [
        {
          "pageNumber": 846,
          "articleName": "A Temporal Permission Analysis and Enforcement Framework for Android",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4SmJjWQotTjkWwF3XlfppV/5TCLc3w1z6VBbegrGxkUbC.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Nebraska–Lincoln",
      "articleRefs": [
        {
          "pageNumber": 468,
          "articleName": "Prioritizing Browser Environments for Web Application Test Execution",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1EX24cXorp3idnq1F0su6Q/7Mxb1ZK2acB4XRbw7iHpAC.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Nebraska - Lincoln",
      "articleRefs": [
        {
          "pageNumber": 688,
          "articleName": "Redefining Prioritization: Continuous Prioritization for Continuous Integration",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3IKbJCjT6A0XNalPeqtwYx/48mKfZ4yhnkLlYNigdnCns.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Nebraska-Lincoln",
      "articleRefs": [
        {
          "pageNumber": 173,
          "articleName": "Poster: Toward the Development of Richer Properties for Recommender Systems",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/65d36y1ximdoYo8LpVBti1/2sFLx6z7FWcIg5eKrdfbm4.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Newcastle",
      "articleRefs": [
        {
          "pageNumber": 195,
          "articleName": "Poster: Live Path Control Flow Integrity",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/66rLvMbNUR2ntPLR7czmnx/5iReip9NsLrMgb7VJztdM8.pdf"
        }
      ]
    },
    {
      "affiliation": "University of New South Wales",
      "articleRefs": [
        {
          "pageNumber": 195,
          "articleName": "Poster: Live Path Control Flow Integrity",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/66rLvMbNUR2ntPLR7czmnx/5iReip9NsLrMgb7VJztdM8.pdf"
        },
        {
          "pageNumber": 327,
          "articleName": "Spatio-Temporal Context Reduction: A Pointer-Analysis-Based Static Approach for Detecting Use-After-Free Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BH1zWphsTffq4XQps07wg/5yHiAA3ajLarfEkXKmgne7.pdf"
        }
      ]
    },
    {
      "affiliation": "University of North Carolina Charlotte",
      "articleRefs": [
        {
          "pageNumber": 147,
          "articleName": "Poster: Improving Formation of Student Teams: A Clustering Approach",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6OdCnFISWjwpH1KZizzaXP/2kocifGfEnvPAE8UATEbgY.pdf"
        }
      ]
    },
    {
      "affiliation": "University of North Carolina Wilmington",
      "articleRefs": [
        {
          "pageNumber": 40,
          "articleName": "Open-Source Software in Class: Students' Common Mistakes",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/Aqs0gf1RPfzilfgb9ZyI3/1l4siOSDqHYjJEhkm195YS.pdf"
        }
      ]
    },
    {
      "affiliation": "University of North Texas",
      "articleRefs": [
        {
          "pageNumber": 910,
          "articleName": "A Combinatorial Approach for Exposing Off-Nominal Behaviors",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1niPYcBs9KMjWLu6UZNJfB/2u0THsBx1px4D7wndMcz96.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Notre Dame",
      "articleRefs": [
        {
          "pageNumber": 93,
          "articleName": "Dazed: Measuring the Cognitive Load of Solving Technical Interview Problems at the Whiteboard",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/1wOoq9NMD4fhWjPy8iSecP/6Dm4fVVBHdGYIuYg9qb3zl.pdf"
        },
        {
          "pageNumber": 109,
          "articleName": "Dronology: An Incubator for Cyber-Physical Systems Research",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/60Bj5IUfIQNUqonqo6EFmt/79AKWLxdXte7sWSbVlkcwS.pdf"
        },
        {
          "pageNumber": 226,
          "articleName": "Poster: Swarming Remote Piloted Aircraft Systems for Mosquito-Borne Disease Research and Control",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6jO5jPbQCODqSGRusrILtr/6qj2A2RoOEd4Jqd6hegqcw.pdf"
        },
        {
          "pageNumber": 416,
          "articleName": "Poster: Interlocking Safety Cases for Unmanned Autonomous Systems in Urban Environments",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2xeDjP8U3Ea5BKcTqFCFrw/2SE1D2SgIKKnV3A0iqTHWn.pdf"
        },
        {
          "pageNumber": 788,
          "articleName": "[Journal First] A Comparison of Program Comprehension Strategies by Blind and Sighted Programmers",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6L8BvympA8qNy2olAr6lux/L085iQAOXSGrvjP6JWaUM.pdf"
        },
        {
          "pageNumber": 834,
          "articleName": "Traceability in the Wild: Automatically Augmenting Incomplete Trace Links",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7eT53UMu8eVJ8XREhq0doQ/7rdUt8vdC37VtUQ2hXMeIE.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Nottingham Ningbo China",
      "articleRefs": [
        {
          "pageNumber": 246,
          "articleName": "Poster: An Experimental Analysis of Fault Detection Capabilities of Covering Array Constructors",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1LPlzWg0tHBZcuzmWldSvI/1WM1Gk3gKbTdWVYozOBdR6.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Ottawa",
      "articleRefs": [
        {
          "pageNumber": 149,
          "articleName": "Poster: Are Our Students Engaged in Their Studies? Professional Engagement vs. Study Engagement",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5xtA0uJd6thgqgqjjCW6bY/ywTO3ZzLDFUoUS3EoFZcD.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Oulu",
      "articleRefs": [
        {
          "pageNumber": 75,
          "articleName": "Exploration of Technical Debt in Start-ups",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/3QiUHV6YT5w2AGPkfCae94/4a06NhceKGdKDRomd3SYDH.pdf"
        },
        {
          "pageNumber": 460,
          "articleName": "The Relationship between Personality and Value-Based Decision-Making",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4kVeFAH3CN7teUDfgXVWB6/728jptONMstNKZFbgqiYsa.pdf"
        },
        {
          "pageNumber": 705,
          "articleName": "Do Programmers Work at Night or During the Weekend?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3PZI2iH7OZcqmfOhovoPWi/4jMoJeCniCPfvSDteaaNux.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Pará",
      "articleRefs": [
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Passau",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "Identifying Features in Forks",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ej11VIRsxCIPfv3aUezpn/9LorX1fXOTZuS2j9sXzOq.pdf"
        },
        {
          "pageNumber": 300,
          "articleName": "Poster: Knowledge Transfer from Research to Industry: A Survey on Program Comprehension",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7lip7fCOxplnKo1P6SJmX3/67ZN4VjT8AXIyna0bSHfnm.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Perugia",
      "articleRefs": [
        {
          "pageNumber": 85,
          "articleName": "Understanding the Impact of Pair Programming on the Minds of Developers",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4m9LqFHpWGT7WayhVdzfsD/7wIytpx8PzXpUkaQWrnYSU.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Pittsburgh",
      "articleRefs": [
        {
          "pageNumber": 883,
          "articleName": "[Journal First] Integrating Technical Debt Management and Software Quality Management Processes: A Framework and Field Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5VVcsBrL8djdrhDf5ufhWq/5fvSeX2ZAwnPyyIw2IrelG.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Porto",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Poster: A Qualitative Reasoning Approach to Spectrum-Based Fault Localization",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2h6LH9L5MS3wsT4Q4V1wAI/6erzsSt4H2Rd37rbKcp06x.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Porto / INESC-ID",
      "articleRefs": [
        {
          "pageNumber": 400,
          "articleName": "Poster: Measuring the Energy Footprint of Mobile Testing Frameworks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4HNfKbEgki6GpTrNlMKiXX/4Z92r470jWnT8EFS5QPFcT.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Portsmouth",
      "articleRefs": [
        {
          "pageNumber": 163,
          "articleName": "Redesigning an Undergraduate Software Engineering Course for a Large Cohort",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3g39cLGpyUxZGisjnexmtX/Il0Xh2Abc6hhUNSv1d32N.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Rennes 1",
      "articleRefs": [
        {
          "pageNumber": 29,
          "articleName": "Images of Code: Lossy Compression for Native Instructions",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4O33wTClUcK5dLf9D2ytLQ/7vjaqiOp3476mtH6LPlGdm.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Salerno",
      "articleRefs": [
        {
          "pageNumber": 450,
          "articleName": "Effort-Oriented Methods and Tools for Software Development and Maintenance for Mobile Apps",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3mvwFyGcBppykuARDF0iq0/7xWee7ahxHpkzGo5w3QJnO.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Salford",
      "articleRefs": [
        {
          "pageNumber": 123,
          "articleName": "Poster: An Empirical Study of the Product Owner Role in Scrum",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/41qBY7M5cmo45UHOhxM4c3/6u6Z0RsJcjGe8CThsBgekf.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Sannio",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "MDroid+: A Mutation Testing Framework for Android",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7uc1CSTzM0jSYmZFnbt2kb/3Rix1dNnK0POkpj70YwV1h.pdf"
        },
        {
          "pageNumber": 94,
          "articleName": "Sentiment Analysis for Software Engineering: How Far Can We Go?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2O4BmafaNmtSs3N1v1nUpI/3ubYaHA0kXed3rvopObEpR.pdf"
        },
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Saskatchewan",
      "articleRefs": [
        {
          "pageNumber": 348,
          "articleName": "Poster: Improving Bug Localization with Report Quality Dynamics and Query Reformulation",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6516xYi2OFGIWdgvSF1o2T/6iqQP048s885PkY69eoJYq.pdf"
        },
        {
          "pageNumber": 352,
          "articleName": "Poster: Fast, Scalable and User-Guided Clone Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5tlEXpx1a2fBZq5UdWixg5/5nSIZOFNviBk5nb6x9vIle.pdf"
        },
        {
          "pageNumber": 1066,
          "articleName": "CCAligner: A Token Based Large-Gap Clone Detector",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nE35nG7ocrp4CRl34yq3L/6OCIeXs66z0Os8X3bVIjTD.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Science and Technology of China",
      "articleRefs": [
        {
          "pageNumber": 1066,
          "articleName": "CCAligner: A Token Based Large-Gap Clone Detector",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2nE35nG7ocrp4CRl34yq3L/6OCIeXs66z0Os8X3bVIjTD.pdf"
        },
        {
          "pageNumber": 1231,
          "articleName": "Multi-objective Integer Programming Approaches for Solving Optimal Feature Selection Problem: A New Perspective on Multi-objective Optimization Problems in SBSE",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1TtVOsFS1qq7UEalN0m3JG/3XBHStq8A8ko8AbWNPERaX.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Seville",
      "articleRefs": [
        {
          "pageNumber": 538,
          "articleName": "Metamorphic Testing 20 Years Later: A Hands-on Introduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2t0NMGURSnuIg1cFBefkVh/1SMaE5CZb1A4BX4uKBxyBR.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Sheffield",
      "articleRefs": [
        {
          "pageNumber": 140,
          "articleName": "Automated Repair of Mobile Friendly Problems in Web Pages",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6AsOqvoJNpU0u12eBMc4m9/23Ce40gydrYlLzkd7LB4it.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Siegen",
      "articleRefs": [
        {
          "pageNumber": 105,
          "articleName": "ReVision: A Tool for History-Based Model Repair Recommendations",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3OBcOwPcuVek9zxGKch3pF/2buxI8VlbB6qYkDaPC7Ly2.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Skövde",
      "articleRefs": [
        {
          "pageNumber": 201,
          "articleName": "An Investigation of Work Practices Used by Companies Making Contributions to Established OSS Projects",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/4MNzD9vico1NCWx3hdOv7Y/1JJRUqEh9hm7e53VLSkG0u.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Southampton",
      "articleRefs": [
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        },
        {
          "pageNumber": 496,
          "articleName": "[Journal First] The Good, the Bad and the Ugly: A Study of Security Decisions in a Cyber-Physical Systems Game",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2RlMsntEonvQdMGjzAQ1EU/7CFFgcVqBNJidtykn48SxC.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Southern California",
      "articleRefs": [
        {
          "pageNumber": 53,
          "articleName": "EVA: A Tool for Visualizing Software Architectural Evolution",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/XqdAJt5foJjAS6rm5WZXo/5DWH80u2EkVBTZfxOPvVG3.pdf"
        },
        {
          "pageNumber": 140,
          "articleName": "Automated Repair of Mobile Friendly Problems in Web Pages",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6AsOqvoJNpU0u12eBMc4m9/23Ce40gydrYlLzkd7LB4it.pdf"
        },
        {
          "pageNumber": 176,
          "articleName": "Leveraging Program Analysis to Reduce User-Perceived Latency in Mobile Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6XtxxPyOjmBnzbOjfZogqQ/5iHlEbl6OqBrzktFcC7my4.pdf"
        },
        {
          "pageNumber": 262,
          "articleName": "Poster: Making Well-Informed Software Design Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2hjOTnt4IhzP5kLZgw9GKS/4G3hXm7aB71RGA86WZqsVh.pdf"
        },
        {
          "pageNumber": 278,
          "articleName": "Poster: UMLx: A UML Diagram Analytic Tool for Software Management Decisions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4J6eUemJdAkVFMc1trnmXS/01fxxunGDjXR3fUdQxcuQB.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Strathclyde",
      "articleRefs": [
        {
          "pageNumber": 245,
          "articleName": "Inheritance Usage Patterns in Open-Source Systems",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7Jy5sWOqNS24NkSHFaTSEU/4OwDDeOZbvShYQOhNvgfpH.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Stuttgart",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "The Palladio-Bench for Modeling and Simulating Software Architectures",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4pOMagyFDCbPt8Wj5OPCOm/2LDlKuPd6OkC5h3vkjcpT3.pdf"
        },
        {
          "pageNumber": 242,
          "articleName": "Poster: Communication in Open-Source Projects–End of the E-mail Era?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1j4w2owFLsJWGemRCe3RPJ/4ohDY2rD3K4zRwV3ou34JL.pdf"
        },
        {
          "pageNumber": 266,
          "articleName": "On Groupthink in Safety Analysis: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/7xH12ng5nhE1pzBYmO3hAS/3SP75ETZJqdrFybInn4XMI.pdf"
        },
        {
          "pageNumber": 286,
          "articleName": "Poster: Combining STPA and BDD for Safety Analysis and Verification in Agile Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1XIsPKkwVZJO7pFEOdJQ1f/7HWY5r2C5Dq79jXhcZUpKM.pdf"
        },
        {
          "pageNumber": 390,
          "articleName": "Poster: Identification of Methods with Low Fault Risk",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7JGgODCZWzCpd0zz1oZSYU/2SjNf69oXbXjcLDFxghEKS.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Technology Sydney",
      "articleRefs": [
        {
          "pageNumber": 195,
          "articleName": "Poster: Live Path Control Flow Integrity",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/66rLvMbNUR2ntPLR7czmnx/5iReip9NsLrMgb7VJztdM8.pdf"
        },
        {
          "pageNumber": 327,
          "articleName": "Spatio-Temporal Context Reduction: A Pointer-Analysis-Based Static Approach for Detecting Use-After-Free Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BH1zWphsTffq4XQps07wg/5yHiAA3ajLarfEkXKmgne7.pdf"
        },
        {
          "pageNumber": 598,
          "articleName": "Launch-Mode-Aware Context-Sensitive Activity Transition Analysis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7bwDE4dip5GdlJ7qdGkqCb/3FhNZoNCmobGEDVZfHkbdb.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Tennessee",
      "articleRefs": [
        {
          "pageNumber": 458,
          "articleName": "Constructing Supply Chains in Open Source Software",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/237l8BpJ5Mk8si9rFnzmfM/33F0J8UY3SH7YZCjfED42Y.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Texas at Arlington",
      "articleRefs": [
        {
          "pageNumber": 208,
          "articleName": "Poster: Testing Web-Based Applications with the Voice Controlled Accessibility and Testing Tool (VCAT)",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1BWbKsMWVwdQ2PAjZoUJdu/2luGF9KgPFXAdbicSaC4sa.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Texas at Austin",
      "articleRefs": [
        {
          "pageNumber": 29,
          "articleName": "MuAlloy: A Mutation Testing Framework for Alloy",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/59E9M3V6eFFIvIOWOXuyIm/6ju1rp9I2F1kBYPo3sV6sE.pdf"
        },
        {
          "pageNumber": 233,
          "articleName": "Towards Refactoring-Aware Regression Test Selection",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6BrWrDMhElZLM98cH2EedZ/6wu4To3mrpKod0nsChTY6L.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Texas at Dallas",
      "articleRefs": [
        {
          "pageNumber": 632,
          "articleName": "Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/48ExcGs1HJOYR9v5uI1O10/60OhrFSwj0ZhOF3v31jOhg.pdf"
        },
        {
          "pageNumber": 1064,
          "articleName": "[Journal First] MSeer – An Advanced Technique for Locating Multiple Bugs in Parallel",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2bXorueAudCxlEMsJerqfd/Og0D36M9R4LoKGCDZbP4J.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Texas at San Antonio",
      "articleRefs": [
        {
          "pageNumber": 37,
          "articleName": "GUILeak: Tracing Privacy Policy Claims on User Input Data for Android Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3hJDuF0KuiMkS6PU4F0qpR/1CXV8G2UbBiYsADqG87S9M.pdf"
        },
        {
          "pageNumber": 212,
          "articleName": "Poster: Protecting Remote Controlling Apps of Smart-Home-Oriented IOT Devices",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7wSpD2mtPyz82leCYulmFK/9ndFVMlu3Sf5saqySGQN5.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Toronto",
      "articleRefs": [
        {
          "pageNumber": 31,
          "articleName": "Dimensions of Experientialism for Software Engineering Education",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/605U6RSfff0jOaGLn2b2pi/6Exq3LcKAqn1jIVxLN55aJ.pdf"
        },
        {
          "pageNumber": 57,
          "articleName": "CSlicerCloud: A Web-Based Semantic History Slicing Framework",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7Yn83TiytMgtUpghw9e6M/3Htwf6zDJNCLarJZ9SUyf7.pdf"
        },
        {
          "pageNumber": 153,
          "articleName": "Everything is INTERRELATED: Teaching Software Engineering for Sustainability",
          "articleLocation": "pdfs/ICSE-SEET2018-3DOy8WYatVYRvbJs8hEwAf/3xeaxde1QzP6dqJWzaJ1BP/1WwsbjNw7vqaZE7P8t74Aq.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Trento",
      "articleRefs": [
        {
          "pageNumber": 33,
          "articleName": "Agile Development for Vulnerable Populations: Lessons Learned and Recommendations",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/4vVEkUWJgiIATBNw59KzXa/1wabQ7wZRXCzAhEzzMMyi5.pdf"
        },
        {
          "pageNumber": 395,
          "articleName": "[Journal First] Model Comprehension for Security Risk Assessment: An Empirical Comparison of Tabular vs. Graphical Representations",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/47tt5XICJFWUh4KERik0qi/6lqxomjlHkWhyxF83t2SIs.pdf"
        },
        {
          "pageNumber": 702,
          "articleName": "[Journal First] Older Adults and Hackathons: A Qualitative Study",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/Jr01VyC8w3Fp90X1aw0yI/5hj29JmiR6VMxocZdvp9Id.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Twente",
      "articleRefs": [
        {
          "pageNumber": 222,
          "articleName": "Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FOzcRg0BG6NRLGft0111q/ZDCSeD2qsGxWw2YH3ZSLP.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Victoria",
      "articleRefs": [
        {
          "pageNumber": 268,
          "articleName": "To Distribute or Not to Distribute? Why Licensing Bugs Matter",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4q62ckpQRUzPiaoxWog0ve/1CeWPi6U14CDHkyPPCA1ci.pdf"
        },
        {
          "pageNumber": 499,
          "articleName": "How Modern News Aggregators Help Development Communities Shape and Share Knowledge",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2aQb3cAwfPxUhJUXlqb59P/3AzdtXUeQZUoHmzVMYPR1a.pdf"
        },
        {
          "pageNumber": 523,
          "articleName": "\"Was My Contribution Fairly Reviewed?\" A Framework to Study the Perception of Fairness in Modern Code Reviews",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/6IOpL6lE4XuxcuqjWXUDrX/5KFNhlQUaZkaHVwfq8J0Jg.pdf"
        },
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        },
        {
          "pageNumber": 701,
          "articleName": "[Journal First] What Makes a Great Manager of Software Engineers?",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1jmPFyVOKks4ocUDzhdmai/4Bu3N9yHcJbOsrVjuMhASv.pdf"
        },
        {
          "pageNumber": 823,
          "articleName": "The Evolution of Requirements Practices in Software Startups",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4TirU2HdYue4aFODbNBLe/2Rk78gKZSh7ug0XqRrWySA.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Virginia",
      "articleRefs": [
        {
          "pageNumber": 303,
          "articleName": "DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1l8C5zVwRhRYyqHFTOoOUf/7FmCxsCu5eXKr4EvBf6BPz.pdf"
        },
        {
          "pageNumber": 319,
          "articleName": "Poster: A Recommender System for Developer Onboarding",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6v6lwqxrCTDmoe8tmGqzBa/27FhEqUbQa1fXoWqFqHZHl.pdf"
        },
        {
          "pageNumber": 335,
          "articleName": "Poster: Which Similarity Metric to Use for Software Documents?: A Study on Information Retrieval Based Software Engineering Tasks",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/19HqZ3UFdpX1zhMVPO1vf9/2fhtsvR6I1thghxrAC6nB0.pdf"
        },
        {
          "pageNumber": 354,
          "articleName": "Poster: Searching for High-Performing Software Configurations with Metaheuristic Algorithms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5mMXju4wwLk0g8GAptV8Au/7lw0QtTNg1xCcFEjGunpFy.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Washington",
      "articleRefs": [
        {
          "pageNumber": 800,
          "articleName": "How not to Structure Your Database-Backed Web Applications: A Study of Performance Bugs in the Wild",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1heAUnsML3vNOxAklvY2o5/5r7WaaxVGeRjbQD2Yx8PMD.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Washington, Seattle",
      "articleRefs": [
        {
          "pageNumber": 958,
          "articleName": "Generalized Data Structure Synthesis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/42oFsoJ7RHGAgoPbI5dzk5/2V1Gp0VfIP3nDtDc89Gm45.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Waterloo",
      "articleRefs": [
        {
          "pageNumber": 117,
          "articleName": "Roles and Impacts of Hands-on Software Architects in Five Industrial Case Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Ob2qQmSGwePYzTfvMfjnz/2NtLyFmemA3xMciZavmHsW.pdf"
        },
        {
          "pageNumber": 124,
          "articleName": "Studying Pull Request Merges: A Case Study of Shopify's Active Merchant",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/1NU0bpZXsmbLocrKWbtkby/2YWEs9dlcKBJiVrCycQCxI.pdf"
        },
        {
          "pageNumber": 133,
          "articleName": "Poster: Understanding the Role of Reporting in Work Item Tracking Systems for Software Development: An Industrial Case Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4dFWSiJ5sDfN5AlUvJSWKd/48rrLl1MFRtEZpOgC0kn6e.pdf"
        },
        {
          "pageNumber": 282,
          "articleName": "Poster: Recommending Exception Handling Patterns with ExAssist",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/16FlGsREidqMynDpFiYKFV/4Wi4EHT113dBDrGRhyGTgj.pdf"
        },
        {
          "pageNumber": 284,
          "articleName": "Poster: ALPACA-Advanced Linguistic Pattern and Concept Analysis Framework for Software Engineering Corpora",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/3aiLuwdP6akPBEGDrggWiZ/6ZElMdHQPHtE9H09hFTb2O.pdf"
        },
        {
          "pageNumber": 315,
          "articleName": "Poster: Designing Bug Detection Rules for Fewer False Alarms",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1UPJvjP8ppzant4gtBI7mS/6oFZLatXk1lynNL1b8OV0u.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Wollongong",
      "articleRefs": [
        {
          "pageNumber": 53,
          "articleName": "Explainable Software Analytics",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/18qTr6yU8gmdGlxPJwuabL/5riZmj2mdJZSyRCz4NRyUd.pdf"
        },
        {
          "pageNumber": 244,
          "articleName": "Poster: Predicting Components for Issue Reports Using Deep Learning with Information Retrieval",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2ADZq6g5I1eGULqO75ycZf/647J63rx8sUzey01F0TAFE.pdf"
        },
        {
          "pageNumber": 538,
          "articleName": "Metamorphic Testing 20 Years Later: A Hands-on Introduction",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2t0NMGURSnuIg1cFBefkVh/1SMaE5CZb1A4BX4uKBxyBR.pdf"
        }
      ]
    },
    {
      "affiliation": "University of York",
      "articleRefs": [
        {
          "pageNumber": 61,
          "articleName": "Efficient Parametric Model Checking Using Domain-Specific Modelling Patterns",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/3VKXquAtw3Bsoa1GQ2m1Cn/IwXQwRyRAgcZEgA31O87n.pdf"
        },
        {
          "pageNumber": 446,
          "articleName": "Poster: BugZoo – A Platform for Studying Software Bugs",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/45zwa1bRIOh1A6fI6pqtjD/6r2CoIFj6WjZXHtWAgT3hP.pdf"
        },
        {
          "pageNumber": 495,
          "articleName": "[Journal First] ENTRUST: Engineering Trustworthy Self-Adaptive Software with Dynamic Assurance Cases",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2NhlCsVXgG3WHvkdQjXlbw/5IblSZWdDPXuWMstxyHruV.pdf"
        }
      ]
    },
    {
      "affiliation": "University of Zurich",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "User Feedback in the App Store: A Cross-Cultural Study",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2M7QYvaBaTqcdDgVoeC5v5/18zYJ8ePNmdmxosvrdXeMs.pdf"
        },
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        },
        {
          "pageNumber": 49,
          "articleName": "GuideGen - A Tool for Keeping Requirements and Acceptance Tests Aligned",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/tiBFuIRCFc0O11vg75g6O/5E7xunX7Xo0JsCChdM9dA0.pdf"
        },
        {
          "pageNumber": 181,
          "articleName": "Modern Code Review: A Case Study at Google",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/67Mzz0IcJcSpV523lVn2DJ/7D8Xqw86cn20MzfJdjxQOM.pdf"
        },
        {
          "pageNumber": 240,
          "articleName": "Poster: How Do Community Smells Influence Code Smells?",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/nQSsAworm5MCZ83ZX5zeR/y37rthnDMAKaQP1W83Dy6.pdf"
        },
        {
          "pageNumber": 317,
          "articleName": "Poster: Automated User Reviews Analyser",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/2XVu8NOmDn7F85PC7nf6wG/5FUBTaBu8fe7Ng64ZOwFED.pdf"
        },
        {
          "pageNumber": 480,
          "articleName": "Fostering Software Developers' Productivity at Work Through Self-Monitoring and Goal-Setting",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/sko7a5nTLsy1Aru1aeJYf/3QR0YadN1XxbNVWdQ8wIwU.pdf"
        },
        {
          "pageNumber": 482,
          "articleName": "[Journal First] On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Xzam543RS4naGeg5qQtnF/31ImftogPL2awD4g42H8Cl.pdf"
        },
        {
          "pageNumber": 561,
          "articleName": "Understanding Developers' Needs on Deprecation as a Language Feature",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2P1QIz0vZHnpdIEQ9etDfn/70WC3YCsckq6uPXtWKXnDs.pdf"
        },
        {
          "pageNumber": 677,
          "articleName": "When Testing Meets Code Review: Why and How Developers Review Tests",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/73E15BFaq73PThiJAJXDbX/7EYtxbTv4k8CSZ3A2oOBI7.pdf"
        },
        {
          "pageNumber": 740,
          "articleName": "[Journal First] The Scent of a Smell: An Extensive Comparison Between Textual and Structural Smells",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4iVQnyrSGf9GQjrFhEXO96/4HApluVSoJRHxBnR47406e.pdf"
        },
        {
          "pageNumber": 993,
          "articleName": "Context-Aware Conversational Developer Assistants",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1XKrnlNgYAXbi9HEtIyOPn/7I9QtgsXIQ77QNhvWlsTtx.pdf"
        }
      ]
    },
    {
      "affiliation": "Univ Rennes",
      "articleRefs": [
        {
          "pageNumber": 432,
          "articleName": "Poster: Multimorphic Testing",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/uzXACjp9SwFasi2pVULVp/4Acd9HUX23SsFtwgf1MOHh.pdf"
        }
      ]
    },
    {
      "affiliation": "UNSW Sydney",
      "articleRefs": [
        {
          "pageNumber": 598,
          "articleName": "Launch-Mode-Aware Context-Sensitive Activity Transition Analysis",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/7bwDE4dip5GdlJ7qdGkqCb/3FhNZoNCmobGEDVZfHkbdb.pdf"
        }
      ]
    },
    {
      "affiliation": "UOC",
      "articleRefs": [
        {
          "pageNumber": 3,
          "articleName": "The Role of Foundations in Open Source Projects",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/2Fs3L1M4Mm9GxjWCBfpSEU/5dCgP0GVMp8vJhDp3AxQXq.pdf"
        }
      ]
    },
    {
      "affiliation": "USI Università della Svizzera italiana",
      "articleRefs": [
        {
          "pageNumber": 280,
          "articleName": "Augusto: Exploiting Popular Functionalities for the Generation of Semantic GUI Tests with Oracles",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4Bj4eXTd2JJsTSOvwfGyU3/3tjKiQP53XxdoUXP3NwW84.pdf"
        }
      ]
    },
    {
      "affiliation": "Utah State University",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Deep Learning UI Design Patterns of Mobile Apps",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/69IMKxOq8MkgR0RQk5pkhq/6mwRgrVk2jUBuGBSoq81Rt.pdf"
        }
      ]
    },
    {
      "affiliation": "Utrecht University",
      "articleRefs": [
        {
          "pageNumber": 228,
          "articleName": "Poster: Ethics-Aware Software Engineering",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6W8FQPiYViBDN0kL9GhuFL/42ectUCk4oiAxSpzYKdsHh.pdf"
        }
      ]
    },
    {
      "affiliation": "Vanderbilt University",
      "articleRefs": [
        {
          "pageNumber": 29,
          "articleName": "Images of Code: Lossy Compression for Native Instructions",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/4O33wTClUcK5dLf9D2ytLQ/7vjaqiOp3476mtH6LPlGdm.pdf"
        }
      ]
    },
    {
      "affiliation": "Victoria University of Wellington",
      "articleRefs": [
        {
          "pageNumber": 91,
          "articleName": "Digital Ecclesia: Towards an Online Direct-Democracy Framework",
          "articleLocation": "pdfs/ICSE-SEIS2018-3jDeh49FpBN6zYaA5fmOiK/6M31FF5UQim1FkKMBVcvNp/1ziXArtAC8fJVE4o6UnCxx.pdf"
        },
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    },
    {
      "affiliation": "Virginia Commonwealth University",
      "articleRefs": [
        {
          "pageNumber": 5,
          "articleName": "StackInTheFlow: Behavior-Driven Recommendation System for Stack Overflow Posts",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pf4TOr8bllxPRuTqJOtRM/4f96Fkhh4JVitpN6R8aBMb.pdf"
        },
        {
          "pageNumber": 932,
          "articleName": "[Journal First] Predicting Future Developer Behavior in the IDE Using Topic Models",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1ixHyk1GCUIy2UBBkHPPsj/6TdMVZLlcwQMV30NQsSrYG.pdf"
        }
      ]
    },
    {
      "affiliation": "Virginia Tech",
      "articleRefs": [
        {
          "pageNumber": 372,
          "articleName": "Secure Coding Practices in Java: Challenges and Vulnerabilities",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/3o2zXw08GLZHHzo4KXdBon/1sIzAZUbSd0wvJ0Yz0jFNw.pdf"
        },
        {
          "pageNumber": 404,
          "articleName": "Poster: Understanding and Leveraging Developer Inexpertise",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6Wyfsjr8AM6PGJt2Nw4jsw/1eB4hHPOy8K6gcGnmDJe9T.pdf"
        },
        {
          "pageNumber": 885,
          "articleName": "[Journal First] Towards Reusing Hints from Past Fixes: An Exploratory Study on Thousands of Real Samples",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/40hy9tlXTmRgfderpGDdg6/3ne6Pkg9Hj4fJLRwiT7QKS.pdf"
        }
      ]
    },
    {
      "affiliation": "Volov Group Trucks Technology",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/xLEjBh7hPb5V1LsqUWnRl/4mUPQnhdOLBljWKOk5ULOT.pdf"
        }
      ]
    },
    {
      "affiliation": "Volvo Cars",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        }
      ]
    },
    {
      "affiliation": "Volvo Group Trucks Technology",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/xLEjBh7hPb5V1LsqUWnRl/4mUPQnhdOLBljWKOk5ULOT.pdf"
        }
      ]
    },
    {
      "affiliation": "Volvo Group Truck Technology",
      "articleRefs": [
        {
          "pageNumber": 65,
          "articleName": "Rethink EE Architecture in Automotive to Facilitate Automation, Connectivity, and Electro Mobility",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/xLEjBh7hPb5V1LsqUWnRl/4mUPQnhdOLBljWKOk5ULOT.pdf"
        }
      ]
    },
    {
      "affiliation": "Vrije Universiteit Amsterdam",
      "articleRefs": [
        {
          "pageNumber": 23,
          "articleName": "Transparency and Contracts: Continuous Integration and Delivery in the Automotive Ecosystem",
          "articleLocation": "pdfs/ICSE-SEIP2018-4iUUvXlggEt04hG08XUXS5/5VGpf0bgM5CoC0svumht9x/4CScaoJeNvmnYehhyNM0SO.pdf"
        },
        {
          "pageNumber": 222,
          "articleName": "Poster: Discovering Requirements of Behaviour Change Software Systems from Negative User Experience",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/7FOzcRg0BG6NRLGft0111q/ZDCSeD2qsGxWw2YH3ZSLP.pdf"
        },
        {
          "pageNumber": 535,
          "articleName": "[Journal First] Collaborative Model-Driven Software Engineering: A Classification Framework and a Research Map [Extended Abstract]",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/ktxzV8GdMxTKUoO3iqAdi/4ppbixCN5xA3Zv0WUGwaIa.pdf"
        }
      ]
    },
    {
      "affiliation": "Waseda University",
      "articleRefs": [
        {
          "pageNumber": 89,
          "articleName": "Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/2ClRapokVFV9nREZDM27h8/6Qr2cPIoHlxxAAbjL8pV5v.pdf"
        }
      ]
    },
    {
      "affiliation": "Washington State University",
      "articleRefs": [
        {
          "pageNumber": 350,
          "articleName": "Poster: Towards Sustainable Android Malware Detection",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/1CeL0JHsoDlL5AfeYBFXYN/1bjvVxMwUcxmyMegViCmAq.pdf"
        }
      ]
    },
    {
      "affiliation": "Westerdals Oslo ACT and University of Luxembourg",
      "articleRefs": [
        {
          "pageNumber": 1065,
          "articleName": "[Journal First] Journal First Presentation of an Experience Report on Applying Software Testing Academic Results in Industry: We Need Usable Automated Test Generation",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/1FIQLH1yd9XWgg2hiGZiPf/1ryHdgPhETG0NLG0KYTAeF.pdf"
        }
      ]
    },
    {
      "affiliation": "Western Michigan University",
      "articleRefs": [
        {
          "pageNumber": 13,
          "articleName": "Measure Confidence of Assurance Cases in Safety-Critical Domains",
          "articleLocation": "pdfs/ICSE-NIER2018-1QOqnJFjCCGeAkKYUXcBOq/XA9EczApgqNyoJ2bbaX4z/6djXRNsWeWZZnxkigTyDsS.pdf"
        },
        {
          "pageNumber": 71,
          "articleName": "Automated Localization for Unreproducible Builds",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5Uo99XzE0k6LQDG79lezQk/4lDBvklakctIQ6sXpUiVcn.pdf"
        },
        {
          "pageNumber": 386,
          "articleName": "Poster: USE: Unified and Split Execution for Exposing Divergences between Versions",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6LPcye0HvDGcTC8pmjMow0/53CrwfyS24ctiDhG2v3XKZ.pdf"
        }
      ]
    },
    {
      "affiliation": "Wichita State University",
      "articleRefs": [
        {
          "pageNumber": 728,
          "articleName": "Self-Hiding Behavior in Android Apps: Detection and Characterization",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/39EtsVbEnvoJFUJzXaNfZd/1AQQQyk7kMtppqX7fIsDeH.pdf"
        }
      ]
    },
    {
      "affiliation": "Wroclaw University of Science and Technology",
      "articleRefs": [
        {
          "pageNumber": 420,
          "articleName": "[Journal First] Effect Sizes and their Variance for AB/BA Crossover Design Studies",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2vbLjCzIIhv5QjDxqXRXg6/4cvS5U8l4xLwOmfEQoV3vI.pdf"
        }
      ]
    },
    {
      "affiliation": "Xi'an Jiaotong University",
      "articleRefs": [
        {
          "pageNumber": 325,
          "articleName": "Poster: Bridging Effort-Aware Prediction and Strong Classification - A Just-in-Time Software Defect Prediction Study",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5W55obxh9gzemjqfGcWAPj/3f132O9xPg1LX5ixGPIYgu.pdf"
        }
      ]
    },
    {
      "affiliation": "Xidian University",
      "articleRefs": [
        {
          "pageNumber": 250,
          "articleName": "Poster: Accelerating Counterexample Detection in Software Model Checking",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/5UUmbqNY2wGzfapYL40Nox/26lJ0QQJIyzqjiZeJ8O16V.pdf"
        },
        {
          "pageNumber": 254,
          "articleName": "Poster: Android Inter-Component Communication Analysis with Intent Revision",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/4RR4p3lwomIvgSeCNoWo5u/7q9qgHlyY8QpN3vYDt5l6C.pdf"
        },
        {
          "pageNumber": 321,
          "articleName": "Poster: Obfuscating Program Control Flow with Intel SGX",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/46LvkSkPnBARdnA4scnxeh/1dPQyq74EXz5tkMycRh9Ve.pdf"
        }
      ]
    },
    {
      "affiliation": "Zhejiang University",
      "articleRefs": [
        {
          "pageNumber": 9,
          "articleName": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/18twSkKM4nZSiq4Z1PnB2P/5eXj8AdFfloU2dchJUeYi9.pdf"
        },
        {
          "pageNumber": 291,
          "articleName": "Towards Optimal Concolic Testing",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/5RrqD9bEgjcdclSy11URjg/2czbn8hdUhh9LxAyqsDHeh.pdf"
        },
        {
          "pageNumber": 584,
          "articleName": "[Journal First] Measuring Program Comprehension: A Large-Scale Field Study with Professionals",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/4bebmn36JJObid8HABuXKD/6IFx6unpmbUEfo26gBfKBU.pdf"
        },
        {
          "pageNumber": 897,
          "articleName": "[Journal First] Inference of Development Activities from Interaction with Uninstrumented Applications",
          "articleLocation": "pdfs/ICSE2018-7hDWfdAOTaSxSTuYmZ7C9S/2gU0WalP8Gn09TYhhB0hOE/63a9zjkewFKjOlW0siHxiO.pdf"
        }
      ]
    },
    {
      "affiliation": "zühlke Engineering",
      "articleRefs": [
        {
          "pageNumber": 41,
          "articleName": "PerformanceHat – Augmenting Source Code with Runtime Performance Traces in the IDE",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6g8frY5nCR9qfOoHrQzJYS/toh6NYfzyEVJegGWr9ff8.pdf"
        }
      ]
    },
    {
      "affiliation": "Zurich University of Applied Sciences",
      "articleRefs": [
        {
          "pageNumber": 333,
          "articleName": "Poster: Sources of Satisfaction in Agile Software Development",
          "articleLocation": "pdfs/ICSE-Companion2018-3XagYpy0eYUcYLM6uzDhOx/6pWdr0ET5ubUcN4UE5LT4z/5lOUqfBFbgIPj0lQWou8g8.pdf"
        }
      ]
    }
  ]
}};